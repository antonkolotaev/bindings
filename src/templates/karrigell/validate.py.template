from HTMLTags import *
from Queue import Empty
from multiprocessing import Process,Queue
from time import time

Include('import.py')

def checkbox(vname,is_checked=True):
   return INPUT(type="checkbox", name=vname, value="1", align="right", checked=is_checked) 


class Ctx:
   def __init__(self):
      self.iterables = ['No iteration']
      self.iterables_corr = ['']
      self.iterables_getter = ['']
      self.iterables_setter = ['']
      
Include(r'premia/scalar.py')
Include(r'premia/vector.py')
Include(r'premia/vector_compact.py')
Include(r'premia/process_iteration.py')   


   
iterate_object = None
iterate_label = '_'

def extlist(lst,size):
    if len(lst) < size:
        lst.extend((size - len(lst)) * [lst[len(lst) - 1]])

def enum(n,e):
    L = SELECT(name = n, onchange="submit();").from_list(e._labels.values())
    L.select(value=e._labels.keys().index(e._value.key()))
    return L
    
def setEnumValueByIdx(e,idx):
    e._value = e._labels.keys()[int(idx)]

def enum_submit_mod(n,names,v):
    L = SELECT(name = n, onchange="submit();").from_list(names)
    L.select(value=names.index(v))
    return L

def enum_submit(n,classes,v):
    names = [x.__name__ for x in classes]
    L = SELECT(name = n, onchange="submit();").from_list(names)
    L.select(value=names.index(v))
    return L

def pricing_options(model_name, family_name):
    return eval('pricings.' + model_name + '.' + model_name + '_' + family_name + '.methods_for_options()').keys()

model_size_mode = False
number_of_companies_mode = False

run_computation = True

if 'a' not in REQUEST:
  _a = 'equity_Black_Scholes_type'

if 'm' not in REQUEST:
  _m = 'BS1D'

if 'f' not in REQUEST:
  _f = 'STD'

if 'o' not in REQUEST:
  _o = 'CallEuro'

if 'meth' not in REQUEST:
  _meth = 'CF_Call'

mod_colors = ['lightgreen','white']
opt_colors = ['#FFFFC0', 'white']
met_colors = ['lightblue','white']
res_colors = ['lightgray', 'white']

def clr(color_table,idx): return color_table[idx%%len(color_table)]

#print assets.asset_models().keys(), "asset_type = ", _asset_type

im = '0'
io = '0'
ip = '0'

changed_iterate = ''

oldit = {'model':0, 'option':0, 'method':0 }

if 'im' in REQUEST: oldit['model'] = int(_im)   
if 'io' in REQUEST: oldit['option'] = int(_io)   
if 'ip' in REQUEST: oldit['method'] = int(_ip)   
            
if 'iterate_model' in REQUEST:
    if _iterate_model <> _im:
        changed_iterate = 'model' 
else:
    _iterate_model = '0'

if 'iterate_option' in REQUEST:
    if _iterate_option <> _io:
        changed_iterate = 'option' 
else:
    _iterate_option = '0'

if 'iterate_method' in REQUEST:
    if _iterate_method <> _ip:
        changed_iterate = 'method' 
else:
    _iterate_method = '0'

computing = 'Compute' in REQUEST

if changed_iterate == 'model':
    _iterate_option = '0'
    _iterate_method = '0' 

if changed_iterate == 'option':
    _iterate_model = '0'
    _iterate_method = '0' 

if changed_iterate == 'method':
    _iterate_option = '0'
    _iterate_model = '0' 

#print changed_iterate

g_table = TABLE(Class="content")

g_err_table = TABLE(Class="content")
g_errors = []

def add_error(s): 
    g_err_table <= TR(TD(s), bgcolor='#C00000')
    g_errors.append(s)

table_model = TABLE(Class="content")
table = table_model

if 'asset_type' in REQUEST:
   new_asset_type = assets.all()[int(_asset_type)].__name__
   if _a <> new_asset_type:
      _a = new_asset_type
      _model = 0
      _family = 0
      _option = 0
      _pricing_method = 0
      run_computation = True
      _iterate_model = _iterate_option = _iterate_method = '0' 

table <= (TR(TD((B('Asset Type:')),align='right') + TD(enum_submit('asset_type', assets.all(), _a))+TD(),bgcolor=mod_colors[0]))

clridx = 0

model_list = eval('assets.' + _a + '.models()')

if 'model' in REQUEST:
   new_model = model_list[int(_model)].ID()
   if _m <> new_model:
      _m = new_model
      _family = 0
      _option = 0
      _pricing_method = 0
      run_computation = True
      _iterate_model = _iterate_option = _iterate_method = '0' 

def clrinc():
   globals()['clridx'] = globals()['clridx'] + 1
   
def row(colors, c_1, c_2, c_3=""):
   return (TR(TD(c_1,align='right') + TD(c_2)+TD(c_3),bgcolor=clr(colors,clridx)))

def rowinc(colors, c_1, c_2, c_3=""):
   clrinc()
   return row(colors, c_1, c_2, c_3)

def printModelType(table, model_type):
   table <= rowinc(mod_colors, B('Model:'), enum_submit('model', model_list, model_type))

Include(r'/premia/mod/'+ _m + '/model.py')

table_option = TABLE(Class="content")
table = table_option

if 'family' in REQUEST:
   new_family = model.families()[int(_family)]
   if new_family <> _f:
      _f = new_family
      _option = 0
      _pricing_method = 0
      run_computation = False
      _iterate_option = _iterate_method = '0' 

def printFamilyType(table, family_type):
   table <= rowinc(opt_colors, B('Family:'), enum_submit_mod('family', model.families(), family_type))

if 'option' in REQUEST:
   new_opt = pricing_options(_m,_f)[int(_option)].__name__
   if new_opt <> _o:
      _o = new_opt
      _pricing_method = 0
      run_computation = False
      _iterate_option = _iterate_method = '0' 

def printOptionType(table, option_type):
   table <= rowinc(opt_colors, B('Option:'), enum_submit('option', pricing_options(_m,_f), option_type))

clridx = 1

Include(r'/premia/opt/' + _f + '/' + _o + '.py')

table_method = TABLE(Class="content")
table = table_method

if 'pricing_method' not in REQUEST:
   _pricing_method = '0'
   
methods = [x for x in eval('pricings.' + _m + '.' + _m + '_' + _f + '.all()') if type(opt) in x.options()]
new_meth = methods[int(_pricing_method)].__name__
if _meth <> new_meth:
   _meth = new_meth
   run_computation = False
   _iterate_method = '0' 

clridx = 1

def printMethodType(table, method_type):
   table <= rowinc(met_colors, B('Pricing method:'), enum_submit('pricing_method', methods, method_type))

Include(r'/premia/mod/' + _m + '/' + _m + '_' + _f + '/' + _meth + '.py')


res = None

def n_elem(lst):
    acc = 0
    for i in lst:
        acc += REQUEST.has_key(i)
    return acc


table_result_i = TABLE(Class="content")

Include(r'premia/run_computation.py')
Include(r'premia/print_table_result.py')
Include(r'premia/print_scalar_result.py')        


#print 'iterate_model = ', _iterate_model
im = str(_iterate_model)
#print 'iterate_option = ', _iterate_option
io = str(_iterate_option)
#print 'iterate_method = ', _iterate_method
ip = str(_iterate_method)

form = FORM(action='/index?a='+ _a +'&m='+ _m +'&f='+ _f +'&o='+ _o +'&meth=' + _meth+'&im=' + im+'&io=' + io+'&ip=' + ip+'&il='+iterate_label,method="post")

if model_size_mode:
    table_method <= table_model_size_mode
    table_method <= BR()+INPUT(Type="submit",value="Continue")
else:
    table_method <= TR(TD() + TD(INPUT(Type="submit",name="Compute",value="Compute")))
    
if len(g_errors) > 0:
    form <= TR(TD(g_err_table))

g_table <= TR(TD(table_model,valign='top') + TD(table_option,valign='top') + TD(table_method,valign='top'))


form <= g_table

if res_t <> None:
    form <= table_result_i 

print form


if res_t <> None:
    Include(r'premia/graph.pih') 
