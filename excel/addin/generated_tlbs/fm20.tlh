// Created by Microsoft (R) C/C++ Compiler Version 15.00.21022.08 (953fa0e5).
//
// C++ source equivalent of Win32 type library C:\\Windows\\System32\\fm20.dll
// compiler-generated file created 10/28/10 at 15:55:36 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace MSForms {

//
// Forward references and typedefs
//

struct __declspec(uuid("0d452ee1-e08f-101a-852e-02608c4d0bb4"))
/* LIBID */ __MSForms;
struct __declspec(uuid("bef6e003-a874-101a-8bba-00aa00300cab"))
/* dispinterface */ Font;
enum fmDropEffect;
enum fmAction;
struct __declspec(uuid("ec72f590-f375-11ce-b9e8-00aa006b1a69"))
/* dual interface */ IDataAutoWrapper;
struct __declspec(uuid("82b02370-b5bc-11cf-810f-00a0c9030074"))
/* dual interface */ IReturnInteger;
struct __declspec(uuid("82b02371-b5bc-11cf-810f-00a0c9030074"))
/* dual interface */ IReturnBoolean;
struct __declspec(uuid("82b02372-b5bc-11cf-810f-00a0c9030074"))
/* dual interface */ IReturnString;
struct __declspec(uuid("8a683c90-ba84-11cf-8110-00a0c9030074"))
/* dual interface */ IReturnSingle;
struct __declspec(uuid("8a683c91-ba84-11cf-8110-00a0c9030074"))
/* dual interface */ IReturnEffect;
struct /* coclass */ ReturnInteger;
struct /* coclass */ ReturnBoolean;
struct /* coclass */ ReturnString;
struct /* coclass */ ReturnSingle;
struct /* coclass */ ReturnEffect;
struct /* coclass */ DataObject;
enum fmMode;
enum fmMousePointer;
enum fmScrollBars;
enum fmScrollAction;
enum fmCycle;
enum fmZOrder;
enum fmBorderStyle;
enum fmTextAlign;
enum fmAlignment;
enum fmBorders;
enum fmBackStyle;
enum fmButtonStyle;
enum fmPicPosition;
enum fmVerticalScrollBarSide;
enum fmLayoutEffect;
enum fmSpecialEffect;
enum fmDragState;
enum fmPictureSizeMode;
enum fmPictureAlignment;
struct __declspec(uuid("04598fc6-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ IControl;
struct __declspec(uuid("04598fc7-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ Controls;
struct __declspec(uuid("29b86a70-f52e-11ce-9bce-00aa00608e01"))
/* dual interface */ IOptionFrame;
struct __declspec(uuid("04598fc8-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ _UserForm;
struct __declspec(uuid("9a4bbf53-4e46-101b-8bbd-00aa003e3b29"))
/* dispinterface */ ControlEvents;
struct /* coclass */ Control;
struct __declspec(uuid("5b9d8fc8-4a71-101b-97a6-00000b65c08b"))
/* dispinterface */ FormEvents;
struct __declspec(uuid("cf3f94a0-f546-11ce-9bce-00aa00608e01"))
/* dispinterface */ OptionFrameEvents;
struct /* coclass */ UserForm;
struct /* coclass */ Frame;
enum fmButtonEffect;
enum fmOrientation;
enum fmSnapPoint;
enum fmPicturePosition;
enum fmDisplayStyle;
enum fmShowListWhen;
enum fmShowDropButtonWhen;
enum fmMultiSelect;
enum fmListStyle;
enum fmEnterFieldBehavior;
enum fmDragBehavior;
enum fmMatchEntry;
enum fmDropButtonStyle;
enum fmStyle;
enum fmTabOrientation;
enum fmTabStyle;
enum fmIMEMode;
struct __declspec(uuid("04598fc1-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ ILabelControl;
struct __declspec(uuid("04598fc4-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ ICommandButton;
struct __declspec(uuid("8bd21d13-ec42-11ce-9e0d-00aa006002f3"))
/* dual interface */ IMdcText;
struct __declspec(uuid("8bd21d23-ec42-11ce-9e0d-00aa006002f3"))
/* dual interface */ IMdcList;
struct __declspec(uuid("8bd21d33-ec42-11ce-9e0d-00aa006002f3"))
/* dual interface */ IMdcCombo;
struct __declspec(uuid("8bd21d43-ec42-11ce-9e0d-00aa006002f3"))
/* dual interface */ IMdcCheckBox;
struct __declspec(uuid("8bd21d53-ec42-11ce-9e0d-00aa006002f3"))
/* dual interface */ IMdcOptionButton;
struct __declspec(uuid("8bd21d63-ec42-11ce-9e0d-00aa006002f3"))
/* dual interface */ IMdcToggleButton;
struct __declspec(uuid("04598fc3-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ IScrollbar;
struct __declspec(uuid("a38bffc3-a5a0-11ce-8107-00aa00611080"))
/* dual interface */ Tab;
struct __declspec(uuid("944acf93-a1e6-11ce-8104-00aa00611080"))
/* dual interface */ Tabs;
struct __declspec(uuid("04598fc2-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ ITabStrip;
struct __declspec(uuid("79176fb3-b7f2-11ce-97ef-00aa006d2776"))
/* dual interface */ ISpinbutton;
struct __declspec(uuid("4c599243-6926-101b-9992-00000b65c6f9"))
/* dual interface */ IImage;
struct __declspec(uuid("5512d111-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLSubmitButton;
struct __declspec(uuid("5512d113-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLImage;
struct __declspec(uuid("5512d115-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLReset;
struct __declspec(uuid("5512d117-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLCheckbox;
struct __declspec(uuid("5512d119-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLOption;
struct __declspec(uuid("5512d11b-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLText;
struct __declspec(uuid("5512d11d-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLHidden;
struct __declspec(uuid("5512d11f-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLPassword;
struct __declspec(uuid("5512d123-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLSelect;
struct __declspec(uuid("5512d125-5cc6-11cf-8d67-00aa00bdce1d"))
/* dual interface */ IWHTMLTextArea;
struct __declspec(uuid("978c9e22-d4b0-11ce-bf2d-00aa003f40d0"))
/* dispinterface */ LabelControlEvents;
struct /* coclass */ Label;
struct __declspec(uuid("7b020ec1-af6c-11ce-9f46-00aa00574a4f"))
/* dispinterface */ CommandButtonEvents;
struct /* coclass */ CommandButton;
struct __declspec(uuid("8bd21d12-ec42-11ce-9e0d-00aa006002f3"))
/* dispinterface */ MdcTextEvents;
struct /* coclass */ TextBox;
struct __declspec(uuid("8bd21d22-ec42-11ce-9e0d-00aa006002f3"))
/* dispinterface */ MdcListEvents;
struct /* coclass */ ListBox;
struct __declspec(uuid("8bd21d32-ec42-11ce-9e0d-00aa006002f3"))
/* dispinterface */ MdcComboEvents;
struct /* coclass */ ComboBox;
struct __declspec(uuid("8bd21d42-ec42-11ce-9e0d-00aa006002f3"))
/* dispinterface */ MdcCheckBoxEvents;
struct __declspec(uuid("8bd21d52-ec42-11ce-9e0d-00aa006002f3"))
/* dispinterface */ MdcOptionButtonEvents;
struct __declspec(uuid("8bd21d62-ec42-11ce-9e0d-00aa006002f3"))
/* dispinterface */ MdcToggleButtonEvents;
struct /* coclass */ CheckBox;
struct /* coclass */ OptionButton;
struct /* coclass */ ToggleButton;
struct /* coclass */ NewFont;
struct __declspec(uuid("7b020ec2-af6c-11ce-9f46-00aa00574a4f"))
/* dispinterface */ ScrollbarEvents;
struct /* coclass */ ScrollBar;
struct __declspec(uuid("7b020ec7-af6c-11ce-9f46-00aa00574a4f"))
/* dispinterface */ TabStripEvents;
struct /* coclass */ TabStrip;
struct __declspec(uuid("79176fb2-b7f2-11ce-97ef-00aa006d2776"))
/* dispinterface */ SpinbuttonEvents;
struct /* coclass */ SpinButton;
struct __declspec(uuid("4c5992a5-6926-101b-9992-00000b65c6f9"))
/* dispinterface */ ImageEvents;
struct /* coclass */ Image;
struct __declspec(uuid("796ed650-5fe9-11cf-8d68-00aa00bdce1d"))
/* dispinterface */ WHTMLControlEvents;
struct __declspec(uuid("47ff8fe0-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents1;
struct __declspec(uuid("47ff8fe1-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents2;
struct __declspec(uuid("47ff8fe2-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents3;
struct __declspec(uuid("47ff8fe3-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents4;
struct __declspec(uuid("47ff8fe4-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents5;
struct __declspec(uuid("47ff8fe5-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents6;
struct __declspec(uuid("47ff8fe6-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents7;
struct __declspec(uuid("47ff8fe8-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents9;
struct __declspec(uuid("47ff8fe9-6198-11cf-8ce8-00aa006cb389"))
/* dispinterface */ WHTMLControlEvents10;
struct /* coclass */ HTMLSubmit;
struct /* coclass */ HTMLImage;
struct /* coclass */ HTMLReset;
struct /* coclass */ HTMLCheckbox;
struct /* coclass */ HTMLOption;
struct /* coclass */ HTMLText;
struct /* coclass */ HTMLHidden;
struct /* coclass */ HTMLPassword;
struct /* coclass */ HTMLSelect;
struct /* coclass */ HTMLTextArea;
enum fmTransitionEffect;
struct __declspec(uuid("5cef5613-713d-11ce-80c9-00aa00611080"))
/* dual interface */ IPage;
struct __declspec(uuid("92e11a03-7358-11ce-80cb-00aa00611080"))
/* dual interface */ Pages;
struct __declspec(uuid("04598fc9-866c-11cf-ab7c-00aa00c08fcf"))
/* dual interface */ IMultiPage;
struct __declspec(uuid("7b020ec8-af6c-11ce-9f46-00aa00574a4f"))
/* dispinterface */ MultiPageEvents;
struct /* coclass */ MultiPage;
struct /* coclass */ Page;
enum fmListBoxStyles;
enum fmRepeatDirection;
enum fmEnAutoSize;
typedef long OLE_COLOR;
typedef long OLE_HANDLE;
typedef VARIANT_BOOL OLE_OPTEXCLUSIVE;
typedef IUnknown * PIROWSET;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(Font, __uuidof(Font));
_COM_SMARTPTR_TYPEDEF(IDataAutoWrapper, __uuidof(IDataAutoWrapper));
_COM_SMARTPTR_TYPEDEF(IReturnInteger, __uuidof(IReturnInteger));
_COM_SMARTPTR_TYPEDEF(IReturnBoolean, __uuidof(IReturnBoolean));
_COM_SMARTPTR_TYPEDEF(IReturnString, __uuidof(IReturnString));
_COM_SMARTPTR_TYPEDEF(IReturnSingle, __uuidof(IReturnSingle));
_COM_SMARTPTR_TYPEDEF(IReturnEffect, __uuidof(IReturnEffect));
_COM_SMARTPTR_TYPEDEF(IControl, __uuidof(IControl));
_COM_SMARTPTR_TYPEDEF(ControlEvents, __uuidof(ControlEvents));
_COM_SMARTPTR_TYPEDEF(Controls, __uuidof(Controls));
_COM_SMARTPTR_TYPEDEF(IOptionFrame, __uuidof(IOptionFrame));
_COM_SMARTPTR_TYPEDEF(_UserForm, __uuidof(_UserForm));
_COM_SMARTPTR_TYPEDEF(FormEvents, __uuidof(FormEvents));
_COM_SMARTPTR_TYPEDEF(OptionFrameEvents, __uuidof(OptionFrameEvents));
_COM_SMARTPTR_TYPEDEF(ILabelControl, __uuidof(ILabelControl));
_COM_SMARTPTR_TYPEDEF(ICommandButton, __uuidof(ICommandButton));
_COM_SMARTPTR_TYPEDEF(IMdcText, __uuidof(IMdcText));
_COM_SMARTPTR_TYPEDEF(IMdcList, __uuidof(IMdcList));
_COM_SMARTPTR_TYPEDEF(IMdcCombo, __uuidof(IMdcCombo));
_COM_SMARTPTR_TYPEDEF(IMdcCheckBox, __uuidof(IMdcCheckBox));
_COM_SMARTPTR_TYPEDEF(IMdcOptionButton, __uuidof(IMdcOptionButton));
_COM_SMARTPTR_TYPEDEF(IMdcToggleButton, __uuidof(IMdcToggleButton));
_COM_SMARTPTR_TYPEDEF(IScrollbar, __uuidof(IScrollbar));
_COM_SMARTPTR_TYPEDEF(Tab, __uuidof(Tab));
_COM_SMARTPTR_TYPEDEF(Tabs, __uuidof(Tabs));
_COM_SMARTPTR_TYPEDEF(ITabStrip, __uuidof(ITabStrip));
_COM_SMARTPTR_TYPEDEF(ISpinbutton, __uuidof(ISpinbutton));
_COM_SMARTPTR_TYPEDEF(IImage, __uuidof(IImage));
_COM_SMARTPTR_TYPEDEF(IWHTMLSubmitButton, __uuidof(IWHTMLSubmitButton));
_COM_SMARTPTR_TYPEDEF(IWHTMLImage, __uuidof(IWHTMLImage));
_COM_SMARTPTR_TYPEDEF(IWHTMLReset, __uuidof(IWHTMLReset));
_COM_SMARTPTR_TYPEDEF(IWHTMLCheckbox, __uuidof(IWHTMLCheckbox));
_COM_SMARTPTR_TYPEDEF(IWHTMLOption, __uuidof(IWHTMLOption));
_COM_SMARTPTR_TYPEDEF(IWHTMLText, __uuidof(IWHTMLText));
_COM_SMARTPTR_TYPEDEF(IWHTMLHidden, __uuidof(IWHTMLHidden));
_COM_SMARTPTR_TYPEDEF(IWHTMLPassword, __uuidof(IWHTMLPassword));
_COM_SMARTPTR_TYPEDEF(IWHTMLSelect, __uuidof(IWHTMLSelect));
_COM_SMARTPTR_TYPEDEF(IWHTMLTextArea, __uuidof(IWHTMLTextArea));
_COM_SMARTPTR_TYPEDEF(LabelControlEvents, __uuidof(LabelControlEvents));
_COM_SMARTPTR_TYPEDEF(CommandButtonEvents, __uuidof(CommandButtonEvents));
_COM_SMARTPTR_TYPEDEF(MdcTextEvents, __uuidof(MdcTextEvents));
_COM_SMARTPTR_TYPEDEF(MdcListEvents, __uuidof(MdcListEvents));
_COM_SMARTPTR_TYPEDEF(MdcComboEvents, __uuidof(MdcComboEvents));
_COM_SMARTPTR_TYPEDEF(MdcCheckBoxEvents, __uuidof(MdcCheckBoxEvents));
_COM_SMARTPTR_TYPEDEF(MdcOptionButtonEvents, __uuidof(MdcOptionButtonEvents));
_COM_SMARTPTR_TYPEDEF(MdcToggleButtonEvents, __uuidof(MdcToggleButtonEvents));
_COM_SMARTPTR_TYPEDEF(ScrollbarEvents, __uuidof(ScrollbarEvents));
_COM_SMARTPTR_TYPEDEF(TabStripEvents, __uuidof(TabStripEvents));
_COM_SMARTPTR_TYPEDEF(SpinbuttonEvents, __uuidof(SpinbuttonEvents));
_COM_SMARTPTR_TYPEDEF(ImageEvents, __uuidof(ImageEvents));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents, __uuidof(WHTMLControlEvents));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents1, __uuidof(WHTMLControlEvents1));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents2, __uuidof(WHTMLControlEvents2));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents3, __uuidof(WHTMLControlEvents3));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents4, __uuidof(WHTMLControlEvents4));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents5, __uuidof(WHTMLControlEvents5));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents6, __uuidof(WHTMLControlEvents6));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents7, __uuidof(WHTMLControlEvents7));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents9, __uuidof(WHTMLControlEvents9));
_COM_SMARTPTR_TYPEDEF(WHTMLControlEvents10, __uuidof(WHTMLControlEvents10));
_COM_SMARTPTR_TYPEDEF(IPage, __uuidof(IPage));
_COM_SMARTPTR_TYPEDEF(MultiPageEvents, __uuidof(MultiPageEvents));
_COM_SMARTPTR_TYPEDEF(Pages, __uuidof(Pages));
_COM_SMARTPTR_TYPEDEF(IMultiPage, __uuidof(IMultiPage));

//
// Type library items
//

struct __declspec(uuid("bef6e003-a874-101a-8bba-00aa00300cab"))
Font : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSize,put=PutSize))
    CURRENCY Size;
    __declspec(property(get=GetBold,put=PutBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetItalic,put=PutItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    VARIANT_BOOL Underline;
    __declspec(property(get=GetStrikethrough,put=PutStrikethrough))
    VARIANT_BOOL Strikethrough;
    __declspec(property(get=GetWeight,put=PutWeight))
    short Weight;
    __declspec(property(get=GetCharset,put=PutCharset))
    short Charset;

    //
    // Wrapper methods for error-handling
    //

    // Properties:
    _bstr_t GetName ( );
    void PutName ( _bstr_t _val );
    CURRENCY GetSize ( );
    void PutSize ( const CURRENCY & _val );
    VARIANT_BOOL GetBold ( );
    void PutBold ( VARIANT_BOOL _val );
    VARIANT_BOOL GetItalic ( );
    void PutItalic ( VARIANT_BOOL _val );
    VARIANT_BOOL GetUnderline ( );
    void PutUnderline ( VARIANT_BOOL _val );
    VARIANT_BOOL GetStrikethrough ( );
    void PutStrikethrough ( VARIANT_BOOL _val );
    short GetWeight ( );
    void PutWeight ( short _val );
    short GetCharset ( );
    void PutCharset ( short _val );
};

enum __declspec(uuid("10bb4720-f797-11ce-b9ec-00aa006b1a69"))
fmDropEffect
{
    fmDropEffectNone = 0,
    fmDropEffectCopy = 1,
    fmDropEffectMove = 2,
    fmDropEffectCopyOrMove = 3
};

enum __declspec(uuid("570c03e0-f797-11ce-b9ec-00aa006b1a69"))
fmAction
{
    fmActionCut = 0,
    fmActionCopy = 1,
    fmActionPaste = 2,
    fmActionDragDrop = 3
};

struct __declspec(uuid("ec72f590-f375-11ce-b9e8-00aa006b1a69"))
IDataAutoWrapper : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Clear ( );
    VARIANT_BOOL GetFormat (
        const _variant_t & Format );
    _bstr_t GetText (
        const _variant_t & Format = vtMissing );
    HRESULT SetText (
        _bstr_t Text,
        const _variant_t & Format = vtMissing );
    HRESULT PutInClipboard ( );
    HRESULT GetFromClipboard ( );
    enum fmDropEffect StartDrag (
        const _variant_t & OKEffect = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_GetFormat (
        /*[in]*/ VARIANT Format,
        /*[out,retval]*/ VARIANT_BOOL * Support ) = 0;
      virtual HRESULT __stdcall raw_GetText (
        /*[in]*/ VARIANT Format,
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_SetText (
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT Format = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_PutInClipboard ( ) = 0;
      virtual HRESULT __stdcall raw_GetFromClipboard ( ) = 0;
      virtual HRESULT __stdcall raw_StartDrag (
        /*[in]*/ VARIANT OKEffect,
        /*[out,retval]*/ enum fmDropEffect * Effect ) = 0;
};

struct __declspec(uuid("82b02370-b5bc-11cf-810f-00a0c9030074"))
IReturnInteger : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    int Value;

    //
    // Wrapper methods for error-handling
    //

    void PutValue (
        int Value );
    int GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Value (
        /*[in]*/ int Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ int * Value ) = 0;
};

struct __declspec(uuid("82b02371-b5bc-11cf-810f-00a0c9030074"))
IReturnBoolean : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    VARIANT_BOOL Value;

    //
    // Wrapper methods for error-handling
    //

    void PutValue (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("82b02372-b5bc-11cf-810f-00a0c9030074"))
IReturnString : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;

    //
    // Wrapper methods for error-handling
    //

    void PutValue (
        _bstr_t Value );
    _bstr_t GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("8a683c90-ba84-11cf-8110-00a0c9030074"))
IReturnSingle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    float Value;

    //
    // Wrapper methods for error-handling
    //

    void PutValue (
        float Value );
    float GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Value (
        /*[in]*/ float Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ float * Value ) = 0;
};

struct __declspec(uuid("8a683c91-ba84-11cf-8110-00a0c9030074"))
IReturnEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    enum fmDropEffect Value;

    //
    // Wrapper methods for error-handling
    //

    void PutValue (
        enum fmDropEffect Value );
    enum fmDropEffect GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Value (
        /*[in]*/ enum fmDropEffect Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ enum fmDropEffect * Value ) = 0;
};

struct __declspec(uuid("82b02373-b5bc-11cf-810f-00a0c9030074"))
ReturnInteger;
    // [ default ] interface IReturnInteger

struct __declspec(uuid("82b02374-b5bc-11cf-810f-00a0c9030074"))
ReturnBoolean;
    // [ default ] interface IReturnBoolean

struct __declspec(uuid("82b02375-b5bc-11cf-810f-00a0c9030074"))
ReturnString;
    // [ default ] interface IReturnString

struct __declspec(uuid("8a683c92-ba84-11cf-8110-00a0c9030074"))
ReturnSingle;
    // [ default ] interface IReturnSingle

struct __declspec(uuid("8a683c93-ba84-11cf-8110-00a0c9030074"))
ReturnEffect;
    // [ default ] interface IReturnEffect

struct __declspec(uuid("1c3b4210-f441-11ce-b9ea-00aa006b1a69"))
DataObject;
    // [ default ] interface IDataAutoWrapper

enum __declspec(uuid("c63bd250-bcaa-11ce-b64d-00aa004cd6d8"))
fmMode
{
    fmModeInherit = -2,
    fmModeOn = -1,
    fmModeOff = 0
};

enum __declspec(uuid("593104f8-16ba-101b-989c-00006b82871a"))
fmMousePointer
{
    fmMousePointerDefault = 0,
    fmMousePointerArrow = 1,
    fmMousePointerCross = 2,
    fmMousePointerIBeam = 3,
    fmMousePointerSizeNESW = 6,
    fmMousePointerSizeNS = 7,
    fmMousePointerSizeNWSE = 8,
    fmMousePointerSizeWE = 9,
    fmMousePointerUpArrow = 10,
    fmMousePointerHourGlass = 11,
    fmMousePointerNoDrop = 12,
    fmMousePointerAppStarting = 13,
    fmMousePointerHelp = 14,
    fmMousePointerSizeAll = 15,
    fmMousePointerCustom = 99
};

enum __declspec(uuid("5931055e-16ba-101b-989c-00006b82871a"))
fmScrollBars
{
    fmScrollBarsNone = 0,
    fmScrollBarsHorizontal = 1,
    fmScrollBarsVertical = 2,
    fmScrollBarsBoth = 3
};

enum __declspec(uuid("e0abc3c0-d199-11ce-8cce-00aa0044bb60"))
fmScrollAction
{
    fmScrollActionNoChange = 0,
    fmScrollActionLineUp = 1,
    fmScrollActionLineDown = 2,
    fmScrollActionPageUp = 3,
    fmScrollActionPageDown = 4,
    fmScrollActionBegin = 5,
    fmScrollActionEnd = 6,
    _fmScrollActionAbsoluteChange = 7,
    fmScrollActionPropertyChange = 8,
    fmScrollActionControlRequest = 9,
    fmScrollActionFocusRequest = 10
};

enum __declspec(uuid("3dbdd630-dd73-11ce-8cd1-00aa0044bb60"))
fmCycle
{
    fmCycleAllForms = 0,
    fmCycleCurrentForm = 2
};

enum __declspec(uuid("14c73c30-1612-11ce-9e98-00aa00574a4f"))
fmZOrder
{
    fmZOrderFront = 0,
    fmZOrderBack = 1
};

enum __declspec(uuid("5931055c-16ba-101b-989c-00006b82871a"))
fmBorderStyle
{
    fmBorderStyleNone = 0,
    fmBorderStyleSingle = 1
};

enum __declspec(uuid("66baac90-7c2a-11ce-b783-00aa004ba6ae"))
fmTextAlign
{
    fmTextAlignLeft = 1,
    fmTextAlignCenter = 2,
    fmTextAlignRight = 3
};

enum __declspec(uuid("cd474e84-a35f-101a-beb9-00006b827da8"))
fmAlignment
{
    fmAlignmentLeft = 0,
    fmAlignmentRight = 1
};

enum __declspec(uuid("e1fc1640-70df-101b-bc16-00aa003e3b29"))
fmBorders
{
    fmBordersNone = 0,
    fmBordersBox = 1,
    fmBordersLeft = 2,
    fmBordersTop = 3
};

enum __declspec(uuid("1afb3130-c129-11cd-a777-00dd01143c57"))
fmBackStyle
{
    fmBackStyleTransparent = 0,
    fmBackStyleOpaque = 1
};

enum __declspec(uuid("fde774c0-9aa8-11cd-84db-00006b82871a"))
fmButtonStyle
{
    fmButtonStylePushButton = 0,
    fmButtonStyleToggleButton = 1
};

enum __declspec(uuid("9011f7a0-c130-11cd-9be1-00006b82871a"))
fmPicPosition
{
    fmPicPositionCenter = 0,
    fmPicPositionTopLeft = 1,
    fmPicPositionTopCenter = 2,
    fmPicPositionTopRight = 3,
    fmPicPositionCenterLeft = 4,
    fmPicPositionCenterRight = 5,
    fmPicPositionBottomLeft = 6,
    fmPicPositionBottomCenter = 7,
    fmPicPositionBottomRight = 8
};

enum __declspec(uuid("d625ca10-cc59-11ce-b653-00aa004cd6d8"))
fmVerticalScrollBarSide
{
    fmVerticalScrollBarSideRight = 0,
    fmVerticalScrollBarSideLeft = 1
};

enum __declspec(uuid("02dfd4f0-ea2b-11ce-8043-00aa006009fa"))
fmLayoutEffect
{
    fmLayoutEffectNone = 0,
    fmLayoutEffectInitiate = 1,
    _fmLayoutEffectRespond = 2
};

enum __declspec(uuid("a7946240-ea45-11ce-8043-00aa006009fa"))
fmSpecialEffect
{
    fmSpecialEffectFlat = 0,
    fmSpecialEffectRaised = 1,
    fmSpecialEffectSunken = 2,
    fmSpecialEffectEtched = 3,
    fmSpecialEffectBump = 6
};

enum __declspec(uuid("82074c80-ea51-11ce-8043-00aa006009fa"))
fmDragState
{
    fmDragStateEnter = 0,
    fmDragStateLeave = 1,
    fmDragStateOver = 2
};

enum __declspec(uuid("53327010-e90b-11ce-9e0b-00aa006002f3"))
fmPictureSizeMode
{
    fmPictureSizeModeClip = 0,
    fmPictureSizeModeStretch = 1,
    fmPictureSizeModeZoom = 3
};

enum __declspec(uuid("3574bbe0-f520-11ce-83f6-00aa00479846"))
fmPictureAlignment
{
    fmPictureAlignmentTopLeft = 0,
    fmPictureAlignmentTopRight = 1,
    fmPictureAlignmentCenter = 2,
    fmPictureAlignmentBottomLeft = 3,
    fmPictureAlignmentBottomRight = 4
};

struct __declspec(uuid("04598fc6-866c-11cf-ab7c-00aa00c08fcf"))
IControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetRowSource,put=PutRowSource))
    _bstr_t RowSource;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetRowSourceType,put=PutRowSourceType))
    short RowSourceType;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetDefault,put=PutDefault))
    VARIANT_BOOL Default;
    __declspec(property(get=GetCancel,put=PutCancel))
    VARIANT_BOOL Cancel;
    __declspec(property(get=GetTabStop,put=PutTabStop))
    VARIANT_BOOL TabStop;
    __declspec(property(get=GetTabIndex,put=PutTabIndex))
    short TabIndex;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetControlTipText,put=PutControlTipText))
    _bstr_t ControlTipText;
    __declspec(property(get=GetControlSource,put=PutControlSource))
    _bstr_t ControlSource;
    __declspec(property(get=GetInSelection,put=PutInSelection))
    VARIANT_BOOL InSelection;
    __declspec(property(get=GetLayoutEffect))
    enum fmLayoutEffect LayoutEffect;
    __declspec(property(get=GetOldHeight))
    float OldHeight;
    __declspec(property(get=GetOldLeft))
    float OldLeft;
    __declspec(property(get=GetOldTop))
    float OldTop;
    __declspec(property(get=GetOldWidth))
    float OldWidth;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;

    //
    // Wrapper methods for error-handling
    //

    void PutCancel (
        VARIANT_BOOL Cancel );
    VARIANT_BOOL GetCancel ( );
    void PutControlSource (
        _bstr_t ControlSource );
    _bstr_t GetControlSource ( );
    void PutControlTipText (
        _bstr_t ControlTipText );
    _bstr_t GetControlTipText ( );
    void PutDefault (
        VARIANT_BOOL Default );
    VARIANT_BOOL GetDefault ( );
    HRESULT _SetHeight (
        long Height );
    HRESULT _GetHeight (
        long * Height );
    void PutHeight (
        float Height );
    float GetHeight ( );
    void PutHelpContextID (
        long HelpContextID );
    long GetHelpContextID ( );
    void PutInSelection (
        VARIANT_BOOL InSelection );
    VARIANT_BOOL GetInSelection ( );
    enum fmLayoutEffect GetLayoutEffect ( );
    HRESULT _SetLeft (
        long Left );
    HRESULT _GetLeft (
        long * Left );
    void PutLeft (
        float Left );
    float GetLeft ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    HRESULT _GetOldHeight (
        long * OldHeight );
    float GetOldHeight ( );
    HRESULT _GetOldLeft (
        long * OldLeft );
    float GetOldLeft ( );
    HRESULT _GetOldTop (
        long * OldTop );
    float GetOldTop ( );
    HRESULT _GetOldWidth (
        long * OldWidth );
    float GetOldWidth ( );
    IDispatchPtr GetObject ( );
    IDispatchPtr GetParent ( );
    void PutRowSource (
        _bstr_t RowSource );
    _bstr_t GetRowSource ( );
    void PutRowSourceType (
        short RowSourceType );
    short GetRowSourceType ( );
    void PutTabIndex (
        short TabIndex );
    short GetTabIndex ( );
    void PutTabStop (
        VARIANT_BOOL TabStop );
    VARIANT_BOOL GetTabStop ( );
    void PutTag (
        _bstr_t Tag );
    _bstr_t GetTag ( );
    HRESULT _SetTop (
        long Top );
    HRESULT _GetTop (
        long * Top );
    void PutTop (
        float Top );
    float GetTop ( );
    void PutBoundValue (
        VARIANT * BoundValue );
    _variant_t GetBoundValue ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    VARIANT_BOOL GetVisible ( );
    HRESULT _SetWidth (
        long Width );
    HRESULT _GetWidth (
        long * Width );
    void PutWidth (
        float Width );
    float GetWidth ( );
    HRESULT Move (
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing,
        const _variant_t & Layout = vtMissing );
    HRESULT ZOrder (
        const _variant_t & zPosition = vtMissing );
    HRESULT Select (
        VARIANT_BOOL SelectInGroup );
    HRESULT SetFocus ( );
    int _GethWnd ( );
    long _GetID ( );
    HRESULT _Move (
        long Left,
        long Top,
        long Width,
        long Height );
    HRESULT _ZOrder (
        enum fmZOrder zPosition );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Cancel (
        /*[in]*/ VARIANT_BOOL Cancel ) = 0;
      virtual HRESULT __stdcall get_Cancel (
        /*[out,retval]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall put_ControlSource (
        /*[in]*/ BSTR ControlSource ) = 0;
      virtual HRESULT __stdcall get_ControlSource (
        /*[out,retval]*/ BSTR * ControlSource ) = 0;
      virtual HRESULT __stdcall put_ControlTipText (
        /*[in]*/ BSTR ControlTipText ) = 0;
      virtual HRESULT __stdcall get_ControlTipText (
        /*[out,retval]*/ BSTR * ControlTipText ) = 0;
      virtual HRESULT __stdcall put_Default (
        /*[in]*/ VARIANT_BOOL Default ) = 0;
      virtual HRESULT __stdcall get_Default (
        /*[out,retval]*/ VARIANT_BOOL * Default ) = 0;
      virtual HRESULT __stdcall raw__SetHeight (
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall raw__GetHeight (
        /*[out]*/ long * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_HelpContextID (
        /*[in]*/ long HelpContextID ) = 0;
      virtual HRESULT __stdcall get_HelpContextID (
        /*[out,retval]*/ long * HelpContextID ) = 0;
      virtual HRESULT __stdcall put_InSelection (
        /*[in]*/ VARIANT_BOOL InSelection ) = 0;
      virtual HRESULT __stdcall get_InSelection (
        /*[out,retval]*/ VARIANT_BOOL * InSelection ) = 0;
      virtual HRESULT __stdcall get_LayoutEffect (
        /*[out,retval]*/ enum fmLayoutEffect * LayoutEffect ) = 0;
      virtual HRESULT __stdcall raw__SetLeft (
        /*[in]*/ long Left ) = 0;
      virtual HRESULT __stdcall raw__GetLeft (
        /*[out]*/ long * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw__GetOldHeight (
        /*[out]*/ long * OldHeight ) = 0;
      virtual HRESULT __stdcall get_OldHeight (
        /*[out,retval]*/ float * OldHeight ) = 0;
      virtual HRESULT __stdcall raw__GetOldLeft (
        /*[out]*/ long * OldLeft ) = 0;
      virtual HRESULT __stdcall get_OldLeft (
        /*[out,retval]*/ float * OldLeft ) = 0;
      virtual HRESULT __stdcall raw__GetOldTop (
        /*[out]*/ long * OldTop ) = 0;
      virtual HRESULT __stdcall get_OldTop (
        /*[out,retval]*/ float * OldTop ) = 0;
      virtual HRESULT __stdcall raw__GetOldWidth (
        /*[out]*/ long * OldWidth ) = 0;
      virtual HRESULT __stdcall get_OldWidth (
        /*[out,retval]*/ float * OldWidth ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall put_RowSource (
        /*[in]*/ BSTR RowSource ) = 0;
      virtual HRESULT __stdcall get_RowSource (
        /*[out,retval]*/ BSTR * RowSource ) = 0;
      virtual HRESULT __stdcall put_RowSourceType (
        /*[in]*/ short RowSourceType ) = 0;
      virtual HRESULT __stdcall get_RowSourceType (
        /*[out,retval]*/ short * RowSourceType ) = 0;
      virtual HRESULT __stdcall put_TabIndex (
        /*[in]*/ short TabIndex ) = 0;
      virtual HRESULT __stdcall get_TabIndex (
        /*[out,retval]*/ short * TabIndex ) = 0;
      virtual HRESULT __stdcall put_TabStop (
        /*[in]*/ VARIANT_BOOL TabStop ) = 0;
      virtual HRESULT __stdcall get_TabStop (
        /*[out,retval]*/ VARIANT_BOOL * TabStop ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR Tag ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * Tag ) = 0;
      virtual HRESULT __stdcall raw__SetTop (
        /*[in]*/ long Top ) = 0;
      virtual HRESULT __stdcall raw__GetTop (
        /*[out]*/ long * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_BoundValue (
        /*[in]*/ VARIANT * BoundValue ) = 0;
      virtual HRESULT __stdcall get_BoundValue (
        /*[out,retval]*/ VARIANT * BoundValue ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall raw__SetWidth (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall raw__GetWidth (
        /*[out]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Left = vtMissing,
        /*[in]*/ VARIANT Top = vtMissing,
        /*[in]*/ VARIANT Width = vtMissing,
        /*[in]*/ VARIANT Height = vtMissing,
        /*[in]*/ VARIANT Layout = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ VARIANT zPosition = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT_BOOL SelectInGroup ) = 0;
      virtual HRESULT __stdcall raw_SetFocus ( ) = 0;
      virtual HRESULT __stdcall raw__GethWnd (
        /*[out,retval]*/ int * hWnd ) = 0;
      virtual HRESULT __stdcall raw__GetID (
        /*[out,retval]*/ long * ID ) = 0;
      virtual HRESULT __stdcall raw__Move (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall raw__ZOrder (
        /*[in]*/ enum fmZOrder zPosition ) = 0;
};

struct __declspec(uuid("9a4bbf53-4e46-101b-8bbd-00aa003e3b29"))
ControlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Enter ( );
    HRESULT Exit (
        struct IReturnBoolean * Cancel );
    HRESULT BeforeUpdate (
        struct IReturnBoolean * Cancel );
    HRESULT AfterUpdate ( );
};

struct __declspec(uuid("909e0ae0-16dc-11ce-9e98-00aa00574a4f"))
Control;
    // [ default ] interface IControl
    // [ default, source ] dispinterface ControlEvents

struct __declspec(uuid("04598fc7-866c-11cf-ab7c-00aa00c08fcf"))
Controls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Item (
        const _variant_t & varg );
    HRESULT Clear ( );
    HRESULT _Move (
        long cx,
        long cy );
    HRESULT SelectAll ( );
    IControlPtr _AddByClass (
        long * clsid );
    HRESULT AlignToGrid ( );
    HRESULT BringForward ( );
    HRESULT BringToFront ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    IUnknownPtr Enum ( );
    IControlPtr _GetItemByIndex (
        long lIndex );
    IControlPtr _GetItemByName (
        _bstr_t pstr );
    IControlPtr _GetItemByID (
        long ID );
    HRESULT SendBackward ( );
    HRESULT SendToBack ( );
    HRESULT Move (
        float cx,
        float cy );
    IControlPtr Add (
        _bstr_t bstrProgID,
        const _variant_t & Name = vtMissing,
        const _variant_t & Visible = vtMissing );
    HRESULT Remove (
        const _variant_t & varg );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT varg,
        /*[out,retval]*/ IDispatch * * ppDispatch ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw__Move (
        /*[in]*/ long cx,
        /*[in]*/ long cy ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall raw__AddByClass (
        /*[in]*/ long * clsid,
        /*[out,retval]*/ struct IControl * * Control ) = 0;
      virtual HRESULT __stdcall raw_AlignToGrid ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Enum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall raw__GetItemByIndex (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct IControl * * Control ) = 0;
      virtual HRESULT __stdcall raw__GetItemByName (
        /*[in]*/ BSTR pstr,
        /*[out,retval]*/ struct IControl * * Control ) = 0;
      virtual HRESULT __stdcall raw__GetItemByID (
        /*[in]*/ long ID,
        /*[out,retval]*/ struct IControl * * Control ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ float cx,
        /*[in]*/ float cy ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR bstrProgID,
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Visible,
        /*[out,retval]*/ struct IControl * * Control ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT varg ) = 0;
};

struct __declspec(uuid("29b86a70-f52e-11ce-9bce-00aa00608e01"))
IOptionFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetControls))
    ControlsPtr Controls;
    __declspec(property(get=GetSpecialEffect,put=PutSpecialEffect))
    enum fmSpecialEffect SpecialEffect;
    __declspec(property(get=GetActiveControl))
    IControlPtr ActiveControl;
    __declspec(property(get=GetCanPaste))
    VARIANT_BOOL CanPaste;
    __declspec(property(get=GetCanRedo))
    VARIANT_BOOL CanRedo;
    __declspec(property(get=GetCanUndo))
    VARIANT_BOOL CanUndo;
    __declspec(property(get=GetCycle,put=PutCycle))
    enum fmCycle Cycle;
    __declspec(property(get=GetInsideHeight))
    float InsideHeight;
    __declspec(property(get=GetInsideWidth))
    float InsideWidth;
    __declspec(property(get=GetKeepScrollBarsVisible,put=PutKeepScrollBarsVisible))
    enum fmScrollBars KeepScrollBarsVisible;
    __declspec(property(get=GetScrollBars,put=PutScrollBars))
    enum fmScrollBars ScrollBars;
    __declspec(property(get=GetScrollHeight,put=PutScrollHeight))
    float ScrollHeight;
    __declspec(property(get=GetScrollLeft,put=PutScrollLeft))
    float ScrollLeft;
    __declspec(property(get=GetScrollTop,put=PutScrollTop))
    float ScrollTop;
    __declspec(property(get=GetScrollWidth,put=PutScrollWidth))
    float ScrollWidth;
    __declspec(property(get=GetSelected))
    ControlsPtr Selected;
    __declspec(property(get=GetPictureAlignment,put=PutPictureAlignment))
    enum fmPictureAlignment PictureAlignment;
    __declspec(property(get=GetPictureSizeMode,put=PutPictureSizeMode))
    enum fmPictureSizeMode PictureSizeMode;
    __declspec(property(get=GetPicture,put=PutRefPicture))
    PicturePtr Picture;
    __declspec(property(get=GetMouseIcon,put=PutRefMouseIcon))
    PicturePtr MouseIcon;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum fmMousePointer MousePointer;
    __declspec(property(get=GetPictureTiling,put=PutPictureTiling))
    VARIANT_BOOL PictureTiling;
    __declspec(property(get=GetVerticalScrollBarSide,put=PutVerticalScrollBarSide))
    enum fmVerticalScrollBarSide VerticalScrollBarSide;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZoom,put=PutZoom))
    short Zoom;
    __declspec(property(get=GetDesignMode,put=PutDesignMode))
    enum fmMode DesignMode;
    __declspec(property(get=GetShowToolbox,put=PutShowToolbox))
    enum fmMode ShowToolbox;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(put=Put_Font_Reserved))
    FontPtr _Font_Reserved;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(get=GetShowGridDots,put=PutShowGridDots))
    enum fmMode ShowGridDots;
    __declspec(property(get=GetSnapToGrid,put=PutSnapToGrid))
    enum fmMode SnapToGrid;
    __declspec(property(get=GetGridX,put=PutGridX))
    float GridX;
    __declspec(property(get=GetGridY,put=PutGridY))
    float GridY;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    enum fmBorderStyle BorderStyle;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;

    //
    // Wrapper methods for error-handling
    //

    IControlPtr GetActiveControl ( );
    void PutBackColor (
        OLE_COLOR BackColor );
    OLE_COLOR GetBackColor ( );
    void PutBorderColor (
        OLE_COLOR BorderColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderStyle (
        enum fmBorderStyle BorderStyle );
    enum fmBorderStyle GetBorderStyle ( );
    VARIANT_BOOL GetCanPaste ( );
    VARIANT_BOOL GetCanRedo ( );
    VARIANT_BOOL GetCanUndo ( );
    void PutCaption (
        _bstr_t Caption );
    _bstr_t GetCaption ( );
    ControlsPtr GetControls ( );
    void PutCycle (
        enum fmCycle Cycle );
    enum fmCycle GetCycle ( );
    void PutEnabled (
        VARIANT_BOOL Enabled );
    VARIANT_BOOL GetEnabled ( );
    void Put_Font_Reserved (
        struct Font * _arg1 );
    void PutRefFont (
        struct Font * Font );
    FontPtr GetFont ( );
    void PutForeColor (
        OLE_COLOR ForeColor );
    OLE_COLOR GetForeColor ( );
    HRESULT _GetInsideHeight (
        long * InsideHeight );
    float GetInsideHeight ( );
    HRESULT _GetInsideWidth (
        long * InsideWidth );
    float GetInsideWidth ( );
    void PutKeepScrollBarsVisible (
        enum fmScrollBars ScrollBars );
    enum fmScrollBars GetKeepScrollBarsVisible ( );
    void PutMouseIcon (
        struct Picture * MouseIcon );
    void PutRefMouseIcon (
        struct Picture * MouseIcon );
    PicturePtr GetMouseIcon ( );
    void PutMousePointer (
        enum fmMousePointer MousePointer );
    enum fmMousePointer GetMousePointer ( );
    void PutPictureAlignment (
        enum fmPictureAlignment PictureAlignment );
    enum fmPictureAlignment GetPictureAlignment ( );
    void PutPicture (
        struct Picture * Picture );
    void PutRefPicture (
        struct Picture * Picture );
    PicturePtr GetPicture ( );
    void PutPictureSizeMode (
        enum fmPictureSizeMode PictureSizeMode );
    enum fmPictureSizeMode GetPictureSizeMode ( );
    void PutPictureTiling (
        VARIANT_BOOL PictureTiling );
    VARIANT_BOOL GetPictureTiling ( );
    void PutScrollBars (
        enum fmScrollBars ScrollBars );
    enum fmScrollBars GetScrollBars ( );
    HRESULT _SetScrollHeight (
        long ScrollHeight );
    HRESULT _GetScrollHeight (
        long * ScrollHeight );
    void PutScrollHeight (
        float ScrollHeight );
    float GetScrollHeight ( );
    HRESULT _SetScrollLeft (
        long ScrollLeft );
    HRESULT _GetScrollLeft (
        long * ScrollLeft );
    void PutScrollLeft (
        float ScrollLeft );
    float GetScrollLeft ( );
    HRESULT _SetScrollTop (
        long ScrollTop );
    HRESULT _GetScrollTop (
        long * ScrollTop );
    void PutScrollTop (
        float ScrollTop );
    float GetScrollTop ( );
    HRESULT _SetScrollWidth (
        long ScrollWidth );
    HRESULT _GetScrollWidth (
        long * ScrollWidth );
    void PutScrollWidth (
        float ScrollWidth );
    float GetScrollWidth ( );
    ControlsPtr GetSelected ( );
    void PutSpecialEffect (
        enum fmSpecialEffect SpecialEffect );
    enum fmSpecialEffect GetSpecialEffect ( );
    void PutVerticalScrollBarSide (
        enum fmVerticalScrollBarSide side );
    enum fmVerticalScrollBarSide GetVerticalScrollBarSide ( );
    void PutZoom (
        short Zoom );
    short GetZoom ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Paste ( );
    HRESULT RedoAction ( );
    HRESULT Repaint ( );
    HRESULT Scroll (
        const _variant_t & xAction = vtMissing,
        const _variant_t & yAction = vtMissing );
    HRESULT SetDefaultTabOrder ( );
    HRESULT UndoAction ( );
    void PutDesignMode (
        enum fmMode DesignMode );
    enum fmMode GetDesignMode ( );
    void PutShowToolbox (
        enum fmMode ShowToolbox );
    enum fmMode GetShowToolbox ( );
    void PutShowGridDots (
        enum fmMode ShowGridDots );
    enum fmMode GetShowGridDots ( );
    void PutSnapToGrid (
        enum fmMode SnapToGrid );
    enum fmMode GetSnapToGrid ( );
    void PutGridX (
        float GridX );
    float GetGridX ( );
    HRESULT _SetGridX (
        long GridX );
    HRESULT _GetGridX (
        long * GridX );
    void PutGridY (
        float GridY );
    float GetGridY ( );
    HRESULT _SetGridY (
        long GridY );
    HRESULT _GetGridY (
        long * GridY );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ActiveControl (
        /*[out,retval]*/ struct IControl * * ActiveControl ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum fmBorderStyle BorderStyle ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum fmBorderStyle * BorderStyle ) = 0;
      virtual HRESULT __stdcall get_CanPaste (
        /*[out,retval]*/ VARIANT_BOOL * CanPaste ) = 0;
      virtual HRESULT __stdcall get_CanRedo (
        /*[out,retval]*/ VARIANT_BOOL * CanRedo ) = 0;
      virtual HRESULT __stdcall get_CanUndo (
        /*[out,retval]*/ VARIANT_BOOL * CanUndo ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct Controls * * Controls ) = 0;
      virtual HRESULT __stdcall put_Cycle (
        /*[in]*/ enum fmCycle Cycle ) = 0;
      virtual HRESULT __stdcall get_Cycle (
        /*[out,retval]*/ enum fmCycle * Cycle ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall raw__GetInsideHeight (
        /*[out]*/ long * InsideHeight ) = 0;
      virtual HRESULT __stdcall get_InsideHeight (
        /*[out,retval]*/ float * InsideHeight ) = 0;
      virtual HRESULT __stdcall raw__GetInsideWidth (
        /*[out]*/ long * InsideWidth ) = 0;
      virtual HRESULT __stdcall get_InsideWidth (
        /*[out,retval]*/ float * InsideWidth ) = 0;
      virtual HRESULT __stdcall put_KeepScrollBarsVisible (
        /*[in]*/ enum fmScrollBars ScrollBars ) = 0;
      virtual HRESULT __stdcall get_KeepScrollBarsVisible (
        /*[out,retval]*/ enum fmScrollBars * ScrollBars ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_PictureAlignment (
        /*[in]*/ enum fmPictureAlignment PictureAlignment ) = 0;
      virtual HRESULT __stdcall get_PictureAlignment (
        /*[out,retval]*/ enum fmPictureAlignment * PictureAlignment ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct Picture * * Picture ) = 0;
      virtual HRESULT __stdcall put_PictureSizeMode (
        /*[in]*/ enum fmPictureSizeMode PictureSizeMode ) = 0;
      virtual HRESULT __stdcall get_PictureSizeMode (
        /*[out,retval]*/ enum fmPictureSizeMode * PictureSizeMode ) = 0;
      virtual HRESULT __stdcall put_PictureTiling (
        /*[in]*/ VARIANT_BOOL PictureTiling ) = 0;
      virtual HRESULT __stdcall get_PictureTiling (
        /*[out,retval]*/ VARIANT_BOOL * PictureTiling ) = 0;
      virtual HRESULT __stdcall put_ScrollBars (
        /*[in]*/ enum fmScrollBars ScrollBars ) = 0;
      virtual HRESULT __stdcall get_ScrollBars (
        /*[out,retval]*/ enum fmScrollBars * ScrollBars ) = 0;
      virtual HRESULT __stdcall raw__SetScrollHeight (
        /*[in]*/ long ScrollHeight ) = 0;
      virtual HRESULT __stdcall raw__GetScrollHeight (
        /*[out]*/ long * ScrollHeight ) = 0;
      virtual HRESULT __stdcall put_ScrollHeight (
        /*[in]*/ float ScrollHeight ) = 0;
      virtual HRESULT __stdcall get_ScrollHeight (
        /*[out,retval]*/ float * ScrollHeight ) = 0;
      virtual HRESULT __stdcall raw__SetScrollLeft (
        /*[in]*/ long ScrollLeft ) = 0;
      virtual HRESULT __stdcall raw__GetScrollLeft (
        /*[out]*/ long * ScrollLeft ) = 0;
      virtual HRESULT __stdcall put_ScrollLeft (
        /*[in]*/ float ScrollLeft ) = 0;
      virtual HRESULT __stdcall get_ScrollLeft (
        /*[out,retval]*/ float * ScrollLeft ) = 0;
      virtual HRESULT __stdcall raw__SetScrollTop (
        /*[in]*/ long ScrollTop ) = 0;
      virtual HRESULT __stdcall raw__GetScrollTop (
        /*[out]*/ long * ScrollTop ) = 0;
      virtual HRESULT __stdcall put_ScrollTop (
        /*[in]*/ float ScrollTop ) = 0;
      virtual HRESULT __stdcall get_ScrollTop (
        /*[out,retval]*/ float * ScrollTop ) = 0;
      virtual HRESULT __stdcall raw__SetScrollWidth (
        /*[in]*/ long ScrollWidth ) = 0;
      virtual HRESULT __stdcall raw__GetScrollWidth (
        /*[out]*/ long * ScrollWidth ) = 0;
      virtual HRESULT __stdcall put_ScrollWidth (
        /*[in]*/ float ScrollWidth ) = 0;
      virtual HRESULT __stdcall get_ScrollWidth (
        /*[out,retval]*/ float * ScrollWidth ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ struct Controls * * Selected ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmSpecialEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmSpecialEffect * SpecialEffect ) = 0;
      virtual HRESULT __stdcall put_VerticalScrollBarSide (
        /*[in]*/ enum fmVerticalScrollBarSide side ) = 0;
      virtual HRESULT __stdcall get_VerticalScrollBarSide (
        /*[out,retval]*/ enum fmVerticalScrollBarSide * side ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ short Zoom ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ short * Zoom ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall raw_RedoAction ( ) = 0;
      virtual HRESULT __stdcall raw_Repaint ( ) = 0;
      virtual HRESULT __stdcall raw_Scroll (
        /*[in]*/ VARIANT xAction = vtMissing,
        /*[in]*/ VARIANT yAction = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetDefaultTabOrder ( ) = 0;
      virtual HRESULT __stdcall raw_UndoAction ( ) = 0;
      virtual HRESULT __stdcall put_DesignMode (
        /*[in]*/ enum fmMode DesignMode ) = 0;
      virtual HRESULT __stdcall get_DesignMode (
        /*[out,retval]*/ enum fmMode * DesignMode ) = 0;
      virtual HRESULT __stdcall put_ShowToolbox (
        /*[in]*/ enum fmMode ShowToolbox ) = 0;
      virtual HRESULT __stdcall get_ShowToolbox (
        /*[out,retval]*/ enum fmMode * ShowToolbox ) = 0;
      virtual HRESULT __stdcall put_ShowGridDots (
        /*[in]*/ enum fmMode ShowGridDots ) = 0;
      virtual HRESULT __stdcall get_ShowGridDots (
        /*[out,retval]*/ enum fmMode * ShowGridDots ) = 0;
      virtual HRESULT __stdcall put_SnapToGrid (
        /*[in]*/ enum fmMode SnapToGrid ) = 0;
      virtual HRESULT __stdcall get_SnapToGrid (
        /*[out,retval]*/ enum fmMode * SnapToGrid ) = 0;
      virtual HRESULT __stdcall put_GridX (
        /*[in]*/ float GridX ) = 0;
      virtual HRESULT __stdcall get_GridX (
        /*[out,retval]*/ float * GridX ) = 0;
      virtual HRESULT __stdcall raw__SetGridX (
        /*[in]*/ long GridX ) = 0;
      virtual HRESULT __stdcall raw__GetGridX (
        /*[out]*/ long * GridX ) = 0;
      virtual HRESULT __stdcall put_GridY (
        /*[in]*/ float GridY ) = 0;
      virtual HRESULT __stdcall get_GridY (
        /*[out,retval]*/ float * GridY ) = 0;
      virtual HRESULT __stdcall raw__SetGridY (
        /*[in]*/ long GridY ) = 0;
      virtual HRESULT __stdcall raw__GetGridY (
        /*[out]*/ long * GridY ) = 0;
};

struct __declspec(uuid("04598fc8-866c-11cf-ab7c-00aa00c08fcf"))
_UserForm : IOptionFrame
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawBuffer,put=PutDrawBuffer))
    long DrawBuffer;

    //
    // Wrapper methods for error-handling
    //

    void PutDrawBuffer (
        long DrawBuffer );
    long GetDrawBuffer ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_DrawBuffer (
        /*[in]*/ long DrawBuffer ) = 0;
      virtual HRESULT __stdcall get_DrawBuffer (
        /*[out,retval]*/ long * DrawBuffer ) = 0;
};

struct __declspec(uuid("5b9d8fc8-4a71-101b-97a6-00000b65c08b"))
FormEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT AddControl (
        struct IControl * Control );
    HRESULT BeforeDragOver (
        struct IReturnBoolean * Cancel,
        struct IControl * Control,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState State,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        struct IReturnBoolean * Cancel,
        struct IControl * Control,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Click ( );
    HRESULT DblClick (
        struct IReturnBoolean * Cancel );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT KeyDown (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT KeyPress (
        struct IReturnInteger * KeyAscii );
    HRESULT KeyUp (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT Layout ( );
    HRESULT MouseDown (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT RemoveControl (
        struct IControl * Control );
    HRESULT Scroll (
        enum fmScrollAction ActionX,
        enum fmScrollAction ActionY,
        float RequestDx,
        float RequestDy,
        struct IReturnSingle * ActualDx,
        struct IReturnSingle * ActualDy );
    HRESULT Zoom (
        short * Percent );
};

struct __declspec(uuid("cf3f94a0-f546-11ce-9bce-00aa00608e01"))
OptionFrameEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT AddControl (
        struct IControl * Control );
    HRESULT BeforeDragOver (
        struct IReturnBoolean * Cancel,
        struct IControl * Control,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState State,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        struct IReturnBoolean * Cancel,
        struct IControl * Control,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Click ( );
    HRESULT DblClick (
        struct IReturnBoolean * Cancel );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT KeyDown (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT KeyPress (
        struct IReturnInteger * KeyAscii );
    HRESULT KeyUp (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT Layout ( );
    HRESULT MouseDown (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT RemoveControl (
        struct IControl * Control );
    HRESULT Scroll (
        enum fmScrollAction ActionX,
        enum fmScrollAction ActionY,
        float RequestDx,
        float RequestDy,
        struct IReturnSingle * ActualDx,
        struct IReturnSingle * ActualDy );
    HRESULT Zoom (
        short * Percent );
};

struct __declspec(uuid("c62a69f0-16dc-11ce-9e98-00aa00574a4f"))
UserForm;
    // [ default ] interface _UserForm
    // [ default, source ] dispinterface FormEvents

struct __declspec(uuid("6e182020-f460-11ce-9bcd-00aa00608e01"))
Frame;
    // [ default ] interface IOptionFrame
    // [ default, source ] dispinterface OptionFrameEvents

enum __declspec(uuid("317a54c0-c7b1-11ce-9afd-00aa00600ab8"))
fmButtonEffect
{
    fmButtonEffectFlat = 0,
    fmButtonEffectSunken = 2
};

enum __declspec(uuid("16e571e0-040b-11cf-8283-00aa004ba6ae"))
fmOrientation
{
    fmOrientationAuto = -1,
    fmOrientationVertical = 0,
    fmOrientationHorizontal = 1
};

enum __declspec(uuid("317a54c1-c7b1-11ce-9afd-00aa00600ab8"))
fmSnapPoint
{
    fmSnapPointTopLeft = 0,
    fmSnapPointTopCenter = 1,
    fmSnapPointTopRight = 2,
    fmSnapPointCenterLeft = 3,
    fmSnapPointCenter = 4,
    fmSnapPointCenterRight = 5,
    fmSnapPointBottomLeft = 6,
    fmSnapPointBottomCenter = 7,
    fmSnapPointBottomRight = 8
};

enum __declspec(uuid("317a54c2-c7b1-11ce-9afd-00aa00600ab8"))
fmPicturePosition
{
    fmPicturePositionLeftTop = 0,
    fmPicturePositionLeftCenter = 1,
    fmPicturePositionLeftBottom = 2,
    fmPicturePositionRightTop = 3,
    fmPicturePositionRightCenter = 4,
    fmPicturePositionRightBottom = 5,
    fmPicturePositionAboveLeft = 6,
    fmPicturePositionAboveCenter = 7,
    fmPicturePositionAboveRight = 8,
    fmPicturePositionBelowLeft = 9,
    fmPicturePositionBelowCenter = 10,
    fmPicturePositionBelowRight = 11,
    fmPicturePositionCenter = 12
};

enum __declspec(uuid("a4069f25-4221-11ce-8ea0-00aa004ba6ae"))
fmDisplayStyle
{
    fmDisplayStyleText = 1,
    fmDisplayStyleList = 2,
    fmDisplayStyleCombo = 3,
    fmDisplayStyleCheckBox = 4,
    fmDisplayStyleOptionButton = 5,
    fmDisplayStyleToggle = 6,
    fmDisplayStyleDropList = 7
};

enum __declspec(uuid("a4069f24-4221-11ce-8ea0-00aa004ba6ae"))
fmShowListWhen
{
    fmShowListWhenNever = 0,
    fmShowListWhenButton = 1,
    fmShowListWhenFocus = 2,
    fmShowListWhenAlways = 3
};

enum __declspec(uuid("c5d98c41-4eb2-11ce-8ea0-00aa004ba6ae"))
fmShowDropButtonWhen
{
    fmShowDropButtonWhenNever = 0,
    fmShowDropButtonWhenFocus = 1,
    fmShowDropButtonWhenAlways = 2
};

enum __declspec(uuid("f00164c0-b17b-11ce-a95d-00aa006cb389"))
fmMultiSelect
{
    fmMultiSelectSingle = 0,
    fmMultiSelectMulti = 1,
    fmMultiSelectExtended = 2
};

enum __declspec(uuid("f00164c1-b17b-11ce-a95d-00aa006cb389"))
fmListStyle
{
    fmListStylePlain = 0,
    fmListStyleOption = 1
};

enum __declspec(uuid("6a7167f1-2432-11cf-956f-00aa004b9dfa"))
fmEnterFieldBehavior
{
    fmEnterFieldBehaviorSelectAll = 0,
    fmEnterFieldBehaviorRecallSelection = 1
};

enum __declspec(uuid("e25eb550-24f6-11cf-a6e2-00aa00c0098d"))
fmDragBehavior
{
    fmDragBehaviorDisabled = 0,
    fmDragBehaviorEnabled = 1
};

enum __declspec(uuid("8ccd0ac2-b1ad-11ce-8276-00aa004ba6ae"))
fmMatchEntry
{
    fmMatchEntryFirstLetter = 0,
    fmMatchEntryComplete = 1,
    fmMatchEntryNone = 2
};

enum __declspec(uuid("14d122b0-c6e7-11ce-827c-00aa004ba6ae"))
fmDropButtonStyle
{
    fmDropButtonStylePlain = 0,
    fmDropButtonStyleArrow = 1,
    fmDropButtonStyleEllipsis = 2,
    fmDropButtonStyleReduce = 3
};

enum __declspec(uuid("9c37f9d0-fde5-11ce-9560-00aa004b9dfa"))
fmStyle
{
    fmStyleDropDownCombo = 0,
    fmStyleDropDownList = 2
};

enum __declspec(uuid("ebc7fde1-6899-11ce-80c0-00aa00611080"))
fmTabOrientation
{
    fmTabOrientationTop = 0,
    fmTabOrientationBottom = 1,
    fmTabOrientationLeft = 2,
    fmTabOrientationRight = 3
};

enum __declspec(uuid("ebc7fde3-6899-11ce-80c0-00aa00611080"))
fmTabStyle
{
    fmTabStyleTabs = 0,
    fmTabStyleButtons = 1,
    fmTabStyleNone = 2
};

enum __declspec(uuid("4d067cd0-0d74-11cf-b474-00aa006eb734"))
fmIMEMode
{
    fmIMEModeNoControl = 0,
    fmIMEModeOn = 1,
    fmIMEModeOff = 2,
    fmIMEModeDisable = 3,
    fmIMEModeHiragana = 4,
    fmIMEModeKatakana = 5,
    fmIMEModeKatakanaHalf = 6,
    fmIMEModeAlphaFull = 7,
    fmIMEModeAlpha = 8,
    fmIMEModeHangulFull = 9,
    fmIMEModeHangul = 10,
    fmIMEModeHanziFull = 11,
    fmIMEModeHanzi = 12
};

struct __declspec(uuid("04598fc1-866c-11cf-ab7c-00aa00c08fcf"))
ILabelControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    CURRENCY FontSize;
    __declspec(property(get=GetFontBold,put=PutFontBold))
    VARIANT_BOOL FontBold;
    __declspec(property(get=GetFontItalic,put=PutFontItalic))
    VARIANT_BOOL FontItalic;
    __declspec(property(get=GetFontUnderline,put=PutFontUnderline))
    VARIANT_BOOL FontUnderline;
    __declspec(property(get=GetFontStrikethru,put=PutFontStrikethru))
    VARIANT_BOOL FontStrikethru;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    enum fmBorderStyle BorderStyle;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBackStyle,put=PutBackStyle))
    enum fmBackStyle BackStyle;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetPicturePosition,put=PutPicturePosition))
    enum fmPicturePosition PicturePosition;
    __declspec(property(get=GetSpecialEffect,put=PutSpecialEffect))
    enum fmSpecialEffect SpecialEffect;
    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    enum fmTextAlign TextAlign;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    VARIANT_BOOL WordWrap;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _bstr_t Accelerator;
    __declspec(property(get=GetFontWeight,put=PutFontWeight))
    short FontWeight;
    __declspec(property(get=GetPicture,put=PutRefPicture))
    PicturePtr Picture;
    __declspec(property(get=GetMouseIcon,put=PutRefMouseIcon))
    PicturePtr MouseIcon;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum fmMousePointer MousePointer;
    __declspec(property(get=Get_Value,put=Put_Value))
    _bstr_t _Value;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(put=Put_Font_Reserved))
    FontPtr _Font_Reserved;

    //
    // Wrapper methods for error-handling
    //

    void PutAutoSize (
        VARIANT_BOOL fvbAutoSize );
    VARIANT_BOOL GetAutoSize ( );
    void PutBackColor (
        OLE_COLOR BackColor );
    OLE_COLOR GetBackColor ( );
    void PutBackStyle (
        enum fmBackStyle BackStyle );
    enum fmBackStyle GetBackStyle ( );
    void PutBorderColor (
        OLE_COLOR BorderColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderStyle (
        enum fmBorderStyle BorderStyle );
    enum fmBorderStyle GetBorderStyle ( );
    void PutCaption (
        _bstr_t bstrCaption );
    _bstr_t GetCaption ( );
    void PutEnabled (
        VARIANT_BOOL fEnabled );
    VARIANT_BOOL GetEnabled ( );
    void Put_Font_Reserved (
        struct Font * _arg1 );
    void PutRefFont (
        struct Font * Font );
    FontPtr GetFont ( );
    void PutFontItalic (
        VARIANT_BOOL FontItalic );
    VARIANT_BOOL GetFontItalic ( );
    void PutFontBold (
        VARIANT_BOOL FontBold );
    VARIANT_BOOL GetFontBold ( );
    void PutFontName (
        _bstr_t FontName );
    _bstr_t GetFontName ( );
    void PutFontSize (
        const CURRENCY & FontSize );
    CURRENCY GetFontSize ( );
    void PutFontStrikethru (
        VARIANT_BOOL FontStrikethru );
    VARIANT_BOOL GetFontStrikethru ( );
    void PutFontUnderline (
        VARIANT_BOOL FontUnderline );
    VARIANT_BOOL GetFontUnderline ( );
    void PutForeColor (
        OLE_COLOR ForeColor );
    OLE_COLOR GetForeColor ( );
    void PutMouseIcon (
        struct Picture * MouseIcon );
    void PutRefMouseIcon (
        struct Picture * MouseIcon );
    PicturePtr GetMouseIcon ( );
    void PutMousePointer (
        enum fmMousePointer MousePointer );
    enum fmMousePointer GetMousePointer ( );
    void PutPicture (
        struct Picture * pPicture );
    void PutRefPicture (
        struct Picture * pPicture );
    PicturePtr GetPicture ( );
    void PutPicturePosition (
        enum fmPicturePosition PicPos );
    enum fmPicturePosition GetPicturePosition ( );
    void PutSpecialEffect (
        enum fmSpecialEffect SpecialEffect );
    enum fmSpecialEffect GetSpecialEffect ( );
    void PutTextAlign (
        enum fmTextAlign TextAlign );
    enum fmTextAlign GetTextAlign ( );
    void PutWordWrap (
        VARIANT_BOOL WordWrap );
    VARIANT_BOOL GetWordWrap ( );
    void PutAccelerator (
        _bstr_t Accelerator );
    _bstr_t GetAccelerator ( );
    void PutFontWeight (
        short FontWeight );
    short GetFontWeight ( );
    void Put_Value (
        _bstr_t bstrCaption );
    _bstr_t Get_Value ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL fvbAutoSize ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * fvbAutoSize ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackStyle (
        /*[in]*/ enum fmBackStyle BackStyle ) = 0;
      virtual HRESULT __stdcall get_BackStyle (
        /*[out,retval]*/ enum fmBackStyle * BackStyle ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum fmBorderStyle BorderStyle ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum fmBorderStyle * BorderStyle ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR bstrCaption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * bstrCaption ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL fEnabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * fEnabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrikethru ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrikethru ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnderline ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnderline ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct Picture * pPicture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ struct Picture * pPicture ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct Picture * * pPicture ) = 0;
      virtual HRESULT __stdcall put_PicturePosition (
        /*[in]*/ enum fmPicturePosition PicPos ) = 0;
      virtual HRESULT __stdcall get_PicturePosition (
        /*[out,retval]*/ enum fmPicturePosition * PicPos ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmSpecialEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmSpecialEffect * SpecialEffect ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum fmTextAlign TextAlign ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum fmTextAlign * TextAlign ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ VARIANT_BOOL WordWrap ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ VARIANT_BOOL * WordWrap ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ BSTR Accelerator ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ BSTR * Accelerator ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
      virtual HRESULT __stdcall put__Value (
        /*[in]*/ BSTR bstrCaption ) = 0;
      virtual HRESULT __stdcall get__Value (
        /*[out,retval]*/ BSTR * bstrCaption ) = 0;
};

struct __declspec(uuid("04598fc4-866c-11cf-ab7c-00aa00c08fcf"))
ICommandButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    CURRENCY FontSize;
    __declspec(property(get=GetFontBold,put=PutFontBold))
    VARIANT_BOOL FontBold;
    __declspec(property(get=GetFontItalic,put=PutFontItalic))
    VARIANT_BOOL FontItalic;
    __declspec(property(get=GetFontUnderline,put=PutFontUnderline))
    VARIANT_BOOL FontUnderline;
    __declspec(property(get=GetFontStrikethru,put=PutFontStrikethru))
    VARIANT_BOOL FontStrikethru;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _bstr_t Accelerator;
    __declspec(property(get=GetBackStyle,put=PutBackStyle))
    enum fmBackStyle BackStyle;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    VARIANT_BOOL WordWrap;
    __declspec(property(get=GetPicturePosition,put=PutPicturePosition))
    enum fmPicturePosition PicturePosition;
    __declspec(property(get=GetFontWeight,put=PutFontWeight))
    short FontWeight;
    __declspec(property(get=GetPicture,put=PutRefPicture))
    PicturePtr Picture;
    __declspec(property(get=GetMouseIcon,put=PutRefMouseIcon))
    PicturePtr MouseIcon;
    __declspec(property(get=GetTakeFocusOnClick,put=PutTakeFocusOnClick))
    VARIANT_BOOL TakeFocusOnClick;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum fmMousePointer MousePointer;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(put=Put_Font_Reserved))
    FontPtr _Font_Reserved;

    //
    // Wrapper methods for error-handling
    //

    void PutAutoSize (
        VARIANT_BOOL fvbAutoSize );
    VARIANT_BOOL GetAutoSize ( );
    void PutBackColor (
        OLE_COLOR BackColor );
    OLE_COLOR GetBackColor ( );
    void PutBackStyle (
        enum fmBackStyle BackStyle );
    enum fmBackStyle GetBackStyle ( );
    void PutCaption (
        _bstr_t bstrCaption );
    _bstr_t GetCaption ( );
    void PutEnabled (
        VARIANT_BOOL fEnabled );
    VARIANT_BOOL GetEnabled ( );
    void Put_Font_Reserved (
        struct Font * _arg1 );
    void PutRefFont (
        struct Font * Font );
    FontPtr GetFont ( );
    void PutFontBold (
        VARIANT_BOOL FontBold );
    VARIANT_BOOL GetFontBold ( );
    void PutFontItalic (
        VARIANT_BOOL FontItalic );
    VARIANT_BOOL GetFontItalic ( );
    void PutFontName (
        _bstr_t FontName );
    _bstr_t GetFontName ( );
    void PutFontSize (
        const CURRENCY & FontSize );
    CURRENCY GetFontSize ( );
    void PutFontStrikethru (
        VARIANT_BOOL FontStrikethru );
    VARIANT_BOOL GetFontStrikethru ( );
    void PutFontUnderline (
        VARIANT_BOOL FontUnderline );
    VARIANT_BOOL GetFontUnderline ( );
    void PutForeColor (
        OLE_COLOR ForeColor );
    OLE_COLOR GetForeColor ( );
    void PutTakeFocusOnClick (
        VARIANT_BOOL TakeFocusOnClick );
    VARIANT_BOOL GetTakeFocusOnClick ( );
    void PutLocked (
        VARIANT_BOOL fLocked );
    VARIANT_BOOL GetLocked ( );
    void PutMouseIcon (
        struct Picture * MouseIcon );
    void PutRefMouseIcon (
        struct Picture * MouseIcon );
    PicturePtr GetMouseIcon ( );
    void PutMousePointer (
        enum fmMousePointer mouseptr );
    enum fmMousePointer GetMousePointer ( );
    void PutPicture (
        struct Picture * Picture );
    void PutRefPicture (
        struct Picture * Picture );
    PicturePtr GetPicture ( );
    void PutPicturePosition (
        enum fmPicturePosition PicturePosition );
    enum fmPicturePosition GetPicturePosition ( );
    void PutAccelerator (
        _bstr_t Accelerator );
    _bstr_t GetAccelerator ( );
    void PutWordWrap (
        VARIANT_BOOL WordWrap );
    VARIANT_BOOL GetWordWrap ( );
    void PutValue (
        VARIANT_BOOL fValue );
    VARIANT_BOOL GetValue ( );
    void PutFontWeight (
        short FontWeight );
    short GetFontWeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL fvbAutoSize ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * fvbAutoSize ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackStyle (
        /*[in]*/ enum fmBackStyle BackStyle ) = 0;
      virtual HRESULT __stdcall get_BackStyle (
        /*[out,retval]*/ enum fmBackStyle * BackStyle ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR bstrCaption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * bstrCaption ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL fEnabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * fEnabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrikethru ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrikethru ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnderline ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnderline ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_TakeFocusOnClick (
        /*[in]*/ VARIANT_BOOL TakeFocusOnClick ) = 0;
      virtual HRESULT __stdcall get_TakeFocusOnClick (
        /*[out,retval]*/ VARIANT_BOOL * TakeFocusOnClick ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL fLocked ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * fLocked ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer mouseptr ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * mouseptr ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct Picture * * Picture ) = 0;
      virtual HRESULT __stdcall put_PicturePosition (
        /*[in]*/ enum fmPicturePosition PicturePosition ) = 0;
      virtual HRESULT __stdcall get_PicturePosition (
        /*[out,retval]*/ enum fmPicturePosition * PicturePosition ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ BSTR Accelerator ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ BSTR * Accelerator ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ VARIANT_BOOL WordWrap ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ VARIANT_BOOL * WordWrap ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT_BOOL fValue ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT_BOOL * fValue ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
};

struct __declspec(uuid("8bd21d13-ec42-11ce-9e0d-00aa006002f3"))
IMdcText : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    enum fmTextAlign TextAlign;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    CURRENCY FontSize;
    __declspec(property(get=GetFontBold,put=PutFontBold))
    VARIANT_BOOL FontBold;
    __declspec(property(get=GetFontItalic,put=PutFontItalic))
    VARIANT_BOOL FontItalic;
    __declspec(property(get=GetFontUnderline,put=PutFontUnderline))
    VARIANT_BOOL FontUnderline;
    __declspec(property(get=GetFontStrikethru,put=PutFontStrikethru))
    VARIANT_BOOL FontStrikethru;
    __declspec(property(get=GetFontWeight,put=PutFontWeight))
    short FontWeight;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    enum fmBorderStyle BorderStyle;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetBackStyle,put=PutBackStyle))
    enum fmBackStyle BackStyle;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetSpecialEffect,put=PutSpecialEffect))
    enum fmSpecialEffect SpecialEffect;
    __declspec(property(get=GetBordersSuppress,put=PutBordersSuppress))
    VARIANT_BOOL BordersSuppress;
    __declspec(property(get=GetCanPaste))
    VARIANT_BOOL CanPaste;
    __declspec(property(get=GetIntegralHeight,put=PutIntegralHeight))
    VARIANT_BOOL IntegralHeight;
    __declspec(property(get=GetHideSelection,put=PutHideSelection))
    VARIANT_BOOL HideSelection;
    __declspec(property(get=GetSelLength,put=PutSelLength))
    long SelLength;
    __declspec(property(get=GetSelStart,put=PutSelStart))
    long SelStart;
    __declspec(property(get=GetSelText,put=PutSelText))
    _bstr_t SelText;
    __declspec(property(get=GetCurX,put=PutCurX))
    long CurX;
    __declspec(property(get=GetEnterKeyBehavior,put=PutEnterKeyBehavior))
    VARIANT_BOOL EnterKeyBehavior;
    __declspec(property(get=GetCurY,put=PutCurY))
    long CurY;
    __declspec(property(get=GetCurTargetX))
    long CurTargetX;
    __declspec(property(get=GetCurLine,put=PutCurLine))
    long CurLine;
    __declspec(property(get=GetLineCount))
    long LineCount;
    __declspec(property(get=GetAutoTab,put=PutAutoTab))
    VARIANT_BOOL AutoTab;
    __declspec(property(get=GetAutoWordSelect,put=PutAutoWordSelect))
    VARIANT_BOOL AutoWordSelect;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetSelectionMargin,put=PutSelectionMargin))
    VARIANT_BOOL SelectionMargin;
    __declspec(property(get=GetScrollBars,put=PutScrollBars))
    enum fmScrollBars ScrollBars;
    __declspec(property(get=GetPasswordChar,put=PutPasswordChar))
    _bstr_t PasswordChar;
    __declspec(property(get=GetDropButtonStyle,put=PutDropButtonStyle))
    enum fmDropButtonStyle DropButtonStyle;
    __declspec(property(get=GetMaxLength,put=PutMaxLength))
    long MaxLength;
    __declspec(property(get=GetCurTargetY))
    long CurTargetY;
    __declspec(property(get=GetShowDropButtonWhen,put=PutShowDropButtonWhen))
    enum fmShowDropButtonWhen ShowDropButtonWhen;
    __declspec(property(get=GetTabKeyBehavior,put=PutTabKeyBehavior))
    VARIANT_BOOL TabKeyBehavior;
    __declspec(property(get=GetTextLength))
    long TextLength;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    VARIANT_BOOL WordWrap;
    __declspec(property(get=GetIMEMode,put=PutIMEMode))
    enum fmIMEMode IMEMode;
    __declspec(property(get=GetEnterFieldBehavior,put=PutEnterFieldBehavior))
    enum fmEnterFieldBehavior EnterFieldBehavior;
    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetDragBehavior,put=PutDragBehavior))
    enum fmDragBehavior DragBehavior;
    __declspec(property(get=GetMouseIcon,put=PutRefMouseIcon))
    PicturePtr MouseIcon;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum fmMousePointer MousePointer;
    __declspec(property(get=GetDisplayStyle))
    enum fmDisplayStyle DisplayStyle;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(put=Put_Font_Reserved))
    FontPtr _Font_Reserved;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;

    //
    // Wrapper methods for error-handling
    //

    void PutAutoSize (
        VARIANT_BOOL AutoSize );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoTab (
        VARIANT_BOOL AutoTab );
    VARIANT_BOOL GetAutoTab ( );
    void PutAutoWordSelect (
        VARIANT_BOOL AutoWordSelect );
    VARIANT_BOOL GetAutoWordSelect ( );
    void PutBackColor (
        OLE_COLOR BackColor );
    OLE_COLOR GetBackColor ( );
    void PutBackStyle (
        enum fmBackStyle BackStyle );
    enum fmBackStyle GetBackStyle ( );
    void PutBorderColor (
        OLE_COLOR BorderColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderStyle (
        enum fmBorderStyle BorderStyle );
    enum fmBorderStyle GetBorderStyle ( );
    void PutBordersSuppress (
        VARIANT_BOOL BordersSuppress );
    VARIANT_BOOL GetBordersSuppress ( );
    VARIANT_BOOL GetCanPaste ( );
    void PutCurLine (
        long CurLine );
    long GetCurLine ( );
    long GetCurTargetX ( );
    long GetCurTargetY ( );
    void PutCurX (
        long CurX );
    long GetCurX ( );
    void PutCurY (
        long CurY );
    long GetCurY ( );
    void PutDropButtonStyle (
        enum fmDropButtonStyle DropButtonStyle );
    enum fmDropButtonStyle GetDropButtonStyle ( );
    void PutEnterKeyBehavior (
        VARIANT_BOOL EnterKeyBehavior );
    VARIANT_BOOL GetEnterKeyBehavior ( );
    void PutEnabled (
        VARIANT_BOOL Enabled );
    VARIANT_BOOL GetEnabled ( );
    void Put_Font_Reserved (
        struct Font * _arg1 );
    void PutRefFont (
        struct Font * Font );
    FontPtr GetFont ( );
    void PutFontBold (
        VARIANT_BOOL FontBold );
    VARIANT_BOOL GetFontBold ( );
    void PutFontItalic (
        VARIANT_BOOL FontItalic );
    VARIANT_BOOL GetFontItalic ( );
    void PutFontName (
        _bstr_t FontName );
    _bstr_t GetFontName ( );
    void PutFontSize (
        const CURRENCY & FontSize );
    CURRENCY GetFontSize ( );
    void PutFontStrikethru (
        VARIANT_BOOL FontStrikethru );
    VARIANT_BOOL GetFontStrikethru ( );
    void PutFontUnderline (
        VARIANT_BOOL FontUnderline );
    VARIANT_BOOL GetFontUnderline ( );
    void PutFontWeight (
        short FontWeight );
    short GetFontWeight ( );
    void PutForeColor (
        OLE_COLOR ForeColor );
    OLE_COLOR GetForeColor ( );
    void PutHideSelection (
        VARIANT_BOOL HideSelection );
    VARIANT_BOOL GetHideSelection ( );
    void PutIntegralHeight (
        VARIANT_BOOL IntegralHeight );
    VARIANT_BOOL GetIntegralHeight ( );
    long GetLineCount ( );
    void PutLocked (
        VARIANT_BOOL Locked );
    VARIANT_BOOL GetLocked ( );
    void PutMaxLength (
        long MaxLength );
    long GetMaxLength ( );
    void PutMouseIcon (
        struct Picture * MouseIcon );
    void PutRefMouseIcon (
        struct Picture * MouseIcon );
    PicturePtr GetMouseIcon ( );
    void PutMousePointer (
        enum fmMousePointer MousePointer );
    enum fmMousePointer GetMousePointer ( );
    void PutMultiLine (
        VARIANT_BOOL MultiLine );
    VARIANT_BOOL GetMultiLine ( );
    void PutPasswordChar (
        _bstr_t PasswordChar );
    _bstr_t GetPasswordChar ( );
    void PutScrollBars (
        enum fmScrollBars ScrollBars );
    enum fmScrollBars GetScrollBars ( );
    void PutSelectionMargin (
        VARIANT_BOOL SelectionMargin );
    VARIANT_BOOL GetSelectionMargin ( );
    void PutSelLength (
        long SelLength );
    long GetSelLength ( );
    void PutSelStart (
        long SelStart );
    long GetSelStart ( );
    void PutSelText (
        _bstr_t SelText );
    _bstr_t GetSelText ( );
    void PutShowDropButtonWhen (
        enum fmShowDropButtonWhen ShowDropButtonWhen );
    enum fmShowDropButtonWhen GetShowDropButtonWhen ( );
    void PutSpecialEffect (
        enum fmSpecialEffect SpecialEffect );
    enum fmSpecialEffect GetSpecialEffect ( );
    void PutTabKeyBehavior (
        VARIANT_BOOL TabKeyBehavior );
    VARIANT_BOOL GetTabKeyBehavior ( );
    void PutText (
        _bstr_t Text );
    _bstr_t GetText ( );
    void PutTextAlign (
        enum fmTextAlign TextAlign );
    enum fmTextAlign GetTextAlign ( );
    long GetTextLength ( );
    VARIANT_BOOL GetValid ( );
    void PutValue (
        VARIANT * Value );
    _variant_t GetValue ( );
    void PutWordWrap (
        VARIANT_BOOL WordWrap );
    VARIANT_BOOL GetWordWrap ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Paste ( );
    void PutIMEMode (
        enum fmIMEMode IMEMode );
    enum fmIMEMode GetIMEMode ( );
    void PutEnterFieldBehavior (
        enum fmEnterFieldBehavior EnterFieldBehavior );
    enum fmEnterFieldBehavior GetEnterFieldBehavior ( );
    void PutDragBehavior (
        enum fmDragBehavior DragBehavior );
    enum fmDragBehavior GetDragBehavior ( );
    enum fmDisplayStyle GetDisplayStyle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL AutoSize ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * AutoSize ) = 0;
      virtual HRESULT __stdcall put_AutoTab (
        /*[in]*/ VARIANT_BOOL AutoTab ) = 0;
      virtual HRESULT __stdcall get_AutoTab (
        /*[out,retval]*/ VARIANT_BOOL * AutoTab ) = 0;
      virtual HRESULT __stdcall put_AutoWordSelect (
        /*[in]*/ VARIANT_BOOL AutoWordSelect ) = 0;
      virtual HRESULT __stdcall get_AutoWordSelect (
        /*[out,retval]*/ VARIANT_BOOL * AutoWordSelect ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackStyle (
        /*[in]*/ enum fmBackStyle BackStyle ) = 0;
      virtual HRESULT __stdcall get_BackStyle (
        /*[out,retval]*/ enum fmBackStyle * BackStyle ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum fmBorderStyle BorderStyle ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum fmBorderStyle * BorderStyle ) = 0;
      virtual HRESULT __stdcall put_BordersSuppress (
        /*[in]*/ VARIANT_BOOL BordersSuppress ) = 0;
      virtual HRESULT __stdcall get_BordersSuppress (
        /*[out,retval]*/ VARIANT_BOOL * BordersSuppress ) = 0;
      virtual HRESULT __stdcall get_CanPaste (
        /*[out,retval]*/ VARIANT_BOOL * CanPaste ) = 0;
      virtual HRESULT __stdcall put_CurLine (
        /*[in]*/ long CurLine ) = 0;
      virtual HRESULT __stdcall get_CurLine (
        /*[out,retval]*/ long * CurLine ) = 0;
      virtual HRESULT __stdcall get_CurTargetX (
        /*[out,retval]*/ long * CurTargetX ) = 0;
      virtual HRESULT __stdcall get_CurTargetY (
        /*[out,retval]*/ long * CurTargetY ) = 0;
      virtual HRESULT __stdcall put_CurX (
        /*[in]*/ long CurX ) = 0;
      virtual HRESULT __stdcall get_CurX (
        /*[out,retval]*/ long * CurX ) = 0;
      virtual HRESULT __stdcall put_CurY (
        /*[in]*/ long CurY ) = 0;
      virtual HRESULT __stdcall get_CurY (
        /*[out,retval]*/ long * CurY ) = 0;
      virtual HRESULT __stdcall put_DropButtonStyle (
        /*[in]*/ enum fmDropButtonStyle DropButtonStyle ) = 0;
      virtual HRESULT __stdcall get_DropButtonStyle (
        /*[out,retval]*/ enum fmDropButtonStyle * DropButtonStyle ) = 0;
      virtual HRESULT __stdcall put_EnterKeyBehavior (
        /*[in]*/ VARIANT_BOOL EnterKeyBehavior ) = 0;
      virtual HRESULT __stdcall get_EnterKeyBehavior (
        /*[out,retval]*/ VARIANT_BOOL * EnterKeyBehavior ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrikethru ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrikethru ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnderline ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnderline ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_HideSelection (
        /*[in]*/ VARIANT_BOOL HideSelection ) = 0;
      virtual HRESULT __stdcall get_HideSelection (
        /*[out,retval]*/ VARIANT_BOOL * HideSelection ) = 0;
      virtual HRESULT __stdcall put_IntegralHeight (
        /*[in]*/ VARIANT_BOOL IntegralHeight ) = 0;
      virtual HRESULT __stdcall get_IntegralHeight (
        /*[out,retval]*/ VARIANT_BOOL * IntegralHeight ) = 0;
      virtual HRESULT __stdcall get_LineCount (
        /*[out,retval]*/ long * LineCount ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL Locked ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * Locked ) = 0;
      virtual HRESULT __stdcall put_MaxLength (
        /*[in]*/ long MaxLength ) = 0;
      virtual HRESULT __stdcall get_MaxLength (
        /*[out,retval]*/ long * MaxLength ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_MultiLine (
        /*[in]*/ VARIANT_BOOL MultiLine ) = 0;
      virtual HRESULT __stdcall get_MultiLine (
        /*[out,retval]*/ VARIANT_BOOL * MultiLine ) = 0;
      virtual HRESULT __stdcall put_PasswordChar (
        /*[in]*/ BSTR PasswordChar ) = 0;
      virtual HRESULT __stdcall get_PasswordChar (
        /*[out,retval]*/ BSTR * PasswordChar ) = 0;
      virtual HRESULT __stdcall put_ScrollBars (
        /*[in]*/ enum fmScrollBars ScrollBars ) = 0;
      virtual HRESULT __stdcall get_ScrollBars (
        /*[out,retval]*/ enum fmScrollBars * ScrollBars ) = 0;
      virtual HRESULT __stdcall put_SelectionMargin (
        /*[in]*/ VARIANT_BOOL SelectionMargin ) = 0;
      virtual HRESULT __stdcall get_SelectionMargin (
        /*[out,retval]*/ VARIANT_BOOL * SelectionMargin ) = 0;
      virtual HRESULT __stdcall put_SelLength (
        /*[in]*/ long SelLength ) = 0;
      virtual HRESULT __stdcall get_SelLength (
        /*[out,retval]*/ long * SelLength ) = 0;
      virtual HRESULT __stdcall put_SelStart (
        /*[in]*/ long SelStart ) = 0;
      virtual HRESULT __stdcall get_SelStart (
        /*[out,retval]*/ long * SelStart ) = 0;
      virtual HRESULT __stdcall put_SelText (
        /*[in]*/ BSTR SelText ) = 0;
      virtual HRESULT __stdcall get_SelText (
        /*[out,retval]*/ BSTR * SelText ) = 0;
      virtual HRESULT __stdcall put_ShowDropButtonWhen (
        /*[in]*/ enum fmShowDropButtonWhen ShowDropButtonWhen ) = 0;
      virtual HRESULT __stdcall get_ShowDropButtonWhen (
        /*[out,retval]*/ enum fmShowDropButtonWhen * ShowDropButtonWhen ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmSpecialEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmSpecialEffect * SpecialEffect ) = 0;
      virtual HRESULT __stdcall put_TabKeyBehavior (
        /*[in]*/ VARIANT_BOOL TabKeyBehavior ) = 0;
      virtual HRESULT __stdcall get_TabKeyBehavior (
        /*[out,retval]*/ VARIANT_BOOL * TabKeyBehavior ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum fmTextAlign TextAlign ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum fmTextAlign * TextAlign ) = 0;
      virtual HRESULT __stdcall get_TextLength (
        /*[out,retval]*/ long * TextLength ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * Valid ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ VARIANT_BOOL WordWrap ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ VARIANT_BOOL * WordWrap ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall put_IMEMode (
        /*[in]*/ enum fmIMEMode IMEMode ) = 0;
      virtual HRESULT __stdcall get_IMEMode (
        /*[out,retval]*/ enum fmIMEMode * IMEMode ) = 0;
      virtual HRESULT __stdcall put_EnterFieldBehavior (
        /*[in]*/ enum fmEnterFieldBehavior EnterFieldBehavior ) = 0;
      virtual HRESULT __stdcall get_EnterFieldBehavior (
        /*[out,retval]*/ enum fmEnterFieldBehavior * EnterFieldBehavior ) = 0;
      virtual HRESULT __stdcall put_DragBehavior (
        /*[in]*/ enum fmDragBehavior DragBehavior ) = 0;
      virtual HRESULT __stdcall get_DragBehavior (
        /*[out,retval]*/ enum fmDragBehavior * DragBehavior ) = 0;
      virtual HRESULT __stdcall get_DisplayStyle (
        /*[out,retval]*/ enum fmDisplayStyle * DisplayStyle ) = 0;
};

struct __declspec(uuid("8bd21d23-ec42-11ce-9e0d-00aa006002f3"))
IMdcList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    CURRENCY FontSize;
    __declspec(property(get=GetFontBold,put=PutFontBold))
    VARIANT_BOOL FontBold;
    __declspec(property(get=GetFontItalic,put=PutFontItalic))
    VARIANT_BOOL FontItalic;
    __declspec(property(get=GetFontUnderline,put=PutFontUnderline))
    VARIANT_BOOL FontUnderline;
    __declspec(property(get=GetFontStrikethru,put=PutFontStrikethru))
    VARIANT_BOOL FontStrikethru;
    __declspec(property(get=GetFontWeight,put=PutFontWeight))
    short FontWeight;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    enum fmBorderStyle BorderStyle;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetSpecialEffect,put=PutSpecialEffect))
    enum fmSpecialEffect SpecialEffect;
    __declspec(property(get=GetMatchEntry,put=PutMatchEntry))
    enum fmMatchEntry MatchEntry;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    enum fmTextAlign TextAlign;
    __declspec(property(get=GetBordersSuppress,put=PutBordersSuppress))
    VARIANT_BOOL BordersSuppress;
    __declspec(property(get=GetColumnCount,put=PutColumnCount))
    long ColumnCount;
    __declspec(property(get=GetColumnHeads,put=PutColumnHeads))
    VARIANT_BOOL ColumnHeads;
    __declspec(property(get=GetColumnWidths,put=PutColumnWidths))
    _bstr_t ColumnWidths;
    __declspec(property(get=GetIntegralHeight,put=PutIntegralHeight))
    VARIANT_BOOL IntegralHeight;
    __declspec(property(get=GetIMEMode,put=PutIMEMode))
    enum fmIMEMode IMEMode;
    __declspec(property(get=GetDisplayStyle))
    enum fmDisplayStyle DisplayStyle;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    enum fmMultiSelect MultiSelect;
    __declspec(property(get=GetListStyle,put=PutListStyle))
    enum fmListStyle ListStyle;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetSelected,put=PutSelected))
    VARIANT_BOOL Selected[];
    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetMouseIcon,put=PutRefMouseIcon))
    PicturePtr MouseIcon;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum fmMousePointer MousePointer;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetListCursor,put=PutListCursor))
    PIROWSET ListCursor;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(put=Put_Font_Reserved))
    FontPtr _Font_Reserved;

    //
    // Wrapper methods for error-handling
    //

    void PutBackColor (
        OLE_COLOR BackColor );
    OLE_COLOR GetBackColor ( );
    void PutBorderColor (
        OLE_COLOR BorderColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderStyle (
        enum fmBorderStyle BorderStyle );
    enum fmBorderStyle GetBorderStyle ( );
    void PutBordersSuppress (
        VARIANT_BOOL BordersSuppress );
    VARIANT_BOOL GetBordersSuppress ( );
    void PutBoundColumn (
        VARIANT * BoundColumn );
    _variant_t GetBoundColumn ( );
    void PutColumnCount (
        long ColumnCount );
    long GetColumnCount ( );
    void PutColumnHeads (
        VARIANT_BOOL ColumnHeads );
    VARIANT_BOOL GetColumnHeads ( );
    void PutColumnWidths (
        _bstr_t ColumnWidths );
    _bstr_t GetColumnWidths ( );
    void PutEnabled (
        VARIANT_BOOL Enabled );
    VARIANT_BOOL GetEnabled ( );
    void Put_Font_Reserved (
        struct Font * _arg1 );
    void PutRefFont (
        struct Font * Font );
    FontPtr GetFont ( );
    void PutFontBold (
        VARIANT_BOOL FontBold );
    VARIANT_BOOL GetFontBold ( );
    void PutFontItalic (
        VARIANT_BOOL FontItalic );
    VARIANT_BOOL GetFontItalic ( );
    void PutFontName (
        _bstr_t FontName );
    _bstr_t GetFontName ( );
    void PutFontSize (
        const CURRENCY & FontSize );
    CURRENCY GetFontSize ( );
    void PutFontStrikethru (
        VARIANT_BOOL FontStrikethru );
    VARIANT_BOOL GetFontStrikethru ( );
    void PutFontUnderline (
        VARIANT_BOOL FontUnderline );
    VARIANT_BOOL GetFontUnderline ( );
    void PutFontWeight (
        short FontWeight );
    short GetFontWeight ( );
    void PutForeColor (
        OLE_COLOR ForeColor );
    OLE_COLOR GetForeColor ( );
    void PutIntegralHeight (
        VARIANT_BOOL IntegralHeight );
    VARIANT_BOOL GetIntegralHeight ( );
    long GetListCount ( );
    void PutListCursor (
        PIROWSET ListCursor );
    PIROWSET GetListCursor ( );
    void PutListIndex (
        VARIANT * ListIndex );
    _variant_t GetListIndex ( );
    void PutListStyle (
        enum fmListStyle ListStyle );
    enum fmListStyle GetListStyle ( );
    void PutListWidth (
        VARIANT * ListWidth );
    _variant_t GetListWidth ( );
    void PutLocked (
        VARIANT_BOOL Locked );
    VARIANT_BOOL GetLocked ( );
    void PutMatchEntry (
        enum fmMatchEntry MatchEntry );
    enum fmMatchEntry GetMatchEntry ( );
    void PutMouseIcon (
        struct Picture * MouseIcon );
    void PutRefMouseIcon (
        struct Picture * MouseIcon );
    PicturePtr GetMouseIcon ( );
    void PutMousePointer (
        enum fmMousePointer MousePointer );
    enum fmMousePointer GetMousePointer ( );
    void PutMultiSelect (
        enum fmMultiSelect MultiSelect );
    enum fmMultiSelect GetMultiSelect ( );
    void PutSpecialEffect (
        enum fmSpecialEffect SpecialEffect );
    enum fmSpecialEffect GetSpecialEffect ( );
    void PutText (
        _bstr_t Text );
    _bstr_t GetText ( );
    void PutTextColumn (
        VARIANT * TextColumn );
    _variant_t GetTextColumn ( );
    void PutTopIndex (
        VARIANT * TopIndex );
    _variant_t GetTopIndex ( );
    VARIANT_BOOL GetValid ( );
    void PutValue (
        VARIANT * Value );
    _variant_t GetValue ( );
    _variant_t GetColumn (
        VARIANT * pvargColumn = &vtMissing,
        VARIANT * pvargIndex = &vtMissing );
    void PutColumn (
        VARIANT * pvargColumn,
        VARIANT * pvargIndex = &vtMissing,
        VARIANT * pvargValue = &vtMissing );
    _variant_t GetList (
        VARIANT * pvargIndex = &vtMissing,
        VARIANT * pvargColumn = &vtMissing );
    void PutList (
        VARIANT * pvargIndex,
        VARIANT * pvargColumn = &vtMissing,
        VARIANT * pvargValue = &vtMissing );
    VARIANT_BOOL GetSelected (
        VARIANT * pvargIndex );
    void PutSelected (
        VARIANT * pvargIndex,
        VARIANT_BOOL pfvb );
    HRESULT AddItem (
        VARIANT * pvargItem = &vtMissing,
        VARIANT * pvargIndex = &vtMissing );
    HRESULT Clear ( );
    HRESULT RemoveItem (
        VARIANT * pvargIndex );
    void PutIMEMode (
        enum fmIMEMode IMEMode );
    enum fmIMEMode GetIMEMode ( );
    enum fmDisplayStyle GetDisplayStyle ( );
    void PutTextAlign (
        enum fmTextAlign TextAlign );
    enum fmTextAlign GetTextAlign ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum fmBorderStyle BorderStyle ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum fmBorderStyle * BorderStyle ) = 0;
      virtual HRESULT __stdcall put_BordersSuppress (
        /*[in]*/ VARIANT_BOOL BordersSuppress ) = 0;
      virtual HRESULT __stdcall get_BordersSuppress (
        /*[out,retval]*/ VARIANT_BOOL * BordersSuppress ) = 0;
      virtual HRESULT __stdcall put_BoundColumn (
        /*[in]*/ VARIANT * BoundColumn ) = 0;
      virtual HRESULT __stdcall get_BoundColumn (
        /*[out,retval]*/ VARIANT * BoundColumn ) = 0;
      virtual HRESULT __stdcall put_ColumnCount (
        /*[in]*/ long ColumnCount ) = 0;
      virtual HRESULT __stdcall get_ColumnCount (
        /*[out,retval]*/ long * ColumnCount ) = 0;
      virtual HRESULT __stdcall put_ColumnHeads (
        /*[in]*/ VARIANT_BOOL ColumnHeads ) = 0;
      virtual HRESULT __stdcall get_ColumnHeads (
        /*[out,retval]*/ VARIANT_BOOL * ColumnHeads ) = 0;
      virtual HRESULT __stdcall put_ColumnWidths (
        /*[in]*/ BSTR ColumnWidths ) = 0;
      virtual HRESULT __stdcall get_ColumnWidths (
        /*[out,retval]*/ BSTR * ColumnWidths ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrikethru ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrikethru ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnderline ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnderline ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_IntegralHeight (
        /*[in]*/ VARIANT_BOOL IntegralHeight ) = 0;
      virtual HRESULT __stdcall get_IntegralHeight (
        /*[out,retval]*/ VARIANT_BOOL * IntegralHeight ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ long * ListCount ) = 0;
      virtual HRESULT __stdcall put_ListCursor (
        /*[in]*/ PIROWSET ListCursor ) = 0;
      virtual HRESULT __stdcall get_ListCursor (
        /*[out,retval]*/ PIROWSET * ListCursor ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ VARIANT * ListIndex ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ VARIANT * ListIndex ) = 0;
      virtual HRESULT __stdcall put_ListStyle (
        /*[in]*/ enum fmListStyle ListStyle ) = 0;
      virtual HRESULT __stdcall get_ListStyle (
        /*[out,retval]*/ enum fmListStyle * ListStyle ) = 0;
      virtual HRESULT __stdcall put_ListWidth (
        /*[in]*/ VARIANT * ListWidth ) = 0;
      virtual HRESULT __stdcall get_ListWidth (
        /*[out,retval]*/ VARIANT * ListWidth ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL Locked ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * Locked ) = 0;
      virtual HRESULT __stdcall put_MatchEntry (
        /*[in]*/ enum fmMatchEntry MatchEntry ) = 0;
      virtual HRESULT __stdcall get_MatchEntry (
        /*[out,retval]*/ enum fmMatchEntry * MatchEntry ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ enum fmMultiSelect MultiSelect ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ enum fmMultiSelect * MultiSelect ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmSpecialEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmSpecialEffect * SpecialEffect ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TextColumn (
        /*[in]*/ VARIANT * TextColumn ) = 0;
      virtual HRESULT __stdcall get_TextColumn (
        /*[out,retval]*/ VARIANT * TextColumn ) = 0;
      virtual HRESULT __stdcall put_TopIndex (
        /*[in]*/ VARIANT * TopIndex ) = 0;
      virtual HRESULT __stdcall get_TopIndex (
        /*[out,retval]*/ VARIANT * TopIndex ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * Valid ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[in]*/ VARIANT * pvargColumn,
        /*[in]*/ VARIANT * pvargIndex,
        /*[out,retval]*/ VARIANT * pvargValue ) = 0;
      virtual HRESULT __stdcall put_Column (
        /*[in]*/ VARIANT * pvargColumn,
        /*[in]*/ VARIANT * pvargIndex = &vtMissing,
        /*[in]*/ VARIANT * pvargValue = &vtMissing ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT * pvargIndex,
        /*[in]*/ VARIANT * pvargColumn,
        /*[out,retval]*/ VARIANT * pvargValue ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT * pvargIndex,
        /*[in]*/ VARIANT * pvargColumn = &vtMissing,
        /*[in]*/ VARIANT * pvargValue = &vtMissing ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT * pvargIndex,
        /*[out,retval]*/ VARIANT_BOOL * pfvb ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT * pvargIndex,
        /*[in]*/ VARIANT_BOOL pfvb ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT * pvargItem = &vtMissing,
        /*[in]*/ VARIANT * pvargIndex = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ VARIANT * pvargIndex ) = 0;
      virtual HRESULT __stdcall put_IMEMode (
        /*[in]*/ enum fmIMEMode IMEMode ) = 0;
      virtual HRESULT __stdcall get_IMEMode (
        /*[out,retval]*/ enum fmIMEMode * IMEMode ) = 0;
      virtual HRESULT __stdcall get_DisplayStyle (
        /*[out,retval]*/ enum fmDisplayStyle * DisplayStyle ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum fmTextAlign TextAlign ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum fmTextAlign * TextAlign ) = 0;
};

struct __declspec(uuid("8bd21d33-ec42-11ce-9e0d-00aa006002f3"))
IMdcCombo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectionMargin,put=PutSelectionMargin))
    VARIANT_BOOL SelectionMargin;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    CURRENCY FontSize;
    __declspec(property(get=GetFontBold,put=PutFontBold))
    VARIANT_BOOL FontBold;
    __declspec(property(get=GetFontItalic,put=PutFontItalic))
    VARIANT_BOOL FontItalic;
    __declspec(property(get=GetFontUnderline,put=PutFontUnderline))
    VARIANT_BOOL FontUnderline;
    __declspec(property(get=GetFontStrikethru,put=PutFontStrikethru))
    VARIANT_BOOL FontStrikethru;
    __declspec(property(get=GetFontWeight,put=PutFontWeight))
    short FontWeight;
    __declspec(property(get=GetCurTargetY))
    long CurTargetY;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetMouseIcon,put=PutRefMouseIcon))
    PicturePtr MouseIcon;
    __declspec(property(get=GetSpecialEffect,put=PutSpecialEffect))
    enum fmSpecialEffect SpecialEffect;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum fmMousePointer MousePointer;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(put=Put_Font_Reserved))
    FontPtr _Font_Reserved;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;
    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetBordersSuppress,put=PutBordersSuppress))
    VARIANT_BOOL BordersSuppress;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    enum fmBorderStyle BorderStyle;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBackStyle,put=PutBackStyle))
    enum fmBackStyle BackStyle;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetCanPaste))
    VARIANT_BOOL CanPaste;
    __declspec(property(get=GetEnterFieldBehavior,put=PutEnterFieldBehavior))
    enum fmEnterFieldBehavior EnterFieldBehavior;
    __declspec(property(get=GetDragBehavior,put=PutDragBehavior))
    enum fmDragBehavior DragBehavior;
    __declspec(property(get=GetColumnCount,put=PutColumnCount))
    long ColumnCount;
    __declspec(property(get=GetColumnHeads,put=PutColumnHeads))
    VARIANT_BOOL ColumnHeads;
    __declspec(property(get=GetColumnWidths,put=PutColumnWidths))
    _bstr_t ColumnWidths;
    __declspec(property(get=GetListRows,put=PutListRows))
    long ListRows;
    __declspec(property(get=GetMatchRequired,put=PutMatchRequired))
    VARIANT_BOOL MatchRequired;
    __declspec(property(get=GetMatchEntry,put=PutMatchEntry))
    enum fmMatchEntry MatchEntry;
    __declspec(property(get=GetMatchFound))
    VARIANT_BOOL MatchFound;
    __declspec(property(get=GetListCursor,put=PutListCursor))
    PIROWSET ListCursor;
    __declspec(property(get=GetShowDropButtonWhen,put=PutShowDropButtonWhen))
    enum fmShowDropButtonWhen ShowDropButtonWhen;
    __declspec(property(get=GetDropButtonStyle,put=PutDropButtonStyle))
    enum fmDropButtonStyle DropButtonStyle;
    __declspec(property(get=GetListStyle,put=PutListStyle))
    enum fmListStyle ListStyle;
    __declspec(property(get=GetSelLength,put=PutSelLength))
    long SelLength;
    __declspec(property(get=GetSelStart,put=PutSelStart))
    long SelStart;
    __declspec(property(get=GetSelText,put=PutSelText))
    _bstr_t SelText;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum fmStyle Style;
    __declspec(property(get=GetIMEMode,put=PutIMEMode))
    enum fmIMEMode IMEMode;
    __declspec(property(get=GetDisplayStyle))
    enum fmDisplayStyle DisplayStyle;
    __declspec(property(get=GetHideSelection,put=PutHideSelection))
    VARIANT_BOOL HideSelection;
    __declspec(property(get=GetCurX,put=PutCurX))
    long CurX;
    __declspec(property(get=GetCurTargetX))
    long CurTargetX;
    __declspec(property(get=GetMaxLength,put=PutMaxLength))
    long MaxLength;
    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    enum fmTextAlign TextAlign;
    __declspec(property(get=GetLineCount))
    long LineCount;
    __declspec(property(get=GetTextLength))
    long TextLength;
    __declspec(property(get=GetAutoTab,put=PutAutoTab))
    VARIANT_BOOL AutoTab;
    __declspec(property(get=GetAutoWordSelect,put=PutAutoWordSelect))
    VARIANT_BOOL AutoWordSelect;
    __declspec(property(get=GetListCount))
    long ListCount;

    //
    // Wrapper methods for error-handling
    //

    void PutAutoSize (
        VARIANT_BOOL AutoSize );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoTab (
        VARIANT_BOOL AutoTab );
    VARIANT_BOOL GetAutoTab ( );
    void PutAutoWordSelect (
        VARIANT_BOOL AutoWordSelect );
    VARIANT_BOOL GetAutoWordSelect ( );
    void PutBackColor (
        OLE_COLOR BackColor );
    OLE_COLOR GetBackColor ( );
    void PutBackStyle (
        enum fmBackStyle BackStyle );
    enum fmBackStyle GetBackStyle ( );
    void PutBorderColor (
        OLE_COLOR BorderColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderStyle (
        enum fmBorderStyle BorderStyle );
    enum fmBorderStyle GetBorderStyle ( );
    void PutBordersSuppress (
        VARIANT_BOOL BordersSuppress );
    VARIANT_BOOL GetBordersSuppress ( );
    void PutBoundColumn (
        VARIANT * BoundColumn );
    _variant_t GetBoundColumn ( );
    VARIANT_BOOL GetCanPaste ( );
    void PutColumnCount (
        long ColumnCount );
    long GetColumnCount ( );
    void PutColumnHeads (
        VARIANT_BOOL ColumnHeads );
    VARIANT_BOOL GetColumnHeads ( );
    void PutColumnWidths (
        _bstr_t ColumnWidths );
    _bstr_t GetColumnWidths ( );
    long GetCurTargetX ( );
    long GetCurTargetY ( );
    void PutCurX (
        long CurX );
    long GetCurX ( );
    void PutDropButtonStyle (
        enum fmDropButtonStyle DropButtonStyle );
    enum fmDropButtonStyle GetDropButtonStyle ( );
    void PutEnabled (
        VARIANT_BOOL Enabled );
    VARIANT_BOOL GetEnabled ( );
    void Put_Font_Reserved (
        struct Font * _arg1 );
    void PutRefFont (
        struct Font * Font );
    FontPtr GetFont ( );
    void PutFontBold (
        VARIANT_BOOL FontBold );
    VARIANT_BOOL GetFontBold ( );
    void PutFontItalic (
        VARIANT_BOOL FontItalic );
    VARIANT_BOOL GetFontItalic ( );
    void PutFontName (
        _bstr_t FontName );
    _bstr_t GetFontName ( );
    void PutFontSize (
        const CURRENCY & FontSize );
    CURRENCY GetFontSize ( );
    void PutFontStrikethru (
        VARIANT_BOOL FontStrikethru );
    VARIANT_BOOL GetFontStrikethru ( );
    void PutFontUnderline (
        VARIANT_BOOL FontUnderline );
    VARIANT_BOOL GetFontUnderline ( );
    void PutFontWeight (
        short FontWeight );
    short GetFontWeight ( );
    void PutForeColor (
        OLE_COLOR ForeColor );
    OLE_COLOR GetForeColor ( );
    void PutHideSelection (
        VARIANT_BOOL HideSelection );
    VARIANT_BOOL GetHideSelection ( );
    long GetLineCount ( );
    long GetListCount ( );
    void PutListCursor (
        PIROWSET ListCursor );
    PIROWSET GetListCursor ( );
    void PutListIndex (
        VARIANT * ListIndex );
    _variant_t GetListIndex ( );
    void PutListRows (
        long ListRows );
    long GetListRows ( );
    void PutListStyle (
        enum fmListStyle ListStyle );
    enum fmListStyle GetListStyle ( );
    void PutListWidth (
        VARIANT * ListWidth );
    _variant_t GetListWidth ( );
    void PutLocked (
        VARIANT_BOOL Locked );
    VARIANT_BOOL GetLocked ( );
    void PutMatchEntry (
        enum fmMatchEntry MatchEntry );
    enum fmMatchEntry GetMatchEntry ( );
    VARIANT_BOOL GetMatchFound ( );
    void PutMatchRequired (
        VARIANT_BOOL MatchRequired );
    VARIANT_BOOL GetMatchRequired ( );
    void PutMaxLength (
        long MaxLength );
    long GetMaxLength ( );
    void PutMouseIcon (
        struct Picture * MouseIcon );
    void PutRefMouseIcon (
        struct Picture * MouseIcon );
    PicturePtr GetMouseIcon ( );
    void PutMousePointer (
        enum fmMousePointer MousePointer );
    enum fmMousePointer GetMousePointer ( );
    void PutSelectionMargin (
        VARIANT_BOOL SelectionMargin );
    VARIANT_BOOL GetSelectionMargin ( );
    void PutSelLength (
        long SelLength );
    long GetSelLength ( );
    void PutSelStart (
        long SelStart );
    long GetSelStart ( );
    void PutSelText (
        _bstr_t SelText );
    _bstr_t GetSelText ( );
    void PutShowDropButtonWhen (
        enum fmShowDropButtonWhen ShowDropButtonWhen );
    enum fmShowDropButtonWhen GetShowDropButtonWhen ( );
    void PutSpecialEffect (
        enum fmSpecialEffect SpecialEffect );
    enum fmSpecialEffect GetSpecialEffect ( );
    void PutStyle (
        enum fmStyle Style );
    enum fmStyle GetStyle ( );
    void PutText (
        _bstr_t Text );
    _bstr_t GetText ( );
    void PutTextAlign (
        enum fmTextAlign TextAlign );
    enum fmTextAlign GetTextAlign ( );
    void PutTextColumn (
        VARIANT * TextColumn );
    _variant_t GetTextColumn ( );
    long GetTextLength ( );
    void PutTopIndex (
        VARIANT * TopIndex );
    _variant_t GetTopIndex ( );
    VARIANT_BOOL GetValid ( );
    void PutValue (
        VARIANT * Value );
    _variant_t GetValue ( );
    _variant_t GetColumn (
        VARIANT * pvargColumn = &vtMissing,
        VARIANT * pvargIndex = &vtMissing );
    void PutColumn (
        VARIANT * pvargColumn,
        VARIANT * pvargIndex = &vtMissing,
        VARIANT * pvargValue = &vtMissing );
    _variant_t GetList (
        VARIANT * pvargIndex = &vtMissing,
        VARIANT * pvargColumn = &vtMissing );
    void PutList (
        VARIANT * pvargIndex,
        VARIANT * pvargColumn = &vtMissing,
        VARIANT * pvargValue = &vtMissing );
    HRESULT AddItem (
        VARIANT * pvargItem = &vtMissing,
        VARIANT * pvargIndex = &vtMissing );
    HRESULT Clear ( );
    HRESULT DropDown ( );
    HRESULT RemoveItem (
        VARIANT * pvargIndex );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Paste ( );
    void PutIMEMode (
        enum fmIMEMode IMEMode );
    enum fmIMEMode GetIMEMode ( );
    void PutEnterFieldBehavior (
        enum fmEnterFieldBehavior EnterFieldBehavior );
    enum fmEnterFieldBehavior GetEnterFieldBehavior ( );
    void PutDragBehavior (
        enum fmDragBehavior DragBehavior );
    enum fmDragBehavior GetDragBehavior ( );
    enum fmDisplayStyle GetDisplayStyle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL AutoSize ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * AutoSize ) = 0;
      virtual HRESULT __stdcall put_AutoTab (
        /*[in]*/ VARIANT_BOOL AutoTab ) = 0;
      virtual HRESULT __stdcall get_AutoTab (
        /*[out,retval]*/ VARIANT_BOOL * AutoTab ) = 0;
      virtual HRESULT __stdcall put_AutoWordSelect (
        /*[in]*/ VARIANT_BOOL AutoWordSelect ) = 0;
      virtual HRESULT __stdcall get_AutoWordSelect (
        /*[out,retval]*/ VARIANT_BOOL * AutoWordSelect ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackStyle (
        /*[in]*/ enum fmBackStyle BackStyle ) = 0;
      virtual HRESULT __stdcall get_BackStyle (
        /*[out,retval]*/ enum fmBackStyle * BackStyle ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum fmBorderStyle BorderStyle ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum fmBorderStyle * BorderStyle ) = 0;
      virtual HRESULT __stdcall put_BordersSuppress (
        /*[in]*/ VARIANT_BOOL BordersSuppress ) = 0;
      virtual HRESULT __stdcall get_BordersSuppress (
        /*[out,retval]*/ VARIANT_BOOL * BordersSuppress ) = 0;
      virtual HRESULT __stdcall put_BoundColumn (
        /*[in]*/ VARIANT * BoundColumn ) = 0;
      virtual HRESULT __stdcall get_BoundColumn (
        /*[out,retval]*/ VARIANT * BoundColumn ) = 0;
      virtual HRESULT __stdcall get_CanPaste (
        /*[out,retval]*/ VARIANT_BOOL * CanPaste ) = 0;
      virtual HRESULT __stdcall put_ColumnCount (
        /*[in]*/ long ColumnCount ) = 0;
      virtual HRESULT __stdcall get_ColumnCount (
        /*[out,retval]*/ long * ColumnCount ) = 0;
      virtual HRESULT __stdcall put_ColumnHeads (
        /*[in]*/ VARIANT_BOOL ColumnHeads ) = 0;
      virtual HRESULT __stdcall get_ColumnHeads (
        /*[out,retval]*/ VARIANT_BOOL * ColumnHeads ) = 0;
      virtual HRESULT __stdcall put_ColumnWidths (
        /*[in]*/ BSTR ColumnWidths ) = 0;
      virtual HRESULT __stdcall get_ColumnWidths (
        /*[out,retval]*/ BSTR * ColumnWidths ) = 0;
      virtual HRESULT __stdcall get_CurTargetX (
        /*[out,retval]*/ long * CurTargetX ) = 0;
      virtual HRESULT __stdcall get_CurTargetY (
        /*[out,retval]*/ long * CurTargetY ) = 0;
      virtual HRESULT __stdcall put_CurX (
        /*[in]*/ long CurX ) = 0;
      virtual HRESULT __stdcall get_CurX (
        /*[out,retval]*/ long * CurX ) = 0;
      virtual HRESULT __stdcall put_DropButtonStyle (
        /*[in]*/ enum fmDropButtonStyle DropButtonStyle ) = 0;
      virtual HRESULT __stdcall get_DropButtonStyle (
        /*[out,retval]*/ enum fmDropButtonStyle * DropButtonStyle ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrikethru ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrikethru ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnderline ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnderline ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_HideSelection (
        /*[in]*/ VARIANT_BOOL HideSelection ) = 0;
      virtual HRESULT __stdcall get_HideSelection (
        /*[out,retval]*/ VARIANT_BOOL * HideSelection ) = 0;
      virtual HRESULT __stdcall get_LineCount (
        /*[out,retval]*/ long * LineCount ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ long * ListCount ) = 0;
      virtual HRESULT __stdcall put_ListCursor (
        /*[in]*/ PIROWSET ListCursor ) = 0;
      virtual HRESULT __stdcall get_ListCursor (
        /*[out,retval]*/ PIROWSET * ListCursor ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ VARIANT * ListIndex ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ VARIANT * ListIndex ) = 0;
      virtual HRESULT __stdcall put_ListRows (
        /*[in]*/ long ListRows ) = 0;
      virtual HRESULT __stdcall get_ListRows (
        /*[out,retval]*/ long * ListRows ) = 0;
      virtual HRESULT __stdcall put_ListStyle (
        /*[in]*/ enum fmListStyle ListStyle ) = 0;
      virtual HRESULT __stdcall get_ListStyle (
        /*[out,retval]*/ enum fmListStyle * ListStyle ) = 0;
      virtual HRESULT __stdcall put_ListWidth (
        /*[in]*/ VARIANT * ListWidth ) = 0;
      virtual HRESULT __stdcall get_ListWidth (
        /*[out,retval]*/ VARIANT * ListWidth ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL Locked ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * Locked ) = 0;
      virtual HRESULT __stdcall put_MatchEntry (
        /*[in]*/ enum fmMatchEntry MatchEntry ) = 0;
      virtual HRESULT __stdcall get_MatchEntry (
        /*[out,retval]*/ enum fmMatchEntry * MatchEntry ) = 0;
      virtual HRESULT __stdcall get_MatchFound (
        /*[out,retval]*/ VARIANT_BOOL * MatchFound ) = 0;
      virtual HRESULT __stdcall put_MatchRequired (
        /*[in]*/ VARIANT_BOOL MatchRequired ) = 0;
      virtual HRESULT __stdcall get_MatchRequired (
        /*[out,retval]*/ VARIANT_BOOL * MatchRequired ) = 0;
      virtual HRESULT __stdcall put_MaxLength (
        /*[in]*/ long MaxLength ) = 0;
      virtual HRESULT __stdcall get_MaxLength (
        /*[out,retval]*/ long * MaxLength ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_SelectionMargin (
        /*[in]*/ VARIANT_BOOL SelectionMargin ) = 0;
      virtual HRESULT __stdcall get_SelectionMargin (
        /*[out,retval]*/ VARIANT_BOOL * SelectionMargin ) = 0;
      virtual HRESULT __stdcall put_SelLength (
        /*[in]*/ long SelLength ) = 0;
      virtual HRESULT __stdcall get_SelLength (
        /*[out,retval]*/ long * SelLength ) = 0;
      virtual HRESULT __stdcall put_SelStart (
        /*[in]*/ long SelStart ) = 0;
      virtual HRESULT __stdcall get_SelStart (
        /*[out,retval]*/ long * SelStart ) = 0;
      virtual HRESULT __stdcall put_SelText (
        /*[in]*/ BSTR SelText ) = 0;
      virtual HRESULT __stdcall get_SelText (
        /*[out,retval]*/ BSTR * SelText ) = 0;
      virtual HRESULT __stdcall put_ShowDropButtonWhen (
        /*[in]*/ enum fmShowDropButtonWhen ShowDropButtonWhen ) = 0;
      virtual HRESULT __stdcall get_ShowDropButtonWhen (
        /*[out,retval]*/ enum fmShowDropButtonWhen * ShowDropButtonWhen ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmSpecialEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmSpecialEffect * SpecialEffect ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum fmStyle Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum fmStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum fmTextAlign TextAlign ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum fmTextAlign * TextAlign ) = 0;
      virtual HRESULT __stdcall put_TextColumn (
        /*[in]*/ VARIANT * TextColumn ) = 0;
      virtual HRESULT __stdcall get_TextColumn (
        /*[out,retval]*/ VARIANT * TextColumn ) = 0;
      virtual HRESULT __stdcall get_TextLength (
        /*[out,retval]*/ long * TextLength ) = 0;
      virtual HRESULT __stdcall put_TopIndex (
        /*[in]*/ VARIANT * TopIndex ) = 0;
      virtual HRESULT __stdcall get_TopIndex (
        /*[out,retval]*/ VARIANT * TopIndex ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * Valid ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[in]*/ VARIANT * pvargColumn,
        /*[in]*/ VARIANT * pvargIndex,
        /*[out,retval]*/ VARIANT * pvargValue ) = 0;
      virtual HRESULT __stdcall put_Column (
        /*[in]*/ VARIANT * pvargColumn,
        /*[in]*/ VARIANT * pvargIndex = &vtMissing,
        /*[in]*/ VARIANT * pvargValue = &vtMissing ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT * pvargIndex,
        /*[in]*/ VARIANT * pvargColumn,
        /*[out,retval]*/ VARIANT * pvargValue ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT * pvargIndex,
        /*[in]*/ VARIANT * pvargColumn = &vtMissing,
        /*[in]*/ VARIANT * pvargValue = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT * pvargItem = &vtMissing,
        /*[in]*/ VARIANT * pvargIndex = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_DropDown ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ VARIANT * pvargIndex ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall put_IMEMode (
        /*[in]*/ enum fmIMEMode IMEMode ) = 0;
      virtual HRESULT __stdcall get_IMEMode (
        /*[out,retval]*/ enum fmIMEMode * IMEMode ) = 0;
      virtual HRESULT __stdcall put_EnterFieldBehavior (
        /*[in]*/ enum fmEnterFieldBehavior EnterFieldBehavior ) = 0;
      virtual HRESULT __stdcall get_EnterFieldBehavior (
        /*[out,retval]*/ enum fmEnterFieldBehavior * EnterFieldBehavior ) = 0;
      virtual HRESULT __stdcall put_DragBehavior (
        /*[in]*/ enum fmDragBehavior DragBehavior ) = 0;
      virtual HRESULT __stdcall get_DragBehavior (
        /*[out,retval]*/ enum fmDragBehavior * DragBehavior ) = 0;
      virtual HRESULT __stdcall get_DisplayStyle (
        /*[out,retval]*/ enum fmDisplayStyle * DisplayStyle ) = 0;
};

struct __declspec(uuid("8bd21d43-ec42-11ce-9e0d-00aa006002f3"))
IMdcCheckBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    CURRENCY FontSize;
    __declspec(property(get=GetFontBold,put=PutFontBold))
    VARIANT_BOOL FontBold;
    __declspec(property(get=GetFontItalic,put=PutFontItalic))
    VARIANT_BOOL FontItalic;
    __declspec(property(get=GetFontUnderline,put=PutFontUnderline))
    VARIANT_BOOL FontUnderline;
    __declspec(property(get=GetFontStrikethru,put=PutFontStrikethru))
    VARIANT_BOOL FontStrikethru;
    __declspec(property(get=GetFontWeight,put=PutFontWeight))
    short FontWeight;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetPicturePosition,put=PutPicturePosition))
    enum fmPicturePosition PicturePosition;
    __declspec(property(get=GetSpecialEffect,put=PutSpecialEffect))
    enum fmButtonEffect SpecialEffect;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _bstr_t Accelerator;
    __declspec(property(get=GetGroupName,put=PutGroupName))
    _bstr_t GroupName;
    __declspec(property(get=GetDisplayStyle))
    enum fmDisplayStyle DisplayStyle;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    VARIANT_BOOL WordWrap;
    __declspec(property(get=GetBordersSuppress,put=PutBordersSuppress))
    VARIANT_BOOL BordersSuppress;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    enum fmMultiSelect MultiSelect;
    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetPicture,put=PutRefPicture))
    PicturePtr Picture;
    __declspec(property(get=GetMouseIcon,put=PutRefMouseIcon))
    PicturePtr MouseIcon;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum fmMousePointer MousePointer;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTripleState,put=PutTripleState))
    VARIANT_BOOL TripleState;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(put=Put_Font_Reserved))
    FontPtr _Font_Reserved;
    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    enum fmTextAlign TextAlign;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum fmAlignment Alignment;
    __declspec(property(get=GetBackStyle,put=PutBackStyle))
    enum fmBackStyle BackStyle;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;

    //
    // Wrapper methods for error-handling
    //

    void PutAccelerator (
        _bstr_t Accelerator );
    _bstr_t GetAccelerator ( );
    void PutAlignment (
        enum fmAlignment Alignment );
    enum fmAlignment GetAlignment ( );
    void PutAutoSize (
        VARIANT_BOOL AutoSize );
    VARIANT_BOOL GetAutoSize ( );
    void PutBackColor (
        OLE_COLOR BackColor );
    OLE_COLOR GetBackColor ( );
    void PutBackStyle (
        enum fmBackStyle BackStyle );
    enum fmBackStyle GetBackStyle ( );
    void PutBordersSuppress (
        VARIANT_BOOL BordersSuppress );
    VARIANT_BOOL GetBordersSuppress ( );
    void PutCaption (
        _bstr_t Caption );
    _bstr_t GetCaption ( );
    void PutEnabled (
        VARIANT_BOOL Enabled );
    VARIANT_BOOL GetEnabled ( );
    void Put_Font_Reserved (
        struct Font * _arg1 );
    void PutRefFont (
        struct Font * Font );
    FontPtr GetFont ( );
    void PutFontBold (
        VARIANT_BOOL FontBold );
    VARIANT_BOOL GetFontBold ( );
    void PutFontItalic (
        VARIANT_BOOL FontItalic );
    VARIANT_BOOL GetFontItalic ( );
    void PutFontName (
        _bstr_t FontName );
    _bstr_t GetFontName ( );
    void PutFontSize (
        const CURRENCY & FontSize );
    CURRENCY GetFontSize ( );
    void PutFontStrikethru (
        VARIANT_BOOL FontStrikethru );
    VARIANT_BOOL GetFontStrikethru ( );
    void PutFontUnderline (
        VARIANT_BOOL FontUnderline );
    VARIANT_BOOL GetFontUnderline ( );
    void PutFontWeight (
        short FontWeight );
    short GetFontWeight ( );
    void PutForeColor (
        OLE_COLOR ForeColor );
    OLE_COLOR GetForeColor ( );
    void PutLocked (
        VARIANT_BOOL Locked );
    VARIANT_BOOL GetLocked ( );
    void PutMouseIcon (
        struct Picture * MouseIcon );
    void PutRefMouseIcon (
        struct Picture * MouseIcon );
    PicturePtr GetMouseIcon ( );
    void PutMousePointer (
        enum fmMousePointer MousePointer );
    enum fmMousePointer GetMousePointer ( );
    void PutMultiSelect (
        enum fmMultiSelect MultiSelect );
    enum fmMultiSelect GetMultiSelect ( );
    void PutPicture (
        struct Picture * Picture );
    void PutRefPicture (
        struct Picture * Picture );
    PicturePtr GetPicture ( );
    void PutPicturePosition (
        enum fmPicturePosition PicPos );
    enum fmPicturePosition GetPicturePosition ( );
    void PutSpecialEffect (
        enum fmButtonEffect SpecialEffect );
    enum fmButtonEffect GetSpecialEffect ( );
    void PutTripleState (
        VARIANT_BOOL TripleState );
    VARIANT_BOOL GetTripleState ( );
    VARIANT_BOOL GetValid ( );
    void PutValue (
        VARIANT * Value );
    _variant_t GetValue ( );
    void PutWordWrap (
        VARIANT_BOOL WordWrap );
    VARIANT_BOOL GetWordWrap ( );
    enum fmDisplayStyle GetDisplayStyle ( );
    void PutGroupName (
        _bstr_t GroupName );
    _bstr_t GetGroupName ( );
    void PutTextAlign (
        enum fmTextAlign TextAlign );
    enum fmTextAlign GetTextAlign ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ BSTR Accelerator ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ BSTR * Accelerator ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum fmAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum fmAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL AutoSize ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * AutoSize ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackStyle (
        /*[in]*/ enum fmBackStyle BackStyle ) = 0;
      virtual HRESULT __stdcall get_BackStyle (
        /*[out,retval]*/ enum fmBackStyle * BackStyle ) = 0;
      virtual HRESULT __stdcall put_BordersSuppress (
        /*[in]*/ VARIANT_BOOL BordersSuppress ) = 0;
      virtual HRESULT __stdcall get_BordersSuppress (
        /*[out,retval]*/ VARIANT_BOOL * BordersSuppress ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrikethru ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrikethru ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnderline ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnderline ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL Locked ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * Locked ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ enum fmMultiSelect MultiSelect ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ enum fmMultiSelect * MultiSelect ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct Picture * * Picture ) = 0;
      virtual HRESULT __stdcall put_PicturePosition (
        /*[in]*/ enum fmPicturePosition PicPos ) = 0;
      virtual HRESULT __stdcall get_PicturePosition (
        /*[out,retval]*/ enum fmPicturePosition * PicPos ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmButtonEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmButtonEffect * SpecialEffect ) = 0;
      virtual HRESULT __stdcall put_TripleState (
        /*[in]*/ VARIANT_BOOL TripleState ) = 0;
      virtual HRESULT __stdcall get_TripleState (
        /*[out,retval]*/ VARIANT_BOOL * TripleState ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * Valid ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ VARIANT_BOOL WordWrap ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ VARIANT_BOOL * WordWrap ) = 0;
      virtual HRESULT __stdcall get_DisplayStyle (
        /*[out,retval]*/ enum fmDisplayStyle * DisplayStyle ) = 0;
      virtual HRESULT __stdcall put_GroupName (
        /*[in]*/ BSTR GroupName ) = 0;
      virtual HRESULT __stdcall get_GroupName (
        /*[out,retval]*/ BSTR * GroupName ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum fmTextAlign TextAlign ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum fmTextAlign * TextAlign ) = 0;
};

struct __declspec(uuid("8bd21d53-ec42-11ce-9e0d-00aa006002f3"))
IMdcOptionButton : IMdcCheckBox
{};

struct __declspec(uuid("8bd21d63-ec42-11ce-9e0d-00aa006002f3"))
IMdcToggleButton : IMdcCheckBox
{};

struct __declspec(uuid("04598fc3-866c-11cf-ab7c-00aa00c08fcf"))
IScrollbar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetProportionalThumb,put=PutProportionalThumb))
    VARIANT_BOOL ProportionalThumb;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum fmOrientation Orientation;
    __declspec(property(get=GetDelay,put=PutDelay))
    long Delay;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetMouseIcon,put=PutRefMouseIcon))
    PicturePtr MouseIcon;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum fmMousePointer MousePointer;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;

    //
    // Wrapper methods for error-handling
    //

    void PutBackColor (
        OLE_COLOR BackColor );
    OLE_COLOR GetBackColor ( );
    void PutForeColor (
        OLE_COLOR ForeColor );
    OLE_COLOR GetForeColor ( );
    void PutEnabled (
        VARIANT_BOOL Enabled );
    VARIANT_BOOL GetEnabled ( );
    void PutMousePointer (
        enum fmMousePointer MousePointer );
    enum fmMousePointer GetMousePointer ( );
    void PutValue (
        long Value );
    long GetValue ( );
    void PutMin (
        long Min );
    long GetMin ( );
    void PutMax (
        long Max );
    long GetMax ( );
    void PutSmallChange (
        long SmallChange );
    long GetSmallChange ( );
    void PutLargeChange (
        long LargeChange );
    long GetLargeChange ( );
    void PutProportionalThumb (
        VARIANT_BOOL ProportionalThumb );
    VARIANT_BOOL GetProportionalThumb ( );
    void PutOrientation (
        enum fmOrientation Orientation );
    enum fmOrientation GetOrientation ( );
    void PutDelay (
        long Delay );
    long GetDelay ( );
    void PutMouseIcon (
        struct Picture * MouseIcon );
    void PutRefMouseIcon (
        struct Picture * MouseIcon );
    PicturePtr GetMouseIcon ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long Min ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * Min ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long Max ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * Max ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long SmallChange ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * SmallChange ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long LargeChange ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * LargeChange ) = 0;
      virtual HRESULT __stdcall put_ProportionalThumb (
        /*[in]*/ VARIANT_BOOL ProportionalThumb ) = 0;
      virtual HRESULT __stdcall get_ProportionalThumb (
        /*[out,retval]*/ VARIANT_BOOL * ProportionalThumb ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum fmOrientation Orientation ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum fmOrientation * Orientation ) = 0;
      virtual HRESULT __stdcall put_Delay (
        /*[in]*/ long Delay ) = 0;
      virtual HRESULT __stdcall get_Delay (
        /*[out,retval]*/ long * Delay ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
};

struct __declspec(uuid("a38bffc3-a5a0-11ce-8107-00aa00611080"))
Tab : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _bstr_t Accelerator;
    __declspec(property(get=GetControlTipText,put=PutControlTipText))
    _bstr_t ControlTipText;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    void PutCaption (
        _bstr_t Caption );
    _bstr_t GetCaption ( );
    void PutControlTipText (
        _bstr_t ControlTipText );
    _bstr_t GetControlTipText ( );
    void PutEnabled (
        VARIANT_BOOL fEnabled );
    VARIANT_BOOL GetEnabled ( );
    void PutIndex (
        long Index );
    long GetIndex ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    void PutTag (
        _bstr_t Tag );
    _bstr_t GetTag ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    VARIANT_BOOL GetVisible ( );
    void PutAccelerator (
        _bstr_t Accelerator );
    _bstr_t GetAccelerator ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_ControlTipText (
        /*[in]*/ BSTR ControlTipText ) = 0;
      virtual HRESULT __stdcall get_ControlTipText (
        /*[out,retval]*/ BSTR * ControlTipText ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL fEnabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * fEnabled ) = 0;
      virtual HRESULT __stdcall put_Index (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR Tag ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * Tag ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ BSTR Accelerator ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ BSTR * Accelerator ) = 0;
};

struct __declspec(uuid("944acf93-a1e6-11ce-8104-00aa00611080"))
Tabs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    TabPtr _GetItemByIndex (
        long lIndex );
    TabPtr _GetItemByName (
        _bstr_t bstr );
    IDispatchPtr Item (
        const _variant_t & varg );
    IUnknownPtr Enum ( );
    TabPtr Add (
        const _variant_t & bstrName = vtMissing,
        const _variant_t & bstrCaption = vtMissing,
        const _variant_t & lIndex = vtMissing );
    TabPtr _Add (
        _bstr_t bstrName,
        _bstr_t bstrCaption );
    TabPtr _Insert (
        _bstr_t bstrName,
        _bstr_t bstrCaption,
        long lIndex );
    HRESULT Remove (
        const _variant_t & varg );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw__GetItemByIndex (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct Tab * * ppTab ) = 0;
      virtual HRESULT __stdcall raw__GetItemByName (
        /*[in]*/ BSTR bstr,
        /*[out,retval]*/ struct Tab * * ppTab ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT varg,
        /*[out,retval]*/ IDispatch * * ppDisp ) = 0;
      virtual HRESULT __stdcall raw_Enum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT bstrName,
        /*[in]*/ VARIANT bstrCaption,
        /*[in]*/ VARIANT lIndex,
        /*[out,retval]*/ struct Tab * * ppTab ) = 0;
      virtual HRESULT __stdcall raw__Add (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrCaption,
        /*[out,retval]*/ struct Tab * * ppTab ) = 0;
      virtual HRESULT __stdcall raw__Insert (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrCaption,
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct Tab * * ppTab ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT varg ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("04598fc2-866c-11cf-ab7c-00aa00c08fcf"))
ITabStrip : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTabs))
    TabsPtr Tabs;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    CURRENCY FontSize;
    __declspec(property(get=GetFontBold,put=PutFontBold))
    VARIANT_BOOL FontBold;
    __declspec(property(get=GetFontItalic,put=PutFontItalic))
    VARIANT_BOOL FontItalic;
    __declspec(property(get=GetFontUnderline,put=PutFontUnderline))
    VARIANT_BOOL FontUnderline;
    __declspec(property(get=GetFontStrikethru,put=PutFontStrikethru))
    VARIANT_BOOL FontStrikethru;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetFontWeight,put=PutFontWeight))
    short FontWeight;
    __declspec(property(get=GetSelectedItem))
    TabPtr SelectedItem;
    __declspec(property(get=GetClientHeight))
    float ClientHeight;
    __declspec(property(get=GetClientLeft))
    float ClientLeft;
    __declspec(property(get=GetClientTop))
    float ClientTop;
    __declspec(property(get=GetClientWidth))
    float ClientWidth;
    __declspec(property(get=GetMouseIcon,put=PutRefMouseIcon))
    PicturePtr MouseIcon;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum fmMousePointer MousePointer;
    __declspec(property(get=GetTabOrientation,put=PutTabOrientation))
    enum fmTabOrientation TabOrientation;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum fmTabStyle Style;
    __declspec(property(get=GetMultiRow,put=PutMultiRow))
    VARIANT_BOOL MultiRow;
    __declspec(property(get=GetTabFixedWidth,put=PutTabFixedWidth))
    float TabFixedWidth;
    __declspec(property(get=GetTabFixedHeight,put=PutTabFixedHeight))
    float TabFixedHeight;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(put=Put_Font_Reserved))
    FontPtr _Font_Reserved;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;

    //
    // Wrapper methods for error-handling
    //

    void PutBackColor (
        OLE_COLOR BackColor );
    OLE_COLOR GetBackColor ( );
    void PutForeColor (
        OLE_COLOR ForeColor );
    OLE_COLOR GetForeColor ( );
    void Put_Font_Reserved (
        struct Font * _arg1 );
    void PutRefFont (
        struct Font * Font );
    FontPtr GetFont ( );
    void PutFontName (
        _bstr_t FontName );
    _bstr_t GetFontName ( );
    void PutFontBold (
        VARIANT_BOOL FontBold );
    VARIANT_BOOL GetFontBold ( );
    void PutFontItalic (
        VARIANT_BOOL FontItalic );
    VARIANT_BOOL GetFontItalic ( );
    void PutFontUnderline (
        VARIANT_BOOL FontUnder );
    VARIANT_BOOL GetFontUnderline ( );
    void PutFontStrikethru (
        VARIANT_BOOL FontStrike );
    VARIANT_BOOL GetFontStrikethru ( );
    void PutFontSize (
        const CURRENCY & FontSize );
    CURRENCY GetFontSize ( );
    void PutEnabled (
        VARIANT_BOOL fnabled );
    VARIANT_BOOL GetEnabled ( );
    void PutMouseIcon (
        struct Picture * MouseIcon );
    void PutRefMouseIcon (
        struct Picture * MouseIcon );
    PicturePtr GetMouseIcon ( );
    void PutMousePointer (
        enum fmMousePointer MousePointer );
    enum fmMousePointer GetMousePointer ( );
    void PutMultiRow (
        VARIANT_BOOL MultiRow );
    VARIANT_BOOL GetMultiRow ( );
    void PutStyle (
        enum fmTabStyle TabStyle );
    enum fmTabStyle GetStyle ( );
    void PutTabOrientation (
        enum fmTabOrientation TabOrientation );
    enum fmTabOrientation GetTabOrientation ( );
    HRESULT _SetTabFixedWidth (
        long TabFixedWidth );
    HRESULT _GetTabFixedWidth (
        long * TabFixedWidth );
    HRESULT _SetTabFixedHeight (
        long TabFixedHeight );
    HRESULT _GetTabFixedHeight (
        long * TabFixedHeight );
    HRESULT _GetClientTop (
        long * ClientTop );
    float GetClientTop ( );
    HRESULT _GetClientLeft (
        long * ClientLeft );
    float GetClientLeft ( );
    HRESULT _GetClientWidth (
        long * ClientWidth );
    float GetClientWidth ( );
    HRESULT _GetClientHeight (
        long * ClientHeight );
    float GetClientHeight ( );
    TabsPtr GetTabs ( );
    TabPtr GetSelectedItem ( );
    void PutValue (
        long Index );
    long GetValue ( );
    void PutTabFixedWidth (
        float TabFixedWidth );
    float GetTabFixedWidth ( );
    void PutTabFixedHeight (
        float TabFixedHeight );
    float GetTabFixedHeight ( );
    void PutFontWeight (
        short FontWeight );
    short GetFontWeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL FontBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL FontUnder ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * FontUnder ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL FontStrike ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * FontStrike ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY FontSize ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * FontSize ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL fnabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * fnabled ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_MultiRow (
        /*[in]*/ VARIANT_BOOL MultiRow ) = 0;
      virtual HRESULT __stdcall get_MultiRow (
        /*[out,retval]*/ VARIANT_BOOL * MultiRow ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum fmTabStyle TabStyle ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum fmTabStyle * TabStyle ) = 0;
      virtual HRESULT __stdcall put_TabOrientation (
        /*[in]*/ enum fmTabOrientation TabOrientation ) = 0;
      virtual HRESULT __stdcall get_TabOrientation (
        /*[out,retval]*/ enum fmTabOrientation * TabOrientation ) = 0;
      virtual HRESULT __stdcall raw__SetTabFixedWidth (
        /*[in]*/ long TabFixedWidth ) = 0;
      virtual HRESULT __stdcall raw__GetTabFixedWidth (
        /*[out]*/ long * TabFixedWidth ) = 0;
      virtual HRESULT __stdcall raw__SetTabFixedHeight (
        /*[in]*/ long TabFixedHeight ) = 0;
      virtual HRESULT __stdcall raw__GetTabFixedHeight (
        /*[out]*/ long * TabFixedHeight ) = 0;
      virtual HRESULT __stdcall raw__GetClientTop (
        /*[out]*/ long * ClientTop ) = 0;
      virtual HRESULT __stdcall get_ClientTop (
        /*[out,retval]*/ float * ClientTop ) = 0;
      virtual HRESULT __stdcall raw__GetClientLeft (
        /*[out]*/ long * ClientLeft ) = 0;
      virtual HRESULT __stdcall get_ClientLeft (
        /*[out,retval]*/ float * ClientLeft ) = 0;
      virtual HRESULT __stdcall raw__GetClientWidth (
        /*[out]*/ long * ClientWidth ) = 0;
      virtual HRESULT __stdcall get_ClientWidth (
        /*[out,retval]*/ float * ClientWidth ) = 0;
      virtual HRESULT __stdcall raw__GetClientHeight (
        /*[out]*/ long * ClientHeight ) = 0;
      virtual HRESULT __stdcall get_ClientHeight (
        /*[out,retval]*/ float * ClientHeight ) = 0;
      virtual HRESULT __stdcall get_Tabs (
        /*[out,retval]*/ struct Tabs * * Tabs ) = 0;
      virtual HRESULT __stdcall get_SelectedItem (
        /*[out,retval]*/ struct Tab * * ActiveTab ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall put_TabFixedWidth (
        /*[in]*/ float TabFixedWidth ) = 0;
      virtual HRESULT __stdcall get_TabFixedWidth (
        /*[out,retval]*/ float * TabFixedWidth ) = 0;
      virtual HRESULT __stdcall put_TabFixedHeight (
        /*[in]*/ float TabFixedHeight ) = 0;
      virtual HRESULT __stdcall get_TabFixedHeight (
        /*[out,retval]*/ float * TabFixedHeight ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
};

struct __declspec(uuid("79176fb3-b7f2-11ce-97ef-00aa006d2776"))
ISpinbutton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum fmOrientation Orientation;
    __declspec(property(get=GetDelay,put=PutDelay))
    long Delay;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetMouseIcon,put=PutRefMouseIcon))
    PicturePtr MouseIcon;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum fmMousePointer MousePointer;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;

    //
    // Wrapper methods for error-handling
    //

    void PutBackColor (
        OLE_COLOR BackColor );
    OLE_COLOR GetBackColor ( );
    void PutForeColor (
        OLE_COLOR ForeColor );
    OLE_COLOR GetForeColor ( );
    void PutEnabled (
        VARIANT_BOOL Enabled );
    VARIANT_BOOL GetEnabled ( );
    void PutMousePointer (
        enum fmMousePointer MousePointer );
    enum fmMousePointer GetMousePointer ( );
    void PutValue (
        long Value );
    long GetValue ( );
    void PutMin (
        long Min );
    long GetMin ( );
    void PutMax (
        long Max );
    long GetMax ( );
    void PutSmallChange (
        long SmallChange );
    long GetSmallChange ( );
    void PutOrientation (
        enum fmOrientation Orientation );
    enum fmOrientation GetOrientation ( );
    void PutMouseIcon (
        struct Picture * MouseIcon );
    void PutRefMouseIcon (
        struct Picture * MouseIcon );
    PicturePtr GetMouseIcon ( );
    void PutDelay (
        long Delay );
    long GetDelay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR ForeColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * ForeColor ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long Min ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * Min ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long Max ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * Max ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long SmallChange ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * SmallChange ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum fmOrientation Orientation ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum fmOrientation * Orientation ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_Delay (
        /*[in]*/ long Delay ) = 0;
      virtual HRESULT __stdcall get_Delay (
        /*[out,retval]*/ long * Delay ) = 0;
};

struct __declspec(uuid("4c599243-6926-101b-9992-00000b65c6f9"))
IImage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    enum fmBorderStyle BorderStyle;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetBackStyle,put=PutBackStyle))
    enum fmBackStyle BackStyle;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetSpecialEffect,put=PutSpecialEffect))
    enum fmSpecialEffect SpecialEffect;
    __declspec(property(get=GetPicture,put=PutRefPicture))
    PicturePtr Picture;
    __declspec(property(get=GetMouseIcon,put=PutRefMouseIcon))
    PicturePtr MouseIcon;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum fmMousePointer MousePointer;
    __declspec(property(get=GetPictureAlignment,put=PutPictureAlignment))
    enum fmPictureAlignment PictureAlignment;
    __declspec(property(get=GetPictureSizeMode,put=PutPictureSizeMode))
    enum fmPictureSizeMode PictureSizeMode;
    __declspec(property(get=GetPictureTiling,put=PutPictureTiling))
    VARIANT_BOOL PictureTiling;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    void PutEnabled (
        VARIANT_BOOL fEnabled );
    VARIANT_BOOL GetEnabled ( );
    void PutMousePointer (
        enum fmMousePointer MousePointer );
    enum fmMousePointer GetMousePointer ( );
    void PutAutoSize (
        VARIANT_BOOL fAutoSize );
    VARIANT_BOOL GetAutoSize ( );
    void PutBackColor (
        OLE_COLOR BackColor );
    OLE_COLOR GetBackColor ( );
    void PutBackStyle (
        enum fmBackStyle BackStyle );
    enum fmBackStyle GetBackStyle ( );
    void PutBorderColor (
        OLE_COLOR BorderColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderStyle (
        enum fmBorderStyle Style );
    enum fmBorderStyle GetBorderStyle ( );
    void PutPicture (
        struct Picture * Picture );
    void PutRefPicture (
        struct Picture * Picture );
    PicturePtr GetPicture ( );
    void PutMouseIcon (
        struct Picture * MouseIcon );
    void PutRefMouseIcon (
        struct Picture * MouseIcon );
    PicturePtr GetMouseIcon ( );
    void PutPictureSizeMode (
        enum fmPictureSizeMode PictureSizeMode );
    enum fmPictureSizeMode GetPictureSizeMode ( );
    void PutPictureAlignment (
        enum fmPictureAlignment PictureAlignment );
    enum fmPictureAlignment GetPictureAlignment ( );
    void PutPictureTiling (
        VARIANT_BOOL PictureTiling );
    VARIANT_BOOL GetPictureTiling ( );
    void PutSpecialEffect (
        enum fmSpecialEffect SpecialEffect );
    enum fmSpecialEffect GetSpecialEffect ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL fEnabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * fEnabled ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum fmMousePointer MousePointer ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum fmMousePointer * MousePointer ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL fAutoSize ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * fAutoSize ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackStyle (
        /*[in]*/ enum fmBackStyle BackStyle ) = 0;
      virtual HRESULT __stdcall get_BackStyle (
        /*[out,retval]*/ enum fmBackStyle * BackStyle ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ OLE_COLOR BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ OLE_COLOR * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum fmBorderStyle Style ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum fmBorderStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct Picture * * Picture ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ struct Picture * MouseIcon ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ struct Picture * * MouseIcon ) = 0;
      virtual HRESULT __stdcall put_PictureSizeMode (
        /*[in]*/ enum fmPictureSizeMode PictureSizeMode ) = 0;
      virtual HRESULT __stdcall get_PictureSizeMode (
        /*[out,retval]*/ enum fmPictureSizeMode * PictureSizeMode ) = 0;
      virtual HRESULT __stdcall put_PictureAlignment (
        /*[in]*/ enum fmPictureAlignment PictureAlignment ) = 0;
      virtual HRESULT __stdcall get_PictureAlignment (
        /*[out,retval]*/ enum fmPictureAlignment * PictureAlignment ) = 0;
      virtual HRESULT __stdcall put_PictureTiling (
        /*[in]*/ VARIANT_BOOL PictureTiling ) = 0;
      virtual HRESULT __stdcall get_PictureTiling (
        /*[out,retval]*/ VARIANT_BOOL * PictureTiling ) = 0;
      virtual HRESULT __stdcall put_SpecialEffect (
        /*[in]*/ enum fmSpecialEffect SpecialEffect ) = 0;
      virtual HRESULT __stdcall get_SpecialEffect (
        /*[out,retval]*/ enum fmSpecialEffect * SpecialEffect ) = 0;
};

struct __declspec(uuid("5512d111-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLSubmitButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHTMLName,put=PutHTMLName))
    _bstr_t HTMLName;
    __declspec(property(get=GetHTMLType,put=PutHTMLType))
    _bstr_t HTMLType;
    __declspec(property(get=GetAction,put=PutAction))
    _bstr_t Action;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    _bstr_t Encoding;
    __declspec(property(get=GetMethod,put=PutMethod))
    _bstr_t Method;

    //
    // Wrapper methods for error-handling
    //

    void PutAction (
        _bstr_t Action );
    _bstr_t GetAction ( );
    void PutCaption (
        _bstr_t Caption );
    _bstr_t GetCaption ( );
    void PutEncoding (
        _bstr_t Encoding );
    _bstr_t GetEncoding ( );
    void PutMethod (
        _bstr_t Method );
    _bstr_t GetMethod ( );
    void PutHTMLName (
        _bstr_t HTMLName );
    _bstr_t GetHTMLName ( );
    void PutHTMLType (
        _bstr_t HTMLType );
    _bstr_t GetHTMLType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Action (
        /*[in]*/ BSTR Action ) = 0;
      virtual HRESULT __stdcall get_Action (
        /*[out,retval]*/ BSTR * Action ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ BSTR Encoding ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ BSTR * Encoding ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ BSTR Method ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ BSTR * Method ) = 0;
      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d113-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLImage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHTMLName,put=PutHTMLName))
    _bstr_t HTMLName;
    __declspec(property(get=GetHTMLType,put=PutHTMLType))
    _bstr_t HTMLType;
    __declspec(property(get=GetAction,put=PutAction))
    _bstr_t Action;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    _bstr_t Encoding;
    __declspec(property(get=GetMethod,put=PutMethod))
    _bstr_t Method;
    __declspec(property(get=GetSource,put=PutSource))
    _bstr_t Source;

    //
    // Wrapper methods for error-handling
    //

    void PutAction (
        _bstr_t Action );
    _bstr_t GetAction ( );
    void PutSource (
        _bstr_t Source );
    _bstr_t GetSource ( );
    void PutEncoding (
        _bstr_t Encoding );
    _bstr_t GetEncoding ( );
    void PutMethod (
        _bstr_t Method );
    _bstr_t GetMethod ( );
    void PutHTMLName (
        _bstr_t HTMLName );
    _bstr_t GetHTMLName ( );
    void PutHTMLType (
        _bstr_t HTMLType );
    _bstr_t GetHTMLType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Action (
        /*[in]*/ BSTR Action ) = 0;
      virtual HRESULT __stdcall get_Action (
        /*[out,retval]*/ BSTR * Action ) = 0;
      virtual HRESULT __stdcall put_Source (
        /*[in]*/ BSTR Source ) = 0;
      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ BSTR * Source ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ BSTR Encoding ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ BSTR * Encoding ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ BSTR Method ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ BSTR * Method ) = 0;
      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d115-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLReset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHTMLName,put=PutHTMLName))
    _bstr_t HTMLName;
    __declspec(property(get=GetHTMLType,put=PutHTMLType))
    _bstr_t HTMLType;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;

    //
    // Wrapper methods for error-handling
    //

    void PutCaption (
        _bstr_t Caption );
    _bstr_t GetCaption ( );
    void PutHTMLName (
        _bstr_t HTMLName );
    _bstr_t GetHTMLName ( );
    void PutHTMLType (
        _bstr_t HTMLType );
    _bstr_t GetHTMLType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d117-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLCheckbox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;
    __declspec(property(get=GetHTMLName,put=PutHTMLName))
    _bstr_t HTMLName;
    __declspec(property(get=GetHTMLType,put=PutHTMLType))
    _bstr_t HTMLType;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;

    //
    // Wrapper methods for error-handling
    //

    void PutHTMLName (
        _bstr_t HTMLName );
    _bstr_t GetHTMLName ( );
    void PutValue (
        _bstr_t Value );
    _bstr_t GetValue ( );
    void PutChecked (
        VARIANT_BOOL Checked );
    VARIANT_BOOL GetChecked ( );
    void PutHTMLType (
        _bstr_t HTMLType );
    _bstr_t GetHTMLType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Checked (
        /*[in]*/ VARIANT_BOOL Checked ) = 0;
      virtual HRESULT __stdcall get_Checked (
        /*[out,retval]*/ VARIANT_BOOL * Checked ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d119-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLOption : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;
    __declspec(property(get=GetHTMLName,put=PutHTMLName))
    _bstr_t HTMLName;
    __declspec(property(get=GetDisplayStyle))
    enum fmDisplayStyle DisplayStyle;
    __declspec(property(get=GetHTMLType,put=PutHTMLType))
    _bstr_t HTMLType;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;

    //
    // Wrapper methods for error-handling
    //

    void PutHTMLName (
        _bstr_t HTMLName );
    _bstr_t GetHTMLName ( );
    void PutValue (
        _bstr_t Value );
    _bstr_t GetValue ( );
    void PutChecked (
        VARIANT_BOOL Checked );
    VARIANT_BOOL GetChecked ( );
    void PutHTMLType (
        _bstr_t HTMLType );
    _bstr_t GetHTMLType ( );
    enum fmDisplayStyle GetDisplayStyle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Checked (
        /*[in]*/ VARIANT_BOOL Checked ) = 0;
      virtual HRESULT __stdcall get_Checked (
        /*[out,retval]*/ VARIANT_BOOL * Checked ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
      virtual HRESULT __stdcall get_DisplayStyle (
        /*[out,retval]*/ enum fmDisplayStyle * DisplayStyle ) = 0;
};

struct __declspec(uuid("5512d11b-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLText : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetMaxLength,put=PutMaxLength))
    long MaxLength;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHTMLName,put=PutHTMLName))
    _bstr_t HTMLName;
    __declspec(property(get=GetHTMLType,put=PutHTMLType))
    _bstr_t HTMLType;

    //
    // Wrapper methods for error-handling
    //

    void PutHTMLName (
        _bstr_t HTMLName );
    _bstr_t GetHTMLName ( );
    void PutValue (
        _bstr_t Value );
    _bstr_t GetValue ( );
    void PutMaxLength (
        long MaxLength );
    long GetMaxLength ( );
    void PutWidth (
        long Width );
    long GetWidth ( );
    void PutHTMLType (
        _bstr_t HTMLType );
    _bstr_t GetHTMLType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_MaxLength (
        /*[in]*/ long MaxLength ) = 0;
      virtual HRESULT __stdcall get_MaxLength (
        /*[out,retval]*/ long * MaxLength ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d11d-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLHidden : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetHTMLName,put=PutHTMLName))
    _bstr_t HTMLName;
    __declspec(property(get=GetHTMLType,put=PutHTMLType))
    _bstr_t HTMLType;

    //
    // Wrapper methods for error-handling
    //

    void PutHTMLName (
        _bstr_t HTMLName );
    _bstr_t GetHTMLName ( );
    void PutValue (
        _bstr_t Value );
    _bstr_t GetValue ( );
    void PutHTMLType (
        _bstr_t HTMLType );
    _bstr_t GetHTMLType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d11f-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLPassword : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetMaxLength,put=PutMaxLength))
    long MaxLength;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHTMLName,put=PutHTMLName))
    _bstr_t HTMLName;
    __declspec(property(get=GetHTMLType,put=PutHTMLType))
    _bstr_t HTMLType;

    //
    // Wrapper methods for error-handling
    //

    void PutHTMLName (
        _bstr_t HTMLName );
    _bstr_t GetHTMLName ( );
    void PutValue (
        _bstr_t Value );
    _bstr_t GetValue ( );
    void PutMaxLength (
        long MaxLength );
    long GetMaxLength ( );
    void PutWidth (
        long Width );
    long GetWidth ( );
    void PutHTMLType (
        _bstr_t HTMLType );
    _bstr_t GetHTMLType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_MaxLength (
        /*[in]*/ long MaxLength ) = 0;
      virtual HRESULT __stdcall get_MaxLength (
        /*[out,retval]*/ long * MaxLength ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_HTMLType (
        /*[in]*/ BSTR HTMLType ) = 0;
      virtual HRESULT __stdcall get_HTMLType (
        /*[out,retval]*/ BSTR * HTMLType ) = 0;
};

struct __declspec(uuid("5512d123-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLSelect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHTMLName,put=PutHTMLName))
    _bstr_t HTMLName;
    __declspec(property(get=GetSelected,put=PutSelected))
    _bstr_t Selected;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    VARIANT_BOOL MultiSelect;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;

    //
    // Wrapper methods for error-handling
    //

    void PutHTMLName (
        _bstr_t HTMLName );
    _bstr_t GetHTMLName ( );
    void PutValues (
        VARIANT * Values );
    _variant_t GetValues ( );
    void PutDisplayValues (
        VARIANT * DisplayValues );
    _variant_t GetDisplayValues ( );
    void PutSelected (
        _bstr_t Selected );
    _bstr_t GetSelected ( );
    void PutMultiSelect (
        VARIANT_BOOL MultiSelect );
    VARIANT_BOOL GetMultiSelect ( );
    void PutSize (
        long Size );
    long GetSize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Values (
        /*[in]*/ VARIANT * Values ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ VARIANT * Values ) = 0;
      virtual HRESULT __stdcall put_DisplayValues (
        /*[in]*/ VARIANT * DisplayValues ) = 0;
      virtual HRESULT __stdcall get_DisplayValues (
        /*[out,retval]*/ VARIANT * DisplayValues ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ BSTR Selected ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ BSTR * Selected ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ VARIANT_BOOL MultiSelect ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ VARIANT_BOOL * MultiSelect ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Size ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Size ) = 0;
};

struct __declspec(uuid("5512d125-5cc6-11cf-8d67-00aa00bdce1d"))
IWHTMLTextArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetHTMLName,put=PutHTMLName))
    _bstr_t HTMLName;
    __declspec(property(get=GetRows,put=PutRows))
    long Rows;
    __declspec(property(get=GetColumns,put=PutColumns))
    long Columns;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    _bstr_t WordWrap;

    //
    // Wrapper methods for error-handling
    //

    void PutHTMLName (
        _bstr_t HTMLName );
    _bstr_t GetHTMLName ( );
    void PutValue (
        _bstr_t Value );
    _bstr_t GetValue ( );
    void PutRows (
        long Rows );
    long GetRows ( );
    void PutColumns (
        long Columns );
    long GetColumns ( );
    void PutWordWrap (
        _bstr_t WordWrap );
    _bstr_t GetWordWrap ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_HTMLName (
        /*[in]*/ BSTR HTMLName ) = 0;
      virtual HRESULT __stdcall get_HTMLName (
        /*[out,retval]*/ BSTR * HTMLName ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Rows (
        /*[in]*/ long Rows ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ long * Rows ) = 0;
      virtual HRESULT __stdcall put_Columns (
        /*[in]*/ long Columns ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ long * Columns ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ BSTR WordWrap ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ BSTR * WordWrap ) = 0;
};

struct __declspec(uuid("978c9e22-d4b0-11ce-bf2d-00aa003f40d0"))
LabelControlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeDragOver (
        struct IReturnBoolean * Cancel,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState DragState,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        struct IReturnBoolean * Cancel,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Click ( );
    HRESULT DblClick (
        struct IReturnBoolean * Cancel );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT MouseDown (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        float X,
        float Y );
};

struct __declspec(uuid("978c9e23-d4b0-11ce-bf2d-00aa003f40d0"))
Label;
    // [ default ] interface ILabelControl
    // [ default, source ] dispinterface LabelControlEvents

struct __declspec(uuid("7b020ec1-af6c-11ce-9f46-00aa00574a4f"))
CommandButtonEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeDragOver (
        struct IReturnBoolean * Cancel,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState DragState,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        struct IReturnBoolean * Cancel,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Click ( );
    HRESULT DblClick (
        struct IReturnBoolean * Cancel );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT KeyDown (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT KeyPress (
        struct IReturnInteger * KeyAscii );
    HRESULT KeyUp (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT MouseDown (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        float X,
        float Y );
};

struct __declspec(uuid("d7053240-ce69-11cd-a777-00dd01143c57"))
CommandButton;
    // [ default ] interface ICommandButton
    // [ default, source ] dispinterface CommandButtonEvents

struct __declspec(uuid("8bd21d12-ec42-11ce-9e0d-00aa006002f3"))
MdcTextEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeDragOver (
        struct IReturnBoolean * Cancel,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState DragState,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        struct IReturnBoolean * Cancel,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Change ( );
    HRESULT DblClick (
        struct IReturnBoolean * Cancel );
    HRESULT DropButtonClick ( );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT KeyDown (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT KeyPress (
        struct IReturnInteger * KeyAscii );
    HRESULT KeyUp (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT MouseDown (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        float X,
        float Y );
};

struct __declspec(uuid("8bd21d10-ec42-11ce-9e0d-00aa006002f3"))
TextBox;
    // [ default ] interface IMdcText
    // [ default, source ] dispinterface MdcTextEvents

struct __declspec(uuid("8bd21d22-ec42-11ce-9e0d-00aa006002f3"))
MdcListEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeDragOver (
        struct IReturnBoolean * Cancel,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState DragState,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        struct IReturnBoolean * Cancel,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Change ( );
    HRESULT Click ( );
    HRESULT DblClick (
        struct IReturnBoolean * Cancel );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT KeyDown (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT KeyPress (
        struct IReturnInteger * KeyAscii );
    HRESULT KeyUp (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT MouseDown (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        float X,
        float Y );
};

struct __declspec(uuid("8bd21d20-ec42-11ce-9e0d-00aa006002f3"))
ListBox;
    // [ default ] interface IMdcList
    // [ default, source ] dispinterface MdcListEvents

struct __declspec(uuid("8bd21d32-ec42-11ce-9e0d-00aa006002f3"))
MdcComboEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeDragOver (
        struct IReturnBoolean * Cancel,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState DragState,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        struct IReturnBoolean * Cancel,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Change ( );
    HRESULT Click ( );
    HRESULT DblClick (
        struct IReturnBoolean * Cancel );
    HRESULT DropButtonClick ( );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT KeyDown (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT KeyPress (
        struct IReturnInteger * KeyAscii );
    HRESULT KeyUp (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT MouseDown (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        float X,
        float Y );
};

struct __declspec(uuid("8bd21d30-ec42-11ce-9e0d-00aa006002f3"))
ComboBox;
    // [ default ] interface IMdcCombo
    // [ default, source ] dispinterface MdcComboEvents

struct __declspec(uuid("8bd21d42-ec42-11ce-9e0d-00aa006002f3"))
MdcCheckBoxEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeDragOver (
        struct IReturnBoolean * Cancel,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState DragState,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        struct IReturnBoolean * Cancel,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Change ( );
    HRESULT Click ( );
    HRESULT DblClick (
        struct IReturnBoolean * Cancel );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT KeyDown (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT KeyPress (
        struct IReturnInteger * KeyAscii );
    HRESULT KeyUp (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT MouseDown (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        float X,
        float Y );
};

struct __declspec(uuid("8bd21d52-ec42-11ce-9e0d-00aa006002f3"))
MdcOptionButtonEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeDragOver (
        struct IReturnBoolean * Cancel,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState DragState,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        struct IReturnBoolean * Cancel,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Change ( );
    HRESULT Click ( );
    HRESULT DblClick (
        struct IReturnBoolean * Cancel );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT KeyDown (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT KeyPress (
        struct IReturnInteger * KeyAscii );
    HRESULT KeyUp (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT MouseDown (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        float X,
        float Y );
};

struct __declspec(uuid("8bd21d62-ec42-11ce-9e0d-00aa006002f3"))
MdcToggleButtonEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeDragOver (
        struct IReturnBoolean * Cancel,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState DragState,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        struct IReturnBoolean * Cancel,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Change ( );
    HRESULT Click ( );
    HRESULT DblClick (
        struct IReturnBoolean * Cancel );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT KeyDown (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT KeyPress (
        struct IReturnInteger * KeyAscii );
    HRESULT KeyUp (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT MouseDown (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        float X,
        float Y );
};

struct __declspec(uuid("8bd21d40-ec42-11ce-9e0d-00aa006002f3"))
CheckBox;
    // [ default ] interface IMdcCheckBox
    // [ default, source ] dispinterface MdcCheckBoxEvents

struct __declspec(uuid("8bd21d50-ec42-11ce-9e0d-00aa006002f3"))
OptionButton;
    // [ default ] interface IMdcOptionButton
    // [ default, source ] dispinterface MdcOptionButtonEvents

struct __declspec(uuid("8bd21d60-ec42-11ce-9e0d-00aa006002f3"))
ToggleButton;
    // [ default ] interface IMdcToggleButton
    // [ default, source ] dispinterface MdcToggleButtonEvents

struct __declspec(uuid("afc20920-da4e-11ce-b943-00aa006887b4"))
NewFont;
    // interface IUnknown
    // [ default ] dispinterface Font

struct __declspec(uuid("7b020ec2-af6c-11ce-9f46-00aa00574a4f"))
ScrollbarEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeDragOver (
        struct IReturnBoolean * Cancel,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState DragState,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        struct IReturnBoolean * Cancel,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Change ( );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT KeyDown (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT KeyPress (
        struct IReturnInteger * KeyAscii );
    HRESULT KeyUp (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT Scroll ( );
};

struct __declspec(uuid("dfd181e0-5e2f-11ce-a449-00aa004a803d"))
ScrollBar;
    // [ default ] interface IScrollbar
    // [ default, source ] dispinterface ScrollbarEvents

struct __declspec(uuid("7b020ec7-af6c-11ce-9f46-00aa00574a4f"))
TabStripEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeDragOver (
        long Index,
        struct IReturnBoolean * Cancel,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState DragState,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        long Index,
        struct IReturnBoolean * Cancel,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Change ( );
    HRESULT Click (
        long Index );
    HRESULT DblClick (
        long Index,
        struct IReturnBoolean * Cancel );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT KeyDown (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT KeyPress (
        struct IReturnInteger * KeyAscii );
    HRESULT KeyUp (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT MouseDown (
        long Index,
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseMove (
        long Index,
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseUp (
        long Index,
        short Button,
        short Shift,
        float X,
        float Y );
};

struct __declspec(uuid("eae50eb0-4a62-11ce-bed6-00aa00611080"))
TabStrip;
    // [ default ] interface ITabStrip
    // [ default, source ] dispinterface TabStripEvents

struct __declspec(uuid("79176fb2-b7f2-11ce-97ef-00aa006d2776"))
SpinbuttonEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeDragOver (
        struct IReturnBoolean * Cancel,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState DragState,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        struct IReturnBoolean * Cancel,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Change ( );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT KeyDown (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT KeyPress (
        struct IReturnInteger * KeyAscii );
    HRESULT KeyUp (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT SpinUp ( );
    HRESULT SpinDown ( );
};

struct __declspec(uuid("79176fb0-b7f2-11ce-97ef-00aa006d2776"))
SpinButton;
    // [ default ] interface ISpinbutton
    // [ default, source ] dispinterface SpinbuttonEvents

struct __declspec(uuid("4c5992a5-6926-101b-9992-00000b65c6f9"))
ImageEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeDragOver (
        struct IReturnBoolean * Cancel,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState DragState,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        struct IReturnBoolean * Cancel,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Click ( );
    HRESULT DblClick (
        struct IReturnBoolean * Cancel );
    HRESULT Error (
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT MouseDown (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseMove (
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseUp (
        short Button,
        short Shift,
        float X,
        float Y );
};

struct __declspec(uuid("4c599241-6926-101b-9992-00000b65c6f9"))
Image;
    // [ default ] interface IImage
    // [ default, source ] dispinterface ImageEvents

struct __declspec(uuid("796ed650-5fe9-11cf-8d68-00aa00bdce1d"))
WHTMLControlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
};

struct __declspec(uuid("47ff8fe0-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents1 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
};

struct __declspec(uuid("47ff8fe1-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents2 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
};

struct __declspec(uuid("47ff8fe2-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents3 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
};

struct __declspec(uuid("47ff8fe3-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents4 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
};

struct __declspec(uuid("47ff8fe4-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents5 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
};

struct __declspec(uuid("47ff8fe5-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents6 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
};

struct __declspec(uuid("47ff8fe6-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents7 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
};

struct __declspec(uuid("47ff8fe8-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents9 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
};

struct __declspec(uuid("47ff8fe9-6198-11cf-8ce8-00aa006cb389"))
WHTMLControlEvents10 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
};

struct __declspec(uuid("5512d110-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLSubmit;
    // [ default ] interface IWHTMLSubmitButton
    // [ default, source ] dispinterface WHTMLControlEvents

struct __declspec(uuid("5512d112-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLImage;
    // [ default ] interface IWHTMLImage
    // [ default, source ] dispinterface WHTMLControlEvents1

struct __declspec(uuid("5512d114-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLReset;
    // [ default ] interface IWHTMLReset
    // [ default, source ] dispinterface WHTMLControlEvents2

struct __declspec(uuid("5512d116-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLCheckbox;
    // [ default ] interface IWHTMLCheckbox
    // [ default, source ] dispinterface WHTMLControlEvents3

struct __declspec(uuid("5512d118-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLOption;
    // [ default ] interface IWHTMLOption
    // [ default, source ] dispinterface WHTMLControlEvents4

struct __declspec(uuid("5512d11a-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLText;
    // [ default ] interface IWHTMLText
    // [ default, source ] dispinterface WHTMLControlEvents5

struct __declspec(uuid("5512d11c-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLHidden;
    // [ default ] interface IWHTMLHidden
    // [ default, source ] dispinterface WHTMLControlEvents6

struct __declspec(uuid("5512d11e-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLPassword;
    // [ default ] interface IWHTMLPassword
    // [ default, source ] dispinterface WHTMLControlEvents7

struct __declspec(uuid("5512d122-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLSelect;
    // [ default ] interface IWHTMLSelect
    // [ default, source ] dispinterface WHTMLControlEvents9

struct __declspec(uuid("5512d124-5cc6-11cf-8d67-00aa00bdce1d"))
HTMLTextArea;
    // [ default ] interface IWHTMLTextArea
    // [ default, source ] dispinterface WHTMLControlEvents10

enum __declspec(uuid("0ee49f40-e956-11ce-8141-00aa00611080"))
fmTransitionEffect
{
    fmTransitionEffectNone = 0,
    fmTransitionEffectCoverUp = 1,
    fmTransitionEffectCoverRightUp = 2,
    fmTransitionEffectCoverRight = 3,
    fmTransitionEffectCoverRightDown = 4,
    fmTransitionEffectCoverDown = 5,
    fmTransitionEffectCoverLeftDown = 6,
    fmTransitionEffectCoverLeft = 7,
    fmTransitionEffectCoverLeftUp = 8,
    fmTransitionEffectPushUp = 9,
    fmTransitionEffectPushRight = 10,
    fmTransitionEffectPushDown = 11,
    fmTransitionEffectPushLeft = 12
};

struct __declspec(uuid("5cef5613-713d-11ce-80c9-00aa00611080"))
IPage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetControls))
    ControlsPtr Controls;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetControlTipText,put=PutControlTipText))
    _bstr_t ControlTipText;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _bstr_t Accelerator;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;
    __declspec(property(get=GetTransitionEffect,put=PutTransitionEffect))
    enum fmTransitionEffect TransitionEffect;
    __declspec(property(get=GetTransitionPeriod,put=PutTransitionPeriod))
    long TransitionPeriod;
    __declspec(property(get=GetActiveControl))
    IControlPtr ActiveControl;
    __declspec(property(get=GetCanPaste))
    VARIANT_BOOL CanPaste;
    __declspec(property(get=GetCanRedo))
    VARIANT_BOOL CanRedo;
    __declspec(property(get=GetCanUndo))
    VARIANT_BOOL CanUndo;
    __declspec(property(get=GetCycle,put=PutCycle))
    enum fmCycle Cycle;
    __declspec(property(get=GetKeepScrollBarsVisible,put=PutKeepScrollBarsVisible))
    enum fmScrollBars KeepScrollBarsVisible;
    __declspec(property(get=GetScrollBars,put=PutScrollBars))
    enum fmScrollBars ScrollBars;
    __declspec(property(get=GetScrollHeight,put=PutScrollHeight))
    float ScrollHeight;
    __declspec(property(get=GetScrollLeft,put=PutScrollLeft))
    float ScrollLeft;
    __declspec(property(get=GetScrollTop,put=PutScrollTop))
    float ScrollTop;
    __declspec(property(get=GetScrollWidth,put=PutScrollWidth))
    float ScrollWidth;
    __declspec(property(get=GetSelected))
    ControlsPtr Selected;
    __declspec(property(get=GetVerticalScrollBarSide,put=PutVerticalScrollBarSide))
    enum fmVerticalScrollBarSide VerticalScrollBarSide;
    __declspec(property(get=GetZoom,put=PutZoom))
    short Zoom;
    __declspec(property(get=GetPicture,put=PutRefPicture))
    PicturePtr Picture;
    __declspec(property(get=GetPictureAlignment,put=PutPictureAlignment))
    enum fmPictureAlignment PictureAlignment;
    __declspec(property(get=GetPictureSizeMode,put=PutPictureSizeMode))
    enum fmPictureSizeMode PictureSizeMode;
    __declspec(property(get=GetPictureTiling,put=PutPictureTiling))
    VARIANT_BOOL PictureTiling;
    __declspec(property(get=GetInsideHeight))
    float InsideHeight;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetInsideWidth))
    float InsideWidth;
    __declspec(property(get=GetDesignMode,put=PutDesignMode))
    enum fmMode DesignMode;
    __declspec(property(get=GetShowToolbox,put=PutShowToolbox))
    enum fmMode ShowToolbox;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShowGridDots,put=PutShowGridDots))
    enum fmMode ShowGridDots;
    __declspec(property(get=GetSnapToGrid,put=PutSnapToGrid))
    enum fmMode SnapToGrid;
    __declspec(property(get=GetGridX,put=PutGridX))
    float GridX;
    __declspec(property(get=GetGridY,put=PutGridY))
    float GridY;

    //
    // Wrapper methods for error-handling
    //

    ControlsPtr GetControls ( );
    ControlsPtr GetSelected ( );
    IControlPtr GetActiveControl ( );
    VARIANT_BOOL GetCanPaste ( );
    VARIANT_BOOL GetCanRedo ( );
    VARIANT_BOOL GetCanUndo ( );
    void PutCycle (
        enum fmCycle Cycle );
    enum fmCycle GetCycle ( );
    void PutCaption (
        _bstr_t Caption );
    _bstr_t GetCaption ( );
    void PutControlTipText (
        _bstr_t tooltip );
    _bstr_t GetControlTipText ( );
    void PutEnabled (
        VARIANT_BOOL fEnabled );
    VARIANT_BOOL GetEnabled ( );
    void PutIndex (
        long Index );
    long GetIndex ( );
    HRESULT _GetInsideHeight (
        long * InsideHeight );
    float GetInsideHeight ( );
    HRESULT _GetInsideWidth (
        long * InsideWidth );
    float GetInsideWidth ( );
    void PutKeepScrollBarsVisible (
        enum fmScrollBars ScrollBars );
    enum fmScrollBars GetKeepScrollBarsVisible ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    void PutPictureAlignment (
        enum fmPictureAlignment PictureAlignment );
    enum fmPictureAlignment GetPictureAlignment ( );
    void PutPicture (
        struct Picture * Picture );
    void PutRefPicture (
        struct Picture * Picture );
    PicturePtr GetPicture ( );
    void PutPictureSizeMode (
        enum fmPictureSizeMode PictureSizeMode );
    enum fmPictureSizeMode GetPictureSizeMode ( );
    void PutPictureTiling (
        VARIANT_BOOL PictureTiling );
    VARIANT_BOOL GetPictureTiling ( );
    void PutScrollBars (
        enum fmScrollBars ScrollBars );
    enum fmScrollBars GetScrollBars ( );
    HRESULT _SetScrollHeight (
        long ScrollHeight );
    HRESULT _GetScrollHeight (
        long * ScrollHeight );
    void PutScrollHeight (
        float ScrollHeight );
    float GetScrollHeight ( );
    HRESULT _SetScrollLeft (
        long ScrollLeft );
    HRESULT _GetScrollLeft (
        long * ScrollLeft );
    void PutScrollLeft (
        float ScrollLeft );
    float GetScrollLeft ( );
    HRESULT _SetScrollTop (
        long ScrollTop );
    HRESULT _GetScrollTop (
        long * ScrollTop );
    void PutScrollTop (
        float ScrollTop );
    float GetScrollTop ( );
    HRESULT _SetScrollWidth (
        long ScrollWidth );
    HRESULT _GetScrollWidth (
        long * ScrollWidth );
    void PutScrollWidth (
        float ScrollWidth );
    float GetScrollWidth ( );
    void PutTag (
        _bstr_t Tag );
    _bstr_t GetTag ( );
    void PutTransitionEffect (
        enum fmTransitionEffect TransitionEffect );
    enum fmTransitionEffect GetTransitionEffect ( );
    void PutTransitionPeriod (
        long TransitionPeriod );
    long GetTransitionPeriod ( );
    void PutVerticalScrollBarSide (
        enum fmVerticalScrollBarSide side );
    enum fmVerticalScrollBarSide GetVerticalScrollBarSide ( );
    void PutVisible (
        VARIANT_BOOL fVisible );
    VARIANT_BOOL GetVisible ( );
    void PutZoom (
        short Zoom );
    short GetZoom ( );
    void PutDesignMode (
        enum fmMode DesignMode );
    enum fmMode GetDesignMode ( );
    void PutShowToolbox (
        enum fmMode ShowToolbox );
    enum fmMode GetShowToolbox ( );
    void PutShowGridDots (
        enum fmMode ShowGridDots );
    enum fmMode GetShowGridDots ( );
    void PutSnapToGrid (
        enum fmMode SnapToGrid );
    enum fmMode GetSnapToGrid ( );
    void PutGridX (
        float GridX );
    float GetGridX ( );
    HRESULT _SetGridX (
        long GridX );
    HRESULT _GetGridX (
        long * GridX );
    void PutGridY (
        float GridY );
    float GetGridY ( );
    HRESULT _SetGridY (
        long GridY );
    HRESULT _GetGridY (
        long * GridY );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Paste ( );
    HRESULT RedoAction ( );
    HRESULT Repaint ( );
    HRESULT Scroll (
        const _variant_t & xAction = vtMissing,
        const _variant_t & yAction = vtMissing );
    HRESULT SetDefaultTabOrder ( );
    HRESULT UndoAction ( );
    void PutAccelerator (
        _bstr_t Accelerator );
    _bstr_t GetAccelerator ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct Controls * * Controls ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ struct Controls * * Selected ) = 0;
      virtual HRESULT __stdcall get_ActiveControl (
        /*[out,retval]*/ struct IControl * * ActiveControl ) = 0;
      virtual HRESULT __stdcall get_CanPaste (
        /*[out,retval]*/ VARIANT_BOOL * CanPaste ) = 0;
      virtual HRESULT __stdcall get_CanRedo (
        /*[out,retval]*/ VARIANT_BOOL * CanRedo ) = 0;
      virtual HRESULT __stdcall get_CanUndo (
        /*[out,retval]*/ VARIANT_BOOL * CanUndo ) = 0;
      virtual HRESULT __stdcall put_Cycle (
        /*[in]*/ enum fmCycle Cycle ) = 0;
      virtual HRESULT __stdcall get_Cycle (
        /*[out,retval]*/ enum fmCycle * Cycle ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_ControlTipText (
        /*[in]*/ BSTR tooltip ) = 0;
      virtual HRESULT __stdcall get_ControlTipText (
        /*[out,retval]*/ BSTR * tooltip ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL fEnabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * fEnabled ) = 0;
      virtual HRESULT __stdcall put_Index (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw__GetInsideHeight (
        /*[out]*/ long * InsideHeight ) = 0;
      virtual HRESULT __stdcall get_InsideHeight (
        /*[out,retval]*/ float * InsideHeight ) = 0;
      virtual HRESULT __stdcall raw__GetInsideWidth (
        /*[out]*/ long * InsideWidth ) = 0;
      virtual HRESULT __stdcall get_InsideWidth (
        /*[out,retval]*/ float * InsideWidth ) = 0;
      virtual HRESULT __stdcall put_KeepScrollBarsVisible (
        /*[in]*/ enum fmScrollBars ScrollBars ) = 0;
      virtual HRESULT __stdcall get_KeepScrollBarsVisible (
        /*[out,retval]*/ enum fmScrollBars * ScrollBars ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_PictureAlignment (
        /*[in]*/ enum fmPictureAlignment PictureAlignment ) = 0;
      virtual HRESULT __stdcall get_PictureAlignment (
        /*[out,retval]*/ enum fmPictureAlignment * PictureAlignment ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ struct Picture * Picture ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct Picture * * Picture ) = 0;
      virtual HRESULT __stdcall put_PictureSizeMode (
        /*[in]*/ enum fmPictureSizeMode PictureSizeMode ) = 0;
      virtual HRESULT __stdcall get_PictureSizeMode (
        /*[out,retval]*/ enum fmPictureSizeMode * PictureSizeMode ) = 0;
      virtual HRESULT __stdcall put_PictureTiling (
        /*[in]*/ VARIANT_BOOL PictureTiling ) = 0;
      virtual HRESULT __stdcall get_PictureTiling (
        /*[out,retval]*/ VARIANT_BOOL * PictureTiling ) = 0;
      virtual HRESULT __stdcall put_ScrollBars (
        /*[in]*/ enum fmScrollBars ScrollBars ) = 0;
      virtual HRESULT __stdcall get_ScrollBars (
        /*[out,retval]*/ enum fmScrollBars * ScrollBars ) = 0;
      virtual HRESULT __stdcall raw__SetScrollHeight (
        /*[in]*/ long ScrollHeight ) = 0;
      virtual HRESULT __stdcall raw__GetScrollHeight (
        /*[out]*/ long * ScrollHeight ) = 0;
      virtual HRESULT __stdcall put_ScrollHeight (
        /*[in]*/ float ScrollHeight ) = 0;
      virtual HRESULT __stdcall get_ScrollHeight (
        /*[out,retval]*/ float * ScrollHeight ) = 0;
      virtual HRESULT __stdcall raw__SetScrollLeft (
        /*[in]*/ long ScrollLeft ) = 0;
      virtual HRESULT __stdcall raw__GetScrollLeft (
        /*[out]*/ long * ScrollLeft ) = 0;
      virtual HRESULT __stdcall put_ScrollLeft (
        /*[in]*/ float ScrollLeft ) = 0;
      virtual HRESULT __stdcall get_ScrollLeft (
        /*[out,retval]*/ float * ScrollLeft ) = 0;
      virtual HRESULT __stdcall raw__SetScrollTop (
        /*[in]*/ long ScrollTop ) = 0;
      virtual HRESULT __stdcall raw__GetScrollTop (
        /*[out]*/ long * ScrollTop ) = 0;
      virtual HRESULT __stdcall put_ScrollTop (
        /*[in]*/ float ScrollTop ) = 0;
      virtual HRESULT __stdcall get_ScrollTop (
        /*[out,retval]*/ float * ScrollTop ) = 0;
      virtual HRESULT __stdcall raw__SetScrollWidth (
        /*[in]*/ long ScrollWidth ) = 0;
      virtual HRESULT __stdcall raw__GetScrollWidth (
        /*[out]*/ long * ScrollWidth ) = 0;
      virtual HRESULT __stdcall put_ScrollWidth (
        /*[in]*/ float ScrollWidth ) = 0;
      virtual HRESULT __stdcall get_ScrollWidth (
        /*[out,retval]*/ float * ScrollWidth ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR Tag ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * Tag ) = 0;
      virtual HRESULT __stdcall put_TransitionEffect (
        /*[in]*/ enum fmTransitionEffect TransitionEffect ) = 0;
      virtual HRESULT __stdcall get_TransitionEffect (
        /*[out,retval]*/ enum fmTransitionEffect * TransitionEffect ) = 0;
      virtual HRESULT __stdcall put_TransitionPeriod (
        /*[in]*/ long TransitionPeriod ) = 0;
      virtual HRESULT __stdcall get_TransitionPeriod (
        /*[out,retval]*/ long * TransitionPeriod ) = 0;
      virtual HRESULT __stdcall put_VerticalScrollBarSide (
        /*[in]*/ enum fmVerticalScrollBarSide side ) = 0;
      virtual HRESULT __stdcall get_VerticalScrollBarSide (
        /*[out,retval]*/ enum fmVerticalScrollBarSide * side ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL fVisible ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * fVisible ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ short Zoom ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ short * Zoom ) = 0;
      virtual HRESULT __stdcall put_DesignMode (
        /*[in]*/ enum fmMode DesignMode ) = 0;
      virtual HRESULT __stdcall get_DesignMode (
        /*[out,retval]*/ enum fmMode * DesignMode ) = 0;
      virtual HRESULT __stdcall put_ShowToolbox (
        /*[in]*/ enum fmMode ShowToolbox ) = 0;
      virtual HRESULT __stdcall get_ShowToolbox (
        /*[out,retval]*/ enum fmMode * ShowToolbox ) = 0;
      virtual HRESULT __stdcall put_ShowGridDots (
        /*[in]*/ enum fmMode ShowGridDots ) = 0;
      virtual HRESULT __stdcall get_ShowGridDots (
        /*[out,retval]*/ enum fmMode * ShowGridDots ) = 0;
      virtual HRESULT __stdcall put_SnapToGrid (
        /*[in]*/ enum fmMode SnapToGrid ) = 0;
      virtual HRESULT __stdcall get_SnapToGrid (
        /*[out,retval]*/ enum fmMode * SnapToGrid ) = 0;
      virtual HRESULT __stdcall put_GridX (
        /*[in]*/ float GridX ) = 0;
      virtual HRESULT __stdcall get_GridX (
        /*[out,retval]*/ float * GridX ) = 0;
      virtual HRESULT __stdcall raw__SetGridX (
        /*[in]*/ long GridX ) = 0;
      virtual HRESULT __stdcall raw__GetGridX (
        /*[out]*/ long * GridX ) = 0;
      virtual HRESULT __stdcall put_GridY (
        /*[in]*/ float GridY ) = 0;
      virtual HRESULT __stdcall get_GridY (
        /*[out,retval]*/ float * GridY ) = 0;
      virtual HRESULT __stdcall raw__SetGridY (
        /*[in]*/ long GridY ) = 0;
      virtual HRESULT __stdcall raw__GetGridY (
        /*[out]*/ long * GridY ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall raw_RedoAction ( ) = 0;
      virtual HRESULT __stdcall raw_Repaint ( ) = 0;
      virtual HRESULT __stdcall raw_Scroll (
        /*[in]*/ VARIANT xAction = vtMissing,
        /*[in]*/ VARIANT yAction = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetDefaultTabOrder ( ) = 0;
      virtual HRESULT __stdcall raw_UndoAction ( ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ BSTR Accelerator ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ BSTR * Accelerator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

struct __declspec(uuid("7b020ec8-af6c-11ce-9f46-00aa00574a4f"))
MultiPageEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT AddControl (
        long Index,
        struct IControl * Control );
    HRESULT BeforeDragOver (
        long Index,
        struct IReturnBoolean * Cancel,
        struct IControl * Control,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        enum fmDragState State,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT BeforeDropOrPaste (
        long Index,
        struct IReturnBoolean * Cancel,
        struct IControl * Control,
        enum fmAction Action,
        struct IDataAutoWrapper * Data,
        float X,
        float Y,
        struct IReturnEffect * Effect,
        short Shift );
    HRESULT Change ( );
    HRESULT Click (
        long Index );
    HRESULT DblClick (
        long Index,
        struct IReturnBoolean * Cancel );
    HRESULT Error (
        long Index,
        short Number,
        struct IReturnString * Description,
        long SCode,
        _bstr_t Source,
        _bstr_t HelpFile,
        long HelpContext,
        struct IReturnBoolean * CancelDisplay );
    HRESULT KeyDown (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT KeyPress (
        struct IReturnInteger * KeyAscii );
    HRESULT KeyUp (
        struct IReturnInteger * KeyCode,
        short Shift );
    HRESULT Layout (
        long Index );
    HRESULT MouseDown (
        long Index,
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseMove (
        long Index,
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT MouseUp (
        long Index,
        short Button,
        short Shift,
        float X,
        float Y );
    HRESULT RemoveControl (
        long Index,
        struct IControl * Control );
    HRESULT Scroll (
        long Index,
        enum fmScrollAction ActionX,
        enum fmScrollAction ActionY,
        float RequestDx,
        float RequestDy,
        struct IReturnSingle * ActualDx,
        struct IReturnSingle * ActualDy );
    HRESULT Zoom (
        long Index,
        short * Percent );
};

struct __declspec(uuid("46e31370-3f7a-11ce-bed6-00aa00611080"))
MultiPage;
    // [ default ] interface IMultiPage
    // [ default, source ] dispinterface MultiPageEvents

struct __declspec(uuid("5cef5610-713d-11ce-80c9-00aa00611080"))
Page;
    // [ default ] interface IPage

struct __declspec(uuid("92e11a03-7358-11ce-80cb-00aa00611080"))
Pages : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Item (
        const _variant_t & varg );
    IUnknownPtr Enum ( );
    IPagePtr Add (
        const _variant_t & bstrName = vtMissing,
        const _variant_t & bstrCaption = vtMissing,
        const _variant_t & lIndex = vtMissing );
    IPagePtr _AddCtrl (
        long * clsid,
        _bstr_t bstrName,
        _bstr_t bstrCaption );
    IPagePtr _InsertCtrl (
        long * clsid,
        _bstr_t bstrName,
        _bstr_t bstrCaption,
        long lIndex );
    IControlPtr _GetItemByIndex (
        long lIndex );
    IControlPtr _GetItemByName (
        _bstr_t pstrName );
    HRESULT Remove (
        const _variant_t & varg );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT varg,
        /*[out,retval]*/ IDispatch * * ppDisap ) = 0;
      virtual HRESULT __stdcall raw_Enum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT bstrName,
        /*[in]*/ VARIANT bstrCaption,
        /*[in]*/ VARIANT lIndex,
        /*[out,retval]*/ struct IPage * * ppPage ) = 0;
      virtual HRESULT __stdcall raw__AddCtrl (
        /*[in]*/ long * clsid,
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrCaption,
        /*[out,retval]*/ struct IPage * * ppPage ) = 0;
      virtual HRESULT __stdcall raw__InsertCtrl (
        /*[in]*/ long * clsid,
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrCaption,
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct IPage * * ppCtrl ) = 0;
      virtual HRESULT __stdcall raw__GetItemByIndex (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct IControl * * ppCtrl ) = 0;
      virtual HRESULT __stdcall raw__GetItemByName (
        /*[in]*/ BSTR pstrName,
        /*[out,retval]*/ struct IControl * * ppCtrl ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT varg ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("04598fc9-866c-11cf-ab7c-00aa00c08fcf"))
IMultiPage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=Put_Font_Reserved))
    FontPtr _Font_Reserved;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontBold,put=PutFontBold))
    VARIANT_BOOL FontBold;
    __declspec(property(get=GetFontItalic,put=PutFontItalic))
    VARIANT_BOOL FontItalic;
    __declspec(property(get=GetFontUnderline,put=PutFontUnderline))
    VARIANT_BOOL FontUnderline;
    __declspec(property(get=GetFontStrikethru,put=PutFontStrikethru))
    VARIANT_BOOL FontStrikethru;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    CURRENCY FontSize;
    __declspec(property(get=GetMultiRow,put=PutMultiRow))
    VARIANT_BOOL MultiRow;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum fmTabStyle Style;
    __declspec(property(get=GetTabOrientation,put=PutTabOrientation))
    enum fmTabOrientation TabOrientation;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetSelectedItem))
    IPagePtr SelectedItem;
    __declspec(property(get=GetPages))
    PagesPtr Pages;
    __declspec(property(get=GetTabFixedWidth,put=PutTabFixedWidth))
    float TabFixedWidth;
    __declspec(property(get=GetTabFixedHeight,put=PutTabFixedHeight))
    float TabFixedHeight;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetFontWeight,put=PutFontWeight))
    short FontWeight;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;

    //
    // Wrapper methods for error-handling
    //

    void PutBackColor (
        OLE_COLOR color );
    OLE_COLOR GetBackColor ( );
    void PutForeColor (
        OLE_COLOR color );
    OLE_COLOR GetForeColor ( );
    void Put_Font_Reserved (
        struct Font * _arg1 );
    void PutRefFont (
        struct Font * Font );
    FontPtr GetFont ( );
    void PutFontName (
        _bstr_t FontName );
    _bstr_t GetFontName ( );
    void PutFontBold (
        VARIANT_BOOL fBold );
    VARIANT_BOOL GetFontBold ( );
    void PutFontItalic (
        VARIANT_BOOL fItalic );
    VARIANT_BOOL GetFontItalic ( );
    void PutFontUnderline (
        VARIANT_BOOL fUnder );
    VARIANT_BOOL GetFontUnderline ( );
    void PutFontStrikethru (
        VARIANT_BOOL fStrike );
    VARIANT_BOOL GetFontStrikethru ( );
    void PutFontSize (
        const CURRENCY & Size );
    CURRENCY GetFontSize ( );
    void PutMultiRow (
        VARIANT_BOOL fMultiRow );
    VARIANT_BOOL GetMultiRow ( );
    void PutStyle (
        enum fmTabStyle Style );
    enum fmTabStyle GetStyle ( );
    void PutTabOrientation (
        enum fmTabOrientation Layout );
    enum fmTabOrientation GetTabOrientation ( );
    HRESULT _SetTabFixedWidth (
        long Width );
    HRESULT _GetTabFixedWidth (
        long * Width );
    HRESULT _SetTabFixedHeight (
        long Height );
    HRESULT _GetTabFixedHeight (
        long * Height );
    void PutEnabled (
        VARIANT_BOOL Enabled );
    VARIANT_BOOL GetEnabled ( );
    IPagePtr GetSelectedItem ( );
    PagesPtr GetPages ( );
    void PutValue (
        long Index );
    long GetValue ( );
    void PutTabFixedWidth (
        float Width );
    float GetTabFixedWidth ( );
    void PutTabFixedHeight (
        float Height );
    float GetTabFixedHeight ( );
    void PutFontWeight (
        short FontWeight );
    short GetFontWeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR color ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * color ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR color ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * color ) = 0;
      virtual HRESULT __stdcall put__Font_Reserved (
        /*[in]*/ struct Font * _arg1 ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * Font ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL fBold ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * fBold ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL fItalic ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * fItalic ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL fUnder ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * fUnder ) = 0;
      virtual HRESULT __stdcall put_FontStrikethru (
        /*[in]*/ VARIANT_BOOL fStrike ) = 0;
      virtual HRESULT __stdcall get_FontStrikethru (
        /*[out,retval]*/ VARIANT_BOOL * fStrike ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ CURRENCY Size ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ CURRENCY * Size ) = 0;
      virtual HRESULT __stdcall put_MultiRow (
        /*[in]*/ VARIANT_BOOL fMultiRow ) = 0;
      virtual HRESULT __stdcall get_MultiRow (
        /*[out,retval]*/ VARIANT_BOOL * fMultiRow ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum fmTabStyle Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum fmTabStyle * Style ) = 0;
      virtual HRESULT __stdcall put_TabOrientation (
        /*[in]*/ enum fmTabOrientation Layout ) = 0;
      virtual HRESULT __stdcall get_TabOrientation (
        /*[out,retval]*/ enum fmTabOrientation * Layout ) = 0;
      virtual HRESULT __stdcall raw__SetTabFixedWidth (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall raw__GetTabFixedWidth (
        /*[out]*/ long * Width ) = 0;
      virtual HRESULT __stdcall raw__SetTabFixedHeight (
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall raw__GetTabFixedHeight (
        /*[out]*/ long * Height ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall get_SelectedItem (
        /*[out,retval]*/ struct IPage * * ppPage ) = 0;
      virtual HRESULT __stdcall get_Pages (
        /*[out,retval]*/ struct Pages * * ppPages ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall put_TabFixedWidth (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_TabFixedWidth (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_TabFixedHeight (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_TabFixedHeight (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_FontWeight (
        /*[in]*/ short FontWeight ) = 0;
      virtual HRESULT __stdcall get_FontWeight (
        /*[out,retval]*/ short * FontWeight ) = 0;
};

enum __declspec(uuid("f00164c2-b17b-11ce-a95d-00aa006cb389"))
fmListBoxStyles
{
    _fmListBoxStylesNone = 0,
    _fmListBoxStylesListBox = 1,
    _fmListBoxStylesComboBox = 2
};

enum __declspec(uuid("c3689f20-c231-11ce-a30c-00aa004a3d3c"))
fmRepeatDirection
{
    _fmRepeatDirectionHorizontal = 0,
    _fmRepeatDirectionVertical = 1
};

enum __declspec(uuid("c3689f20-c231-11ce-a30c-00aa004a3d3d"))
fmEnAutoSize
{
    _fmEnAutoSizeNone = 0,
    _fmEnAutoSizeHorizontal = 1,
    _fmEnAutoSizeVertical = 2,
    _fmEnAutoSizeBoth = 3
};

//
// Function implementation mapping
//

#include "fm20.tli"

} // namespace MSForms

#pragma pack(pop)
