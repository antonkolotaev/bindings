// Created by Microsoft (R) C/C++ Compiler Version 15.00.21022.08 (f58f236e).
//
// C++ source equivalent of Win32 type library C:\\Program Files\\Microsoft Office\\OFFICE11\\EXCEL.EXE
// compiler-generated file created 10/28/10 at 15:55:34 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace Excel {

//
// Forward references and typedefs
//

struct __declspec(uuid("00020813-0000-0000-c000-000000000046"))
/* LIBID */ __Excel;
struct __declspec(uuid("000c0310-0000-0000-c000-000000000046"))
/* dual interface */ Adjustments;
struct __declspec(uuid("000c0311-0000-0000-c000-000000000046"))
/* dual interface */ CalloutFormat;
struct __declspec(uuid("000c0312-0000-0000-c000-000000000046"))
/* dual interface */ ColorFormat;
struct __declspec(uuid("000c0317-0000-0000-c000-000000000046"))
/* dual interface */ LineFormat;
struct __declspec(uuid("000c0318-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNode;
struct __declspec(uuid("000c0319-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNodes;
struct __declspec(uuid("000c031a-0000-0000-c000-000000000046"))
/* dual interface */ PictureFormat;
struct __declspec(uuid("000c031b-0000-0000-c000-000000000046"))
/* dual interface */ ShadowFormat;
struct __declspec(uuid("000c031f-0000-0000-c000-000000000046"))
/* dual interface */ TextEffectFormat;
struct __declspec(uuid("000c0321-0000-0000-c000-000000000046"))
/* dual interface */ ThreeDFormat;
struct __declspec(uuid("000c0314-0000-0000-c000-000000000046"))
/* dual interface */ FillFormat;
struct __declspec(uuid("000c036e-0000-0000-c000-000000000046"))
/* dual interface */ DiagramNodes;
struct __declspec(uuid("000c036f-0000-0000-c000-000000000046"))
/* dual interface */ DiagramNodeChildren;
struct __declspec(uuid("000c0370-0000-0000-c000-000000000046"))
/* dual interface */ DiagramNode;
struct __declspec(uuid("a43788c1-d91b-11d3-8f39-00c04f3651b8"))
/* dual interface */ IRTDUpdateEvent;
struct __declspec(uuid("ec0e6191-db51-11d3-8f3e-00c04f3651b8"))
/* dual interface */ IRtdServer;
enum Constants;
enum XlCreator;
enum XlChartGallery;
enum XlColorIndex;
enum XlEndStyleCap;
enum XlRowCol;
enum XlScaleType;
enum XlDataSeriesType;
enum XlAxisCrosses;
enum XlAxisGroup;
enum XlBackground;
enum XlWindowState;
enum XlAxisType;
enum XlArrowHeadLength;
enum XlVAlign;
enum XlTickMark;
enum XlErrorBarDirection;
enum XlErrorBarInclude;
enum XlDisplayBlanksAs;
enum XlArrowHeadStyle;
enum XlArrowHeadWidth;
enum XlHAlign;
enum XlTickLabelPosition;
enum XlLegendPosition;
enum XlChartPictureType;
enum XlChartPicturePlacement;
enum XlOrientation;
enum XlTickLabelOrientation;
enum XlBorderWeight;
enum XlDataSeriesDate;
enum XlUnderlineStyle;
enum XlErrorBarType;
enum XlTrendlineType;
enum XlLineStyle;
enum XlDataLabelsType;
enum XlMarkerStyle;
enum XlPictureConvertorType;
enum XlPattern;
enum XlChartSplitType;
enum XlDisplayUnit;
enum XlDataLabelPosition;
enum XlTimeUnit;
enum XlCategoryType;
enum XlBarShape;
enum XlChartType;
enum XlChartItem;
enum XlSizeRepresents;
enum XlInsertShiftDirection;
enum XlDeleteShiftDirection;
enum XlDirection;
enum XlConsolidationFunction;
enum XlSheetType;
enum XlLocationInTable;
enum XlFindLookIn;
enum XlWindowType;
enum XlPivotFieldDataType;
enum XlCopyPictureFormat;
enum XlPivotTableSourceType;
enum XlReferenceStyle;
enum XlMSApplication;
enum XlMouseButton;
enum XlCutCopyMode;
enum XlFillWith;
enum XlFilterAction;
enum XlOrder;
enum XlLinkType;
enum XlApplyNamesOrder;
enum XlEnableCancelKey;
enum XlPageBreak;
enum XlOLEType;
enum XlPageOrientation;
enum XlLinkInfo;
enum XlCommandUnderlines;
enum XlOLEVerb;
enum XlCalculation;
enum XlFileAccess;
enum XlEditionType;
enum XlObjectSize;
enum XlLookAt;
enum XlMailSystem;
enum XlLinkInfoType;
enum XlCVError;
enum XlEditionFormat;
enum XlLink;
enum XlCellType;
enum XlArrangeStyle;
enum XlMousePointer;
enum XlEditionOptionsOption;
enum XlAutoFillType;
enum XlAutoFilterOperator;
enum XlClipboardFormat;
enum XlFileFormat;
enum XlApplicationInternational;
enum XlPageBreakExtent;
enum XlCellInsertionMode;
enum XlFormulaLabel;
enum XlHighlightChangesTime;
enum XlCommentDisplayMode;
enum XlFormatConditionType;
enum XlFormatConditionOperator;
enum XlEnableSelection;
enum XlDVType;
enum XlIMEMode;
enum XlDVAlertStyle;
enum XlChartLocation;
enum XlPaperSize;
enum XlPasteSpecialOperation;
enum XlPasteType;
enum XlPhoneticCharacterType;
enum XlPhoneticAlignment;
enum XlPictureAppearance;
enum XlPivotFieldOrientation;
enum XlPivotFieldCalculation;
enum XlPlacement;
enum XlPlatform;
enum XlPrintLocation;
enum XlPriority;
enum XlPTSelectionMode;
enum XlRangeAutoFormat;
enum XlReferenceType;
enum XlLayoutFormType;
enum XlRoutingSlipDelivery;
enum XlRoutingSlipStatus;
enum XlRunAutoMacro;
enum XlSaveAction;
enum XlSaveAsAccessMode;
enum XlSaveConflictResolution;
enum XlSearchDirection;
enum XlSearchOrder;
enum XlSheetVisibility;
enum XlSortMethod;
enum XlSortMethodOld;
enum XlSortOrder;
enum XlSortOrientation;
enum XlSortType;
enum XlSpecialCellsValue;
enum XlSubscribeToFormat;
enum XlSummaryRow;
enum XlSummaryColumn;
enum XlSummaryReportType;
enum XlTabPosition;
enum XlTextParsingType;
enum XlTextQualifier;
enum XlWBATemplate;
enum XlWindowView;
enum XlXLMMacroType;
enum XlYesNoGuess;
enum XlBordersIndex;
enum XlToolbarProtection;
enum XlBuiltInDialog;
enum XlParameterType;
enum XlParameterDataType;
enum XlFormControl;
enum XlSourceType;
enum XlHtmlType;
enum XlPivotFormatType;
enum XlCmdType;
enum XlColumnDataType;
enum XlQueryType;
enum XlWebSelectionType;
enum XlCubeFieldType;
enum XlWebFormatting;
enum XlDisplayDrawingObjects;
enum XlSubtototalLocationType;
enum XlPivotTableVersionList;
enum XlPrintErrors;
enum XlPivotCellType;
enum XlPivotTableMissingItems;
enum XlCalculationState;
enum XlCalculationInterruptKey;
enum XlSortDataOption;
enum XlUpdateLinks;
enum XlLinkStatus;
enum XlSearchWithin;
enum XlCorruptLoad;
enum XlRobustConnect;
enum XlErrorChecks;
enum XlDataLabelSeparator;
enum XlSmartTagDisplayMode;
enum XlRangeValueDataType;
enum XlSpeakDirection;
enum XlInsertFormatOrigin;
enum XlArabicModes;
enum XlImportDataAs;
enum XlCalculatedMemberType;
enum XlHebrewModes;
enum XlListObjectSourceType;
enum XlTextVisualLayoutType;
enum XlListDataType;
enum XlTotalsCalculation;
enum XlXmlLoadOption;
enum XlSmartTagControlType;
enum XlListConflict;
enum XlXmlExportResult;
enum XlXmlImportResult;
struct __declspec(uuid("00020893-0001-0000-c000-000000000046"))
/* interface */ IWindow;
struct __declspec(uuid("00020892-0001-0000-c000-000000000046"))
/* interface */ IWindows;
struct __declspec(uuid("00024413-0001-0000-c000-000000000046"))
/* interface */ IAppEvents;
struct __declspec(uuid("000208d5-0000-0000-c000-000000000046"))
/* dual interface */ _Application;
struct __declspec(uuid("00020845-0001-0000-c000-000000000046"))
/* interface */ IWorksheetFunction;
struct __declspec(uuid("00020846-0001-0000-c000-000000000046"))
/* interface */ IRange;
struct __declspec(uuid("0002440f-0001-0000-c000-000000000046"))
/* interface */ IChartEvents;
struct __declspec(uuid("000208d6-0000-0000-c000-000000000046"))
/* dual interface */ _Chart;
struct __declspec(uuid("000208d7-0000-0000-c000-000000000046"))
/* dual interface */ Sheets;
struct __declspec(uuid("00024402-0001-0000-c000-000000000046"))
/* interface */ IVPageBreak;
struct __declspec(uuid("00024401-0001-0000-c000-000000000046"))
/* interface */ IHPageBreak;
struct __declspec(uuid("00024404-0001-0000-c000-000000000046"))
/* interface */ IHPageBreaks;
struct __declspec(uuid("00024405-0001-0000-c000-000000000046"))
/* interface */ IVPageBreaks;
struct __declspec(uuid("00024407-0001-0000-c000-000000000046"))
/* interface */ IRecentFile;
struct __declspec(uuid("00024406-0001-0000-c000-000000000046"))
/* interface */ IRecentFiles;
struct __declspec(uuid("00024411-0001-0000-c000-000000000046"))
/* interface */ IDocEvents;
struct __declspec(uuid("000208d8-0000-0000-c000-000000000046"))
/* dual interface */ _Worksheet;
struct __declspec(uuid("00020852-0001-0000-c000-000000000046"))
/* interface */ IStyle;
struct __declspec(uuid("00020853-0001-0000-c000-000000000046"))
/* interface */ IStyles;
struct __declspec(uuid("00020855-0001-0000-c000-000000000046"))
/* interface */ IBorders;
struct __declspec(uuid("000208d9-0000-0000-c000-000000000046"))
/* dual interface */ _Global;
struct __declspec(uuid("00020857-0001-0000-c000-000000000046"))
/* interface */ IAddIn;
struct __declspec(uuid("00020858-0001-0000-c000-000000000046"))
/* interface */ IAddIns;
struct __declspec(uuid("0002085c-0001-0000-c000-000000000046"))
/* interface */ IToolbar;
struct __declspec(uuid("0002085d-0001-0000-c000-000000000046"))
/* interface */ IToolbars;
struct __declspec(uuid("0002085e-0001-0000-c000-000000000046"))
/* interface */ IToolbarButton;
struct __declspec(uuid("0002085f-0001-0000-c000-000000000046"))
/* interface */ IToolbarButtons;
struct __declspec(uuid("00020860-0001-0000-c000-000000000046"))
/* interface */ IAreas;
struct __declspec(uuid("00024412-0001-0000-c000-000000000046"))
/* interface */ IWorkbookEvents;
struct __declspec(uuid("000208da-0000-0000-c000-000000000046"))
/* dual interface */ _Workbook;
struct __declspec(uuid("000208db-0000-0000-c000-000000000046"))
/* dual interface */ Workbooks;
struct __declspec(uuid("00020863-0001-0000-c000-000000000046"))
/* interface */ IMenuBars;
struct __declspec(uuid("00020864-0001-0000-c000-000000000046"))
/* interface */ IMenuBar;
struct __declspec(uuid("00020865-0001-0000-c000-000000000046"))
/* interface */ IMenus;
struct __declspec(uuid("00020866-0001-0000-c000-000000000046"))
/* interface */ IMenu;
struct __declspec(uuid("00020867-0001-0000-c000-000000000046"))
/* interface */ IMenuItems;
struct __declspec(uuid("00020868-0001-0000-c000-000000000046"))
/* interface */ IMenuItem;
struct __declspec(uuid("0002086d-0001-0000-c000-000000000046"))
/* interface */ ICharts;
struct __declspec(uuid("0002086f-0001-0000-c000-000000000046"))
/* interface */ IDrawingObjects;
struct __declspec(uuid("0002441c-0001-0000-c000-000000000046"))
/* interface */ IPivotCache;
struct __declspec(uuid("0002441d-0001-0000-c000-000000000046"))
/* interface */ IPivotCaches;
struct __declspec(uuid("0002441e-0001-0000-c000-000000000046"))
/* interface */ IPivotFormula;
struct __declspec(uuid("0002441f-0001-0000-c000-000000000046"))
/* interface */ IPivotFormulas;
struct __declspec(uuid("00020872-0001-0000-c000-000000000046"))
/* interface */ IPivotTable;
struct __declspec(uuid("00020873-0001-0000-c000-000000000046"))
/* interface */ IPivotTables;
struct __declspec(uuid("00020874-0001-0000-c000-000000000046"))
/* interface */ IPivotField;
struct __declspec(uuid("00020875-0001-0000-c000-000000000046"))
/* interface */ IPivotFields;
struct __declspec(uuid("00024420-0001-0000-c000-000000000046"))
/* interface */ ICalculatedFields;
struct __declspec(uuid("00020876-0001-0000-c000-000000000046"))
/* interface */ IPivotItem;
struct __declspec(uuid("00020877-0001-0000-c000-000000000046"))
/* interface */ IPivotItems;
struct __declspec(uuid("00024421-0001-0000-c000-000000000046"))
/* interface */ ICalculatedItems;
struct __declspec(uuid("00020878-0001-0000-c000-000000000046"))
/* interface */ ICharacters;
struct __declspec(uuid("00020879-0001-0000-c000-000000000046"))
/* interface */ IDialogs;
struct __declspec(uuid("0002087a-0001-0000-c000-000000000046"))
/* interface */ IDialog;
struct __declspec(uuid("0002087b-0001-0000-c000-000000000046"))
/* interface */ ISoundNote;
struct __declspec(uuid("0002087d-0001-0000-c000-000000000046"))
/* interface */ IButton;
struct __declspec(uuid("0002087e-0001-0000-c000-000000000046"))
/* interface */ IButtons;
struct __declspec(uuid("0002087f-0001-0000-c000-000000000046"))
/* interface */ ICheckBox;
struct __declspec(uuid("00020880-0001-0000-c000-000000000046"))
/* interface */ ICheckBoxes;
struct __declspec(uuid("00020881-0001-0000-c000-000000000046"))
/* interface */ IOptionButton;
struct __declspec(uuid("00020882-0001-0000-c000-000000000046"))
/* interface */ IOptionButtons;
struct __declspec(uuid("00020883-0001-0000-c000-000000000046"))
/* interface */ IEditBox;
struct __declspec(uuid("00020884-0001-0000-c000-000000000046"))
/* interface */ IEditBoxes;
struct __declspec(uuid("00020885-0001-0000-c000-000000000046"))
/* interface */ IScrollBar;
struct __declspec(uuid("00020886-0001-0000-c000-000000000046"))
/* interface */ IScrollBars;
struct __declspec(uuid("00020887-0001-0000-c000-000000000046"))
/* interface */ IListBox;
struct __declspec(uuid("00020888-0001-0000-c000-000000000046"))
/* interface */ IListBoxes;
struct __declspec(uuid("00020889-0001-0000-c000-000000000046"))
/* interface */ IGroupBox;
struct __declspec(uuid("0002088a-0001-0000-c000-000000000046"))
/* interface */ IGroupBoxes;
struct __declspec(uuid("0002088b-0001-0000-c000-000000000046"))
/* interface */ IDropDown;
struct __declspec(uuid("0002088c-0001-0000-c000-000000000046"))
/* interface */ IDropDowns;
struct __declspec(uuid("0002088d-0001-0000-c000-000000000046"))
/* interface */ ISpinner;
struct __declspec(uuid("0002088e-0001-0000-c000-000000000046"))
/* interface */ ISpinners;
struct __declspec(uuid("0002088f-0001-0000-c000-000000000046"))
/* interface */ IDialogFrame;
struct __declspec(uuid("00020890-0001-0000-c000-000000000046"))
/* interface */ ILabel;
struct __declspec(uuid("00020891-0001-0000-c000-000000000046"))
/* interface */ ILabels;
struct __declspec(uuid("00020894-0001-0000-c000-000000000046"))
/* interface */ IPanes;
struct __declspec(uuid("00020895-0001-0000-c000-000000000046"))
/* interface */ IPane;
struct __declspec(uuid("00020896-0001-0000-c000-000000000046"))
/* interface */ IScenarios;
struct __declspec(uuid("00020897-0001-0000-c000-000000000046"))
/* interface */ IScenario;
struct __declspec(uuid("00020898-0001-0000-c000-000000000046"))
/* interface */ IGroupObject;
struct __declspec(uuid("00020899-0001-0000-c000-000000000046"))
/* interface */ IGroupObjects;
struct __declspec(uuid("0002089a-0001-0000-c000-000000000046"))
/* interface */ ILine;
struct __declspec(uuid("0002089b-0001-0000-c000-000000000046"))
/* interface */ ILines;
struct __declspec(uuid("0002089c-0001-0000-c000-000000000046"))
/* interface */ IRectangle;
struct __declspec(uuid("0002089d-0001-0000-c000-000000000046"))
/* interface */ IRectangles;
struct __declspec(uuid("0002089e-0001-0000-c000-000000000046"))
/* interface */ IOval;
struct __declspec(uuid("0002089f-0001-0000-c000-000000000046"))
/* interface */ IOvals;
struct __declspec(uuid("000208a0-0001-0000-c000-000000000046"))
/* interface */ IArc;
struct __declspec(uuid("000208a1-0001-0000-c000-000000000046"))
/* interface */ IArcs;
struct __declspec(uuid("00024410-0001-0000-c000-000000000046"))
/* interface */ IOLEObjectEvents;
struct __declspec(uuid("000208a2-0001-0000-c000-000000000046"))
/* interface */ _IOLEObject;
struct __declspec(uuid("000208a3-0001-0000-c000-000000000046"))
/* interface */ IOLEObjects;
struct __declspec(uuid("000208a4-0001-0000-c000-000000000046"))
/* interface */ ITextBox;
struct __declspec(uuid("000208a5-0001-0000-c000-000000000046"))
/* interface */ ITextBoxes;
struct __declspec(uuid("000208a7-0001-0000-c000-000000000046"))
/* interface */ IPictures;
struct __declspec(uuid("000208a8-0001-0000-c000-000000000046"))
/* interface */ IDrawing;
struct __declspec(uuid("000208a9-0001-0000-c000-000000000046"))
/* interface */ IDrawings;
struct __declspec(uuid("000208aa-0001-0000-c000-000000000046"))
/* interface */ IRoutingSlip;
struct __declspec(uuid("000208ab-0001-0000-c000-000000000046"))
/* interface */ IOutline;
struct __declspec(uuid("000208ad-0001-0000-c000-000000000046"))
/* interface */ IModule;
struct __declspec(uuid("000208ae-0001-0000-c000-000000000046"))
/* interface */ IModules;
struct __declspec(uuid("000208af-0001-0000-c000-000000000046"))
/* interface */ IDialogSheet;
struct __declspec(uuid("000208b0-0001-0000-c000-000000000046"))
/* interface */ IDialogSheets;
struct __declspec(uuid("000208b1-0001-0000-c000-000000000046"))
/* interface */ IWorksheets;
struct __declspec(uuid("000208b4-0001-0000-c000-000000000046"))
/* interface */ IPageSetup;
struct __declspec(uuid("000208b8-0001-0000-c000-000000000046"))
/* interface */ INames;
struct __declspec(uuid("000208b9-0001-0000-c000-000000000046"))
/* interface */ IName;
struct __declspec(uuid("000208cf-0001-0000-c000-000000000046"))
/* interface */ IChartObject;
struct __declspec(uuid("000208d0-0001-0000-c000-000000000046"))
/* interface */ IChartObjects;
struct __declspec(uuid("000208d1-0001-0000-c000-000000000046"))
/* interface */ IMailer;
struct __declspec(uuid("00024422-0001-0000-c000-000000000046"))
/* interface */ ICustomViews;
struct __declspec(uuid("00024423-0001-0000-c000-000000000046"))
/* interface */ ICustomView;
struct __declspec(uuid("00024424-0001-0000-c000-000000000046"))
/* interface */ IFormatConditions;
struct __declspec(uuid("00024425-0001-0000-c000-000000000046"))
/* interface */ IFormatCondition;
struct __declspec(uuid("00024426-0001-0000-c000-000000000046"))
/* interface */ IComments;
struct __declspec(uuid("00024427-0001-0000-c000-000000000046"))
/* interface */ IComment;
struct __declspec(uuid("0002441b-0001-0000-c000-000000000046"))
/* interface */ IRefreshEvents;
struct __declspec(uuid("00024428-0001-0000-c000-000000000046"))
/* interface */ _IQueryTable;
struct __declspec(uuid("00024429-0001-0000-c000-000000000046"))
/* interface */ IQueryTables;
struct __declspec(uuid("0002442a-0001-0000-c000-000000000046"))
/* interface */ IParameter;
struct __declspec(uuid("0002442b-0001-0000-c000-000000000046"))
/* interface */ IParameters;
struct __declspec(uuid("0002442c-0001-0000-c000-000000000046"))
/* interface */ IODBCError;
struct __declspec(uuid("0002442d-0001-0000-c000-000000000046"))
/* interface */ IODBCErrors;
struct __declspec(uuid("0002442f-0001-0000-c000-000000000046"))
/* interface */ IValidation;
struct __declspec(uuid("00024430-0001-0000-c000-000000000046"))
/* interface */ IHyperlinks;
struct __declspec(uuid("00024431-0001-0000-c000-000000000046"))
/* interface */ IHyperlink;
struct __declspec(uuid("00024432-0001-0000-c000-000000000046"))
/* interface */ IAutoFilter;
struct __declspec(uuid("00024433-0001-0000-c000-000000000046"))
/* interface */ IFilters;
struct __declspec(uuid("00024434-0001-0000-c000-000000000046"))
/* interface */ IFilter;
struct __declspec(uuid("000208d4-0001-0000-c000-000000000046"))
/* interface */ IAutoCorrect;
struct __declspec(uuid("00020854-0001-0000-c000-000000000046"))
/* interface */ IBorder;
struct __declspec(uuid("00020870-0001-0000-c000-000000000046"))
/* interface */ IInterior;
struct __declspec(uuid("00024435-0001-0000-c000-000000000046"))
/* interface */ IChartFillFormat;
struct __declspec(uuid("00024436-0001-0000-c000-000000000046"))
/* interface */ IChartColorFormat;
struct __declspec(uuid("00020848-0001-0000-c000-000000000046"))
/* interface */ IAxis;
struct __declspec(uuid("00020849-0001-0000-c000-000000000046"))
/* interface */ IChartTitle;
struct __declspec(uuid("0002084a-0001-0000-c000-000000000046"))
/* interface */ IAxisTitle;
struct __declspec(uuid("00020859-0001-0000-c000-000000000046"))
/* interface */ IChartGroup;
struct __declspec(uuid("0002085a-0001-0000-c000-000000000046"))
/* interface */ IChartGroups;
struct __declspec(uuid("0002085b-0001-0000-c000-000000000046"))
/* interface */ IAxes;
struct __declspec(uuid("00020869-0001-0000-c000-000000000046"))
/* interface */ IPoints;
struct __declspec(uuid("0002086a-0001-0000-c000-000000000046"))
/* interface */ IPoint;
struct __declspec(uuid("0002086b-0001-0000-c000-000000000046"))
/* interface */ ISeries;
struct __declspec(uuid("0002086c-0001-0000-c000-000000000046"))
/* interface */ ISeriesCollection;
struct __declspec(uuid("000208b2-0001-0000-c000-000000000046"))
/* interface */ IDataLabel;
struct __declspec(uuid("000208b3-0001-0000-c000-000000000046"))
/* interface */ IDataLabels;
struct __declspec(uuid("000208ba-0001-0000-c000-000000000046"))
/* interface */ ILegendEntry;
struct __declspec(uuid("000208bb-0001-0000-c000-000000000046"))
/* interface */ ILegendEntries;
struct __declspec(uuid("000208bc-0001-0000-c000-000000000046"))
/* interface */ ILegendKey;
struct __declspec(uuid("000208bd-0001-0000-c000-000000000046"))
/* interface */ ITrendlines;
struct __declspec(uuid("000208be-0001-0000-c000-000000000046"))
/* interface */ ITrendline;
struct __declspec(uuid("000208c0-0001-0000-c000-000000000046"))
/* interface */ ICorners;
struct __declspec(uuid("000208c1-0001-0000-c000-000000000046"))
/* interface */ ISeriesLines;
struct __declspec(uuid("000208c2-0001-0000-c000-000000000046"))
/* interface */ IHiLoLines;
struct __declspec(uuid("000208c3-0001-0000-c000-000000000046"))
/* interface */ IGridlines;
struct __declspec(uuid("000208c4-0001-0000-c000-000000000046"))
/* interface */ IDropLines;
struct __declspec(uuid("00024437-0001-0000-c000-000000000046"))
/* interface */ ILeaderLines;
struct __declspec(uuid("000208c5-0001-0000-c000-000000000046"))
/* interface */ IUpBars;
struct __declspec(uuid("000208c6-0001-0000-c000-000000000046"))
/* interface */ IDownBars;
struct __declspec(uuid("000208c7-0001-0000-c000-000000000046"))
/* interface */ IFloor;
struct __declspec(uuid("000208c8-0001-0000-c000-000000000046"))
/* interface */ IWalls;
struct __declspec(uuid("000208c9-0001-0000-c000-000000000046"))
/* interface */ ITickLabels;
struct __declspec(uuid("000208cb-0001-0000-c000-000000000046"))
/* interface */ IPlotArea;
struct __declspec(uuid("000208cc-0001-0000-c000-000000000046"))
/* interface */ IChartArea;
struct __declspec(uuid("000208cd-0001-0000-c000-000000000046"))
/* interface */ ILegend;
struct __declspec(uuid("000208ce-0001-0000-c000-000000000046"))
/* interface */ IErrorBars;
struct __declspec(uuid("00020843-0001-0000-c000-000000000046"))
/* interface */ IDataTable;
struct __declspec(uuid("00024438-0001-0000-c000-000000000046"))
/* interface */ IPhonetic;
struct __declspec(uuid("00024439-0001-0000-c000-000000000046"))
/* interface */ IShape;
struct __declspec(uuid("0002443a-0001-0000-c000-000000000046"))
/* interface */ IShapes;
struct __declspec(uuid("0002443b-0001-0000-c000-000000000046"))
/* interface */ IShapeRange;
struct __declspec(uuid("0002443c-0001-0000-c000-000000000046"))
/* interface */ IGroupShapes;
struct __declspec(uuid("0002443d-0001-0000-c000-000000000046"))
/* interface */ ITextFrame;
struct __declspec(uuid("0002443e-0001-0000-c000-000000000046"))
/* interface */ IConnectorFormat;
struct __declspec(uuid("0002443f-0001-0000-c000-000000000046"))
/* interface */ IFreeformBuilder;
struct __declspec(uuid("00024440-0001-0000-c000-000000000046"))
/* interface */ IControlFormat;
struct __declspec(uuid("00024441-0001-0000-c000-000000000046"))
/* interface */ IOLEFormat;
struct __declspec(uuid("00024442-0001-0000-c000-000000000046"))
/* interface */ ILinkFormat;
struct __declspec(uuid("00024443-0001-0000-c000-000000000046"))
/* interface */ IPublishObjects;
struct __declspec(uuid("00024444-0000-0000-c000-000000000046"))
/* dual interface */ PublishObject;
struct __declspec(uuid("00024445-0001-0000-c000-000000000046"))
/* interface */ IOLEDBError;
struct __declspec(uuid("00024446-0001-0000-c000-000000000046"))
/* interface */ IOLEDBErrors;
struct __declspec(uuid("00024447-0001-0000-c000-000000000046"))
/* interface */ IPhonetics;
struct __declspec(uuid("00024448-0000-0000-c000-000000000046"))
/* dual interface */ DefaultWebOptions;
struct __declspec(uuid("00024449-0000-0000-c000-000000000046"))
/* dual interface */ WebOptions;
struct __declspec(uuid("0002444a-0001-0000-c000-000000000046"))
/* interface */ IPivotLayout;
struct __declspec(uuid("0002444b-0000-0000-c000-000000000046"))
/* dual interface */ TreeviewControl;
struct __declspec(uuid("0002444c-0000-0000-c000-000000000046"))
/* dual interface */ CubeField;
struct __declspec(uuid("0002444d-0000-0000-c000-000000000046"))
/* dual interface */ CubeFields;
struct __declspec(uuid("0002084c-0001-0000-c000-000000000046"))
/* interface */ IDisplayUnitLabel;
struct __declspec(uuid("00024450-0001-0000-c000-000000000046"))
/* interface */ ICellFormat;
struct __declspec(uuid("00024451-0001-0000-c000-000000000046"))
/* interface */ IUsedObjects;
struct __declspec(uuid("00024452-0001-0000-c000-000000000046"))
/* interface */ ICustomProperties;
struct __declspec(uuid("00024453-0001-0000-c000-000000000046"))
/* interface */ ICustomProperty;
struct __declspec(uuid("00024454-0001-0000-c000-000000000046"))
/* interface */ ICalculatedMembers;
struct __declspec(uuid("00024455-0001-0000-c000-000000000046"))
/* interface */ ICalculatedMember;
struct __declspec(uuid("00024456-0001-0000-c000-000000000046"))
/* interface */ IWatches;
struct __declspec(uuid("00024457-0001-0000-c000-000000000046"))
/* interface */ IWatch;
struct __declspec(uuid("00024458-0001-0000-c000-000000000046"))
/* interface */ IPivotCell;
struct __declspec(uuid("00024459-0001-0000-c000-000000000046"))
/* interface */ IGraphic;
struct __declspec(uuid("0002445a-0001-0000-c000-000000000046"))
/* interface */ IAutoRecover;
struct __declspec(uuid("0002445b-0001-0000-c000-000000000046"))
/* interface */ IErrorCheckingOptions;
struct __declspec(uuid("0002445c-0001-0000-c000-000000000046"))
/* interface */ IErrors;
struct __declspec(uuid("0002445d-0001-0000-c000-000000000046"))
/* interface */ IError;
struct __declspec(uuid("0002445e-0001-0000-c000-000000000046"))
/* interface */ ISmartTagAction;
struct __declspec(uuid("0002445f-0001-0000-c000-000000000046"))
/* interface */ ISmartTagActions;
struct __declspec(uuid("00024460-0001-0000-c000-000000000046"))
/* interface */ ISmartTag;
struct __declspec(uuid("00024461-0001-0000-c000-000000000046"))
/* interface */ ISmartTags;
struct __declspec(uuid("00024462-0001-0000-c000-000000000046"))
/* interface */ ISmartTagRecognizer;
struct __declspec(uuid("00024463-0001-0000-c000-000000000046"))
/* interface */ ISmartTagRecognizers;
struct __declspec(uuid("00024464-0001-0000-c000-000000000046"))
/* interface */ ISmartTagOptions;
struct __declspec(uuid("00024465-0001-0000-c000-000000000046"))
/* interface */ ISpellingOptions;
struct __declspec(uuid("00024466-0001-0000-c000-000000000046"))
/* interface */ ISpeech;
struct __declspec(uuid("00024467-0001-0000-c000-000000000046"))
/* interface */ IProtection;
struct __declspec(uuid("00024468-0001-0000-c000-000000000046"))
/* interface */ IPivotItemList;
struct __declspec(uuid("00024469-0001-0000-c000-000000000046"))
/* interface */ ITab;
struct __declspec(uuid("0002446a-0001-0000-c000-000000000046"))
/* interface */ IAllowEditRanges;
struct __declspec(uuid("0002446b-0001-0000-c000-000000000046"))
/* interface */ IAllowEditRange;
struct __declspec(uuid("0002446c-0001-0000-c000-000000000046"))
/* interface */ IUserAccessList;
struct __declspec(uuid("0002446d-0001-0000-c000-000000000046"))
/* interface */ IUserAccess;
struct __declspec(uuid("0002446e-0001-0000-c000-000000000046"))
/* interface */ IRTD;
struct __declspec(uuid("0002446f-0001-0000-c000-000000000046"))
/* interface */ IDiagram;
struct __declspec(uuid("00024470-0001-0000-c000-000000000046"))
/* interface */ IListObjects;
struct __declspec(uuid("00024471-0001-0000-c000-000000000046"))
/* interface */ IListObject;
struct __declspec(uuid("00024472-0001-0000-c000-000000000046"))
/* interface */ IListColumns;
struct __declspec(uuid("00024473-0001-0000-c000-000000000046"))
/* interface */ IListColumn;
struct __declspec(uuid("00024474-0001-0000-c000-000000000046"))
/* interface */ IListRows;
struct __declspec(uuid("00024475-0001-0000-c000-000000000046"))
/* interface */ IListRow;
struct __declspec(uuid("00024476-0001-0000-c000-000000000046"))
/* interface */ IXmlNamespace;
struct __declspec(uuid("00024477-0001-0000-c000-000000000046"))
/* interface */ IXmlNamespaces;
struct __declspec(uuid("00024478-0001-0000-c000-000000000046"))
/* interface */ IXmlDataBinding;
struct __declspec(uuid("00024479-0001-0000-c000-000000000046"))
/* interface */ IXmlSchema;
struct __declspec(uuid("0002447a-0001-0000-c000-000000000046"))
/* interface */ IXmlSchemas;
struct __declspec(uuid("0002447b-0001-0000-c000-000000000046"))
/* interface */ IXmlMap;
struct __declspec(uuid("0002447c-0001-0000-c000-000000000046"))
/* interface */ IXmlMaps;
struct __declspec(uuid("0002447d-0001-0000-c000-000000000046"))
/* interface */ IListDataFormat;
struct __declspec(uuid("0002447e-0001-0000-c000-000000000046"))
/* interface */ IXPath;
struct __declspec(uuid("0002084d-0000-0000-c000-000000000046"))
/* dispinterface */ Font;
struct __declspec(uuid("00020893-0000-0000-c000-000000000046"))
/* dispinterface */ Window;
struct __declspec(uuid("00020892-0000-0000-c000-000000000046"))
/* dispinterface */ Windows;
struct __declspec(uuid("00024413-0000-0000-c000-000000000046"))
/* dispinterface */ AppEvents;
struct __declspec(uuid("00020845-0000-0000-c000-000000000046"))
/* dispinterface */ WorksheetFunction;
struct __declspec(uuid("00020846-0000-0000-c000-000000000046"))
/* dispinterface */ Range;
struct __declspec(uuid("0002440f-0000-0000-c000-000000000046"))
/* dispinterface */ ChartEvents;
struct __declspec(uuid("00024402-0000-0000-c000-000000000046"))
/* dispinterface */ VPageBreak;
struct __declspec(uuid("00024401-0000-0000-c000-000000000046"))
/* dispinterface */ HPageBreak;
struct __declspec(uuid("00024404-0000-0000-c000-000000000046"))
/* dispinterface */ HPageBreaks;
struct __declspec(uuid("00024405-0000-0000-c000-000000000046"))
/* dispinterface */ VPageBreaks;
struct __declspec(uuid("00024407-0000-0000-c000-000000000046"))
/* dispinterface */ RecentFile;
struct __declspec(uuid("00024406-0000-0000-c000-000000000046"))
/* dispinterface */ RecentFiles;
struct __declspec(uuid("00024411-0000-0000-c000-000000000046"))
/* dispinterface */ DocEvents;
struct __declspec(uuid("00020852-0000-0000-c000-000000000046"))
/* dispinterface */ Style;
struct __declspec(uuid("00020853-0000-0000-c000-000000000046"))
/* dispinterface */ Styles;
struct __declspec(uuid("00020855-0000-0000-c000-000000000046"))
/* dispinterface */ Borders;
struct __declspec(uuid("00020857-0000-0000-c000-000000000046"))
/* dispinterface */ AddIn;
struct __declspec(uuid("00020858-0000-0000-c000-000000000046"))
/* dispinterface */ AddIns;
struct __declspec(uuid("0002085c-0000-0000-c000-000000000046"))
/* dispinterface */ Toolbar;
struct __declspec(uuid("0002085d-0000-0000-c000-000000000046"))
/* dispinterface */ Toolbars;
struct __declspec(uuid("0002085e-0000-0000-c000-000000000046"))
/* dispinterface */ ToolbarButton;
struct __declspec(uuid("0002085f-0000-0000-c000-000000000046"))
/* dispinterface */ ToolbarButtons;
struct __declspec(uuid("00020860-0000-0000-c000-000000000046"))
/* dispinterface */ Areas;
struct __declspec(uuid("00024412-0000-0000-c000-000000000046"))
/* dispinterface */ WorkbookEvents;
struct __declspec(uuid("00020863-0000-0000-c000-000000000046"))
/* dispinterface */ MenuBars;
struct __declspec(uuid("00020864-0000-0000-c000-000000000046"))
/* dispinterface */ MenuBar;
struct __declspec(uuid("00020865-0000-0000-c000-000000000046"))
/* dispinterface */ Menus;
struct __declspec(uuid("00020866-0000-0000-c000-000000000046"))
/* dispinterface */ Menu;
struct __declspec(uuid("00020867-0000-0000-c000-000000000046"))
/* dispinterface */ MenuItems;
struct __declspec(uuid("00020868-0000-0000-c000-000000000046"))
/* dispinterface */ MenuItem;
struct __declspec(uuid("0002086d-0000-0000-c000-000000000046"))
/* dispinterface */ Charts;
struct __declspec(uuid("0002086f-0000-0000-c000-000000000046"))
/* dispinterface */ DrawingObjects;
struct __declspec(uuid("0002441c-0000-0000-c000-000000000046"))
/* dispinterface */ PivotCache;
struct __declspec(uuid("0002441d-0000-0000-c000-000000000046"))
/* dispinterface */ PivotCaches;
struct __declspec(uuid("0002441e-0000-0000-c000-000000000046"))
/* dispinterface */ PivotFormula;
struct __declspec(uuid("0002441f-0000-0000-c000-000000000046"))
/* dispinterface */ PivotFormulas;
struct __declspec(uuid("00020872-0000-0000-c000-000000000046"))
/* dispinterface */ PivotTable;
struct __declspec(uuid("00020873-0000-0000-c000-000000000046"))
/* dispinterface */ PivotTables;
struct __declspec(uuid("00020874-0000-0000-c000-000000000046"))
/* dispinterface */ PivotField;
struct __declspec(uuid("00020875-0000-0000-c000-000000000046"))
/* dispinterface */ PivotFields;
struct __declspec(uuid("00024420-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedFields;
struct __declspec(uuid("00020876-0000-0000-c000-000000000046"))
/* dispinterface */ PivotItem;
struct __declspec(uuid("00020877-0000-0000-c000-000000000046"))
/* dispinterface */ PivotItems;
struct __declspec(uuid("00024421-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedItems;
struct __declspec(uuid("00020878-0000-0000-c000-000000000046"))
/* dispinterface */ Characters;
struct __declspec(uuid("00020879-0000-0000-c000-000000000046"))
/* dispinterface */ Dialogs;
struct __declspec(uuid("0002087a-0000-0000-c000-000000000046"))
/* dispinterface */ Dialog;
struct __declspec(uuid("0002087b-0000-0000-c000-000000000046"))
/* dispinterface */ SoundNote;
struct __declspec(uuid("0002087d-0000-0000-c000-000000000046"))
/* dispinterface */ Button;
struct __declspec(uuid("0002087e-0000-0000-c000-000000000046"))
/* dispinterface */ Buttons;
struct __declspec(uuid("0002087f-0000-0000-c000-000000000046"))
/* dispinterface */ CheckBox;
struct __declspec(uuid("00020880-0000-0000-c000-000000000046"))
/* dispinterface */ CheckBoxes;
struct __declspec(uuid("00020881-0000-0000-c000-000000000046"))
/* dispinterface */ OptionButton;
struct __declspec(uuid("00020882-0000-0000-c000-000000000046"))
/* dispinterface */ OptionButtons;
struct __declspec(uuid("00020883-0000-0000-c000-000000000046"))
/* dispinterface */ EditBox;
struct __declspec(uuid("00020884-0000-0000-c000-000000000046"))
/* dispinterface */ EditBoxes;
struct __declspec(uuid("00020885-0000-0000-c000-000000000046"))
/* dispinterface */ ScrollBar;
struct __declspec(uuid("00020886-0000-0000-c000-000000000046"))
/* dispinterface */ ScrollBars;
struct __declspec(uuid("00020887-0000-0000-c000-000000000046"))
/* dispinterface */ ListBox;
struct __declspec(uuid("00020888-0000-0000-c000-000000000046"))
/* dispinterface */ ListBoxes;
struct __declspec(uuid("00020889-0000-0000-c000-000000000046"))
/* dispinterface */ GroupBox;
struct __declspec(uuid("0002088a-0000-0000-c000-000000000046"))
/* dispinterface */ GroupBoxes;
struct __declspec(uuid("0002088b-0000-0000-c000-000000000046"))
/* dispinterface */ DropDown;
struct __declspec(uuid("0002088c-0000-0000-c000-000000000046"))
/* dispinterface */ DropDowns;
struct __declspec(uuid("0002088d-0000-0000-c000-000000000046"))
/* dispinterface */ Spinner;
struct __declspec(uuid("0002088e-0000-0000-c000-000000000046"))
/* dispinterface */ Spinners;
struct __declspec(uuid("0002088f-0000-0000-c000-000000000046"))
/* dispinterface */ DialogFrame;
struct __declspec(uuid("00020890-0000-0000-c000-000000000046"))
/* dispinterface */ Label;
struct __declspec(uuid("00020891-0000-0000-c000-000000000046"))
/* dispinterface */ Labels;
struct __declspec(uuid("00020894-0000-0000-c000-000000000046"))
/* dispinterface */ Panes;
struct __declspec(uuid("00020895-0000-0000-c000-000000000046"))
/* dispinterface */ Pane;
struct __declspec(uuid("00020896-0000-0000-c000-000000000046"))
/* dispinterface */ Scenarios;
struct __declspec(uuid("00020897-0000-0000-c000-000000000046"))
/* dispinterface */ Scenario;
struct __declspec(uuid("00020898-0000-0000-c000-000000000046"))
/* dispinterface */ GroupObject;
struct __declspec(uuid("00020899-0000-0000-c000-000000000046"))
/* dispinterface */ GroupObjects;
struct __declspec(uuid("0002089a-0000-0000-c000-000000000046"))
/* dispinterface */ Line;
struct __declspec(uuid("0002089b-0000-0000-c000-000000000046"))
/* dispinterface */ Lines;
struct __declspec(uuid("0002089c-0000-0000-c000-000000000046"))
/* dispinterface */ Rectangle;
struct __declspec(uuid("0002089d-0000-0000-c000-000000000046"))
/* dispinterface */ Rectangles;
struct __declspec(uuid("0002089e-0000-0000-c000-000000000046"))
/* dispinterface */ Oval;
struct __declspec(uuid("0002089f-0000-0000-c000-000000000046"))
/* dispinterface */ Ovals;
struct __declspec(uuid("000208a0-0000-0000-c000-000000000046"))
/* dispinterface */ Arc;
struct __declspec(uuid("000208a1-0000-0000-c000-000000000046"))
/* dispinterface */ Arcs;
struct __declspec(uuid("00024410-0000-0000-c000-000000000046"))
/* dispinterface */ OLEObjectEvents;
struct __declspec(uuid("000208a2-0000-0000-c000-000000000046"))
/* dispinterface */ _OLEObject;
struct __declspec(uuid("000208a3-0000-0000-c000-000000000046"))
/* dispinterface */ OLEObjects;
struct __declspec(uuid("000208a4-0000-0000-c000-000000000046"))
/* dispinterface */ TextBox;
struct __declspec(uuid("000208a5-0000-0000-c000-000000000046"))
/* dispinterface */ TextBoxes;
struct __declspec(uuid("000208a6-0000-0000-c000-000000000046"))
/* dispinterface */ Picture;
struct __declspec(uuid("000208a7-0000-0000-c000-000000000046"))
/* dispinterface */ Pictures;
struct __declspec(uuid("000208a8-0000-0000-c000-000000000046"))
/* dispinterface */ Drawing;
struct __declspec(uuid("000208a9-0000-0000-c000-000000000046"))
/* dispinterface */ Drawings;
struct __declspec(uuid("000208aa-0000-0000-c000-000000000046"))
/* dispinterface */ RoutingSlip;
struct __declspec(uuid("000208ab-0000-0000-c000-000000000046"))
/* dispinterface */ Outline;
struct __declspec(uuid("000208ad-0000-0000-c000-000000000046"))
/* dispinterface */ Module;
struct __declspec(uuid("000208ae-0000-0000-c000-000000000046"))
/* dispinterface */ Modules;
struct __declspec(uuid("000208af-0000-0000-c000-000000000046"))
/* dispinterface */ DialogSheet;
struct __declspec(uuid("000208b0-0000-0000-c000-000000000046"))
/* dispinterface */ DialogSheets;
struct __declspec(uuid("000208b1-0000-0000-c000-000000000046"))
/* dispinterface */ Worksheets;
struct __declspec(uuid("000208b4-0000-0000-c000-000000000046"))
/* dispinterface */ PageSetup;
struct __declspec(uuid("000208b8-0000-0000-c000-000000000046"))
/* dispinterface */ Names;
struct __declspec(uuid("000208b9-0000-0000-c000-000000000046"))
/* dispinterface */ Name;
struct __declspec(uuid("000208cf-0000-0000-c000-000000000046"))
/* dispinterface */ ChartObject;
struct __declspec(uuid("000208d0-0000-0000-c000-000000000046"))
/* dispinterface */ ChartObjects;
struct __declspec(uuid("000208d1-0000-0000-c000-000000000046"))
/* dispinterface */ Mailer;
struct __declspec(uuid("00024422-0000-0000-c000-000000000046"))
/* dispinterface */ CustomViews;
struct __declspec(uuid("00024423-0000-0000-c000-000000000046"))
/* dispinterface */ CustomView;
struct __declspec(uuid("00024424-0000-0000-c000-000000000046"))
/* dispinterface */ FormatConditions;
struct __declspec(uuid("00024425-0000-0000-c000-000000000046"))
/* dispinterface */ FormatCondition;
struct __declspec(uuid("00024426-0000-0000-c000-000000000046"))
/* dispinterface */ Comments;
struct __declspec(uuid("00024427-0000-0000-c000-000000000046"))
/* dispinterface */ Comment;
struct __declspec(uuid("0002441b-0000-0000-c000-000000000046"))
/* dispinterface */ RefreshEvents;
struct __declspec(uuid("00024428-0000-0000-c000-000000000046"))
/* dispinterface */ _QueryTable;
struct __declspec(uuid("00024429-0000-0000-c000-000000000046"))
/* dispinterface */ QueryTables;
struct __declspec(uuid("0002442a-0000-0000-c000-000000000046"))
/* dispinterface */ Parameter;
struct __declspec(uuid("0002442b-0000-0000-c000-000000000046"))
/* dispinterface */ Parameters;
struct __declspec(uuid("0002442c-0000-0000-c000-000000000046"))
/* dispinterface */ ODBCError;
struct __declspec(uuid("0002442d-0000-0000-c000-000000000046"))
/* dispinterface */ ODBCErrors;
struct __declspec(uuid("0002442f-0000-0000-c000-000000000046"))
/* dispinterface */ Validation;
struct __declspec(uuid("00024430-0000-0000-c000-000000000046"))
/* dispinterface */ Hyperlinks;
struct __declspec(uuid("00024431-0000-0000-c000-000000000046"))
/* dispinterface */ Hyperlink;
struct __declspec(uuid("00024432-0000-0000-c000-000000000046"))
/* dispinterface */ AutoFilter;
struct __declspec(uuid("00024433-0000-0000-c000-000000000046"))
/* dispinterface */ Filters;
struct __declspec(uuid("00024434-0000-0000-c000-000000000046"))
/* dispinterface */ Filter;
struct __declspec(uuid("000208d4-0000-0000-c000-000000000046"))
/* dispinterface */ AutoCorrect;
struct __declspec(uuid("00020854-0000-0000-c000-000000000046"))
/* dispinterface */ Border;
struct __declspec(uuid("00020870-0000-0000-c000-000000000046"))
/* dispinterface */ Interior;
struct __declspec(uuid("00024435-0000-0000-c000-000000000046"))
/* dispinterface */ ChartFillFormat;
struct __declspec(uuid("00024436-0000-0000-c000-000000000046"))
/* dispinterface */ ChartColorFormat;
struct __declspec(uuid("00020848-0000-0000-c000-000000000046"))
/* dispinterface */ Axis;
struct __declspec(uuid("00020849-0000-0000-c000-000000000046"))
/* dispinterface */ ChartTitle;
struct __declspec(uuid("0002084a-0000-0000-c000-000000000046"))
/* dispinterface */ AxisTitle;
struct __declspec(uuid("00020859-0000-0000-c000-000000000046"))
/* dispinterface */ ChartGroup;
struct __declspec(uuid("0002085a-0000-0000-c000-000000000046"))
/* dispinterface */ ChartGroups;
struct __declspec(uuid("0002085b-0000-0000-c000-000000000046"))
/* dispinterface */ Axes;
struct __declspec(uuid("00020869-0000-0000-c000-000000000046"))
/* dispinterface */ Points;
struct __declspec(uuid("0002086a-0000-0000-c000-000000000046"))
/* dispinterface */ Point;
struct __declspec(uuid("0002086b-0000-0000-c000-000000000046"))
/* dispinterface */ Series;
struct __declspec(uuid("0002086c-0000-0000-c000-000000000046"))
/* dispinterface */ SeriesCollection;
struct __declspec(uuid("000208b2-0000-0000-c000-000000000046"))
/* dispinterface */ DataLabel;
struct __declspec(uuid("000208b3-0000-0000-c000-000000000046"))
/* dispinterface */ DataLabels;
struct __declspec(uuid("000208ba-0000-0000-c000-000000000046"))
/* dispinterface */ LegendEntry;
struct __declspec(uuid("000208bb-0000-0000-c000-000000000046"))
/* dispinterface */ LegendEntries;
struct __declspec(uuid("000208bc-0000-0000-c000-000000000046"))
/* dispinterface */ LegendKey;
struct __declspec(uuid("000208bd-0000-0000-c000-000000000046"))
/* dispinterface */ Trendlines;
struct __declspec(uuid("000208be-0000-0000-c000-000000000046"))
/* dispinterface */ Trendline;
struct __declspec(uuid("000208c0-0000-0000-c000-000000000046"))
/* dispinterface */ Corners;
struct __declspec(uuid("000208c1-0000-0000-c000-000000000046"))
/* dispinterface */ SeriesLines;
struct __declspec(uuid("000208c2-0000-0000-c000-000000000046"))
/* dispinterface */ HiLoLines;
struct __declspec(uuid("000208c3-0000-0000-c000-000000000046"))
/* dispinterface */ Gridlines;
struct __declspec(uuid("000208c4-0000-0000-c000-000000000046"))
/* dispinterface */ DropLines;
struct __declspec(uuid("00024437-0000-0000-c000-000000000046"))
/* dispinterface */ LeaderLines;
struct __declspec(uuid("000208c5-0000-0000-c000-000000000046"))
/* dispinterface */ UpBars;
struct __declspec(uuid("000208c6-0000-0000-c000-000000000046"))
/* dispinterface */ DownBars;
struct __declspec(uuid("000208c7-0000-0000-c000-000000000046"))
/* dispinterface */ Floor;
struct __declspec(uuid("000208c8-0000-0000-c000-000000000046"))
/* dispinterface */ Walls;
struct __declspec(uuid("000208c9-0000-0000-c000-000000000046"))
/* dispinterface */ TickLabels;
struct __declspec(uuid("000208cb-0000-0000-c000-000000000046"))
/* dispinterface */ PlotArea;
struct __declspec(uuid("000208cc-0000-0000-c000-000000000046"))
/* dispinterface */ ChartArea;
struct __declspec(uuid("000208cd-0000-0000-c000-000000000046"))
/* dispinterface */ Legend;
struct __declspec(uuid("000208ce-0000-0000-c000-000000000046"))
/* dispinterface */ ErrorBars;
struct __declspec(uuid("00020843-0000-0000-c000-000000000046"))
/* dispinterface */ DataTable;
struct __declspec(uuid("00024438-0000-0000-c000-000000000046"))
/* dispinterface */ Phonetic;
struct __declspec(uuid("00024439-0000-0000-c000-000000000046"))
/* dispinterface */ Shape;
struct __declspec(uuid("0002443a-0000-0000-c000-000000000046"))
/* dispinterface */ Shapes;
struct __declspec(uuid("0002443b-0000-0000-c000-000000000046"))
/* dispinterface */ ShapeRange;
struct __declspec(uuid("0002443c-0000-0000-c000-000000000046"))
/* dispinterface */ GroupShapes;
struct __declspec(uuid("0002443d-0000-0000-c000-000000000046"))
/* dispinterface */ TextFrame;
struct __declspec(uuid("0002443e-0000-0000-c000-000000000046"))
/* dispinterface */ ConnectorFormat;
struct __declspec(uuid("0002443f-0000-0000-c000-000000000046"))
/* dispinterface */ FreeformBuilder;
struct __declspec(uuid("00024440-0000-0000-c000-000000000046"))
/* dispinterface */ ControlFormat;
struct __declspec(uuid("00024441-0000-0000-c000-000000000046"))
/* dispinterface */ OLEFormat;
struct __declspec(uuid("00024442-0000-0000-c000-000000000046"))
/* dispinterface */ LinkFormat;
struct __declspec(uuid("00024443-0000-0000-c000-000000000046"))
/* dispinterface */ PublishObjects;
struct __declspec(uuid("00024445-0000-0000-c000-000000000046"))
/* dispinterface */ OLEDBError;
struct __declspec(uuid("00024446-0000-0000-c000-000000000046"))
/* dispinterface */ OLEDBErrors;
struct __declspec(uuid("00024447-0000-0000-c000-000000000046"))
/* dispinterface */ Phonetics;
struct __declspec(uuid("0002444a-0000-0000-c000-000000000046"))
/* dispinterface */ PivotLayout;
struct __declspec(uuid("0002084c-0000-0000-c000-000000000046"))
/* dispinterface */ DisplayUnitLabel;
struct __declspec(uuid("00024450-0000-0000-c000-000000000046"))
/* dispinterface */ CellFormat;
struct __declspec(uuid("00024451-0000-0000-c000-000000000046"))
/* dispinterface */ UsedObjects;
struct __declspec(uuid("00024452-0000-0000-c000-000000000046"))
/* dispinterface */ CustomProperties;
struct __declspec(uuid("00024453-0000-0000-c000-000000000046"))
/* dispinterface */ CustomProperty;
struct __declspec(uuid("00024454-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedMembers;
struct __declspec(uuid("00024455-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedMember;
struct __declspec(uuid("00024456-0000-0000-c000-000000000046"))
/* dispinterface */ Watches;
struct __declspec(uuid("00024457-0000-0000-c000-000000000046"))
/* dispinterface */ Watch;
struct __declspec(uuid("00024458-0000-0000-c000-000000000046"))
/* dispinterface */ PivotCell;
struct __declspec(uuid("00024459-0000-0000-c000-000000000046"))
/* dispinterface */ Graphic;
struct __declspec(uuid("0002445a-0000-0000-c000-000000000046"))
/* dispinterface */ AutoRecover;
struct __declspec(uuid("0002445b-0000-0000-c000-000000000046"))
/* dispinterface */ ErrorCheckingOptions;
struct __declspec(uuid("0002445c-0000-0000-c000-000000000046"))
/* dispinterface */ Errors;
struct __declspec(uuid("0002445d-0000-0000-c000-000000000046"))
/* dispinterface */ Error;
struct __declspec(uuid("0002445e-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagAction;
struct __declspec(uuid("0002445f-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagActions;
struct __declspec(uuid("00024460-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTag;
struct __declspec(uuid("00024461-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTags;
struct __declspec(uuid("00024462-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagRecognizer;
struct __declspec(uuid("00024463-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagRecognizers;
struct __declspec(uuid("00024464-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagOptions;
struct __declspec(uuid("00024465-0000-0000-c000-000000000046"))
/* dispinterface */ SpellingOptions;
struct __declspec(uuid("00024466-0000-0000-c000-000000000046"))
/* dispinterface */ Speech;
struct __declspec(uuid("00024467-0000-0000-c000-000000000046"))
/* dispinterface */ Protection;
struct __declspec(uuid("00024468-0000-0000-c000-000000000046"))
/* dispinterface */ PivotItemList;
struct __declspec(uuid("00024469-0000-0000-c000-000000000046"))
/* dispinterface */ Tab;
struct __declspec(uuid("0002446a-0000-0000-c000-000000000046"))
/* dispinterface */ AllowEditRanges;
struct __declspec(uuid("0002446b-0000-0000-c000-000000000046"))
/* dispinterface */ AllowEditRange;
struct __declspec(uuid("0002446c-0000-0000-c000-000000000046"))
/* dispinterface */ UserAccessList;
struct __declspec(uuid("0002446d-0000-0000-c000-000000000046"))
/* dispinterface */ UserAccess;
struct __declspec(uuid("0002446e-0000-0000-c000-000000000046"))
/* dispinterface */ RTD;
struct __declspec(uuid("0002446f-0000-0000-c000-000000000046"))
/* dispinterface */ Diagram;
struct __declspec(uuid("00024470-0000-0000-c000-000000000046"))
/* dispinterface */ ListObjects;
struct __declspec(uuid("00024471-0000-0000-c000-000000000046"))
/* dispinterface */ ListObject;
struct __declspec(uuid("00024472-0000-0000-c000-000000000046"))
/* dispinterface */ ListColumns;
struct __declspec(uuid("00024473-0000-0000-c000-000000000046"))
/* dispinterface */ ListColumn;
struct __declspec(uuid("00024474-0000-0000-c000-000000000046"))
/* dispinterface */ ListRows;
struct __declspec(uuid("00024475-0000-0000-c000-000000000046"))
/* dispinterface */ ListRow;
struct __declspec(uuid("00024476-0000-0000-c000-000000000046"))
/* dispinterface */ XmlNamespace;
struct __declspec(uuid("00024477-0000-0000-c000-000000000046"))
/* dispinterface */ XmlNamespaces;
struct __declspec(uuid("00024478-0000-0000-c000-000000000046"))
/* dispinterface */ XmlDataBinding;
struct __declspec(uuid("00024479-0000-0000-c000-000000000046"))
/* dispinterface */ XmlSchema;
struct __declspec(uuid("0002447a-0000-0000-c000-000000000046"))
/* dispinterface */ XmlSchemas;
struct __declspec(uuid("0002447b-0000-0000-c000-000000000046"))
/* dispinterface */ XmlMap;
struct __declspec(uuid("0002447c-0000-0000-c000-000000000046"))
/* dispinterface */ XmlMaps;
struct __declspec(uuid("0002447d-0000-0000-c000-000000000046"))
/* dispinterface */ ListDataFormat;
struct __declspec(uuid("0002447e-0000-0000-c000-000000000046"))
/* dispinterface */ XPath;
struct __declspec(uuid("0002442e-0001-0000-c000-000000000046"))
/* interface */ IDummy;
struct __declspec(uuid("0002444f-0001-0000-c000-000000000046"))
/* interface */ ICanvasShapes;
struct /* coclass */ QueryTable;
struct /* coclass */ Application;
struct /* coclass */ Chart;
struct /* coclass */ Worksheet;
struct /* coclass */ Global;
struct /* coclass */ Workbook;
struct /* coclass */ OLEObject;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(Adjustments, __uuidof(Adjustments));
_COM_SMARTPTR_TYPEDEF(CalloutFormat, __uuidof(CalloutFormat));
_COM_SMARTPTR_TYPEDEF(ColorFormat, __uuidof(ColorFormat));
_COM_SMARTPTR_TYPEDEF(LineFormat, __uuidof(LineFormat));
_COM_SMARTPTR_TYPEDEF(ShapeNode, __uuidof(ShapeNode));
_COM_SMARTPTR_TYPEDEF(ShapeNodes, __uuidof(ShapeNodes));
_COM_SMARTPTR_TYPEDEF(PictureFormat, __uuidof(PictureFormat));
_COM_SMARTPTR_TYPEDEF(ShadowFormat, __uuidof(ShadowFormat));
_COM_SMARTPTR_TYPEDEF(TextEffectFormat, __uuidof(TextEffectFormat));
_COM_SMARTPTR_TYPEDEF(ThreeDFormat, __uuidof(ThreeDFormat));
_COM_SMARTPTR_TYPEDEF(FillFormat, __uuidof(FillFormat));
_COM_SMARTPTR_TYPEDEF(IRTDUpdateEvent, __uuidof(IRTDUpdateEvent));
_COM_SMARTPTR_TYPEDEF(IRtdServer, __uuidof(IRtdServer));
_COM_SMARTPTR_TYPEDEF(IChartEvents, __uuidof(IChartEvents));
_COM_SMARTPTR_TYPEDEF(IOLEObjectEvents, __uuidof(IOLEObjectEvents));
_COM_SMARTPTR_TYPEDEF(IRefreshEvents, __uuidof(IRefreshEvents));
_COM_SMARTPTR_TYPEDEF(ISpellingOptions, __uuidof(ISpellingOptions));
_COM_SMARTPTR_TYPEDEF(ISpeech, __uuidof(ISpeech));
_COM_SMARTPTR_TYPEDEF(IUserAccess, __uuidof(IUserAccess));
_COM_SMARTPTR_TYPEDEF(IRTD, __uuidof(IRTD));
_COM_SMARTPTR_TYPEDEF(Font, __uuidof(Font));
_COM_SMARTPTR_TYPEDEF(Window, __uuidof(Window));
_COM_SMARTPTR_TYPEDEF(Windows, __uuidof(Windows));
_COM_SMARTPTR_TYPEDEF(AppEvents, __uuidof(AppEvents));
_COM_SMARTPTR_TYPEDEF(WorksheetFunction, __uuidof(WorksheetFunction));
_COM_SMARTPTR_TYPEDEF(Range, __uuidof(Range));
_COM_SMARTPTR_TYPEDEF(ChartEvents, __uuidof(ChartEvents));
_COM_SMARTPTR_TYPEDEF(VPageBreak, __uuidof(VPageBreak));
_COM_SMARTPTR_TYPEDEF(HPageBreak, __uuidof(HPageBreak));
_COM_SMARTPTR_TYPEDEF(HPageBreaks, __uuidof(HPageBreaks));
_COM_SMARTPTR_TYPEDEF(VPageBreaks, __uuidof(VPageBreaks));
_COM_SMARTPTR_TYPEDEF(RecentFile, __uuidof(RecentFile));
_COM_SMARTPTR_TYPEDEF(RecentFiles, __uuidof(RecentFiles));
_COM_SMARTPTR_TYPEDEF(DocEvents, __uuidof(DocEvents));
_COM_SMARTPTR_TYPEDEF(Style, __uuidof(Style));
_COM_SMARTPTR_TYPEDEF(Styles, __uuidof(Styles));
_COM_SMARTPTR_TYPEDEF(Borders, __uuidof(Borders));
_COM_SMARTPTR_TYPEDEF(AddIn, __uuidof(AddIn));
_COM_SMARTPTR_TYPEDEF(AddIns, __uuidof(AddIns));
_COM_SMARTPTR_TYPEDEF(Toolbar, __uuidof(Toolbar));
_COM_SMARTPTR_TYPEDEF(Toolbars, __uuidof(Toolbars));
_COM_SMARTPTR_TYPEDEF(ToolbarButton, __uuidof(ToolbarButton));
_COM_SMARTPTR_TYPEDEF(ToolbarButtons, __uuidof(ToolbarButtons));
_COM_SMARTPTR_TYPEDEF(Areas, __uuidof(Areas));
_COM_SMARTPTR_TYPEDEF(WorkbookEvents, __uuidof(WorkbookEvents));
_COM_SMARTPTR_TYPEDEF(MenuBars, __uuidof(MenuBars));
_COM_SMARTPTR_TYPEDEF(MenuBar, __uuidof(MenuBar));
_COM_SMARTPTR_TYPEDEF(Menus, __uuidof(Menus));
_COM_SMARTPTR_TYPEDEF(Menu, __uuidof(Menu));
_COM_SMARTPTR_TYPEDEF(MenuItems, __uuidof(MenuItems));
_COM_SMARTPTR_TYPEDEF(MenuItem, __uuidof(MenuItem));
_COM_SMARTPTR_TYPEDEF(Charts, __uuidof(Charts));
_COM_SMARTPTR_TYPEDEF(DrawingObjects, __uuidof(DrawingObjects));
_COM_SMARTPTR_TYPEDEF(PivotCache, __uuidof(PivotCache));
_COM_SMARTPTR_TYPEDEF(PivotCaches, __uuidof(PivotCaches));
_COM_SMARTPTR_TYPEDEF(PivotFormula, __uuidof(PivotFormula));
_COM_SMARTPTR_TYPEDEF(PivotFormulas, __uuidof(PivotFormulas));
_COM_SMARTPTR_TYPEDEF(PivotTable, __uuidof(PivotTable));
_COM_SMARTPTR_TYPEDEF(PivotTables, __uuidof(PivotTables));
_COM_SMARTPTR_TYPEDEF(PivotField, __uuidof(PivotField));
_COM_SMARTPTR_TYPEDEF(PivotFields, __uuidof(PivotFields));
_COM_SMARTPTR_TYPEDEF(CalculatedFields, __uuidof(CalculatedFields));
_COM_SMARTPTR_TYPEDEF(PivotItem, __uuidof(PivotItem));
_COM_SMARTPTR_TYPEDEF(PivotItems, __uuidof(PivotItems));
_COM_SMARTPTR_TYPEDEF(CalculatedItems, __uuidof(CalculatedItems));
_COM_SMARTPTR_TYPEDEF(Characters, __uuidof(Characters));
_COM_SMARTPTR_TYPEDEF(Dialogs, __uuidof(Dialogs));
_COM_SMARTPTR_TYPEDEF(Dialog, __uuidof(Dialog));
_COM_SMARTPTR_TYPEDEF(SoundNote, __uuidof(SoundNote));
_COM_SMARTPTR_TYPEDEF(Button, __uuidof(Button));
_COM_SMARTPTR_TYPEDEF(Buttons, __uuidof(Buttons));
_COM_SMARTPTR_TYPEDEF(CheckBox, __uuidof(CheckBox));
_COM_SMARTPTR_TYPEDEF(CheckBoxes, __uuidof(CheckBoxes));
_COM_SMARTPTR_TYPEDEF(OptionButton, __uuidof(OptionButton));
_COM_SMARTPTR_TYPEDEF(OptionButtons, __uuidof(OptionButtons));
_COM_SMARTPTR_TYPEDEF(EditBox, __uuidof(EditBox));
_COM_SMARTPTR_TYPEDEF(EditBoxes, __uuidof(EditBoxes));
_COM_SMARTPTR_TYPEDEF(ScrollBar, __uuidof(ScrollBar));
_COM_SMARTPTR_TYPEDEF(ScrollBars, __uuidof(ScrollBars));
_COM_SMARTPTR_TYPEDEF(ListBox, __uuidof(ListBox));
_COM_SMARTPTR_TYPEDEF(ListBoxes, __uuidof(ListBoxes));
_COM_SMARTPTR_TYPEDEF(GroupBox, __uuidof(GroupBox));
_COM_SMARTPTR_TYPEDEF(GroupBoxes, __uuidof(GroupBoxes));
_COM_SMARTPTR_TYPEDEF(DropDown, __uuidof(DropDown));
_COM_SMARTPTR_TYPEDEF(DropDowns, __uuidof(DropDowns));
_COM_SMARTPTR_TYPEDEF(Spinner, __uuidof(Spinner));
_COM_SMARTPTR_TYPEDEF(Spinners, __uuidof(Spinners));
_COM_SMARTPTR_TYPEDEF(DialogFrame, __uuidof(DialogFrame));
_COM_SMARTPTR_TYPEDEF(Label, __uuidof(Label));
_COM_SMARTPTR_TYPEDEF(Labels, __uuidof(Labels));
_COM_SMARTPTR_TYPEDEF(Panes, __uuidof(Panes));
_COM_SMARTPTR_TYPEDEF(Pane, __uuidof(Pane));
_COM_SMARTPTR_TYPEDEF(Scenarios, __uuidof(Scenarios));
_COM_SMARTPTR_TYPEDEF(Scenario, __uuidof(Scenario));
_COM_SMARTPTR_TYPEDEF(GroupObject, __uuidof(GroupObject));
_COM_SMARTPTR_TYPEDEF(GroupObjects, __uuidof(GroupObjects));
_COM_SMARTPTR_TYPEDEF(Line, __uuidof(Line));
_COM_SMARTPTR_TYPEDEF(Lines, __uuidof(Lines));
_COM_SMARTPTR_TYPEDEF(Rectangle, __uuidof(Rectangle));
_COM_SMARTPTR_TYPEDEF(Rectangles, __uuidof(Rectangles));
_COM_SMARTPTR_TYPEDEF(Oval, __uuidof(Oval));
_COM_SMARTPTR_TYPEDEF(Ovals, __uuidof(Ovals));
_COM_SMARTPTR_TYPEDEF(Arc, __uuidof(Arc));
_COM_SMARTPTR_TYPEDEF(Arcs, __uuidof(Arcs));
_COM_SMARTPTR_TYPEDEF(OLEObjectEvents, __uuidof(OLEObjectEvents));
_COM_SMARTPTR_TYPEDEF(_OLEObject, __uuidof(_OLEObject));
_COM_SMARTPTR_TYPEDEF(OLEObjects, __uuidof(OLEObjects));
_COM_SMARTPTR_TYPEDEF(TextBox, __uuidof(TextBox));
_COM_SMARTPTR_TYPEDEF(TextBoxes, __uuidof(TextBoxes));
_COM_SMARTPTR_TYPEDEF(Picture, __uuidof(Picture));
_COM_SMARTPTR_TYPEDEF(Pictures, __uuidof(Pictures));
_COM_SMARTPTR_TYPEDEF(Drawing, __uuidof(Drawing));
_COM_SMARTPTR_TYPEDEF(Drawings, __uuidof(Drawings));
_COM_SMARTPTR_TYPEDEF(RoutingSlip, __uuidof(RoutingSlip));
_COM_SMARTPTR_TYPEDEF(Outline, __uuidof(Outline));
_COM_SMARTPTR_TYPEDEF(Module, __uuidof(Module));
_COM_SMARTPTR_TYPEDEF(Modules, __uuidof(Modules));
_COM_SMARTPTR_TYPEDEF(DialogSheet, __uuidof(DialogSheet));
_COM_SMARTPTR_TYPEDEF(DialogSheets, __uuidof(DialogSheets));
_COM_SMARTPTR_TYPEDEF(Worksheets, __uuidof(Worksheets));
_COM_SMARTPTR_TYPEDEF(PageSetup, __uuidof(PageSetup));
_COM_SMARTPTR_TYPEDEF(Names, __uuidof(Names));
_COM_SMARTPTR_TYPEDEF(Name, __uuidof(Name));
_COM_SMARTPTR_TYPEDEF(ChartObject, __uuidof(ChartObject));
_COM_SMARTPTR_TYPEDEF(ChartObjects, __uuidof(ChartObjects));
_COM_SMARTPTR_TYPEDEF(Mailer, __uuidof(Mailer));
_COM_SMARTPTR_TYPEDEF(CustomViews, __uuidof(CustomViews));
_COM_SMARTPTR_TYPEDEF(CustomView, __uuidof(CustomView));
_COM_SMARTPTR_TYPEDEF(FormatConditions, __uuidof(FormatConditions));
_COM_SMARTPTR_TYPEDEF(FormatCondition, __uuidof(FormatCondition));
_COM_SMARTPTR_TYPEDEF(Comments, __uuidof(Comments));
_COM_SMARTPTR_TYPEDEF(Comment, __uuidof(Comment));
_COM_SMARTPTR_TYPEDEF(RefreshEvents, __uuidof(RefreshEvents));
_COM_SMARTPTR_TYPEDEF(_QueryTable, __uuidof(_QueryTable));
_COM_SMARTPTR_TYPEDEF(QueryTables, __uuidof(QueryTables));
_COM_SMARTPTR_TYPEDEF(Parameter, __uuidof(Parameter));
_COM_SMARTPTR_TYPEDEF(Parameters, __uuidof(Parameters));
_COM_SMARTPTR_TYPEDEF(ODBCError, __uuidof(ODBCError));
_COM_SMARTPTR_TYPEDEF(ODBCErrors, __uuidof(ODBCErrors));
_COM_SMARTPTR_TYPEDEF(Validation, __uuidof(Validation));
_COM_SMARTPTR_TYPEDEF(Hyperlinks, __uuidof(Hyperlinks));
_COM_SMARTPTR_TYPEDEF(Hyperlink, __uuidof(Hyperlink));
_COM_SMARTPTR_TYPEDEF(IDocEvents, __uuidof(IDocEvents));
_COM_SMARTPTR_TYPEDEF(AutoFilter, __uuidof(AutoFilter));
_COM_SMARTPTR_TYPEDEF(Filters, __uuidof(Filters));
_COM_SMARTPTR_TYPEDEF(Filter, __uuidof(Filter));
_COM_SMARTPTR_TYPEDEF(AutoCorrect, __uuidof(AutoCorrect));
_COM_SMARTPTR_TYPEDEF(Border, __uuidof(Border));
_COM_SMARTPTR_TYPEDEF(Interior, __uuidof(Interior));
_COM_SMARTPTR_TYPEDEF(ChartFillFormat, __uuidof(ChartFillFormat));
_COM_SMARTPTR_TYPEDEF(ChartColorFormat, __uuidof(ChartColorFormat));
_COM_SMARTPTR_TYPEDEF(Axis, __uuidof(Axis));
_COM_SMARTPTR_TYPEDEF(ChartTitle, __uuidof(ChartTitle));
_COM_SMARTPTR_TYPEDEF(AxisTitle, __uuidof(AxisTitle));
_COM_SMARTPTR_TYPEDEF(ChartGroup, __uuidof(ChartGroup));
_COM_SMARTPTR_TYPEDEF(ChartGroups, __uuidof(ChartGroups));
_COM_SMARTPTR_TYPEDEF(Axes, __uuidof(Axes));
_COM_SMARTPTR_TYPEDEF(Points, __uuidof(Points));
_COM_SMARTPTR_TYPEDEF(Point, __uuidof(Point));
_COM_SMARTPTR_TYPEDEF(Series, __uuidof(Series));
_COM_SMARTPTR_TYPEDEF(SeriesCollection, __uuidof(SeriesCollection));
_COM_SMARTPTR_TYPEDEF(DataLabel, __uuidof(DataLabel));
_COM_SMARTPTR_TYPEDEF(DataLabels, __uuidof(DataLabels));
_COM_SMARTPTR_TYPEDEF(LegendEntry, __uuidof(LegendEntry));
_COM_SMARTPTR_TYPEDEF(LegendEntries, __uuidof(LegendEntries));
_COM_SMARTPTR_TYPEDEF(LegendKey, __uuidof(LegendKey));
_COM_SMARTPTR_TYPEDEF(Trendlines, __uuidof(Trendlines));
_COM_SMARTPTR_TYPEDEF(Trendline, __uuidof(Trendline));
_COM_SMARTPTR_TYPEDEF(Corners, __uuidof(Corners));
_COM_SMARTPTR_TYPEDEF(SeriesLines, __uuidof(SeriesLines));
_COM_SMARTPTR_TYPEDEF(HiLoLines, __uuidof(HiLoLines));
_COM_SMARTPTR_TYPEDEF(Gridlines, __uuidof(Gridlines));
_COM_SMARTPTR_TYPEDEF(DropLines, __uuidof(DropLines));
_COM_SMARTPTR_TYPEDEF(LeaderLines, __uuidof(LeaderLines));
_COM_SMARTPTR_TYPEDEF(UpBars, __uuidof(UpBars));
_COM_SMARTPTR_TYPEDEF(DownBars, __uuidof(DownBars));
_COM_SMARTPTR_TYPEDEF(Floor, __uuidof(Floor));
_COM_SMARTPTR_TYPEDEF(Walls, __uuidof(Walls));
_COM_SMARTPTR_TYPEDEF(TickLabels, __uuidof(TickLabels));
_COM_SMARTPTR_TYPEDEF(PlotArea, __uuidof(PlotArea));
_COM_SMARTPTR_TYPEDEF(ChartArea, __uuidof(ChartArea));
_COM_SMARTPTR_TYPEDEF(Legend, __uuidof(Legend));
_COM_SMARTPTR_TYPEDEF(ErrorBars, __uuidof(ErrorBars));
_COM_SMARTPTR_TYPEDEF(DataTable, __uuidof(DataTable));
_COM_SMARTPTR_TYPEDEF(Phonetic, __uuidof(Phonetic));
_COM_SMARTPTR_TYPEDEF(Shape, __uuidof(Shape));
_COM_SMARTPTR_TYPEDEF(Shapes, __uuidof(Shapes));
_COM_SMARTPTR_TYPEDEF(ShapeRange, __uuidof(ShapeRange));
_COM_SMARTPTR_TYPEDEF(GroupShapes, __uuidof(GroupShapes));
_COM_SMARTPTR_TYPEDEF(TextFrame, __uuidof(TextFrame));
_COM_SMARTPTR_TYPEDEF(ConnectorFormat, __uuidof(ConnectorFormat));
_COM_SMARTPTR_TYPEDEF(FreeformBuilder, __uuidof(FreeformBuilder));
_COM_SMARTPTR_TYPEDEF(ControlFormat, __uuidof(ControlFormat));
_COM_SMARTPTR_TYPEDEF(OLEFormat, __uuidof(OLEFormat));
_COM_SMARTPTR_TYPEDEF(LinkFormat, __uuidof(LinkFormat));
_COM_SMARTPTR_TYPEDEF(PublishObjects, __uuidof(PublishObjects));
_COM_SMARTPTR_TYPEDEF(OLEDBError, __uuidof(OLEDBError));
_COM_SMARTPTR_TYPEDEF(OLEDBErrors, __uuidof(OLEDBErrors));
_COM_SMARTPTR_TYPEDEF(Phonetics, __uuidof(Phonetics));
_COM_SMARTPTR_TYPEDEF(PivotLayout, __uuidof(PivotLayout));
_COM_SMARTPTR_TYPEDEF(DisplayUnitLabel, __uuidof(DisplayUnitLabel));
_COM_SMARTPTR_TYPEDEF(CellFormat, __uuidof(CellFormat));
_COM_SMARTPTR_TYPEDEF(UsedObjects, __uuidof(UsedObjects));
_COM_SMARTPTR_TYPEDEF(CustomProperties, __uuidof(CustomProperties));
_COM_SMARTPTR_TYPEDEF(CustomProperty, __uuidof(CustomProperty));
_COM_SMARTPTR_TYPEDEF(CalculatedMembers, __uuidof(CalculatedMembers));
_COM_SMARTPTR_TYPEDEF(CalculatedMember, __uuidof(CalculatedMember));
_COM_SMARTPTR_TYPEDEF(Watches, __uuidof(Watches));
_COM_SMARTPTR_TYPEDEF(Watch, __uuidof(Watch));
_COM_SMARTPTR_TYPEDEF(PivotCell, __uuidof(PivotCell));
_COM_SMARTPTR_TYPEDEF(Graphic, __uuidof(Graphic));
_COM_SMARTPTR_TYPEDEF(AutoRecover, __uuidof(AutoRecover));
_COM_SMARTPTR_TYPEDEF(ErrorCheckingOptions, __uuidof(ErrorCheckingOptions));
_COM_SMARTPTR_TYPEDEF(Errors, __uuidof(Errors));
_COM_SMARTPTR_TYPEDEF(Error, __uuidof(Error));
_COM_SMARTPTR_TYPEDEF(SmartTagAction, __uuidof(SmartTagAction));
_COM_SMARTPTR_TYPEDEF(SmartTagActions, __uuidof(SmartTagActions));
_COM_SMARTPTR_TYPEDEF(SmartTag, __uuidof(SmartTag));
_COM_SMARTPTR_TYPEDEF(SmartTags, __uuidof(SmartTags));
_COM_SMARTPTR_TYPEDEF(SmartTagRecognizer, __uuidof(SmartTagRecognizer));
_COM_SMARTPTR_TYPEDEF(SmartTagRecognizers, __uuidof(SmartTagRecognizers));
_COM_SMARTPTR_TYPEDEF(SmartTagOptions, __uuidof(SmartTagOptions));
_COM_SMARTPTR_TYPEDEF(SpellingOptions, __uuidof(SpellingOptions));
_COM_SMARTPTR_TYPEDEF(Speech, __uuidof(Speech));
_COM_SMARTPTR_TYPEDEF(Protection, __uuidof(Protection));
_COM_SMARTPTR_TYPEDEF(PivotItemList, __uuidof(PivotItemList));
_COM_SMARTPTR_TYPEDEF(Tab, __uuidof(Tab));
_COM_SMARTPTR_TYPEDEF(AllowEditRanges, __uuidof(AllowEditRanges));
_COM_SMARTPTR_TYPEDEF(IProtection, __uuidof(IProtection));
_COM_SMARTPTR_TYPEDEF(AllowEditRange, __uuidof(AllowEditRange));
_COM_SMARTPTR_TYPEDEF(IAllowEditRanges, __uuidof(IAllowEditRanges));
_COM_SMARTPTR_TYPEDEF(UserAccessList, __uuidof(UserAccessList));
_COM_SMARTPTR_TYPEDEF(IAllowEditRange, __uuidof(IAllowEditRange));
_COM_SMARTPTR_TYPEDEF(UserAccess, __uuidof(UserAccess));
_COM_SMARTPTR_TYPEDEF(IUserAccessList, __uuidof(IUserAccessList));
_COM_SMARTPTR_TYPEDEF(RTD, __uuidof(RTD));
_COM_SMARTPTR_TYPEDEF(Diagram, __uuidof(Diagram));
_COM_SMARTPTR_TYPEDEF(ListObjects, __uuidof(ListObjects));
_COM_SMARTPTR_TYPEDEF(ListObject, __uuidof(ListObject));
_COM_SMARTPTR_TYPEDEF(ListColumns, __uuidof(ListColumns));
_COM_SMARTPTR_TYPEDEF(ListColumn, __uuidof(ListColumn));
_COM_SMARTPTR_TYPEDEF(ListRows, __uuidof(ListRows));
_COM_SMARTPTR_TYPEDEF(ListRow, __uuidof(ListRow));
_COM_SMARTPTR_TYPEDEF(XmlNamespace, __uuidof(XmlNamespace));
_COM_SMARTPTR_TYPEDEF(XmlNamespaces, __uuidof(XmlNamespaces));
_COM_SMARTPTR_TYPEDEF(XmlDataBinding, __uuidof(XmlDataBinding));
_COM_SMARTPTR_TYPEDEF(XmlSchema, __uuidof(XmlSchema));
_COM_SMARTPTR_TYPEDEF(XmlSchemas, __uuidof(XmlSchemas));
_COM_SMARTPTR_TYPEDEF(XmlMap, __uuidof(XmlMap));
_COM_SMARTPTR_TYPEDEF(IWorkbookEvents, __uuidof(IWorkbookEvents));
_COM_SMARTPTR_TYPEDEF(XmlMaps, __uuidof(XmlMaps));
_COM_SMARTPTR_TYPEDEF(ListDataFormat, __uuidof(ListDataFormat));
_COM_SMARTPTR_TYPEDEF(XPath, __uuidof(XPath));
_COM_SMARTPTR_TYPEDEF(IDummy, __uuidof(IDummy));
_COM_SMARTPTR_TYPEDEF(ICanvasShapes, __uuidof(ICanvasShapes));
_COM_SMARTPTR_TYPEDEF(IWindows, __uuidof(IWindows));
_COM_SMARTPTR_TYPEDEF(IWorksheetFunction, __uuidof(IWorksheetFunction));
_COM_SMARTPTR_TYPEDEF(Sheets, __uuidof(Sheets));
_COM_SMARTPTR_TYPEDEF(IHPageBreaks, __uuidof(IHPageBreaks));
_COM_SMARTPTR_TYPEDEF(IVPageBreaks, __uuidof(IVPageBreaks));
_COM_SMARTPTR_TYPEDEF(IRecentFiles, __uuidof(IRecentFiles));
_COM_SMARTPTR_TYPEDEF(_Worksheet, __uuidof(_Worksheet));
_COM_SMARTPTR_TYPEDEF(IStyle, __uuidof(IStyle));
_COM_SMARTPTR_TYPEDEF(IStyles, __uuidof(IStyles));
_COM_SMARTPTR_TYPEDEF(IBorders, __uuidof(IBorders));
_COM_SMARTPTR_TYPEDEF(IAddIn, __uuidof(IAddIn));
_COM_SMARTPTR_TYPEDEF(IAddIns, __uuidof(IAddIns));
_COM_SMARTPTR_TYPEDEF(IToolbar, __uuidof(IToolbar));
_COM_SMARTPTR_TYPEDEF(IToolbars, __uuidof(IToolbars));
_COM_SMARTPTR_TYPEDEF(IToolbarButton, __uuidof(IToolbarButton));
_COM_SMARTPTR_TYPEDEF(IToolbarButtons, __uuidof(IToolbarButtons));
_COM_SMARTPTR_TYPEDEF(IAreas, __uuidof(IAreas));
_COM_SMARTPTR_TYPEDEF(IMenuBars, __uuidof(IMenuBars));
_COM_SMARTPTR_TYPEDEF(IMenuBar, __uuidof(IMenuBar));
_COM_SMARTPTR_TYPEDEF(IMenus, __uuidof(IMenus));
_COM_SMARTPTR_TYPEDEF(IMenu, __uuidof(IMenu));
_COM_SMARTPTR_TYPEDEF(IMenuItems, __uuidof(IMenuItems));
_COM_SMARTPTR_TYPEDEF(IMenuItem, __uuidof(IMenuItem));
_COM_SMARTPTR_TYPEDEF(IDrawingObjects, __uuidof(IDrawingObjects));
_COM_SMARTPTR_TYPEDEF(IPivotCache, __uuidof(IPivotCache));
_COM_SMARTPTR_TYPEDEF(IPivotCaches, __uuidof(IPivotCaches));
_COM_SMARTPTR_TYPEDEF(IPivotFormula, __uuidof(IPivotFormula));
_COM_SMARTPTR_TYPEDEF(IPivotFormulas, __uuidof(IPivotFormulas));
_COM_SMARTPTR_TYPEDEF(IPivotTables, __uuidof(IPivotTables));
_COM_SMARTPTR_TYPEDEF(IPivotFields, __uuidof(IPivotFields));
_COM_SMARTPTR_TYPEDEF(ICalculatedFields, __uuidof(ICalculatedFields));
_COM_SMARTPTR_TYPEDEF(IPivotItem, __uuidof(IPivotItem));
_COM_SMARTPTR_TYPEDEF(IPivotItems, __uuidof(IPivotItems));
_COM_SMARTPTR_TYPEDEF(ICalculatedItems, __uuidof(ICalculatedItems));
_COM_SMARTPTR_TYPEDEF(ICharacters, __uuidof(ICharacters));
_COM_SMARTPTR_TYPEDEF(IDialogs, __uuidof(IDialogs));
_COM_SMARTPTR_TYPEDEF(IDialog, __uuidof(IDialog));
_COM_SMARTPTR_TYPEDEF(ISoundNote, __uuidof(ISoundNote));
_COM_SMARTPTR_TYPEDEF(IButton, __uuidof(IButton));
_COM_SMARTPTR_TYPEDEF(IButtons, __uuidof(IButtons));
_COM_SMARTPTR_TYPEDEF(ICheckBox, __uuidof(ICheckBox));
_COM_SMARTPTR_TYPEDEF(ICheckBoxes, __uuidof(ICheckBoxes));
_COM_SMARTPTR_TYPEDEF(IOptionButton, __uuidof(IOptionButton));
_COM_SMARTPTR_TYPEDEF(IOptionButtons, __uuidof(IOptionButtons));
_COM_SMARTPTR_TYPEDEF(IEditBox, __uuidof(IEditBox));
_COM_SMARTPTR_TYPEDEF(IEditBoxes, __uuidof(IEditBoxes));
_COM_SMARTPTR_TYPEDEF(IScrollBar, __uuidof(IScrollBar));
_COM_SMARTPTR_TYPEDEF(IScrollBars, __uuidof(IScrollBars));
_COM_SMARTPTR_TYPEDEF(IListBox, __uuidof(IListBox));
_COM_SMARTPTR_TYPEDEF(IListBoxes, __uuidof(IListBoxes));
_COM_SMARTPTR_TYPEDEF(IGroupBox, __uuidof(IGroupBox));
_COM_SMARTPTR_TYPEDEF(IGroupBoxes, __uuidof(IGroupBoxes));
_COM_SMARTPTR_TYPEDEF(IDropDown, __uuidof(IDropDown));
_COM_SMARTPTR_TYPEDEF(IDropDowns, __uuidof(IDropDowns));
_COM_SMARTPTR_TYPEDEF(ISpinner, __uuidof(ISpinner));
_COM_SMARTPTR_TYPEDEF(ISpinners, __uuidof(ISpinners));
_COM_SMARTPTR_TYPEDEF(IDialogFrame, __uuidof(IDialogFrame));
_COM_SMARTPTR_TYPEDEF(ILabel, __uuidof(ILabel));
_COM_SMARTPTR_TYPEDEF(ILabels, __uuidof(ILabels));
_COM_SMARTPTR_TYPEDEF(IPanes, __uuidof(IPanes));
_COM_SMARTPTR_TYPEDEF(IPane, __uuidof(IPane));
_COM_SMARTPTR_TYPEDEF(IScenarios, __uuidof(IScenarios));
_COM_SMARTPTR_TYPEDEF(IScenario, __uuidof(IScenario));
_COM_SMARTPTR_TYPEDEF(IGroupObject, __uuidof(IGroupObject));
_COM_SMARTPTR_TYPEDEF(IGroupObjects, __uuidof(IGroupObjects));
_COM_SMARTPTR_TYPEDEF(ILine, __uuidof(ILine));
_COM_SMARTPTR_TYPEDEF(ILines, __uuidof(ILines));
_COM_SMARTPTR_TYPEDEF(IRectangle, __uuidof(IRectangle));
_COM_SMARTPTR_TYPEDEF(IRectangles, __uuidof(IRectangles));
_COM_SMARTPTR_TYPEDEF(IOval, __uuidof(IOval));
_COM_SMARTPTR_TYPEDEF(IOvals, __uuidof(IOvals));
_COM_SMARTPTR_TYPEDEF(IArc, __uuidof(IArc));
_COM_SMARTPTR_TYPEDEF(IArcs, __uuidof(IArcs));
_COM_SMARTPTR_TYPEDEF(_IOLEObject, __uuidof(_IOLEObject));
_COM_SMARTPTR_TYPEDEF(ITextBox, __uuidof(ITextBox));
_COM_SMARTPTR_TYPEDEF(ITextBoxes, __uuidof(ITextBoxes));
_COM_SMARTPTR_TYPEDEF(IPictures, __uuidof(IPictures));
_COM_SMARTPTR_TYPEDEF(IDrawing, __uuidof(IDrawing));
_COM_SMARTPTR_TYPEDEF(IDrawings, __uuidof(IDrawings));
_COM_SMARTPTR_TYPEDEF(IRoutingSlip, __uuidof(IRoutingSlip));
_COM_SMARTPTR_TYPEDEF(IOutline, __uuidof(IOutline));
_COM_SMARTPTR_TYPEDEF(IModule, __uuidof(IModule));
_COM_SMARTPTR_TYPEDEF(IModules, __uuidof(IModules));
_COM_SMARTPTR_TYPEDEF(IDialogSheet, __uuidof(IDialogSheet));
_COM_SMARTPTR_TYPEDEF(IDialogSheets, __uuidof(IDialogSheets));
_COM_SMARTPTR_TYPEDEF(IWorksheets, __uuidof(IWorksheets));
_COM_SMARTPTR_TYPEDEF(IPageSetup, __uuidof(IPageSetup));
_COM_SMARTPTR_TYPEDEF(INames, __uuidof(INames));
_COM_SMARTPTR_TYPEDEF(IName, __uuidof(IName));
_COM_SMARTPTR_TYPEDEF(IChartObjects, __uuidof(IChartObjects));
_COM_SMARTPTR_TYPEDEF(IMailer, __uuidof(IMailer));
_COM_SMARTPTR_TYPEDEF(ICustomViews, __uuidof(ICustomViews));
_COM_SMARTPTR_TYPEDEF(ICustomView, __uuidof(ICustomView));
_COM_SMARTPTR_TYPEDEF(IFormatConditions, __uuidof(IFormatConditions));
_COM_SMARTPTR_TYPEDEF(IFormatCondition, __uuidof(IFormatCondition));
_COM_SMARTPTR_TYPEDEF(IComments, __uuidof(IComments));
_COM_SMARTPTR_TYPEDEF(IComment, __uuidof(IComment));
_COM_SMARTPTR_TYPEDEF(_IQueryTable, __uuidof(_IQueryTable));
_COM_SMARTPTR_TYPEDEF(IQueryTables, __uuidof(IQueryTables));
_COM_SMARTPTR_TYPEDEF(IParameter, __uuidof(IParameter));
_COM_SMARTPTR_TYPEDEF(IParameters, __uuidof(IParameters));
_COM_SMARTPTR_TYPEDEF(IODBCError, __uuidof(IODBCError));
_COM_SMARTPTR_TYPEDEF(IODBCErrors, __uuidof(IODBCErrors));
_COM_SMARTPTR_TYPEDEF(IValidation, __uuidof(IValidation));
_COM_SMARTPTR_TYPEDEF(IHyperlinks, __uuidof(IHyperlinks));
_COM_SMARTPTR_TYPEDEF(IHyperlink, __uuidof(IHyperlink));
_COM_SMARTPTR_TYPEDEF(IAutoFilter, __uuidof(IAutoFilter));
_COM_SMARTPTR_TYPEDEF(IFilters, __uuidof(IFilters));
_COM_SMARTPTR_TYPEDEF(IFilter, __uuidof(IFilter));
_COM_SMARTPTR_TYPEDEF(IAutoCorrect, __uuidof(IAutoCorrect));
_COM_SMARTPTR_TYPEDEF(IBorder, __uuidof(IBorder));
_COM_SMARTPTR_TYPEDEF(IInterior, __uuidof(IInterior));
_COM_SMARTPTR_TYPEDEF(IChartFillFormat, __uuidof(IChartFillFormat));
_COM_SMARTPTR_TYPEDEF(IChartColorFormat, __uuidof(IChartColorFormat));
_COM_SMARTPTR_TYPEDEF(IAxis, __uuidof(IAxis));
_COM_SMARTPTR_TYPEDEF(IChartTitle, __uuidof(IChartTitle));
_COM_SMARTPTR_TYPEDEF(IAxisTitle, __uuidof(IAxisTitle));
_COM_SMARTPTR_TYPEDEF(IChartGroup, __uuidof(IChartGroup));
_COM_SMARTPTR_TYPEDEF(IChartGroups, __uuidof(IChartGroups));
_COM_SMARTPTR_TYPEDEF(IAxes, __uuidof(IAxes));
_COM_SMARTPTR_TYPEDEF(IPoints, __uuidof(IPoints));
_COM_SMARTPTR_TYPEDEF(IPoint, __uuidof(IPoint));
_COM_SMARTPTR_TYPEDEF(ISeries, __uuidof(ISeries));
_COM_SMARTPTR_TYPEDEF(ISeriesCollection, __uuidof(ISeriesCollection));
_COM_SMARTPTR_TYPEDEF(IDataLabel, __uuidof(IDataLabel));
_COM_SMARTPTR_TYPEDEF(IDataLabels, __uuidof(IDataLabels));
_COM_SMARTPTR_TYPEDEF(ILegendEntry, __uuidof(ILegendEntry));
_COM_SMARTPTR_TYPEDEF(ILegendEntries, __uuidof(ILegendEntries));
_COM_SMARTPTR_TYPEDEF(ILegendKey, __uuidof(ILegendKey));
_COM_SMARTPTR_TYPEDEF(ITrendlines, __uuidof(ITrendlines));
_COM_SMARTPTR_TYPEDEF(ITrendline, __uuidof(ITrendline));
_COM_SMARTPTR_TYPEDEF(ICorners, __uuidof(ICorners));
_COM_SMARTPTR_TYPEDEF(ISeriesLines, __uuidof(ISeriesLines));
_COM_SMARTPTR_TYPEDEF(IHiLoLines, __uuidof(IHiLoLines));
_COM_SMARTPTR_TYPEDEF(IGridlines, __uuidof(IGridlines));
_COM_SMARTPTR_TYPEDEF(IDropLines, __uuidof(IDropLines));
_COM_SMARTPTR_TYPEDEF(ILeaderLines, __uuidof(ILeaderLines));
_COM_SMARTPTR_TYPEDEF(IUpBars, __uuidof(IUpBars));
_COM_SMARTPTR_TYPEDEF(IDownBars, __uuidof(IDownBars));
_COM_SMARTPTR_TYPEDEF(IFloor, __uuidof(IFloor));
_COM_SMARTPTR_TYPEDEF(IWalls, __uuidof(IWalls));
_COM_SMARTPTR_TYPEDEF(ITickLabels, __uuidof(ITickLabels));
_COM_SMARTPTR_TYPEDEF(IPlotArea, __uuidof(IPlotArea));
_COM_SMARTPTR_TYPEDEF(IChartArea, __uuidof(IChartArea));
_COM_SMARTPTR_TYPEDEF(ILegend, __uuidof(ILegend));
_COM_SMARTPTR_TYPEDEF(IErrorBars, __uuidof(IErrorBars));
_COM_SMARTPTR_TYPEDEF(IDataTable, __uuidof(IDataTable));
_COM_SMARTPTR_TYPEDEF(IPhonetic, __uuidof(IPhonetic));
_COM_SMARTPTR_TYPEDEF(IShapes, __uuidof(IShapes));
_COM_SMARTPTR_TYPEDEF(IGroupShapes, __uuidof(IGroupShapes));
_COM_SMARTPTR_TYPEDEF(ITextFrame, __uuidof(ITextFrame));
_COM_SMARTPTR_TYPEDEF(IConnectorFormat, __uuidof(IConnectorFormat));
_COM_SMARTPTR_TYPEDEF(IFreeformBuilder, __uuidof(IFreeformBuilder));
_COM_SMARTPTR_TYPEDEF(IControlFormat, __uuidof(IControlFormat));
_COM_SMARTPTR_TYPEDEF(IOLEFormat, __uuidof(IOLEFormat));
_COM_SMARTPTR_TYPEDEF(ILinkFormat, __uuidof(ILinkFormat));
_COM_SMARTPTR_TYPEDEF(PublishObject, __uuidof(PublishObject));
_COM_SMARTPTR_TYPEDEF(IPublishObjects, __uuidof(IPublishObjects));
_COM_SMARTPTR_TYPEDEF(IOLEDBError, __uuidof(IOLEDBError));
_COM_SMARTPTR_TYPEDEF(IOLEDBErrors, __uuidof(IOLEDBErrors));
_COM_SMARTPTR_TYPEDEF(IPhonetics, __uuidof(IPhonetics));
_COM_SMARTPTR_TYPEDEF(DefaultWebOptions, __uuidof(DefaultWebOptions));
_COM_SMARTPTR_TYPEDEF(WebOptions, __uuidof(WebOptions));
_COM_SMARTPTR_TYPEDEF(TreeviewControl, __uuidof(TreeviewControl));
_COM_SMARTPTR_TYPEDEF(CubeField, __uuidof(CubeField));
_COM_SMARTPTR_TYPEDEF(IPivotField, __uuidof(IPivotField));
_COM_SMARTPTR_TYPEDEF(CubeFields, __uuidof(CubeFields));
_COM_SMARTPTR_TYPEDEF(IPivotTable, __uuidof(IPivotTable));
_COM_SMARTPTR_TYPEDEF(IPivotLayout, __uuidof(IPivotLayout));
_COM_SMARTPTR_TYPEDEF(IDisplayUnitLabel, __uuidof(IDisplayUnitLabel));
_COM_SMARTPTR_TYPEDEF(ICellFormat, __uuidof(ICellFormat));
_COM_SMARTPTR_TYPEDEF(IUsedObjects, __uuidof(IUsedObjects));
_COM_SMARTPTR_TYPEDEF(ICustomProperties, __uuidof(ICustomProperties));
_COM_SMARTPTR_TYPEDEF(ICustomProperty, __uuidof(ICustomProperty));
_COM_SMARTPTR_TYPEDEF(ICalculatedMembers, __uuidof(ICalculatedMembers));
_COM_SMARTPTR_TYPEDEF(ICalculatedMember, __uuidof(ICalculatedMember));
_COM_SMARTPTR_TYPEDEF(IWatches, __uuidof(IWatches));
_COM_SMARTPTR_TYPEDEF(IWatch, __uuidof(IWatch));
_COM_SMARTPTR_TYPEDEF(IPivotCell, __uuidof(IPivotCell));
_COM_SMARTPTR_TYPEDEF(IGraphic, __uuidof(IGraphic));
_COM_SMARTPTR_TYPEDEF(IAutoRecover, __uuidof(IAutoRecover));
_COM_SMARTPTR_TYPEDEF(IErrorCheckingOptions, __uuidof(IErrorCheckingOptions));
_COM_SMARTPTR_TYPEDEF(IErrors, __uuidof(IErrors));
_COM_SMARTPTR_TYPEDEF(IError, __uuidof(IError));
_COM_SMARTPTR_TYPEDEF(ISmartTagAction, __uuidof(ISmartTagAction));
_COM_SMARTPTR_TYPEDEF(ISmartTagActions, __uuidof(ISmartTagActions));
_COM_SMARTPTR_TYPEDEF(ISmartTag, __uuidof(ISmartTag));
_COM_SMARTPTR_TYPEDEF(ISmartTags, __uuidof(ISmartTags));
_COM_SMARTPTR_TYPEDEF(ISmartTagRecognizer, __uuidof(ISmartTagRecognizer));
_COM_SMARTPTR_TYPEDEF(ISmartTagRecognizers, __uuidof(ISmartTagRecognizers));
_COM_SMARTPTR_TYPEDEF(ISmartTagOptions, __uuidof(ISmartTagOptions));
_COM_SMARTPTR_TYPEDEF(IPivotItemList, __uuidof(IPivotItemList));
_COM_SMARTPTR_TYPEDEF(ITab, __uuidof(ITab));
_COM_SMARTPTR_TYPEDEF(IListObjects, __uuidof(IListObjects));
_COM_SMARTPTR_TYPEDEF(IListObject, __uuidof(IListObject));
_COM_SMARTPTR_TYPEDEF(IListColumns, __uuidof(IListColumns));
_COM_SMARTPTR_TYPEDEF(IListColumn, __uuidof(IListColumn));
_COM_SMARTPTR_TYPEDEF(IListRows, __uuidof(IListRows));
_COM_SMARTPTR_TYPEDEF(IListRow, __uuidof(IListRow));
_COM_SMARTPTR_TYPEDEF(IXmlNamespace, __uuidof(IXmlNamespace));
_COM_SMARTPTR_TYPEDEF(IXmlNamespaces, __uuidof(IXmlNamespaces));
_COM_SMARTPTR_TYPEDEF(IXmlDataBinding, __uuidof(IXmlDataBinding));
_COM_SMARTPTR_TYPEDEF(IXmlSchema, __uuidof(IXmlSchema));
_COM_SMARTPTR_TYPEDEF(IXmlSchemas, __uuidof(IXmlSchemas));
_COM_SMARTPTR_TYPEDEF(IXmlMap, __uuidof(IXmlMap));
_COM_SMARTPTR_TYPEDEF(IXmlMaps, __uuidof(IXmlMaps));
_COM_SMARTPTR_TYPEDEF(IListDataFormat, __uuidof(IListDataFormat));
_COM_SMARTPTR_TYPEDEF(IXPath, __uuidof(IXPath));
_COM_SMARTPTR_TYPEDEF(IWindow, __uuidof(IWindow));
_COM_SMARTPTR_TYPEDEF(_Chart, __uuidof(_Chart));
_COM_SMARTPTR_TYPEDEF(_Workbook, __uuidof(_Workbook));
_COM_SMARTPTR_TYPEDEF(ICharts, __uuidof(ICharts));
_COM_SMARTPTR_TYPEDEF(IChartObject, __uuidof(IChartObject));
_COM_SMARTPTR_TYPEDEF(IRange, __uuidof(IRange));
_COM_SMARTPTR_TYPEDEF(IVPageBreak, __uuidof(IVPageBreak));
_COM_SMARTPTR_TYPEDEF(IHPageBreak, __uuidof(IHPageBreak));
_COM_SMARTPTR_TYPEDEF(IAppEvents, __uuidof(IAppEvents));
_COM_SMARTPTR_TYPEDEF(IRecentFile, __uuidof(IRecentFile));
_COM_SMARTPTR_TYPEDEF(Workbooks, __uuidof(Workbooks));
_COM_SMARTPTR_TYPEDEF(_Application, __uuidof(_Application));
_COM_SMARTPTR_TYPEDEF(_Global, __uuidof(_Global));
_COM_SMARTPTR_TYPEDEF(IOLEObjects, __uuidof(IOLEObjects));
_COM_SMARTPTR_TYPEDEF(DiagramNodes, __uuidof(DiagramNodes));
_COM_SMARTPTR_TYPEDEF(IDiagram, __uuidof(IDiagram));
_COM_SMARTPTR_TYPEDEF(DiagramNodeChildren, __uuidof(DiagramNodeChildren));
_COM_SMARTPTR_TYPEDEF(DiagramNode, __uuidof(DiagramNode));
_COM_SMARTPTR_TYPEDEF(IShape, __uuidof(IShape));
_COM_SMARTPTR_TYPEDEF(IShapeRange, __uuidof(IShapeRange));

//
// Type library items
//

struct __declspec(uuid("000c0310-0000-0000-c000-000000000046"))
Adjustments : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    float Item[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    float GetItem (
        int Index );
    void PutItem (
        int Index,
        float Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ float * Val ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ int Index,
        /*[in]*/ float Val ) = 0;
};

struct __declspec(uuid("000c0311-0000-0000-c000-000000000046"))
CalloutFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoLength))
    enum Office::MsoTriState AutoLength;
    __declspec(property(get=GetDrop))
    float Drop;
    __declspec(property(get=GetDropType))
    enum Office::MsoCalloutDropType DropType;
    __declspec(property(get=GetGap,put=PutGap))
    float Gap;
    __declspec(property(get=GetLength))
    float Length;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT AutomaticLength ( );
    HRESULT CustomDrop (
        float Drop );
    HRESULT CustomLength (
        float Length );
    HRESULT PresetDrop (
        enum Office::MsoCalloutDropType DropType );
    enum Office::MsoTriState GetAccent ( );
    void PutAccent (
        enum Office::MsoTriState Accent );
    enum Office::MsoCalloutAngleType GetAngle ( );
    void PutAngle (
        enum Office::MsoCalloutAngleType Angle );
    enum Office::MsoTriState GetAutoAttach ( );
    void PutAutoAttach (
        enum Office::MsoTriState AutoAttach );
    enum Office::MsoTriState GetAutoLength ( );
    enum Office::MsoTriState GetBorder ( );
    void PutBorder (
        enum Office::MsoTriState Border );
    float GetDrop ( );
    enum Office::MsoCalloutDropType GetDropType ( );
    float GetGap ( );
    void PutGap (
        float Gap );
    float GetLength ( );
    enum Office::MsoCalloutType GetType ( );
    void PutType (
        enum Office::MsoCalloutType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AutomaticLength ( ) = 0;
      virtual HRESULT __stdcall raw_CustomDrop (
        /*[in]*/ float Drop ) = 0;
      virtual HRESULT __stdcall raw_CustomLength (
        /*[in]*/ float Length ) = 0;
      virtual HRESULT __stdcall raw_PresetDrop (
        /*[in]*/ enum Office::MsoCalloutDropType DropType ) = 0;
      virtual HRESULT __stdcall get_Accent (
        /*[out,retval]*/ enum Office::MsoTriState * Accent ) = 0;
      virtual HRESULT __stdcall put_Accent (
        /*[in]*/ enum Office::MsoTriState Accent ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ enum Office::MsoCalloutAngleType * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ enum Office::MsoCalloutAngleType Angle ) = 0;
      virtual HRESULT __stdcall get_AutoAttach (
        /*[out,retval]*/ enum Office::MsoTriState * AutoAttach ) = 0;
      virtual HRESULT __stdcall put_AutoAttach (
        /*[in]*/ enum Office::MsoTriState AutoAttach ) = 0;
      virtual HRESULT __stdcall get_AutoLength (
        /*[out,retval]*/ enum Office::MsoTriState * AutoLength ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ enum Office::MsoTriState * Border ) = 0;
      virtual HRESULT __stdcall put_Border (
        /*[in]*/ enum Office::MsoTriState Border ) = 0;
      virtual HRESULT __stdcall get_Drop (
        /*[out,retval]*/ float * Drop ) = 0;
      virtual HRESULT __stdcall get_DropType (
        /*[out,retval]*/ enum Office::MsoCalloutDropType * DropType ) = 0;
      virtual HRESULT __stdcall get_Gap (
        /*[out,retval]*/ float * Gap ) = 0;
      virtual HRESULT __stdcall put_Gap (
        /*[in]*/ float Gap ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ float * Length ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoCalloutType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoCalloutType Type ) = 0;
};

struct __declspec(uuid("000c0312-0000-0000-c000-000000000046"))
ColorFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    int SchemeColor;
    __declspec(property(get=GetType))
    enum Office::MsoColorType Type;
    __declspec(property(get=GetTintAndShade,put=PutTintAndShade))
    float TintAndShade;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    Office::MsoRGBType GetExcelRGB ( );
    void PutExcelRGB (
        Office::MsoRGBType ExcelRGB );
    int GetSchemeColor ( );
    void PutSchemeColor (
        int SchemeColor );
    enum Office::MsoColorType GetType ( );
    float GetTintAndShade ( );
    void PutTintAndShade (
        float pValue );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ExcelRGB (
        /*[out,retval]*/ Office::MsoRGBType * ExcelRGB ) = 0;
      virtual HRESULT __stdcall put_ExcelRGB (
        /*[in]*/ Office::MsoRGBType ExcelRGB ) = 0;
      virtual HRESULT __stdcall get_SchemeColor (
        /*[out,retval]*/ int * SchemeColor ) = 0;
      virtual HRESULT __stdcall put_SchemeColor (
        /*[in]*/ int SchemeColor ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoColorType * Type ) = 0;
      virtual HRESULT __stdcall get_TintAndShade (
        /*[out,retval]*/ float * pValue ) = 0;
      virtual HRESULT __stdcall put_TintAndShade (
        /*[in]*/ float pValue ) = 0;
};

struct __declspec(uuid("000c0317-0000-0000-c000-000000000046"))
LineFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetWeight,put=PutWeight))
    float Weight;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    enum Office::MsoArrowheadLength GetBeginArrowheadLength ( );
    void PutBeginArrowheadLength (
        enum Office::MsoArrowheadLength BeginArrowheadLength );
    enum Office::MsoArrowheadStyle GetBeginArrowheadStyle ( );
    void PutBeginArrowheadStyle (
        enum Office::MsoArrowheadStyle BeginArrowheadStyle );
    enum Office::MsoArrowheadWidth GetBeginArrowheadWidth ( );
    void PutBeginArrowheadWidth (
        enum Office::MsoArrowheadWidth BeginArrowheadWidth );
    enum Office::MsoLineDashStyle GetDashStyle ( );
    void PutDashStyle (
        enum Office::MsoLineDashStyle DashStyle );
    enum Office::MsoArrowheadLength GetEndArrowheadLength ( );
    void PutEndArrowheadLength (
        enum Office::MsoArrowheadLength EndArrowheadLength );
    enum Office::MsoArrowheadStyle GetEndArrowheadStyle ( );
    void PutEndArrowheadStyle (
        enum Office::MsoArrowheadStyle EndArrowheadStyle );
    enum Office::MsoArrowheadWidth GetEndArrowheadWidth ( );
    void PutEndArrowheadWidth (
        enum Office::MsoArrowheadWidth EndArrowheadWidth );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoPatternType GetPattern ( );
    void PutPattern (
        enum Office::MsoPatternType Pattern );
    enum Office::MsoLineStyle GetStyle ( );
    void PutStyle (
        enum Office::MsoLineStyle Style );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    float GetWeight ( );
    void PutWeight (
        float Weight );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadLength (
        /*[out,retval]*/ enum Office::MsoArrowheadLength * BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadLength (
        /*[in]*/ enum Office::MsoArrowheadLength BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadStyle (
        /*[out,retval]*/ enum Office::MsoArrowheadStyle * BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadStyle (
        /*[in]*/ enum Office::MsoArrowheadStyle BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadWidth (
        /*[out,retval]*/ enum Office::MsoArrowheadWidth * BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadWidth (
        /*[in]*/ enum Office::MsoArrowheadWidth BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_DashStyle (
        /*[out,retval]*/ enum Office::MsoLineDashStyle * DashStyle ) = 0;
      virtual HRESULT __stdcall put_DashStyle (
        /*[in]*/ enum Office::MsoLineDashStyle DashStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadLength (
        /*[out,retval]*/ enum Office::MsoArrowheadLength * EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadLength (
        /*[in]*/ enum Office::MsoArrowheadLength EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadStyle (
        /*[out,retval]*/ enum Office::MsoArrowheadStyle * EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadStyle (
        /*[in]*/ enum Office::MsoArrowheadStyle EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadWidth (
        /*[out,retval]*/ enum Office::MsoArrowheadWidth * EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadWidth (
        /*[in]*/ enum Office::MsoArrowheadWidth EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Office::MsoPatternType * Pattern ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ enum Office::MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum Office::MsoLineStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum Office::MsoLineStyle Style ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ float * Weight ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ float Weight ) = 0;
};

struct __declspec(uuid("000c0318-0000-0000-c000-000000000046"))
ShapeNode : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEditingType))
    enum Office::MsoEditingType EditingType;
    __declspec(property(get=GetPoints))
    _variant_t Points;
    __declspec(property(get=GetSegmentType))
    enum Office::MsoSegmentType SegmentType;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    enum Office::MsoEditingType GetEditingType ( );
    _variant_t GetPoints ( );
    enum Office::MsoSegmentType GetSegmentType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_EditingType (
        /*[out,retval]*/ enum Office::MsoEditingType * EditingType ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ VARIANT * Points ) = 0;
      virtual HRESULT __stdcall get_SegmentType (
        /*[out,retval]*/ enum Office::MsoSegmentType * SegmentType ) = 0;
};

struct __declspec(uuid("000c0319-0000-0000-c000-000000000046"))
ShapeNodes : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapeNodePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete (
        int Index );
    HRESULT Insert (
        int Index,
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    HRESULT SetEditingType (
        int Index,
        enum Office::MsoEditingType EditingType );
    HRESULT SetPosition (
        int Index,
        float X1,
        float Y1 );
    HRESULT SetSegmentType (
        int Index,
        enum Office::MsoSegmentType SegmentType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeNode * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ int Index,
        /*[in]*/ enum Office::MsoSegmentType SegmentType,
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ float X2,
        /*[in]*/ float Y2,
        /*[in]*/ float X3,
        /*[in]*/ float Y3 ) = 0;
      virtual HRESULT __stdcall raw_SetEditingType (
        /*[in]*/ int Index,
        /*[in]*/ enum Office::MsoEditingType EditingType ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ int Index,
        /*[in]*/ float X1,
        /*[in]*/ float Y1 ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentType (
        /*[in]*/ int Index,
        /*[in]*/ enum Office::MsoSegmentType SegmentType ) = 0;
};

struct __declspec(uuid("000c031a-0000-0000-c000-000000000046"))
PictureFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementBrightness (
        float Increment );
    HRESULT IncrementContrast (
        float Increment );
    float GetBrightness ( );
    void PutBrightness (
        float Brightness );
    enum Office::MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum Office::MsoPictureColorType ColorType );
    float GetContrast ( );
    void PutContrast (
        float Contrast );
    float GetCropBottom ( );
    void PutCropBottom (
        float CropBottom );
    float GetCropLeft ( );
    void PutCropLeft (
        float CropLeft );
    float GetCropRight ( );
    void PutCropRight (
        float CropRight );
    float GetCropTop ( );
    void PutCropTop (
        float CropTop );
    Office::MsoRGBType GetTransparencyColor ( );
    void PutTransparencyColor (
        Office::MsoRGBType TransparencyColor );
    enum Office::MsoTriState GetTransparentBackground ( );
    void PutTransparentBackground (
        enum Office::MsoTriState TransparentBackground );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementBrightness (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementContrast (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_Brightness (
        /*[out,retval]*/ float * Brightness ) = 0;
      virtual HRESULT __stdcall put_Brightness (
        /*[in]*/ float Brightness ) = 0;
      virtual HRESULT __stdcall get_ColorType (
        /*[out,retval]*/ enum Office::MsoPictureColorType * ColorType ) = 0;
      virtual HRESULT __stdcall put_ColorType (
        /*[in]*/ enum Office::MsoPictureColorType ColorType ) = 0;
      virtual HRESULT __stdcall get_Contrast (
        /*[out,retval]*/ float * Contrast ) = 0;
      virtual HRESULT __stdcall put_Contrast (
        /*[in]*/ float Contrast ) = 0;
      virtual HRESULT __stdcall get_CropBottom (
        /*[out,retval]*/ float * CropBottom ) = 0;
      virtual HRESULT __stdcall put_CropBottom (
        /*[in]*/ float CropBottom ) = 0;
      virtual HRESULT __stdcall get_CropLeft (
        /*[out,retval]*/ float * CropLeft ) = 0;
      virtual HRESULT __stdcall put_CropLeft (
        /*[in]*/ float CropLeft ) = 0;
      virtual HRESULT __stdcall get_CropRight (
        /*[out,retval]*/ float * CropRight ) = 0;
      virtual HRESULT __stdcall put_CropRight (
        /*[in]*/ float CropRight ) = 0;
      virtual HRESULT __stdcall get_CropTop (
        /*[out,retval]*/ float * CropTop ) = 0;
      virtual HRESULT __stdcall put_CropTop (
        /*[in]*/ float CropTop ) = 0;
      virtual HRESULT __stdcall get_TransparencyColor (
        /*[out,retval]*/ Office::MsoRGBType * TransparencyColor ) = 0;
      virtual HRESULT __stdcall put_TransparencyColor (
        /*[in]*/ Office::MsoRGBType TransparencyColor ) = 0;
      virtual HRESULT __stdcall get_TransparentBackground (
        /*[out,retval]*/ enum Office::MsoTriState * TransparentBackground ) = 0;
      virtual HRESULT __stdcall put_TransparentBackground (
        /*[in]*/ enum Office::MsoTriState TransparentBackground ) = 0;
};

struct __declspec(uuid("000c031b-0000-0000-c000-000000000046"))
ShadowFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    float OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    float OffsetY;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementOffsetX (
        float Increment );
    HRESULT IncrementOffsetY (
        float Increment );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoTriState GetObscured ( );
    void PutObscured (
        enum Office::MsoTriState Obscured );
    float GetOffsetX ( );
    void PutOffsetX (
        float OffsetX );
    float GetOffsetY ( );
    void PutOffsetY (
        float OffsetY );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoShadowType GetType ( );
    void PutType (
        enum Office::MsoShadowType Type );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Obscured (
        /*[out,retval]*/ enum Office::MsoTriState * Obscured ) = 0;
      virtual HRESULT __stdcall put_Obscured (
        /*[in]*/ enum Office::MsoTriState Obscured ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ float * OffsetX ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ float OffsetX ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ float * OffsetY ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ float OffsetY ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShadowType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoShadowType Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("000c031f-0000-0000-c000-000000000046"))
TextEffectFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    float FontSize;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTracking,put=PutTracking))
    float Tracking;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT ToggleVerticalText ( );
    enum Office::MsoTextEffectAlignment GetAlignment ( );
    void PutAlignment (
        enum Office::MsoTextEffectAlignment Alignment );
    enum Office::MsoTriState GetFontBold ( );
    void PutFontBold (
        enum Office::MsoTriState FontBold );
    enum Office::MsoTriState GetFontItalic ( );
    void PutFontItalic (
        enum Office::MsoTriState FontItalic );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t FontName );
    float GetFontSize ( );
    void PutFontSize (
        float FontSize );
    enum Office::MsoTriState GetKernedPairs ( );
    void PutKernedPairs (
        enum Office::MsoTriState KernedPairs );
    enum Office::MsoTriState GetNormalizedHeight ( );
    void PutNormalizedHeight (
        enum Office::MsoTriState NormalizedHeight );
    enum Office::MsoPresetTextEffectShape GetPresetShape ( );
    void PutPresetShape (
        enum Office::MsoPresetTextEffectShape PresetShape );
    enum Office::MsoPresetTextEffect GetPresetTextEffect ( );
    void PutPresetTextEffect (
        enum Office::MsoPresetTextEffect Preset );
    enum Office::MsoTriState GetRotatedChars ( );
    void PutRotatedChars (
        enum Office::MsoTriState RotatedChars );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    float GetTracking ( );
    void PutTracking (
        float Tracking );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_ToggleVerticalText ( ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum Office::MsoTextEffectAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum Office::MsoTextEffectAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ enum Office::MsoTriState * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ enum Office::MsoTriState FontBold ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ enum Office::MsoTriState * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ enum Office::MsoTriState FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ float * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ float FontSize ) = 0;
      virtual HRESULT __stdcall get_KernedPairs (
        /*[out,retval]*/ enum Office::MsoTriState * KernedPairs ) = 0;
      virtual HRESULT __stdcall put_KernedPairs (
        /*[in]*/ enum Office::MsoTriState KernedPairs ) = 0;
      virtual HRESULT __stdcall get_NormalizedHeight (
        /*[out,retval]*/ enum Office::MsoTriState * NormalizedHeight ) = 0;
      virtual HRESULT __stdcall put_NormalizedHeight (
        /*[in]*/ enum Office::MsoTriState NormalizedHeight ) = 0;
      virtual HRESULT __stdcall get_PresetShape (
        /*[out,retval]*/ enum Office::MsoPresetTextEffectShape * PresetShape ) = 0;
      virtual HRESULT __stdcall put_PresetShape (
        /*[in]*/ enum Office::MsoPresetTextEffectShape PresetShape ) = 0;
      virtual HRESULT __stdcall get_PresetTextEffect (
        /*[out,retval]*/ enum Office::MsoPresetTextEffect * Preset ) = 0;
      virtual HRESULT __stdcall put_PresetTextEffect (
        /*[in]*/ enum Office::MsoPresetTextEffect Preset ) = 0;
      virtual HRESULT __stdcall get_RotatedChars (
        /*[out,retval]*/ enum Office::MsoTriState * RotatedChars ) = 0;
      virtual HRESULT __stdcall put_RotatedChars (
        /*[in]*/ enum Office::MsoTriState RotatedChars ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Tracking (
        /*[out,retval]*/ float * Tracking ) = 0;
      virtual HRESULT __stdcall put_Tracking (
        /*[in]*/ float Tracking ) = 0;
};

struct __declspec(uuid("000c0321-0000-0000-c000-000000000046"))
ThreeDFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDepth,put=PutDepth))
    float Depth;
    __declspec(property(get=GetExtrusionColor))
    ColorFormatPtr ExtrusionColor;
    __declspec(property(get=GetPresetExtrusionDirection))
    enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection;
    __declspec(property(get=GetPresetThreeDFormat))
    enum Office::MsoPresetThreeDFormat PresetThreeDFormat;
    __declspec(property(get=GetRotationX,put=PutRotationX))
    float RotationX;
    __declspec(property(get=GetRotationY,put=PutRotationY))
    float RotationY;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementRotationX (
        float Increment );
    HRESULT IncrementRotationY (
        float Increment );
    HRESULT ResetRotation ( );
    HRESULT SetThreeDFormat (
        enum Office::MsoPresetThreeDFormat PresetThreeDFormat );
    HRESULT SetExtrusionDirection (
        enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection );
    float GetDepth ( );
    void PutDepth (
        float Depth );
    ColorFormatPtr GetExtrusionColor ( );
    enum Office::MsoExtrusionColorType GetExtrusionColorType ( );
    void PutExtrusionColorType (
        enum Office::MsoExtrusionColorType ExtrusionColorType );
    enum Office::MsoTriState GetPerspective ( );
    void PutPerspective (
        enum Office::MsoTriState Perspective );
    enum Office::MsoPresetExtrusionDirection GetPresetExtrusionDirection ( );
    enum Office::MsoPresetLightingDirection GetPresetLightingDirection ( );
    void PutPresetLightingDirection (
        enum Office::MsoPresetLightingDirection PresetLightingDirection );
    enum Office::MsoPresetLightingSoftness GetPresetLightingSoftness ( );
    void PutPresetLightingSoftness (
        enum Office::MsoPresetLightingSoftness PresetLightingSoftness );
    enum Office::MsoPresetMaterial GetPresetMaterial ( );
    void PutPresetMaterial (
        enum Office::MsoPresetMaterial PresetMaterial );
    enum Office::MsoPresetThreeDFormat GetPresetThreeDFormat ( );
    float GetRotationX ( );
    void PutRotationX (
        float RotationX );
    float GetRotationY ( );
    void PutRotationY (
        float RotationY );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_ResetRotation ( ) = 0;
      virtual HRESULT __stdcall raw_SetThreeDFormat (
        /*[in]*/ enum Office::MsoPresetThreeDFormat PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall raw_SetExtrusionDirection (
        /*[in]*/ enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ float * Depth ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ float Depth ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColor (
        /*[out,retval]*/ struct ColorFormat * * ExtrusionColor ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColorType (
        /*[out,retval]*/ enum Office::MsoExtrusionColorType * ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall put_ExtrusionColorType (
        /*[in]*/ enum Office::MsoExtrusionColorType ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ enum Office::MsoTriState * Perspective ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in]*/ enum Office::MsoTriState Perspective ) = 0;
      virtual HRESULT __stdcall get_PresetExtrusionDirection (
        /*[out,retval]*/ enum Office::MsoPresetExtrusionDirection * PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingDirection (
        /*[out,retval]*/ enum Office::MsoPresetLightingDirection * PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall put_PresetLightingDirection (
        /*[in]*/ enum Office::MsoPresetLightingDirection PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingSoftness (
        /*[out,retval]*/ enum Office::MsoPresetLightingSoftness * PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall put_PresetLightingSoftness (
        /*[in]*/ enum Office::MsoPresetLightingSoftness PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall get_PresetMaterial (
        /*[out,retval]*/ enum Office::MsoPresetMaterial * PresetMaterial ) = 0;
      virtual HRESULT __stdcall put_PresetMaterial (
        /*[in]*/ enum Office::MsoPresetMaterial PresetMaterial ) = 0;
      virtual HRESULT __stdcall get_PresetThreeDFormat (
        /*[out,retval]*/ enum Office::MsoPresetThreeDFormat * PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall get_RotationX (
        /*[out,retval]*/ float * RotationX ) = 0;
      virtual HRESULT __stdcall put_RotationX (
        /*[in]*/ float RotationX ) = 0;
      virtual HRESULT __stdcall get_RotationY (
        /*[out,retval]*/ float * RotationY ) = 0;
      virtual HRESULT __stdcall put_RotationY (
        /*[in]*/ float RotationY ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("000c0314-0000-0000-c000-000000000046"))
FillFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    int GradientVariant;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;
    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT Background ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        float Degree );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant );
    HRESULT UserPicture (
        _bstr_t PictureFile );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    int GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Background ( ) = 0;
      virtual HRESULT __stdcall raw_OneColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant,
        /*[in]*/ float Degree ) = 0;
      virtual HRESULT __stdcall raw_Patterned (
        /*[in]*/ enum Office::MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall raw_PresetGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant,
        /*[in]*/ enum Office::MsoPresetGradientType PresetGradientType ) = 0;
      virtual HRESULT __stdcall raw_PresetTextured (
        /*[in]*/ enum Office::MsoPresetTexture PresetTexture ) = 0;
      virtual HRESULT __stdcall raw_Solid ( ) = 0;
      virtual HRESULT __stdcall raw_TwoColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant ) = 0;
      virtual HRESULT __stdcall raw_UserPicture (
        /*[in]*/ BSTR PictureFile ) = 0;
      virtual HRESULT __stdcall raw_UserTextured (
        /*[in]*/ BSTR TextureFile ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_GradientColorType (
        /*[out,retval]*/ enum Office::MsoGradientColorType * GradientColorType ) = 0;
      virtual HRESULT __stdcall get_GradientDegree (
        /*[out,retval]*/ float * GradientDegree ) = 0;
      virtual HRESULT __stdcall get_GradientStyle (
        /*[out,retval]*/ enum Office::MsoGradientStyle * GradientStyle ) = 0;
      virtual HRESULT __stdcall get_GradientVariant (
        /*[out,retval]*/ int * GradientVariant ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Office::MsoPatternType * Pattern ) = 0;
      virtual HRESULT __stdcall get_PresetGradientType (
        /*[out,retval]*/ enum Office::MsoPresetGradientType * PresetGradientType ) = 0;
      virtual HRESULT __stdcall get_PresetTexture (
        /*[out,retval]*/ enum Office::MsoPresetTexture * PresetTexture ) = 0;
      virtual HRESULT __stdcall get_TextureName (
        /*[out,retval]*/ BSTR * TextureName ) = 0;
      virtual HRESULT __stdcall get_TextureType (
        /*[out,retval]*/ enum Office::MsoTextureType * TextureType ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoFillType * Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("a43788c1-d91b-11d3-8f39-00c04f3651b8"))
IRTDUpdateEvent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHeartbeatInterval,put=PutHeartbeatInterval))
    long HeartbeatInterval;

    //
    // Wrapper methods for error-handling
    //

    HRESULT UpdateNotify ( );
    long GetHeartbeatInterval ( );
    void PutHeartbeatInterval (
        long plRetVal );
    HRESULT Disconnect ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_UpdateNotify ( ) = 0;
      virtual HRESULT __stdcall get_HeartbeatInterval (
        /*[out,retval]*/ long * plRetVal ) = 0;
      virtual HRESULT __stdcall put_HeartbeatInterval (
        /*[in]*/ long plRetVal ) = 0;
      virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
};

struct __declspec(uuid("ec0e6191-db51-11d3-8f3e-00c04f3651b8"))
IRtdServer : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long ServerStart (
        struct IRTDUpdateEvent * CallbackObject );
    _variant_t ConnectData (
        long TopicID,
        SAFEARRAY * * Strings,
        VARIANT_BOOL * GetNewValues );
    SAFEARRAY * RefreshData (
        long * TopicCount );
    HRESULT DisconnectData (
        long TopicID );
    long Heartbeat ( );
    HRESULT ServerTerminate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ServerStart (
        /*[in]*/ struct IRTDUpdateEvent * CallbackObject,
        /*[out,retval]*/ long * pfRes ) = 0;
      virtual HRESULT __stdcall raw_ConnectData (
        /*[in]*/ long TopicID,
        /*[in]*/ SAFEARRAY * * Strings,
        /*[in,out]*/ VARIANT_BOOL * GetNewValues,
        /*[out,retval]*/ VARIANT * pvarOut ) = 0;
      virtual HRESULT __stdcall raw_RefreshData (
        /*[in,out]*/ long * TopicCount,
        /*[out,retval]*/ SAFEARRAY * * parrayOut ) = 0;
      virtual HRESULT __stdcall raw_DisconnectData (
        /*[in]*/ long TopicID ) = 0;
      virtual HRESULT __stdcall raw_Heartbeat (
        /*[out,retval]*/ long * pfRes ) = 0;
      virtual HRESULT __stdcall raw_ServerTerminate ( ) = 0;
};

enum Constants
{
    xlAll = -4104,
    xlAutomatic = -4105,
    xlBoth = 1,
    xlCenter = -4108,
    xlChecker = 9,
    xlCircle = 8,
    xlCorner = 2,
    xlCrissCross = 16,
    xlCross = 4,
    xlDiamond = 2,
    xlDistributed = -4117,
    xlDoubleAccounting = 5,
    xlFixedValue = 1,
    xlFormats = -4122,
    xlGray16 = 17,
    xlGray8 = 18,
    xlGrid = 15,
    xlHigh = -4127,
    xlInside = 2,
    xlJustify = -4130,
    xlLightDown = 13,
    xlLightHorizontal = 11,
    xlLightUp = 14,
    xlLightVertical = 12,
    xlLow = -4134,
    xlManual = -4135,
    xlMinusValues = 3,
    xlModule = -4141,
    xlNextToAxis = 4,
    xlNone = -4142,
    xlNotes = -4144,
    xlOff = -4146,
    xlOn = 1,
    xlPercent = 2,
    xlPlus = 9,
    xlPlusValues = 2,
    xlSemiGray75 = 10,
    xlShowLabel = 4,
    xlShowLabelAndPercent = 5,
    xlShowPercent = 3,
    xlShowValue = 2,
    xlSimple = -4154,
    xlSingle = 2,
    xlSingleAccounting = 4,
    xlSolid = 1,
    xlSquare = 1,
    xlStar = 5,
    xlStError = 4,
    xlToolbarButton = 2,
    xlTriangle = 3,
    xlGray25 = -4124,
    xlGray50 = -4125,
    xlGray75 = -4126,
    xlBottom = -4107,
    xlLeft = -4131,
    xlRight = -4152,
    xlTop = -4160,
    xl3DBar = -4099,
    xl3DSurface = -4103,
    xlBar = 2,
    xlColumn = 3,
    xlCombination = -4111,
    xlCustom = -4114,
    xlDefaultAutoFormat = -1,
    xlMaximum = 2,
    xlMinimum = 4,
    xlOpaque = 3,
    xlTransparent = 2,
    xlBidi = -5000,
    xlLatin = -5001,
    xlContext = -5002,
    xlLTR = -5003,
    xlRTL = -5004,
    xlFullScript = 1,
    xlPartialScript = 2,
    xlMixedScript = 3,
    xlMixedAuthorizedScript = 4,
    xlVisualCursor = 2,
    xlLogicalCursor = 1,
    xlSystem = 1,
    xlPartial = 3,
    xlHindiNumerals = 3,
    xlBidiCalendar = 3,
    xlGregorian = 2,
    xlComplete = 4,
    xlScale = 3,
    xlClosed = 3,
    xlColor1 = 7,
    xlColor2 = 8,
    xlColor3 = 9,
    xlConstants = 2,
    xlContents = 2,
    xlBelow = 1,
    xlCascade = 7,
    xlCenterAcrossSelection = 7,
    xlChart4 = 2,
    xlChartSeries = 17,
    xlChartShort = 6,
    xlChartTitles = 18,
    xlClassic1 = 1,
    xlClassic2 = 2,
    xlClassic3 = 3,
    xl3DEffects1 = 13,
    xl3DEffects2 = 14,
    xlAbove = 0,
    xlAccounting1 = 4,
    xlAccounting2 = 5,
    xlAccounting3 = 6,
    xlAccounting4 = 17,
    xlAdd = 2,
    xlDebugCodePane = 13,
    xlDesktop = 9,
    xlDirect = 1,
    xlDivide = 5,
    xlDoubleClosed = 5,
    xlDoubleOpen = 4,
    xlDoubleQuote = 1,
    xlEntireChart = 20,
    xlExcelMenus = 1,
    xlExtended = 3,
    xlFill = 5,
    xlFirst = 0,
    xlFloating = 5,
    xlFormula = 5,
    xlGeneral = 1,
    xlGridline = 22,
    xlIcons = 1,
    xlImmediatePane = 12,
    xlInteger = 2,
    xlLast = 1,
    xlLastCell = 11,
    xlList1 = 10,
    xlList2 = 11,
    xlList3 = 12,
    xlLocalFormat1 = 15,
    xlLocalFormat2 = 16,
    xlLong = 3,
    xlLotusHelp = 2,
    xlMacrosheetCell = 7,
    xlMixed = 2,
    xlMultiply = 4,
    xlNarrow = 1,
    xlNoDocuments = 3,
    xlOpen = 2,
    xlOutside = 3,
    xlReference = 4,
    xlSemiautomatic = 2,
    xlShort = 1,
    xlSingleQuote = 2,
    xlStrict = 2,
    xlSubtract = 3,
    xlTextBox = 16,
    xlTiled = 1,
    xlTitleBar = 8,
    xlToolbar = 1,
    xlVisible = 12,
    xlWatchPane = 11,
    xlWide = 3,
    xlWorkbookTab = 6,
    xlWorksheet4 = 1,
    xlWorksheetCell = 3,
    xlWorksheetShort = 5,
    xlAllExceptBorders = 7,
    xlLeftToRight = 2,
    xlTopToBottom = 1,
    xlVeryHidden = 2,
    xlDrawingObject = 14
};

enum XlCreator
{
    xlCreatorCode = 1480803660
};

enum XlChartGallery
{
    xlBuiltIn = 21,
    xlUserDefined = 22,
    xlAnyGallery = 23
};

enum XlColorIndex
{
    xlColorIndexAutomatic = -4105,
    xlColorIndexNone = -4142
};

enum XlEndStyleCap
{
    xlCap = 1,
    xlNoCap = 2
};

enum XlRowCol
{
    xlColumns = 2,
    xlRows = 1
};

enum XlScaleType
{
    xlScaleLinear = -4132,
    xlScaleLogarithmic = -4133
};

enum XlDataSeriesType
{
    xlAutoFill = 4,
    xlChronological = 3,
    xlGrowth = 2,
    xlDataSeriesLinear = -4132
};

enum XlAxisCrosses
{
    xlAxisCrossesAutomatic = -4105,
    xlAxisCrossesCustom = -4114,
    xlAxisCrossesMaximum = 2,
    xlAxisCrossesMinimum = 4
};

enum XlAxisGroup
{
    xlPrimary = 1,
    xlSecondary = 2
};

enum XlBackground
{
    xlBackgroundAutomatic = -4105,
    xlBackgroundOpaque = 3,
    xlBackgroundTransparent = 2
};

enum XlWindowState
{
    xlMaximized = -4137,
    xlMinimized = -4140,
    xlNormal = -4143
};

enum XlAxisType
{
    xlCategory = 1,
    xlSeriesAxis = 3,
    xlValue = 2
};

enum XlArrowHeadLength
{
    xlArrowHeadLengthLong = 3,
    xlArrowHeadLengthMedium = -4138,
    xlArrowHeadLengthShort = 1
};

enum XlVAlign
{
    xlVAlignBottom = -4107,
    xlVAlignCenter = -4108,
    xlVAlignDistributed = -4117,
    xlVAlignJustify = -4130,
    xlVAlignTop = -4160
};

enum XlTickMark
{
    xlTickMarkCross = 4,
    xlTickMarkInside = 2,
    xlTickMarkNone = -4142,
    xlTickMarkOutside = 3
};

enum XlErrorBarDirection
{
    xlX = -4168,
    xlY = 1
};

enum XlErrorBarInclude
{
    xlErrorBarIncludeBoth = 1,
    xlErrorBarIncludeMinusValues = 3,
    xlErrorBarIncludeNone = -4142,
    xlErrorBarIncludePlusValues = 2
};

enum XlDisplayBlanksAs
{
    xlInterpolated = 3,
    xlNotPlotted = 1,
    xlZero = 2
};

enum XlArrowHeadStyle
{
    xlArrowHeadStyleClosed = 3,
    xlArrowHeadStyleDoubleClosed = 5,
    xlArrowHeadStyleDoubleOpen = 4,
    xlArrowHeadStyleNone = -4142,
    xlArrowHeadStyleOpen = 2
};

enum XlArrowHeadWidth
{
    xlArrowHeadWidthMedium = -4138,
    xlArrowHeadWidthNarrow = 1,
    xlArrowHeadWidthWide = 3
};

enum XlHAlign
{
    xlHAlignCenter = -4108,
    xlHAlignCenterAcrossSelection = 7,
    xlHAlignDistributed = -4117,
    xlHAlignFill = 5,
    xlHAlignGeneral = 1,
    xlHAlignJustify = -4130,
    xlHAlignLeft = -4131,
    xlHAlignRight = -4152
};

enum XlTickLabelPosition
{
    xlTickLabelPositionHigh = -4127,
    xlTickLabelPositionLow = -4134,
    xlTickLabelPositionNextToAxis = 4,
    xlTickLabelPositionNone = -4142
};

enum XlLegendPosition
{
    xlLegendPositionBottom = -4107,
    xlLegendPositionCorner = 2,
    xlLegendPositionLeft = -4131,
    xlLegendPositionRight = -4152,
    xlLegendPositionTop = -4160
};

enum XlChartPictureType
{
    xlStackScale = 3,
    xlStack = 2,
    xlStretch = 1
};

enum XlChartPicturePlacement
{
    xlSides = 1,
    xlEnd = 2,
    xlEndSides = 3,
    xlFront = 4,
    xlFrontSides = 5,
    xlFrontEnd = 6,
    xlAllFaces = 7
};

enum XlOrientation
{
    xlDownward = -4170,
    xlHorizontal = -4128,
    xlUpward = -4171,
    xlVertical = -4166
};

enum XlTickLabelOrientation
{
    xlTickLabelOrientationAutomatic = -4105,
    xlTickLabelOrientationDownward = -4170,
    xlTickLabelOrientationHorizontal = -4128,
    xlTickLabelOrientationUpward = -4171,
    xlTickLabelOrientationVertical = -4166
};

enum XlBorderWeight
{
    xlHairline = 1,
    xlMedium = -4138,
    xlThick = 4,
    xlThin = 2
};

enum XlDataSeriesDate
{
    xlDay = 1,
    xlMonth = 3,
    xlWeekday = 2,
    xlYear = 4
};

enum XlUnderlineStyle
{
    xlUnderlineStyleDouble = -4119,
    xlUnderlineStyleDoubleAccounting = 5,
    xlUnderlineStyleNone = -4142,
    xlUnderlineStyleSingle = 2,
    xlUnderlineStyleSingleAccounting = 4
};

enum XlErrorBarType
{
    xlErrorBarTypeCustom = -4114,
    xlErrorBarTypeFixedValue = 1,
    xlErrorBarTypePercent = 2,
    xlErrorBarTypeStDev = -4155,
    xlErrorBarTypeStError = 4
};

enum XlTrendlineType
{
    xlExponential = 5,
    xlLinear = -4132,
    xlLogarithmic = -4133,
    xlMovingAvg = 6,
    xlPolynomial = 3,
    xlPower = 4
};

enum XlLineStyle
{
    xlContinuous = 1,
    xlDash = -4115,
    xlDashDot = 4,
    xlDashDotDot = 5,
    xlDot = -4118,
    xlDouble = -4119,
    xlSlantDashDot = 13,
    xlLineStyleNone = -4142
};

enum XlDataLabelsType
{
    xlDataLabelsShowNone = -4142,
    xlDataLabelsShowValue = 2,
    xlDataLabelsShowPercent = 3,
    xlDataLabelsShowLabel = 4,
    xlDataLabelsShowLabelAndPercent = 5,
    xlDataLabelsShowBubbleSizes = 6
};

enum XlMarkerStyle
{
    xlMarkerStyleAutomatic = -4105,
    xlMarkerStyleCircle = 8,
    xlMarkerStyleDash = -4115,
    xlMarkerStyleDiamond = 2,
    xlMarkerStyleDot = -4118,
    xlMarkerStyleNone = -4142,
    xlMarkerStylePicture = -4147,
    xlMarkerStylePlus = 9,
    xlMarkerStyleSquare = 1,
    xlMarkerStyleStar = 5,
    xlMarkerStyleTriangle = 3,
    xlMarkerStyleX = -4168
};

enum XlPictureConvertorType
{
    xlBMP = 1,
    xlCGM = 7,
    xlDRW = 4,
    xlDXF = 5,
    xlEPS = 8,
    xlHGL = 6,
    xlPCT = 13,
    xlPCX = 10,
    xlPIC = 11,
    xlPLT = 12,
    xlTIF = 9,
    xlWMF = 2,
    xlWPG = 3
};

enum XlPattern
{
    xlPatternAutomatic = -4105,
    xlPatternChecker = 9,
    xlPatternCrissCross = 16,
    xlPatternDown = -4121,
    xlPatternGray16 = 17,
    xlPatternGray25 = -4124,
    xlPatternGray50 = -4125,
    xlPatternGray75 = -4126,
    xlPatternGray8 = 18,
    xlPatternGrid = 15,
    xlPatternHorizontal = -4128,
    xlPatternLightDown = 13,
    xlPatternLightHorizontal = 11,
    xlPatternLightUp = 14,
    xlPatternLightVertical = 12,
    xlPatternNone = -4142,
    xlPatternSemiGray75 = 10,
    xlPatternSolid = 1,
    xlPatternUp = -4162,
    xlPatternVertical = -4166
};

enum XlChartSplitType
{
    xlSplitByPosition = 1,
    xlSplitByPercentValue = 3,
    xlSplitByCustomSplit = 4,
    xlSplitByValue = 2
};

enum XlDisplayUnit
{
    xlHundreds = -2,
    xlThousands = -3,
    xlTenThousands = -4,
    xlHundredThousands = -5,
    xlMillions = -6,
    xlTenMillions = -7,
    xlHundredMillions = -8,
    xlThousandMillions = -9,
    xlMillionMillions = -10
};

enum XlDataLabelPosition
{
    xlLabelPositionCenter = -4108,
    xlLabelPositionAbove = 0,
    xlLabelPositionBelow = 1,
    xlLabelPositionLeft = -4131,
    xlLabelPositionRight = -4152,
    xlLabelPositionOutsideEnd = 2,
    xlLabelPositionInsideEnd = 3,
    xlLabelPositionInsideBase = 4,
    xlLabelPositionBestFit = 5,
    xlLabelPositionMixed = 6,
    xlLabelPositionCustom = 7
};

enum XlTimeUnit
{
    xlDays = 0,
    xlMonths = 1,
    xlYears = 2
};

enum XlCategoryType
{
    xlCategoryScale = 2,
    xlTimeScale = 3,
    xlAutomaticScale = -4105
};

enum XlBarShape
{
    xlBox = 0,
    xlPyramidToPoint = 1,
    xlPyramidToMax = 2,
    xlCylinder = 3,
    xlConeToPoint = 4,
    xlConeToMax = 5
};

enum XlChartType
{
    xlColumnClustered = 51,
    xlColumnStacked = 52,
    xlColumnStacked100 = 53,
    xl3DColumnClustered = 54,
    xl3DColumnStacked = 55,
    xl3DColumnStacked100 = 56,
    xlBarClustered = 57,
    xlBarStacked = 58,
    xlBarStacked100 = 59,
    xl3DBarClustered = 60,
    xl3DBarStacked = 61,
    xl3DBarStacked100 = 62,
    xlLineStacked = 63,
    xlLineStacked100 = 64,
    xlLineMarkers = 65,
    xlLineMarkersStacked = 66,
    xlLineMarkersStacked100 = 67,
    xlPieOfPie = 68,
    xlPieExploded = 69,
    xl3DPieExploded = 70,
    xlBarOfPie = 71,
    xlXYScatterSmooth = 72,
    xlXYScatterSmoothNoMarkers = 73,
    xlXYScatterLines = 74,
    xlXYScatterLinesNoMarkers = 75,
    xlAreaStacked = 76,
    xlAreaStacked100 = 77,
    xl3DAreaStacked = 78,
    xl3DAreaStacked100 = 79,
    xlDoughnutExploded = 80,
    xlRadarMarkers = 81,
    xlRadarFilled = 82,
    xlSurface = 83,
    xlSurfaceWireframe = 84,
    xlSurfaceTopView = 85,
    xlSurfaceTopViewWireframe = 86,
    xlBubble = 15,
    xlBubble3DEffect = 87,
    xlStockHLC = 88,
    xlStockOHLC = 89,
    xlStockVHLC = 90,
    xlStockVOHLC = 91,
    xlCylinderColClustered = 92,
    xlCylinderColStacked = 93,
    xlCylinderColStacked100 = 94,
    xlCylinderBarClustered = 95,
    xlCylinderBarStacked = 96,
    xlCylinderBarStacked100 = 97,
    xlCylinderCol = 98,
    xlConeColClustered = 99,
    xlConeColStacked = 100,
    xlConeColStacked100 = 101,
    xlConeBarClustered = 102,
    xlConeBarStacked = 103,
    xlConeBarStacked100 = 104,
    xlConeCol = 105,
    xlPyramidColClustered = 106,
    xlPyramidColStacked = 107,
    xlPyramidColStacked100 = 108,
    xlPyramidBarClustered = 109,
    xlPyramidBarStacked = 110,
    xlPyramidBarStacked100 = 111,
    xlPyramidCol = 112,
    xl3DColumn = -4100,
    xlLine = 4,
    xl3DLine = -4101,
    xl3DPie = -4102,
    xlPie = 5,
    xlXYScatter = -4169,
    xl3DArea = -4098,
    xlArea = 1,
    xlDoughnut = -4120,
    xlRadar = -4151
};

enum XlChartItem
{
    xlDataLabel = 0,
    xlChartArea = 2,
    xlSeries = 3,
    xlChartTitle = 4,
    xlWalls = 5,
    xlCorners = 6,
    xlDataTable = 7,
    xlTrendline = 8,
    xlErrorBars = 9,
    xlXErrorBars = 10,
    xlYErrorBars = 11,
    xlLegendEntry = 12,
    xlLegendKey = 13,
    xlShape = 14,
    xlMajorGridlines = 15,
    xlMinorGridlines = 16,
    xlAxisTitle = 17,
    xlUpBars = 18,
    xlPlotArea = 19,
    xlDownBars = 20,
    xlAxis = 21,
    xlSeriesLines = 22,
    xlFloor = 23,
    xlLegend = 24,
    xlHiLoLines = 25,
    xlDropLines = 26,
    xlRadarAxisLabels = 27,
    xlNothing = 28,
    xlLeaderLines = 29,
    xlDisplayUnitLabel = 30,
    xlPivotChartFieldButton = 31,
    xlPivotChartDropZone = 32
};

enum XlSizeRepresents
{
    xlSizeIsWidth = 2,
    xlSizeIsArea = 1
};

enum XlInsertShiftDirection
{
    xlShiftDown = -4121,
    xlShiftToRight = -4161
};

enum XlDeleteShiftDirection
{
    xlShiftToLeft = -4159,
    xlShiftUp = -4162
};

enum XlDirection
{
    xlDown = -4121,
    xlToLeft = -4159,
    xlToRight = -4161,
    xlUp = -4162
};

enum XlConsolidationFunction
{
    xlAverage = -4106,
    xlCount = -4112,
    xlCountNums = -4113,
    xlMax = -4136,
    xlMin = -4139,
    xlProduct = -4149,
    xlStDev = -4155,
    xlStDevP = -4156,
    xlSum = -4157,
    xlVar = -4164,
    xlVarP = -4165,
    xlUnknown = 1000
};

enum XlSheetType
{
    xlChart = -4109,
    xlDialogSheet = -4116,
    xlExcel4IntlMacroSheet = 4,
    xlExcel4MacroSheet = 3,
    xlWorksheet = -4167
};

enum XlLocationInTable
{
    xlColumnHeader = -4110,
    xlColumnItem = 5,
    xlDataHeader = 3,
    xlDataItem = 7,
    xlPageHeader = 2,
    xlPageItem = 6,
    xlRowHeader = -4153,
    xlRowItem = 4,
    xlTableBody = 8
};

enum XlFindLookIn
{
    xlFormulas = -4123,
    xlComments = -4144,
    xlValues = -4163
};

enum XlWindowType
{
    xlChartAsWindow = 5,
    xlChartInPlace = 4,
    xlClipboard = 3,
    xlInfo = -4129,
    xlWorkbook = 1
};

enum XlPivotFieldDataType
{
    xlDate = 2,
    xlNumber = -4145,
    xlText = -4158
};

enum XlCopyPictureFormat
{
    xlBitmap = 2,
    xlPicture = -4147
};

enum XlPivotTableSourceType
{
    xlScenario = 4,
    xlConsolidation = 3,
    xlDatabase = 1,
    xlExternal = 2,
    xlPivotTable = -4148
};

enum XlReferenceStyle
{
    xlA1 = 1,
    xlR1C1 = -4150
};

enum XlMSApplication
{
    xlMicrosoftAccess = 4,
    xlMicrosoftFoxPro = 5,
    xlMicrosoftMail = 3,
    xlMicrosoftPowerPoint = 2,
    xlMicrosoftProject = 6,
    xlMicrosoftSchedulePlus = 7,
    xlMicrosoftWord = 1
};

enum XlMouseButton
{
    xlNoButton = 0,
    xlPrimaryButton = 1,
    xlSecondaryButton = 2
};

enum XlCutCopyMode
{
    xlCopy = 1,
    xlCut = 2
};

enum XlFillWith
{
    xlFillWithAll = -4104,
    xlFillWithContents = 2,
    xlFillWithFormats = -4122
};

enum XlFilterAction
{
    xlFilterCopy = 2,
    xlFilterInPlace = 1
};

enum XlOrder
{
    xlDownThenOver = 1,
    xlOverThenDown = 2
};

enum XlLinkType
{
    xlLinkTypeExcelLinks = 1,
    xlLinkTypeOLELinks = 2
};

enum XlApplyNamesOrder
{
    xlColumnThenRow = 2,
    xlRowThenColumn = 1
};

enum XlEnableCancelKey
{
    xlDisabled = 0,
    xlErrorHandler = 2,
    xlInterrupt = 1
};

enum XlPageBreak
{
    xlPageBreakAutomatic = -4105,
    xlPageBreakManual = -4135,
    xlPageBreakNone = -4142
};

enum XlOLEType
{
    xlOLEControl = 2,
    xlOLEEmbed = 1,
    xlOLELink = 0
};

enum XlPageOrientation
{
    xlLandscape = 2,
    xlPortrait = 1
};

enum XlLinkInfo
{
    xlEditionDate = 2,
    xlUpdateState = 1,
    xlLinkInfoStatus = 3
};

enum XlCommandUnderlines
{
    xlCommandUnderlinesAutomatic = -4105,
    xlCommandUnderlinesOff = -4146,
    xlCommandUnderlinesOn = 1
};

enum XlOLEVerb
{
    xlVerbOpen = 2,
    xlVerbPrimary = 1
};

enum XlCalculation
{
    xlCalculationAutomatic = -4105,
    xlCalculationManual = -4135,
    xlCalculationSemiautomatic = 2
};

enum XlFileAccess
{
    xlReadOnly = 3,
    xlReadWrite = 2
};

enum XlEditionType
{
    xlPublisher = 1,
    xlSubscriber = 2
};

enum XlObjectSize
{
    xlFitToPage = 2,
    xlFullPage = 3,
    xlScreenSize = 1
};

enum XlLookAt
{
    xlPart = 2,
    xlWhole = 1
};

enum XlMailSystem
{
    xlMAPI = 1,
    xlNoMailSystem = 0,
    xlPowerTalk = 2
};

enum XlLinkInfoType
{
    xlLinkInfoOLELinks = 2,
    xlLinkInfoPublishers = 5,
    xlLinkInfoSubscribers = 6
};

enum XlCVError
{
    xlErrDiv0 = 2007,
    xlErrNA = 2042,
    xlErrName = 2029,
    xlErrNull = 2000,
    xlErrNum = 2036,
    xlErrRef = 2023,
    xlErrValue = 2015
};

enum XlEditionFormat
{
    xlBIFF = 2,
    xlPICT = 1,
    xlRTF = 4,
    xlVALU = 8
};

enum XlLink
{
    xlExcelLinks = 1,
    xlOLELinks = 2,
    xlPublishers = 5,
    xlSubscribers = 6
};

enum XlCellType
{
    xlCellTypeBlanks = 4,
    xlCellTypeConstants = 2,
    xlCellTypeFormulas = -4123,
    xlCellTypeLastCell = 11,
    xlCellTypeComments = -4144,
    xlCellTypeVisible = 12,
    xlCellTypeAllFormatConditions = -4172,
    xlCellTypeSameFormatConditions = -4173,
    xlCellTypeAllValidation = -4174,
    xlCellTypeSameValidation = -4175
};

enum XlArrangeStyle
{
    xlArrangeStyleCascade = 7,
    xlArrangeStyleHorizontal = -4128,
    xlArrangeStyleTiled = 1,
    xlArrangeStyleVertical = -4166
};

enum XlMousePointer
{
    xlIBeam = 3,
    xlDefault = -4143,
    xlNorthwestArrow = 1,
    xlWait = 2
};

enum XlEditionOptionsOption
{
    xlAutomaticUpdate = 4,
    xlCancel = 1,
    xlChangeAttributes = 6,
    xlManualUpdate = 5,
    xlOpenSource = 3,
    xlSelect = 3,
    xlSendPublisher = 2,
    xlUpdateSubscriber = 2
};

enum XlAutoFillType
{
    xlFillCopy = 1,
    xlFillDays = 5,
    xlFillDefault = 0,
    xlFillFormats = 3,
    xlFillMonths = 7,
    xlFillSeries = 2,
    xlFillValues = 4,
    xlFillWeekdays = 6,
    xlFillYears = 8,
    xlGrowthTrend = 10,
    xlLinearTrend = 9
};

enum XlAutoFilterOperator
{
    xlAnd = 1,
    xlBottom10Items = 4,
    xlBottom10Percent = 6,
    xlOr = 2,
    xlTop10Items = 3,
    xlTop10Percent = 5
};

enum XlClipboardFormat
{
    xlClipboardFormatBIFF = 8,
    xlClipboardFormatBIFF2 = 18,
    xlClipboardFormatBIFF3 = 20,
    xlClipboardFormatBIFF4 = 30,
    xlClipboardFormatBinary = 15,
    xlClipboardFormatBitmap = 9,
    xlClipboardFormatCGM = 13,
    xlClipboardFormatCSV = 5,
    xlClipboardFormatDIF = 4,
    xlClipboardFormatDspText = 12,
    xlClipboardFormatEmbeddedObject = 21,
    xlClipboardFormatEmbedSource = 22,
    xlClipboardFormatLink = 11,
    xlClipboardFormatLinkSource = 23,
    xlClipboardFormatLinkSourceDesc = 32,
    xlClipboardFormatMovie = 24,
    xlClipboardFormatNative = 14,
    xlClipboardFormatObjectDesc = 31,
    xlClipboardFormatObjectLink = 19,
    xlClipboardFormatOwnerLink = 17,
    xlClipboardFormatPICT = 2,
    xlClipboardFormatPrintPICT = 3,
    xlClipboardFormatRTF = 7,
    xlClipboardFormatScreenPICT = 29,
    xlClipboardFormatStandardFont = 28,
    xlClipboardFormatStandardScale = 27,
    xlClipboardFormatSYLK = 6,
    xlClipboardFormatTable = 16,
    xlClipboardFormatText = 0,
    xlClipboardFormatToolFace = 25,
    xlClipboardFormatToolFacePICT = 26,
    xlClipboardFormatVALU = 1,
    xlClipboardFormatWK1 = 10
};

enum XlFileFormat
{
    xlAddIn = 18,
    xlCSV = 6,
    xlCSVMac = 22,
    xlCSVMSDOS = 24,
    xlCSVWindows = 23,
    xlDBF2 = 7,
    xlDBF3 = 8,
    xlDBF4 = 11,
    xlDIF = 9,
    xlExcel2 = 16,
    xlExcel2FarEast = 27,
    xlExcel3 = 29,
    xlExcel4 = 33,
    xlExcel5 = 39,
    xlExcel7 = 39,
    xlExcel9795 = 43,
    xlExcel4Workbook = 35,
    xlIntlAddIn = 26,
    xlIntlMacro = 25,
    xlWorkbookNormal = -4143,
    xlSYLK = 2,
    xlTemplate = 17,
    xlCurrentPlatformText = -4158,
    xlTextMac = 19,
    xlTextMSDOS = 21,
    xlTextPrinter = 36,
    xlTextWindows = 20,
    xlWJ2WD1 = 14,
    xlWK1 = 5,
    xlWK1ALL = 31,
    xlWK1FMT = 30,
    xlWK3 = 15,
    xlWK4 = 38,
    xlWK3FM3 = 32,
    xlWKS = 4,
    xlWorks2FarEast = 28,
    xlWQ1 = 34,
    xlWJ3 = 40,
    xlWJ3FJ3 = 41,
    xlUnicodeText = 42,
    xlHtml = 44,
    xlWebArchive = 45,
    xlXMLSpreadsheet = 46
};

enum XlApplicationInternational
{
    xl24HourClock = 33,
    xl4DigitYears = 43,
    xlAlternateArraySeparator = 16,
    xlColumnSeparator = 14,
    xlCountryCode = 1,
    xlCountrySetting = 2,
    xlCurrencyBefore = 37,
    xlCurrencyCode = 25,
    xlCurrencyDigits = 27,
    xlCurrencyLeadingZeros = 40,
    xlCurrencyMinusSign = 38,
    xlCurrencyNegative = 28,
    xlCurrencySpaceBefore = 36,
    xlCurrencyTrailingZeros = 39,
    xlDateOrder = 32,
    xlDateSeparator = 17,
    xlDayCode = 21,
    xlDayLeadingZero = 42,
    xlDecimalSeparator = 3,
    xlGeneralFormatName = 26,
    xlHourCode = 22,
    xlLeftBrace = 12,
    xlLeftBracket = 10,
    xlListSeparator = 5,
    xlLowerCaseColumnLetter = 9,
    xlLowerCaseRowLetter = 8,
    xlMDY = 44,
    xlMetric = 35,
    xlMinuteCode = 23,
    xlMonthCode = 20,
    xlMonthLeadingZero = 41,
    xlMonthNameChars = 30,
    xlNoncurrencyDigits = 29,
    xlNonEnglishFunctions = 34,
    xlRightBrace = 13,
    xlRightBracket = 11,
    xlRowSeparator = 15,
    xlSecondCode = 24,
    xlThousandsSeparator = 4,
    xlTimeLeadingZero = 45,
    xlTimeSeparator = 18,
    xlUpperCaseColumnLetter = 7,
    xlUpperCaseRowLetter = 6,
    xlWeekdayNameChars = 31,
    xlYearCode = 19
};

enum XlPageBreakExtent
{
    xlPageBreakFull = 1,
    xlPageBreakPartial = 2
};

enum XlCellInsertionMode
{
    xlOverwriteCells = 0,
    xlInsertDeleteCells = 1,
    xlInsertEntireRows = 2
};

enum XlFormulaLabel
{
    xlNoLabels = -4142,
    xlRowLabels = 1,
    xlColumnLabels = 2,
    xlMixedLabels = 3
};

enum XlHighlightChangesTime
{
    xlSinceMyLastSave = 1,
    xlAllChanges = 2,
    xlNotYetReviewed = 3
};

enum XlCommentDisplayMode
{
    xlNoIndicator = 0,
    xlCommentIndicatorOnly = -1,
    xlCommentAndIndicator = 1
};

enum XlFormatConditionType
{
    xlCellValue = 1,
    xlExpression = 2
};

enum XlFormatConditionOperator
{
    xlBetween = 1,
    xlNotBetween = 2,
    xlEqual = 3,
    xlNotEqual = 4,
    xlGreater = 5,
    xlLess = 6,
    xlGreaterEqual = 7,
    xlLessEqual = 8
};

enum XlEnableSelection
{
    xlNoRestrictions = 0,
    xlUnlockedCells = 1,
    xlNoSelection = -4142
};

enum XlDVType
{
    xlValidateInputOnly = 0,
    xlValidateWholeNumber = 1,
    xlValidateDecimal = 2,
    xlValidateList = 3,
    xlValidateDate = 4,
    xlValidateTime = 5,
    xlValidateTextLength = 6,
    xlValidateCustom = 7
};

enum XlIMEMode
{
    xlIMEModeNoControl = 0,
    xlIMEModeOn = 1,
    xlIMEModeOff = 2,
    xlIMEModeDisable = 3,
    xlIMEModeHiragana = 4,
    xlIMEModeKatakana = 5,
    xlIMEModeKatakanaHalf = 6,
    xlIMEModeAlphaFull = 7,
    xlIMEModeAlpha = 8,
    xlIMEModeHangulFull = 9,
    xlIMEModeHangul = 10
};

enum XlDVAlertStyle
{
    xlValidAlertStop = 1,
    xlValidAlertWarning = 2,
    xlValidAlertInformation = 3
};

enum XlChartLocation
{
    xlLocationAsNewSheet = 1,
    xlLocationAsObject = 2,
    xlLocationAutomatic = 3
};

enum XlPaperSize
{
    xlPaper10x14 = 16,
    xlPaper11x17 = 17,
    xlPaperA3 = 8,
    xlPaperA4 = 9,
    xlPaperA4Small = 10,
    xlPaperA5 = 11,
    xlPaperB4 = 12,
    xlPaperB5 = 13,
    xlPaperCsheet = 24,
    xlPaperDsheet = 25,
    xlPaperEnvelope10 = 20,
    xlPaperEnvelope11 = 21,
    xlPaperEnvelope12 = 22,
    xlPaperEnvelope14 = 23,
    xlPaperEnvelope9 = 19,
    xlPaperEnvelopeB4 = 33,
    xlPaperEnvelopeB5 = 34,
    xlPaperEnvelopeB6 = 35,
    xlPaperEnvelopeC3 = 29,
    xlPaperEnvelopeC4 = 30,
    xlPaperEnvelopeC5 = 28,
    xlPaperEnvelopeC6 = 31,
    xlPaperEnvelopeC65 = 32,
    xlPaperEnvelopeDL = 27,
    xlPaperEnvelopeItaly = 36,
    xlPaperEnvelopeMonarch = 37,
    xlPaperEnvelopePersonal = 38,
    xlPaperEsheet = 26,
    xlPaperExecutive = 7,
    xlPaperFanfoldLegalGerman = 41,
    xlPaperFanfoldStdGerman = 40,
    xlPaperFanfoldUS = 39,
    xlPaperFolio = 14,
    xlPaperLedger = 4,
    xlPaperLegal = 5,
    xlPaperLetter = 1,
    xlPaperLetterSmall = 2,
    xlPaperNote = 18,
    xlPaperQuarto = 15,
    xlPaperStatement = 6,
    xlPaperTabloid = 3,
    xlPaperUser = 256
};

enum XlPasteSpecialOperation
{
    xlPasteSpecialOperationAdd = 2,
    xlPasteSpecialOperationDivide = 5,
    xlPasteSpecialOperationMultiply = 4,
    xlPasteSpecialOperationNone = -4142,
    xlPasteSpecialOperationSubtract = 3
};

enum XlPasteType
{
    xlPasteAll = -4104,
    xlPasteAllExceptBorders = 7,
    xlPasteFormats = -4122,
    xlPasteFormulas = -4123,
    xlPasteComments = -4144,
    xlPasteValues = -4163,
    xlPasteColumnWidths = 8,
    xlPasteValidation = 6,
    xlPasteFormulasAndNumberFormats = 11,
    xlPasteValuesAndNumberFormats = 12
};

enum XlPhoneticCharacterType
{
    xlKatakanaHalf = 0,
    xlKatakana = 1,
    xlHiragana = 2,
    xlNoConversion = 3
};

enum XlPhoneticAlignment
{
    xlPhoneticAlignNoControl = 0,
    xlPhoneticAlignLeft = 1,
    xlPhoneticAlignCenter = 2,
    xlPhoneticAlignDistributed = 3
};

enum XlPictureAppearance
{
    xlPrinter = 2,
    xlScreen = 1
};

enum XlPivotFieldOrientation
{
    xlColumnField = 2,
    xlDataField = 4,
    xlHidden = 0,
    xlPageField = 3,
    xlRowField = 1
};

enum XlPivotFieldCalculation
{
    xlDifferenceFrom = 2,
    xlIndex = 9,
    xlNoAdditionalCalculation = -4143,
    xlPercentDifferenceFrom = 4,
    xlPercentOf = 3,
    xlPercentOfColumn = 7,
    xlPercentOfRow = 6,
    xlPercentOfTotal = 8,
    xlRunningTotal = 5
};

enum XlPlacement
{
    xlFreeFloating = 3,
    xlMove = 2,
    xlMoveAndSize = 1
};

enum XlPlatform
{
    xlMacintosh = 1,
    xlMSDOS = 3,
    xlWindows = 2
};

enum XlPrintLocation
{
    xlPrintSheetEnd = 1,
    xlPrintInPlace = 16,
    xlPrintNoComments = -4142
};

enum XlPriority
{
    xlPriorityHigh = -4127,
    xlPriorityLow = -4134,
    xlPriorityNormal = -4143
};

enum XlPTSelectionMode
{
    xlLabelOnly = 1,
    xlDataAndLabel = 0,
    xlDataOnly = 2,
    xlOrigin = 3,
    xlButton = 15,
    xlBlanks = 4,
    xlFirstRow = 256
};

enum XlRangeAutoFormat
{
    xlRangeAutoFormat3DEffects1 = 13,
    xlRangeAutoFormat3DEffects2 = 14,
    xlRangeAutoFormatAccounting1 = 4,
    xlRangeAutoFormatAccounting2 = 5,
    xlRangeAutoFormatAccounting3 = 6,
    xlRangeAutoFormatAccounting4 = 17,
    xlRangeAutoFormatClassic1 = 1,
    xlRangeAutoFormatClassic2 = 2,
    xlRangeAutoFormatClassic3 = 3,
    xlRangeAutoFormatColor1 = 7,
    xlRangeAutoFormatColor2 = 8,
    xlRangeAutoFormatColor3 = 9,
    xlRangeAutoFormatList1 = 10,
    xlRangeAutoFormatList2 = 11,
    xlRangeAutoFormatList3 = 12,
    xlRangeAutoFormatLocalFormat1 = 15,
    xlRangeAutoFormatLocalFormat2 = 16,
    xlRangeAutoFormatLocalFormat3 = 19,
    xlRangeAutoFormatLocalFormat4 = 20,
    xlRangeAutoFormatReport1 = 21,
    xlRangeAutoFormatReport2 = 22,
    xlRangeAutoFormatReport3 = 23,
    xlRangeAutoFormatReport4 = 24,
    xlRangeAutoFormatReport5 = 25,
    xlRangeAutoFormatReport6 = 26,
    xlRangeAutoFormatReport7 = 27,
    xlRangeAutoFormatReport8 = 28,
    xlRangeAutoFormatReport9 = 29,
    xlRangeAutoFormatReport10 = 30,
    xlRangeAutoFormatClassicPivotTable = 31,
    xlRangeAutoFormatTable1 = 32,
    xlRangeAutoFormatTable2 = 33,
    xlRangeAutoFormatTable3 = 34,
    xlRangeAutoFormatTable4 = 35,
    xlRangeAutoFormatTable5 = 36,
    xlRangeAutoFormatTable6 = 37,
    xlRangeAutoFormatTable7 = 38,
    xlRangeAutoFormatTable8 = 39,
    xlRangeAutoFormatTable9 = 40,
    xlRangeAutoFormatTable10 = 41,
    xlRangeAutoFormatPTNone = 42,
    xlRangeAutoFormatNone = -4142,
    xlRangeAutoFormatSimple = -4154
};

enum XlReferenceType
{
    xlAbsolute = 1,
    xlAbsRowRelColumn = 2,
    xlRelative = 4,
    xlRelRowAbsColumn = 3
};

enum XlLayoutFormType
{
    xlTabular = 0,
    xlOutline = 1
};

enum XlRoutingSlipDelivery
{
    xlAllAtOnce = 2,
    xlOneAfterAnother = 1
};

enum XlRoutingSlipStatus
{
    xlNotYetRouted = 0,
    xlRoutingComplete = 2,
    xlRoutingInProgress = 1
};

enum XlRunAutoMacro
{
    xlAutoActivate = 3,
    xlAutoClose = 2,
    xlAutoDeactivate = 4,
    xlAutoOpen = 1
};

enum XlSaveAction
{
    xlDoNotSaveChanges = 2,
    xlSaveChanges = 1
};

enum XlSaveAsAccessMode
{
    xlExclusive = 3,
    xlNoChange = 1,
    xlShared = 2
};

enum XlSaveConflictResolution
{
    xlLocalSessionChanges = 2,
    xlOtherSessionChanges = 3,
    xlUserResolution = 1
};

enum XlSearchDirection
{
    xlNext = 1,
    xlPrevious = 2
};

enum XlSearchOrder
{
    xlByColumns = 2,
    xlByRows = 1
};

enum XlSheetVisibility
{
    xlSheetVisible = -1,
    xlSheetHidden = 0,
    xlSheetVeryHidden = 2
};

enum XlSortMethod
{
    xlPinYin = 1,
    xlStroke = 2
};

enum XlSortMethodOld
{
    xlCodePage = 2,
    xlSyllabary = 1
};

enum XlSortOrder
{
    xlAscending = 1,
    xlDescending = 2
};

enum XlSortOrientation
{
    xlSortRows = 2,
    xlSortColumns = 1
};

enum XlSortType
{
    xlSortLabels = 2,
    xlSortValues = 1
};

enum XlSpecialCellsValue
{
    xlErrors = 16,
    xlLogical = 4,
    xlNumbers = 1,
    xlTextValues = 2
};

enum XlSubscribeToFormat
{
    xlSubscribeToPicture = -4147,
    xlSubscribeToText = -4158
};

enum XlSummaryRow
{
    xlSummaryAbove = 0,
    xlSummaryBelow = 1
};

enum XlSummaryColumn
{
    xlSummaryOnLeft = -4131,
    xlSummaryOnRight = -4152
};

enum XlSummaryReportType
{
    xlSummaryPivotTable = -4148,
    xlStandardSummary = 1
};

enum XlTabPosition
{
    xlTabPositionFirst = 0,
    xlTabPositionLast = 1
};

enum XlTextParsingType
{
    xlDelimited = 1,
    xlFixedWidth = 2
};

enum XlTextQualifier
{
    xlTextQualifierDoubleQuote = 1,
    xlTextQualifierNone = -4142,
    xlTextQualifierSingleQuote = 2
};

enum XlWBATemplate
{
    xlWBATChart = -4109,
    xlWBATExcel4IntlMacroSheet = 4,
    xlWBATExcel4MacroSheet = 3,
    xlWBATWorksheet = -4167
};

enum XlWindowView
{
    xlNormalView = 1,
    xlPageBreakPreview = 2
};

enum XlXLMMacroType
{
    xlCommand = 2,
    xlFunction = 1,
    xlNotXLM = 3
};

enum XlYesNoGuess
{
    xlGuess = 0,
    xlNo = 2,
    xlYes = 1
};

enum XlBordersIndex
{
    xlInsideHorizontal = 12,
    xlInsideVertical = 11,
    xlDiagonalDown = 5,
    xlDiagonalUp = 6,
    xlEdgeBottom = 9,
    xlEdgeLeft = 7,
    xlEdgeRight = 10,
    xlEdgeTop = 8
};

enum XlToolbarProtection
{
    xlNoButtonChanges = 1,
    xlNoChanges = 4,
    xlNoDockingChanges = 3,
    xlToolbarProtectionNone = -4143,
    xlNoShapeChanges = 2
};

enum XlBuiltInDialog
{
    xlDialogOpen = 1,
    xlDialogOpenLinks = 2,
    xlDialogSaveAs = 5,
    xlDialogFileDelete = 6,
    xlDialogPageSetup = 7,
    xlDialogPrint = 8,
    xlDialogPrinterSetup = 9,
    xlDialogArrangeAll = 12,
    xlDialogWindowSize = 13,
    xlDialogWindowMove = 14,
    xlDialogRun = 17,
    xlDialogSetPrintTitles = 23,
    xlDialogFont = 26,
    xlDialogDisplay = 27,
    xlDialogProtectDocument = 28,
    xlDialogCalculation = 32,
    xlDialogExtract = 35,
    xlDialogDataDelete = 36,
    xlDialogSort = 39,
    xlDialogDataSeries = 40,
    xlDialogTable = 41,
    xlDialogFormatNumber = 42,
    xlDialogAlignment = 43,
    xlDialogStyle = 44,
    xlDialogBorder = 45,
    xlDialogCellProtection = 46,
    xlDialogColumnWidth = 47,
    xlDialogClear = 52,
    xlDialogPasteSpecial = 53,
    xlDialogEditDelete = 54,
    xlDialogInsert = 55,
    xlDialogPasteNames = 58,
    xlDialogDefineName = 61,
    xlDialogCreateNames = 62,
    xlDialogFormulaGoto = 63,
    xlDialogFormulaFind = 64,
    xlDialogGalleryArea = 67,
    xlDialogGalleryBar = 68,
    xlDialogGalleryColumn = 69,
    xlDialogGalleryLine = 70,
    xlDialogGalleryPie = 71,
    xlDialogGalleryScatter = 72,
    xlDialogCombination = 73,
    xlDialogGridlines = 76,
    xlDialogAxes = 78,
    xlDialogAttachText = 80,
    xlDialogPatterns = 84,
    xlDialogMainChart = 85,
    xlDialogOverlay = 86,
    xlDialogScale = 87,
    xlDialogFormatLegend = 88,
    xlDialogFormatText = 89,
    xlDialogParse = 91,
    xlDialogUnhide = 94,
    xlDialogWorkspace = 95,
    xlDialogActivate = 103,
    xlDialogCopyPicture = 108,
    xlDialogDeleteName = 110,
    xlDialogDeleteFormat = 111,
    xlDialogNew = 119,
    xlDialogRowHeight = 127,
    xlDialogFormatMove = 128,
    xlDialogFormatSize = 129,
    xlDialogFormulaReplace = 130,
    xlDialogSelectSpecial = 132,
    xlDialogApplyNames = 133,
    xlDialogReplaceFont = 134,
    xlDialogSplit = 137,
    xlDialogOutline = 142,
    xlDialogSaveWorkbook = 145,
    xlDialogCopyChart = 147,
    xlDialogFormatFont = 150,
    xlDialogNote = 154,
    xlDialogSetUpdateStatus = 159,
    xlDialogColorPalette = 161,
    xlDialogChangeLink = 166,
    xlDialogAppMove = 170,
    xlDialogAppSize = 171,
    xlDialogMainChartType = 185,
    xlDialogOverlayChartType = 186,
    xlDialogOpenMail = 188,
    xlDialogSendMail = 189,
    xlDialogStandardFont = 190,
    xlDialogConsolidate = 191,
    xlDialogSortSpecial = 192,
    xlDialogGallery3dArea = 193,
    xlDialogGallery3dColumn = 194,
    xlDialogGallery3dLine = 195,
    xlDialogGallery3dPie = 196,
    xlDialogView3d = 197,
    xlDialogGoalSeek = 198,
    xlDialogWorkgroup = 199,
    xlDialogFillGroup = 200,
    xlDialogUpdateLink = 201,
    xlDialogPromote = 202,
    xlDialogDemote = 203,
    xlDialogShowDetail = 204,
    xlDialogObjectProperties = 207,
    xlDialogSaveNewObject = 208,
    xlDialogApplyStyle = 212,
    xlDialogAssignToObject = 213,
    xlDialogObjectProtection = 214,
    xlDialogCreatePublisher = 217,
    xlDialogSubscribeTo = 218,
    xlDialogShowToolbar = 220,
    xlDialogPrintPreview = 222,
    xlDialogEditColor = 223,
    xlDialogFormatMain = 225,
    xlDialogFormatOverlay = 226,
    xlDialogEditSeries = 228,
    xlDialogDefineStyle = 229,
    xlDialogGalleryRadar = 249,
    xlDialogEditionOptions = 251,
    xlDialogZoom = 256,
    xlDialogInsertObject = 259,
    xlDialogSize = 261,
    xlDialogMove = 262,
    xlDialogFormatAuto = 269,
    xlDialogGallery3dBar = 272,
    xlDialogGallery3dSurface = 273,
    xlDialogCustomizeToolbar = 276,
    xlDialogWorkbookAdd = 281,
    xlDialogWorkbookMove = 282,
    xlDialogWorkbookCopy = 283,
    xlDialogWorkbookOptions = 284,
    xlDialogSaveWorkspace = 285,
    xlDialogChartWizard = 288,
    xlDialogAssignToTool = 293,
    xlDialogPlacement = 300,
    xlDialogFillWorkgroup = 301,
    xlDialogWorkbookNew = 302,
    xlDialogScenarioCells = 305,
    xlDialogScenarioAdd = 307,
    xlDialogScenarioEdit = 308,
    xlDialogScenarioSummary = 311,
    xlDialogPivotTableWizard = 312,
    xlDialogPivotFieldProperties = 313,
    xlDialogOptionsCalculation = 318,
    xlDialogOptionsEdit = 319,
    xlDialogOptionsView = 320,
    xlDialogAddinManager = 321,
    xlDialogMenuEditor = 322,
    xlDialogAttachToolbars = 323,
    xlDialogOptionsChart = 325,
    xlDialogVbaInsertFile = 328,
    xlDialogVbaProcedureDefinition = 330,
    xlDialogRoutingSlip = 336,
    xlDialogMailLogon = 339,
    xlDialogInsertPicture = 342,
    xlDialogGalleryDoughnut = 344,
    xlDialogChartTrend = 350,
    xlDialogWorkbookInsert = 354,
    xlDialogOptionsTransition = 355,
    xlDialogOptionsGeneral = 356,
    xlDialogFilterAdvanced = 370,
    xlDialogMailNextLetter = 378,
    xlDialogDataLabel = 379,
    xlDialogInsertTitle = 380,
    xlDialogFontProperties = 381,
    xlDialogMacroOptions = 382,
    xlDialogWorkbookUnhide = 384,
    xlDialogWorkbookName = 386,
    xlDialogGalleryCustom = 388,
    xlDialogAddChartAutoformat = 390,
    xlDialogChartAddData = 392,
    xlDialogTabOrder = 394,
    xlDialogSubtotalCreate = 398,
    xlDialogWorkbookTabSplit = 415,
    xlDialogWorkbookProtect = 417,
    xlDialogScrollbarProperties = 420,
    xlDialogPivotShowPages = 421,
    xlDialogTextToColumns = 422,
    xlDialogFormatCharttype = 423,
    xlDialogPivotFieldGroup = 433,
    xlDialogPivotFieldUngroup = 434,
    xlDialogCheckboxProperties = 435,
    xlDialogLabelProperties = 436,
    xlDialogListboxProperties = 437,
    xlDialogEditboxProperties = 438,
    xlDialogOpenText = 441,
    xlDialogPushbuttonProperties = 445,
    xlDialogFilter = 447,
    xlDialogFunctionWizard = 450,
    xlDialogSaveCopyAs = 456,
    xlDialogOptionsListsAdd = 458,
    xlDialogSeriesAxes = 460,
    xlDialogSeriesX = 461,
    xlDialogSeriesY = 462,
    xlDialogErrorbarX = 463,
    xlDialogErrorbarY = 464,
    xlDialogFormatChart = 465,
    xlDialogSeriesOrder = 466,
    xlDialogMailEditMailer = 470,
    xlDialogStandardWidth = 472,
    xlDialogScenarioMerge = 473,
    xlDialogProperties = 474,
    xlDialogSummaryInfo = 474,
    xlDialogFindFile = 475,
    xlDialogActiveCellFont = 476,
    xlDialogVbaMakeAddin = 478,
    xlDialogFileSharing = 481,
    xlDialogAutoCorrect = 485,
    xlDialogCustomViews = 493,
    xlDialogInsertNameLabel = 496,
    xlDialogSeriesShape = 504,
    xlDialogChartOptionsDataLabels = 505,
    xlDialogChartOptionsDataTable = 506,
    xlDialogSetBackgroundPicture = 509,
    xlDialogDataValidation = 525,
    xlDialogChartType = 526,
    xlDialogChartLocation = 527,
    _xlDialogPhonetic = 538,
    xlDialogChartSourceData = 540,
    _xlDialogChartSourceData = 541,
    xlDialogSeriesOptions = 557,
    xlDialogPivotTableOptions = 567,
    xlDialogPivotSolveOrder = 568,
    xlDialogPivotCalculatedField = 570,
    xlDialogPivotCalculatedItem = 572,
    xlDialogConditionalFormatting = 583,
    xlDialogInsertHyperlink = 596,
    xlDialogProtectSharing = 620,
    xlDialogOptionsME = 647,
    xlDialogPublishAsWebPage = 653,
    xlDialogPhonetic = 656,
    xlDialogNewWebQuery = 667,
    xlDialogImportTextFile = 666,
    xlDialogExternalDataProperties = 530,
    xlDialogWebOptionsGeneral = 683,
    xlDialogWebOptionsFiles = 684,
    xlDialogWebOptionsPictures = 685,
    xlDialogWebOptionsEncoding = 686,
    xlDialogWebOptionsFonts = 687,
    xlDialogPivotClientServerSet = 689,
    xlDialogPropertyFields = 754,
    xlDialogSearch = 731,
    xlDialogEvaluateFormula = 709,
    xlDialogDataLabelMultiple = 723,
    xlDialogChartOptionsDataLabelMultiple = 724,
    xlDialogErrorChecking = 732,
    xlDialogWebOptionsBrowsers = 773,
    xlDialogCreateList = 796,
    xlDialogPermission = 832,
    xlDialogMyPermission = 834
};

enum XlParameterType
{
    xlPrompt = 0,
    xlConstant = 1,
    xlRange = 2
};

enum XlParameterDataType
{
    xlParamTypeUnknown = 0,
    xlParamTypeChar = 1,
    xlParamTypeNumeric = 2,
    xlParamTypeDecimal = 3,
    xlParamTypeInteger = 4,
    xlParamTypeSmallInt = 5,
    xlParamTypeFloat = 6,
    xlParamTypeReal = 7,
    xlParamTypeDouble = 8,
    xlParamTypeVarChar = 12,
    xlParamTypeDate = 9,
    xlParamTypeTime = 10,
    xlParamTypeTimestamp = 11,
    xlParamTypeLongVarChar = -1,
    xlParamTypeBinary = -2,
    xlParamTypeVarBinary = -3,
    xlParamTypeLongVarBinary = -4,
    xlParamTypeBigInt = -5,
    xlParamTypeTinyInt = -6,
    xlParamTypeBit = -7,
    xlParamTypeWChar = -8
};

enum XlFormControl
{
    xlButtonControl = 0,
    xlCheckBox = 1,
    xlDropDown = 2,
    xlEditBox = 3,
    xlGroupBox = 4,
    xlLabel = 5,
    xlListBox = 6,
    xlOptionButton = 7,
    xlScrollBar = 8,
    xlSpinner = 9
};

enum XlSourceType
{
    xlSourceWorkbook = 0,
    xlSourceSheet = 1,
    xlSourcePrintArea = 2,
    xlSourceAutoFilter = 3,
    xlSourceRange = 4,
    xlSourceChart = 5,
    xlSourcePivotTable = 6,
    xlSourceQuery = 7
};

enum XlHtmlType
{
    xlHtmlStatic = 0,
    xlHtmlCalc = 1,
    xlHtmlList = 2,
    xlHtmlChart = 3
};

enum XlPivotFormatType
{
    xlReport1 = 0,
    xlReport2 = 1,
    xlReport3 = 2,
    xlReport4 = 3,
    xlReport5 = 4,
    xlReport6 = 5,
    xlReport7 = 6,
    xlReport8 = 7,
    xlReport9 = 8,
    xlReport10 = 9,
    xlTable1 = 10,
    xlTable2 = 11,
    xlTable3 = 12,
    xlTable4 = 13,
    xlTable5 = 14,
    xlTable6 = 15,
    xlTable7 = 16,
    xlTable8 = 17,
    xlTable9 = 18,
    xlTable10 = 19,
    xlPTClassic = 20,
    xlPTNone = 21
};

enum XlCmdType
{
    xlCmdCube = 1,
    xlCmdSql = 2,
    xlCmdTable = 3,
    xlCmdDefault = 4,
    xlCmdList = 5
};

enum XlColumnDataType
{
    xlGeneralFormat = 1,
    xlTextFormat = 2,
    xlMDYFormat = 3,
    xlDMYFormat = 4,
    xlYMDFormat = 5,
    xlMYDFormat = 6,
    xlDYMFormat = 7,
    xlYDMFormat = 8,
    xlSkipColumn = 9,
    xlEMDFormat = 10
};

enum XlQueryType
{
    xlODBCQuery = 1,
    xlDAORecordset = 2,
    xlWebQuery = 4,
    xlOLEDBQuery = 5,
    xlTextImport = 6,
    xlADORecordset = 7
};

enum XlWebSelectionType
{
    xlEntirePage = 1,
    xlAllTables = 2,
    xlSpecifiedTables = 3
};

enum XlCubeFieldType
{
    xlHierarchy = 1,
    xlMeasure = 2,
    xlSet = 3
};

enum XlWebFormatting
{
    xlWebFormattingAll = 1,
    xlWebFormattingRTF = 2,
    xlWebFormattingNone = 3
};

enum XlDisplayDrawingObjects
{
    xlDisplayShapes = -4104,
    xlHide = 3,
    xlPlaceholders = 2
};

enum XlSubtototalLocationType
{
    xlAtTop = 1,
    xlAtBottom = 2
};

enum XlPivotTableVersionList
{
    xlPivotTableVersion2000 = 0,
    xlPivotTableVersion10 = 1,
    xlPivotTableVersionCurrent = -1
};

enum XlPrintErrors
{
    xlPrintErrorsDisplayed = 0,
    xlPrintErrorsBlank = 1,
    xlPrintErrorsDash = 2,
    xlPrintErrorsNA = 3
};

enum XlPivotCellType
{
    xlPivotCellValue = 0,
    xlPivotCellPivotItem = 1,
    xlPivotCellSubtotal = 2,
    xlPivotCellGrandTotal = 3,
    xlPivotCellDataField = 4,
    xlPivotCellPivotField = 5,
    xlPivotCellPageFieldItem = 6,
    xlPivotCellCustomSubtotal = 7,
    xlPivotCellDataPivotField = 8,
    xlPivotCellBlankCell = 9
};

enum XlPivotTableMissingItems
{
    xlMissingItemsDefault = -1,
    xlMissingItemsNone = 0,
    xlMissingItemsMax = 32500
};

enum XlCalculationState
{
    xlDone = 0,
    xlCalculating = 1,
    xlPending = 2
};

enum XlCalculationInterruptKey
{
    xlNoKey = 0,
    xlEscKey = 1,
    xlAnyKey = 2
};

enum XlSortDataOption
{
    xlSortNormal = 0,
    xlSortTextAsNumbers = 1
};

enum XlUpdateLinks
{
    xlUpdateLinksUserSetting = 1,
    xlUpdateLinksNever = 2,
    xlUpdateLinksAlways = 3
};

enum XlLinkStatus
{
    xlLinkStatusOK = 0,
    xlLinkStatusMissingFile = 1,
    xlLinkStatusMissingSheet = 2,
    xlLinkStatusOld = 3,
    xlLinkStatusSourceNotCalculated = 4,
    xlLinkStatusIndeterminate = 5,
    xlLinkStatusNotStarted = 6,
    xlLinkStatusInvalidName = 7,
    xlLinkStatusSourceNotOpen = 8,
    xlLinkStatusSourceOpen = 9,
    xlLinkStatusCopiedValues = 10
};

enum XlSearchWithin
{
    xlWithinSheet = 1,
    xlWithinWorkbook = 2
};

enum XlCorruptLoad
{
    xlNormalLoad = 0,
    xlRepairFile = 1,
    xlExtractData = 2
};

enum XlRobustConnect
{
    xlAsRequired = 0,
    xlAlways = 1,
    xlNever = 2
};

enum XlErrorChecks
{
    xlEvaluateToError = 1,
    xlTextDate = 2,
    xlNumberAsText = 3,
    xlInconsistentFormula = 4,
    xlOmittedCells = 5,
    xlUnlockedFormulaCells = 6,
    xlEmptyCellReferences = 7,
    xlListDataValidation = 8
};

enum XlDataLabelSeparator
{
    xlDataLabelSeparatorDefault = 1
};

enum XlSmartTagDisplayMode
{
    xlIndicatorAndButton = 0,
    xlDisplayNone = 1,
    xlButtonOnly = 2
};

enum XlRangeValueDataType
{
    xlRangeValueDefault = 10,
    xlRangeValueXMLSpreadsheet = 11,
    xlRangeValueMSPersistXML = 12
};

enum XlSpeakDirection
{
    xlSpeakByRows = 0,
    xlSpeakByColumns = 1
};

enum XlInsertFormatOrigin
{
    xlFormatFromLeftOrAbove = 0,
    xlFormatFromRightOrBelow = 1
};

enum XlArabicModes
{
    xlArabicNone = 0,
    xlArabicStrictAlefHamza = 1,
    xlArabicStrictFinalYaa = 2,
    xlArabicBothStrict = 3
};

enum XlImportDataAs
{
    xlQueryTable = 0,
    xlPivotTableReport = 1
};

enum XlCalculatedMemberType
{
    xlCalculatedMember = 0,
    xlCalculatedSet = 1
};

enum XlHebrewModes
{
    xlHebrewFullScript = 0,
    xlHebrewPartialScript = 1,
    xlHebrewMixedScript = 2,
    xlHebrewMixedAuthorizedScript = 3
};

enum XlListObjectSourceType
{
    xlSrcExternal = 0,
    xlSrcRange = 1,
    xlSrcXml = 2
};

enum XlTextVisualLayoutType
{
    xlTextVisualLTR = 1,
    xlTextVisualRTL = 2
};

enum XlListDataType
{
    xlListDataTypeNone = 0,
    xlListDataTypeText = 1,
    xlListDataTypeMultiLineText = 2,
    xlListDataTypeNumber = 3,
    xlListDataTypeCurrency = 4,
    xlListDataTypeDateTime = 5,
    xlListDataTypeChoice = 6,
    xlListDataTypeChoiceMulti = 7,
    xlListDataTypeListLookup = 8,
    xlListDataTypeCheckbox = 9,
    xlListDataTypeHyperLink = 10,
    xlListDataTypeCounter = 11,
    xlListDataTypeMultiLineRichText = 12
};

enum XlTotalsCalculation
{
    xlTotalsCalculationNone = 0,
    xlTotalsCalculationSum = 1,
    xlTotalsCalculationAverage = 2,
    xlTotalsCalculationCount = 3,
    xlTotalsCalculationCountNums = 4,
    xlTotalsCalculationMin = 5,
    xlTotalsCalculationMax = 6,
    xlTotalsCalculationStdDev = 7,
    xlTotalsCalculationVar = 8
};

enum XlXmlLoadOption
{
    xlXmlLoadPromptUser = 0,
    xlXmlLoadOpenXml = 1,
    xlXmlLoadImportToList = 2,
    xlXmlLoadMapXml = 3
};

enum XlSmartTagControlType
{
    xlSmartTagControlSmartTag = 1,
    xlSmartTagControlLink = 2,
    xlSmartTagControlHelp = 3,
    xlSmartTagControlHelpURL = 4,
    xlSmartTagControlSeparator = 5,
    xlSmartTagControlButton = 6,
    xlSmartTagControlLabel = 7,
    xlSmartTagControlImage = 8,
    xlSmartTagControlCheckbox = 9,
    xlSmartTagControlTextbox = 10,
    xlSmartTagControlListbox = 11,
    xlSmartTagControlCombo = 12,
    xlSmartTagControlActiveX = 13,
    xlSmartTagControlRadioGroup = 14
};

enum XlListConflict
{
    xlListConflictDialog = 0,
    xlListConflictRetryAllConflicts = 1,
    xlListConflictDiscardAllConflicts = 2,
    xlListConflictError = 3
};

enum XlXmlExportResult
{
    xlXmlExportSuccess = 0,
    xlXmlExportValidationFailed = 1
};

enum XlXmlImportResult
{
    xlXmlImportSuccess = 0,
    xlXmlImportElementsTruncated = 1,
    xlXmlImportValidationFailed = 2
};

struct __declspec(uuid("0002440f-0001-0000-c000-000000000046"))
IChartEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Resize ( );
    HRESULT MouseDown (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseUp (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseMove (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT BeforeRightClick (
        VARIANT_BOOL * Cancel );
    HRESULT DragPlot ( );
    HRESULT DragOver ( );
    HRESULT BeforeDoubleClick (
        long ElementID,
        long Arg1,
        long Arg2,
        VARIANT_BOOL * Cancel );
    HRESULT Select (
        long ElementID,
        long Arg1,
        long Arg2 );
    HRESULT SeriesChange (
        long SeriesIndex,
        long PointIndex );
    HRESULT Calculate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
      virtual HRESULT __stdcall raw_Resize ( ) = 0;
      virtual HRESULT __stdcall raw_MouseDown (
        /*[in]*/ long Button,
        /*[in]*/ long Shift,
        /*[in]*/ long x,
        /*[in]*/ long y ) = 0;
      virtual HRESULT __stdcall raw_MouseUp (
        /*[in]*/ long Button,
        /*[in]*/ long Shift,
        /*[in]*/ long x,
        /*[in]*/ long y ) = 0;
      virtual HRESULT __stdcall raw_MouseMove (
        /*[in]*/ long Button,
        /*[in]*/ long Shift,
        /*[in]*/ long x,
        /*[in]*/ long y ) = 0;
      virtual HRESULT __stdcall raw_BeforeRightClick (
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_DragPlot ( ) = 0;
      virtual HRESULT __stdcall raw_DragOver ( ) = 0;
      virtual HRESULT __stdcall raw_BeforeDoubleClick (
        /*[in]*/ long ElementID,
        /*[in]*/ long Arg1,
        /*[in]*/ long Arg2,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ long ElementID,
        /*[in]*/ long Arg1,
        /*[in]*/ long Arg2 ) = 0;
      virtual HRESULT __stdcall raw_SeriesChange (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ long PointIndex ) = 0;
      virtual HRESULT __stdcall raw_Calculate ( ) = 0;
};

struct __declspec(uuid("00024410-0001-0000-c000-000000000046"))
IOLEObjectEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GotFocus ( );
    HRESULT LostFocus ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GotFocus ( ) = 0;
      virtual HRESULT __stdcall raw_LostFocus ( ) = 0;
};

struct __declspec(uuid("0002441b-0001-0000-c000-000000000046"))
IRefreshEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeforeRefresh (
        VARIANT_BOOL * Cancel );
    HRESULT AfterRefresh (
        VARIANT_BOOL Success );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeforeRefresh (
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_AfterRefresh (
        /*[in]*/ VARIANT_BOOL Success ) = 0;
};

struct __declspec(uuid("00024465-0001-0000-c000-000000000046"))
ISpellingOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDictLang,put=PutDictLang))
    long DictLang;
    __declspec(property(get=GetUserDict,put=PutUserDict))
    _bstr_t UserDict;
    __declspec(property(get=GetIgnoreCaps,put=PutIgnoreCaps))
    VARIANT_BOOL IgnoreCaps;
    __declspec(property(get=GetSuggestMainOnly,put=PutSuggestMainOnly))
    VARIANT_BOOL SuggestMainOnly;
    __declspec(property(get=GetIgnoreMixedDigits,put=PutIgnoreMixedDigits))
    VARIANT_BOOL IgnoreMixedDigits;
    __declspec(property(get=GetIgnoreFileNames,put=PutIgnoreFileNames))
    VARIANT_BOOL IgnoreFileNames;
    __declspec(property(get=GetGermanPostReform,put=PutGermanPostReform))
    VARIANT_BOOL GermanPostReform;
    __declspec(property(get=GetKoreanCombineAux,put=PutKoreanCombineAux))
    VARIANT_BOOL KoreanCombineAux;
    __declspec(property(get=GetKoreanUseAutoChangeList,put=PutKoreanUseAutoChangeList))
    VARIANT_BOOL KoreanUseAutoChangeList;
    __declspec(property(get=GetKoreanProcessCompound,put=PutKoreanProcessCompound))
    VARIANT_BOOL KoreanProcessCompound;
    __declspec(property(get=GetHebrewModes,put=PutHebrewModes))
    enum XlHebrewModes HebrewModes;
    __declspec(property(get=GetArabicModes,put=PutArabicModes))
    enum XlArabicModes ArabicModes;

    //
    // Wrapper methods for error-handling
    //

    long GetDictLang ( );
    void PutDictLang (
        long RHS );
    _bstr_t GetUserDict ( );
    void PutUserDict (
        _bstr_t RHS );
    VARIANT_BOOL GetIgnoreCaps ( );
    void PutIgnoreCaps (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSuggestMainOnly ( );
    void PutSuggestMainOnly (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIgnoreMixedDigits ( );
    void PutIgnoreMixedDigits (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIgnoreFileNames ( );
    void PutIgnoreFileNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetGermanPostReform ( );
    void PutGermanPostReform (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetKoreanCombineAux ( );
    void PutKoreanCombineAux (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetKoreanUseAutoChangeList ( );
    void PutKoreanUseAutoChangeList (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetKoreanProcessCompound ( );
    void PutKoreanProcessCompound (
        VARIANT_BOOL RHS );
    enum XlHebrewModes GetHebrewModes ( );
    void PutHebrewModes (
        enum XlHebrewModes RHS );
    enum XlArabicModes GetArabicModes ( );
    void PutArabicModes (
        enum XlArabicModes RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DictLang (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DictLang (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_UserDict (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_UserDict (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_IgnoreCaps (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IgnoreCaps (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SuggestMainOnly (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SuggestMainOnly (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IgnoreMixedDigits (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IgnoreMixedDigits (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IgnoreFileNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IgnoreFileNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_GermanPostReform (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_GermanPostReform (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_KoreanCombineAux (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_KoreanCombineAux (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_KoreanUseAutoChangeList (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_KoreanUseAutoChangeList (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_KoreanProcessCompound (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_KoreanProcessCompound (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HebrewModes (
        /*[out,retval]*/ enum XlHebrewModes * RHS ) = 0;
      virtual HRESULT __stdcall put_HebrewModes (
        /*[in]*/ enum XlHebrewModes RHS ) = 0;
      virtual HRESULT __stdcall get_ArabicModes (
        /*[out,retval]*/ enum XlArabicModes * RHS ) = 0;
      virtual HRESULT __stdcall put_ArabicModes (
        /*[in]*/ enum XlArabicModes RHS ) = 0;
};

struct __declspec(uuid("00024466-0001-0000-c000-000000000046"))
ISpeech : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    enum XlSpeakDirection Direction;
    __declspec(property(get=GetSpeakCellOnEnter,put=PutSpeakCellOnEnter))
    VARIANT_BOOL SpeakCellOnEnter;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Speak (
        _bstr_t Text,
        const _variant_t & SpeakAsync = vtMissing,
        const _variant_t & SpeakXML = vtMissing,
        const _variant_t & Purge = vtMissing );
    enum XlSpeakDirection GetDirection ( );
    void PutDirection (
        enum XlSpeakDirection RHS );
    VARIANT_BOOL GetSpeakCellOnEnter ( );
    void PutSpeakCellOnEnter (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Speak (
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT SpeakAsync = vtMissing,
        /*[in]*/ VARIANT SpeakXML = vtMissing,
        /*[in]*/ VARIANT Purge = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum XlSpeakDirection * RHS ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum XlSpeakDirection RHS ) = 0;
      virtual HRESULT __stdcall get_SpeakCellOnEnter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SpeakCellOnEnter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002446d-0001-0000-c000-000000000046"))
IUserAccess : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowEdit,put=PutAllowEdit))
    VARIANT_BOOL AllowEdit;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    VARIANT_BOOL GetAllowEdit ( );
    void PutAllowEdit (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowEdit (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AllowEdit (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("0002446e-0001-0000-c000-000000000046"))
IRTD : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetThrottleInterval,put=PutThrottleInterval))
    long ThrottleInterval;

    //
    // Wrapper methods for error-handling
    //

    long GetThrottleInterval ( );
    void PutThrottleInterval (
        long RHS );
    HRESULT RefreshData ( );
    HRESULT RestartServers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ThrottleInterval (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ThrottleInterval (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_RefreshData ( ) = 0;
      virtual HRESULT __stdcall raw_RestartServers ( ) = 0;
};

struct __declspec(uuid("0002084d-0000-0000-c000-000000000046"))
Font : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBold,put=PutBold))
    _variant_t Bold;
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetItalic,put=PutItalic))
    _variant_t Italic;
    __declspec(property(get=GetShadow,put=PutShadow))
    _variant_t Shadow;
    __declspec(property(get=GetSize,put=PutSize))
    _variant_t Size;
    __declspec(property(get=GetStrikethrough,put=PutStrikethrough))
    _variant_t Strikethrough;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    _variant_t Underline;
    __declspec(property(get=GetName,put=PutName))
    _variant_t Name;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _variant_t FontStyle;
    __declspec(property(get=GetSuperscript,put=PutSuperscript))
    _variant_t Superscript;
    __declspec(property(get=GetSubscript,put=PutSubscript))
    _variant_t Subscript;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackground,put=PutBackground))
    _variant_t Background;
    __declspec(property(get=GetOutlineFont,put=PutOutlineFont))
    _variant_t OutlineFont;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetBackground ( );
    void PutBackground (
        const _variant_t & _arg1 );
    _variant_t GetBold ( );
    void PutBold (
        const _variant_t & _arg1 );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    _variant_t GetFontStyle ( );
    void PutFontStyle (
        const _variant_t & _arg1 );
    _variant_t GetItalic ( );
    void PutItalic (
        const _variant_t & _arg1 );
    _variant_t GetName ( );
    void PutName (
        const _variant_t & _arg1 );
    _variant_t GetOutlineFont ( );
    void PutOutlineFont (
        const _variant_t & _arg1 );
    _variant_t GetShadow ( );
    void PutShadow (
        const _variant_t & _arg1 );
    _variant_t GetSize ( );
    void PutSize (
        const _variant_t & _arg1 );
    _variant_t GetStrikethrough ( );
    void PutStrikethrough (
        const _variant_t & _arg1 );
    _variant_t GetSubscript ( );
    void PutSubscript (
        const _variant_t & _arg1 );
    _variant_t GetSuperscript ( );
    void PutSuperscript (
        const _variant_t & _arg1 );
    _variant_t GetUnderline ( );
    void PutUnderline (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020893-0000-0000-c000-000000000046"))
Window : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSheets))
    SheetsPtr SelectedSheets;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetSplitColumn,put=PutSplitColumn))
    long SplitColumn;
    __declspec(property(get=GetSplitHorizontal,put=PutSplitHorizontal))
    double SplitHorizontal;
    __declspec(property(get=GetSplitRow,put=PutSplitRow))
    long SplitRow;
    __declspec(property(get=GetSplitVertical,put=PutSplitVertical))
    double SplitVertical;
    __declspec(property(get=GetSplit,put=PutSplit))
    VARIANT_BOOL Split;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum XlWindowState WindowState;
    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetTabRatio,put=PutTabRatio))
    double TabRatio;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetDisplayHorizontalScrollBar,put=PutDisplayHorizontalScrollBar))
    VARIANT_BOOL DisplayHorizontalScrollBar;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetDisplayWorkbookTabs,put=PutDisplayWorkbookTabs))
    VARIANT_BOOL DisplayWorkbookTabs;
    __declspec(property(get=GetType))
    enum XlWindowType Type;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRangeSelection))
    RangePtr RangeSelection;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetEnableResize,put=PutEnableResize))
    VARIANT_BOOL EnableResize;
    __declspec(property(get=GetView,put=PutView))
    enum XlWindowView View;
    __declspec(property(get=GetOnWindow,put=PutOnWindow))
    _bstr_t OnWindow;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;
    __declspec(property(get=GetWindowNumber))
    long WindowNumber;
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetCaption,put=PutCaption))
    _variant_t Caption;
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetUsableHeight))
    double UsableHeight;
    __declspec(property(get=GetUsableWidth))
    double UsableWidth;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActivePane))
    PanePtr ActivePane;
    __declspec(property(get=GetDisplayFormulas,put=PutDisplayFormulas))
    VARIANT_BOOL DisplayFormulas;
    __declspec(property(get=GetDisplayGridlines,put=PutDisplayGridlines))
    VARIANT_BOOL DisplayGridlines;
    __declspec(property(get=GetDisplayHeadings,put=PutDisplayHeadings))
    VARIANT_BOOL DisplayHeadings;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    VARIANT_BOOL _DisplayRightToLeft;
    __declspec(property(get=GetDisplayZeros,put=PutDisplayZeros))
    VARIANT_BOOL DisplayZeros;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetFreezePanes,put=PutFreezePanes))
    VARIANT_BOOL FreezePanes;
    __declspec(property(get=GetGridlineColor,put=PutGridlineColor))
    long GridlineColor;
    __declspec(property(get=GetGridlineColorIndex,put=PutGridlineColorIndex))
    enum XlColorIndex GridlineColorIndex;
    __declspec(property(get=GetPanes))
    PanesPtr Panes;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t ActivateNext ( );
    _variant_t ActivatePrevious ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    PanePtr GetActivePane ( );
    IDispatchPtr GetActiveSheet ( );
    _variant_t GetCaption ( );
    void PutCaption (
        const _variant_t & _arg1 );
    VARIANT_BOOL Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing );
    VARIANT_BOOL GetDisplayFormulas ( );
    void PutDisplayFormulas (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayGridlines ( );
    void PutDisplayGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayHeadings ( );
    void PutDisplayHeadings (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayHorizontalScrollBar ( );
    void PutDisplayHorizontalScrollBar (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL Get_DisplayRightToLeft ( );
    void Put_DisplayRightToLeft (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayWorkbookTabs ( );
    void PutDisplayWorkbookTabs (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayZeros ( );
    void PutDisplayZeros (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableResize ( );
    void PutEnableResize (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFreezePanes ( );
    void PutFreezePanes (
        VARIANT_BOOL _arg1 );
    long GetGridlineColor ( );
    void PutGridlineColor (
        long _arg1 );
    enum XlColorIndex GetGridlineColorIndex ( );
    void PutGridlineColorIndex (
        enum XlColorIndex _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    WindowPtr NewWindow ( );
    _bstr_t GetOnWindow ( );
    void PutOnWindow (
        _bstr_t _arg1 );
    PanesPtr GetPanes ( );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    RangePtr GetRangeSelection ( );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long _arg1 );
    long GetScrollRow ( );
    void PutScrollRow (
        long _arg1 );
    _variant_t ScrollWorkbookTabs (
        const _variant_t & Sheets = vtMissing,
        const _variant_t & Position = vtMissing );
    SheetsPtr GetSelectedSheets ( );
    IDispatchPtr GetSelection ( );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    VARIANT_BOOL GetSplit ( );
    void PutSplit (
        VARIANT_BOOL _arg1 );
    long GetSplitColumn ( );
    void PutSplitColumn (
        long _arg1 );
    double GetSplitHorizontal ( );
    void PutSplitHorizontal (
        double _arg1 );
    long GetSplitRow ( );
    void PutSplitRow (
        long _arg1 );
    double GetSplitVertical ( );
    void PutSplitVertical (
        double _arg1 );
    double GetTabRatio ( );
    void PutTabRatio (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    enum XlWindowType GetType ( );
    double GetUsableHeight ( );
    double GetUsableWidth ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    RangePtr GetVisibleRange ( );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetWindowNumber ( );
    enum XlWindowState GetWindowState ( );
    void PutWindowState (
        enum XlWindowState _arg1 );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & _arg1 );
    enum XlWindowView GetView ( );
    void PutView (
        enum XlWindowView _arg1 );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    void PutDisplayRightToLeft (
        VARIANT_BOOL _arg1 );
    long PointsToScreenPixelsX (
        long Points );
    long PointsToScreenPixelsY (
        long Points );
    IDispatchPtr RangeFromPoint (
        long x,
        long y );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );
};

struct __declspec(uuid("00020892-0000-0000-c000-000000000046"))
Windows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WindowPtr _Default[];
    __declspec(property(get=GetSyncScrollingSideBySide,put=PutSyncScrollingSideBySide))
    VARIANT_BOOL SyncScrollingSideBySide;
    __declspec(property(get=GetItem))
    WindowPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Arrange (
        enum XlArrangeStyle ArrangeStyle,
        const _variant_t & ActiveWorkbook = vtMissing,
        const _variant_t & SyncHorizontal = vtMissing,
        const _variant_t & SyncVertical = vtMissing );
    long GetCount ( );
    WindowPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    WindowPtr Get_Default (
        const _variant_t & Index );
    VARIANT_BOOL CompareSideBySideWith (
        const _variant_t & WindowName );
    VARIANT_BOOL BreakSideBySide ( );
    VARIANT_BOOL GetSyncScrollingSideBySide ( );
    void PutSyncScrollingSideBySide (
        VARIANT_BOOL _arg1 );
    HRESULT ResetPositionsSideBySide ( );
};

struct __declspec(uuid("00024413-0000-0000-c000-000000000046"))
AppEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT NewWorkbook (
        struct _Workbook * Wb );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT WorkbookOpen (
        struct _Workbook * Wb );
    HRESULT WorkbookActivate (
        struct _Workbook * Wb );
    HRESULT WorkbookDeactivate (
        struct _Workbook * Wb );
    HRESULT WorkbookBeforeClose (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforeSave (
        struct _Workbook * Wb,
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforePrint (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookNewSheet (
        struct _Workbook * Wb,
        IDispatch * Sh );
    HRESULT WorkbookAddinInstall (
        struct _Workbook * Wb );
    HRESULT WorkbookAddinUninstall (
        struct _Workbook * Wb );
    HRESULT WindowResize (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowActivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
    HRESULT SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target );
    HRESULT WorkbookPivotTableCloseConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target );
    HRESULT WorkbookPivotTableOpenConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target );
    HRESULT WorkbookSync (
        struct _Workbook * Wb,
        enum Office::MsoSyncEventType SyncEventType );
    HRESULT WorkbookBeforeXmlImport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL IsRefresh,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookAfterXmlImport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        VARIANT_BOOL IsRefresh,
        enum XlXmlImportResult Result );
    HRESULT WorkbookBeforeXmlExport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookAfterXmlExport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        _bstr_t Url,
        enum XlXmlExportResult Result );
};

struct __declspec(uuid("00020845-0000-0000-c000-000000000046"))
WorksheetFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _WSFunction (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Count (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL IsNA (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsError (
        const _variant_t & Arg1 );
    double Sum (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Average (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Min (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Max (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Npv (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double StDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _bstr_t Dollar (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Fixed (
        double Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing );
    double Pi ( );
    double Ln (
        double Arg1 );
    double Log10 (
        double Arg1 );
    double Round (
        double Arg1,
        double Arg2 );
    _variant_t Lookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Index (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _bstr_t Rept (
        _bstr_t Arg1,
        double Arg2 );
    VARIANT_BOOL And (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL Or (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DCount (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DSum (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DAverage (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMin (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMax (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DStDev (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Var (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DVar (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t Text (
        const _variant_t & Arg1,
        _bstr_t Arg2 );
    _variant_t LinEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Trend (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t LogEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Growth (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    double Pv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Fv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double NPer (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Pmt (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Rate (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double MIrr (
        const _variant_t & Arg1,
        double Arg2,
        double Arg3 );
    double Irr (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Match (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Weekday (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Search (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Transpose (
        const _variant_t & Arg1 );
    double Atan2 (
        double Arg1,
        double Arg2 );
    double Asin (
        double Arg1 );
    double Acos (
        double Arg1 );
    _variant_t Choose (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t HLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    _variant_t VLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Log (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Proper (
        _bstr_t Arg1 );
    _bstr_t Trim (
        _bstr_t Arg1 );
    _bstr_t Replace (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    _bstr_t Substitute (
        _bstr_t Arg1,
        _bstr_t Arg2,
        _bstr_t Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Find (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    VARIANT_BOOL IsErr (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsText (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsNumber (
        const _variant_t & Arg1 );
    double Sln (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Syd (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double Ddb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _bstr_t Clean (
        _bstr_t Arg1 );
    double MDeterm (
        const _variant_t & Arg1 );
    _variant_t MInverse (
        const _variant_t & Arg1 );
    _variant_t MMult (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Ipmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double Ppmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double CountA (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Product (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Fact (
        double Arg1 );
    double DProduct (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsNonText (
        const _variant_t & Arg1 );
    double StDevP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double VarP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DStDevP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DVarP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsLogical (
        const _variant_t & Arg1 );
    double DCountA (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t USDollar (
        double Arg1,
        double Arg2 );
    double FindB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    double SearchB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _bstr_t ReplaceB (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    double RoundUp (
        double Arg1,
        double Arg2 );
    double RoundDown (
        double Arg1,
        double Arg2 );
    double Rank (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Days360 (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Vdb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        double Arg5,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing );
    double Median (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumProduct (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Sinh (
        double Arg1 );
    double Cosh (
        double Arg1 );
    double Tanh (
        double Arg1 );
    double Asinh (
        double Arg1 );
    double Acosh (
        double Arg1 );
    double Atanh (
        double Arg1 );
    _variant_t DGet (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Db (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _variant_t Frequency (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double AveDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double BetaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double GammaLn (
        double Arg1 );
    double BetaInv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double BinomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double ChiDist (
        double Arg1,
        double Arg2 );
    double ChiInv (
        double Arg1,
        double Arg2 );
    double Combin (
        double Arg1,
        double Arg2 );
    double Confidence (
        double Arg1,
        double Arg2,
        double Arg3 );
    double CritBinom (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Even (
        double Arg1 );
    double ExponDist (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double FDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double FInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Fisher (
        double Arg1 );
    double FisherInv (
        double Arg1 );
    double Floor (
        double Arg1,
        double Arg2 );
    double GammaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double GammaInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Ceiling (
        double Arg1,
        double Arg2 );
    double HypGeomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double LogNormDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double LogInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NegBinomDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double NormSDist (
        double Arg1 );
    double NormInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormSInv (
        double Arg1 );
    double Standardize (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Odd (
        double Arg1 );
    double Permut (
        double Arg1,
        double Arg2 );
    double Poisson (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double TDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Weibull (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double SumXMY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2MY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2PY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double ChiTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Correl (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Covar (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Forecast (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double FTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Intercept (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Pearson (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double RSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double StEyx (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Slope (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double TTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        double Arg4 );
    double Prob (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing );
    double DevSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double GeoMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double HarMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Kurt (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Skew (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double ZTest (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Large (
        const _variant_t & Arg1,
        double Arg2 );
    double Small (
        const _variant_t & Arg1,
        double Arg2 );
    double Quartile (
        const _variant_t & Arg1,
        double Arg2 );
    double Percentile (
        const _variant_t & Arg1,
        double Arg2 );
    double PercentRank (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Mode (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double TrimMean (
        const _variant_t & Arg1,
        double Arg2 );
    double TInv (
        double Arg1,
        double Arg2 );
    double Power (
        double Arg1,
        double Arg2 );
    double Radians (
        double Arg1 );
    double Degrees (
        double Arg1 );
    double Subtotal (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumIf (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double CountIf (
        struct Range * Arg1,
        const _variant_t & Arg2 );
    double CountBlank (
        struct Range * Arg1 );
    double Ispmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    _bstr_t Roman (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Asc (
        _bstr_t Arg1 );
    _bstr_t Dbcs (
        _bstr_t Arg1 );
    _bstr_t Phonetic (
        struct Range * Arg1 );
    _bstr_t BahtText (
        double Arg1 );
    _bstr_t ThaiDayOfWeek (
        double Arg1 );
    _bstr_t ThaiDigit (
        _bstr_t Arg1 );
    _bstr_t ThaiMonthOfYear (
        double Arg1 );
    _bstr_t ThaiNumSound (
        double Arg1 );
    _bstr_t ThaiNumString (
        double Arg1 );
    double ThaiStringLength (
        _bstr_t Arg1 );
    VARIANT_BOOL IsThaiDigit (
        _bstr_t Arg1 );
    double RoundBahtDown (
        double Arg1 );
    double RoundBahtUp (
        double Arg1 );
    double ThaiYear (
        double Arg1 );
    _variant_t RTD (
        const _variant_t & progID,
        const _variant_t & server,
        const _variant_t & topic1,
        const _variant_t & topic2 = vtMissing,
        const _variant_t & topic3 = vtMissing,
        const _variant_t & topic4 = vtMissing,
        const _variant_t & topic5 = vtMissing,
        const _variant_t & topic6 = vtMissing,
        const _variant_t & topic7 = vtMissing,
        const _variant_t & topic8 = vtMissing,
        const _variant_t & topic9 = vtMissing,
        const _variant_t & topic10 = vtMissing,
        const _variant_t & topic11 = vtMissing,
        const _variant_t & topic12 = vtMissing,
        const _variant_t & topic13 = vtMissing,
        const _variant_t & topic14 = vtMissing,
        const _variant_t & topic15 = vtMissing,
        const _variant_t & topic16 = vtMissing,
        const _variant_t & topic17 = vtMissing,
        const _variant_t & topic18 = vtMissing,
        const _variant_t & topic19 = vtMissing,
        const _variant_t & topic20 = vtMissing,
        const _variant_t & topic21 = vtMissing,
        const _variant_t & topic22 = vtMissing,
        const _variant_t & topic23 = vtMissing,
        const _variant_t & topic24 = vtMissing,
        const _variant_t & topic25 = vtMissing,
        const _variant_t & topic26 = vtMissing,
        const _variant_t & topic27 = vtMissing,
        const _variant_t & topic28 = vtMissing );
};

struct __declspec(uuid("00020846-0000-0000-c000-000000000046"))
Range : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _variant_t _Default[][];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetListHeaderRows))
    long ListHeaderRows;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value[];
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetItem,put=PutItem))
    _variant_t Item[][];
    __declspec(property(get=GetComment))
    CommentPtr Comment;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetSoundNote))
    SoundNotePtr SoundNote;
    __declspec(property(get=GetPhonetics))
    PhoneticsPtr Phonetics;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetListObject))
    ListObjectPtr ListObject;
    __declspec(property(get=GetXPath))
    XPathPtr XPath;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat;
    __declspec(property(get=GetFormulaLabel,put=PutFormulaLabel))
    enum XlFormulaLabel FormulaLabel;
    __declspec(property(get=GetRange))
    RangePtr _Range[][];
    __declspec(property(get=GetWorksheet))
    _WorksheetPtr Worksheet;
    __declspec(property(get=GetMergeArea))
    RangePtr MergeArea;
    __declspec(property(get=GetQueryTable))
    _QueryTablePtr QueryTable;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetEnd))
    RangePtr End[];
    __declspec(property(get=GetCurrentArray))
    RangePtr CurrentArray;
    __declspec(property(get=GetNext))
    RangePtr Next;
    __declspec(property(get=GetPrevious))
    RangePtr Previous;
    __declspec(property(get=GetPrefixCharacter))
    _variant_t PrefixCharacter;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetValidation))
    ValidationPtr Validation;
    __declspec(property(get=GetValue2,put=PutValue2))
    _variant_t Value2;
    __declspec(property(get=GetPhonetic))
    PhoneticPtr Phonetic;
    __declspec(property(get=GetFormatConditions))
    FormatConditionsPtr FormatConditions;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddress))
    _bstr_t Address[][][][][];
    __declspec(property(get=GetPivotCell))
    PivotCellPtr PivotCell;
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetErrors))
    ErrorsPtr Errors;
    __declspec(property(get=GetColumn))
    long Column;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetColumnWidth,put=PutColumnWidth))
    _variant_t ColumnWidth;
    __declspec(property(get=GetCurrentRegion))
    RangePtr CurrentRegion;
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetAllowEdit))
    VARIANT_BOOL AllowEdit;
    __declspec(property(get=GetEntireColumn))
    RangePtr EntireColumn;
    __declspec(property(get=GetEntireRow))
    RangePtr EntireRow;
    __declspec(property(get=GetLocationInTable))
    enum XlLocationInTable LocationInTable;
    __declspec(property(get=GetDependents))
    RangePtr Dependents;
    __declspec(property(get=GetPrecedents))
    RangePtr Precedents;
    __declspec(property(get=GetDirectDependents))
    RangePtr DirectDependents;
    __declspec(property(get=GetDirectPrecedents))
    RangePtr DirectPrecedents;
    __declspec(property(get=GetOffset))
    RangePtr Offset[][];
    __declspec(property(get=GetPageBreak,put=PutPageBreak))
    long PageBreak;
    __declspec(property(get=GetResize))
    RangePtr Resize[][];
    __declspec(property(get=GetRow))
    long Row;
    __declspec(property(get=GetName,put=PutName))
    _variant_t Name;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetStyle,put=PutStyle))
    _variant_t Style;
    __declspec(property(get=GetFormula,put=PutFormula))
    _variant_t Formula;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _variant_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _variant_t FormulaR1C1;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _variant_t FormulaR1C1Local;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetHasArray))
    _variant_t HasArray;
    __declspec(property(get=GetHasFormula))
    _variant_t HasFormula;
    __declspec(property(get=GetHidden,put=PutHidden))
    _variant_t Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetHeight))
    _variant_t Height;
    __declspec(property(get=GetAreas))
    AreasPtr Areas;
    __declspec(property(get=GetOutlineLevel,put=PutOutlineLevel))
    _variant_t OutlineLevel;
    __declspec(property(get=GetTop))
    _variant_t Top;
    __declspec(property(get=GetLeft))
    _variant_t Left;
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    _variant_t RowHeight;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetSummary))
    _variant_t Summary;
    __declspec(property(get=GetUseStandardHeight,put=PutUseStandardHeight))
    _variant_t UseStandardHeight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetUseStandardWidth,put=PutUseStandardWidth))
    _variant_t UseStandardWidth;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText))
    _variant_t Text;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    _variant_t ShowDetail;
    __declspec(property(get=GetFormulaArray,put=PutFormulaArray))
    _variant_t FormulaArray;
    __declspec(property(get=GetAddressLocal))
    _bstr_t AddressLocal[][][][][];
    __declspec(property(get=GetWidth))
    _variant_t Width;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;
    __declspec(property(get=GetFont))
    FontPtr Font;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & _arg1 );
    _bstr_t GetAddress (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing );
    _bstr_t GetAddressLocal (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing );
    _variant_t AdvancedFilter (
        enum XlFilterAction Action,
        const _variant_t & CriteriaRange = vtMissing,
        const _variant_t & CopyToRange = vtMissing,
        const _variant_t & Unique = vtMissing );
    _variant_t ApplyNames (
        const _variant_t & Names,
        const _variant_t & IgnoreRelativeAbsolute,
        const _variant_t & UseRowColumnNames,
        const _variant_t & OmitColumn,
        const _variant_t & OmitRow,
        enum XlApplyNamesOrder Order,
        const _variant_t & AppendLast = vtMissing );
    _variant_t ApplyOutlineStyles ( );
    AreasPtr GetAreas ( );
    _bstr_t AutoComplete (
        _bstr_t String );
    _variant_t AutoFill (
        struct Range * Destination,
        enum XlAutoFillType Type );
    _variant_t AutoFilter (
        const _variant_t & Field,
        const _variant_t & Criteria1,
        enum XlAutoFilterOperator Operator,
        const _variant_t & Criteria2 = vtMissing,
        const _variant_t & VisibleDropDown = vtMissing );
    _variant_t AutoFit ( );
    _variant_t AutoFormat (
        enum XlRangeAutoFormat Format,
        const _variant_t & Number = vtMissing,
        const _variant_t & Font = vtMissing,
        const _variant_t & Alignment = vtMissing,
        const _variant_t & Border = vtMissing,
        const _variant_t & Pattern = vtMissing,
        const _variant_t & Width = vtMissing );
    _variant_t AutoOutline ( );
    _variant_t BorderAround (
        const _variant_t & LineStyle,
        enum XlBorderWeight Weight,
        enum XlColorIndex ColorIndex,
        const _variant_t & Color = vtMissing );
    BordersPtr GetBorders ( );
    _variant_t Calculate ( );
    RangePtr GetCells ( );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t ClearFormats ( );
    _variant_t ClearNotes ( );
    _variant_t ClearOutline ( );
    long GetColumn ( );
    RangePtr ColumnDifferences (
        const _variant_t & Comparison );
    RangePtr GetColumns ( );
    _variant_t GetColumnWidth ( );
    void PutColumnWidth (
        const _variant_t & _arg1 );
    _variant_t Consolidate (
        const _variant_t & Sources = vtMissing,
        const _variant_t & Function = vtMissing,
        const _variant_t & TopRow = vtMissing,
        const _variant_t & LeftColumn = vtMissing,
        const _variant_t & CreateLinks = vtMissing );
    _variant_t Copy (
        const _variant_t & Destination = vtMissing );
    long CopyFromRecordset (
        IUnknown * Data,
        const _variant_t & MaxRows = vtMissing,
        const _variant_t & MaxColumns = vtMissing );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    long GetCount ( );
    _variant_t CreateNames (
        const _variant_t & Top = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Bottom = vtMissing,
        const _variant_t & Right = vtMissing );
    _variant_t CreatePublisher (
        const _variant_t & Edition,
        enum XlPictureAppearance Appearance,
        const _variant_t & ContainsPICT = vtMissing,
        const _variant_t & ContainsBIFF = vtMissing,
        const _variant_t & ContainsRTF = vtMissing,
        const _variant_t & ContainsVALU = vtMissing );
    RangePtr GetCurrentArray ( );
    RangePtr GetCurrentRegion ( );
    _variant_t Cut (
        const _variant_t & Destination = vtMissing );
    _variant_t DataSeries (
        const _variant_t & Rowcol,
        enum XlDataSeriesType Type,
        enum XlDataSeriesDate Date,
        const _variant_t & Step = vtMissing,
        const _variant_t & Stop = vtMissing,
        const _variant_t & Trend = vtMissing );
    _variant_t Get_Default (
        const _variant_t & RowIndex = vtMissing,
        const _variant_t & ColumnIndex = vtMissing );
    void Put_Default (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing,
        const _variant_t & _arg3 = vtMissing );
    _variant_t Delete (
        const _variant_t & Shift = vtMissing );
    RangePtr GetDependents ( );
    _variant_t ExcelDialogBox ( );
    RangePtr GetDirectDependents ( );
    RangePtr GetDirectPrecedents ( );
    _variant_t EditionOptions (
        enum XlEditionType Type,
        enum XlEditionOptionsOption Option,
        const _variant_t & Name,
        const _variant_t & Reference,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance ChartSize,
        const _variant_t & Format = vtMissing );
    RangePtr GetEnd (
        enum XlDirection Direction );
    RangePtr GetEntireColumn ( );
    RangePtr GetEntireRow ( );
    _variant_t FillDown ( );
    _variant_t FillLeft ( );
    _variant_t FillRight ( );
    _variant_t FillUp ( );
    RangePtr Find (
        const _variant_t & What,
        const _variant_t & After,
        const _variant_t & LookIn,
        const _variant_t & LookAt,
        const _variant_t & SearchOrder,
        enum XlSearchDirection SearchDirection,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing,
        const _variant_t & SearchFormat = vtMissing );
    RangePtr FindNext (
        const _variant_t & After = vtMissing );
    RangePtr FindPrevious (
        const _variant_t & After = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetFormula ( );
    void PutFormula (
        const _variant_t & _arg1 );
    _variant_t GetFormulaArray ( );
    void PutFormulaArray (
        const _variant_t & _arg1 );
    enum XlFormulaLabel GetFormulaLabel ( );
    void PutFormulaLabel (
        enum XlFormulaLabel _arg1 );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & _arg1 );
    _variant_t GetFormulaLocal ( );
    void PutFormulaLocal (
        const _variant_t & _arg1 );
    _variant_t GetFormulaR1C1 ( );
    void PutFormulaR1C1 (
        const _variant_t & _arg1 );
    _variant_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        const _variant_t & _arg1 );
    _variant_t FunctionWizard ( );
    VARIANT_BOOL GoalSeek (
        const _variant_t & Goal,
        struct Range * ChangingCell );
    _variant_t Group (
        const _variant_t & Start = vtMissing,
        const _variant_t & End = vtMissing,
        const _variant_t & By = vtMissing,
        const _variant_t & Periods = vtMissing );
    _variant_t GetHasArray ( );
    _variant_t GetHasFormula ( );
    _variant_t GetHeight ( );
    _variant_t GetHidden ( );
    void PutHidden (
        const _variant_t & _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & _arg1 );
    HRESULT InsertIndent (
        long InsertAmount );
    _variant_t Insert (
        const _variant_t & Shift = vtMissing,
        const _variant_t & CopyOrigin = vtMissing );
    InteriorPtr GetInterior ( );
    _variant_t GetItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing );
    void PutItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex,
        const _variant_t & _arg3 = vtMissing );
    _variant_t Justify ( );
    _variant_t GetLeft ( );
    long GetListHeaderRows ( );
    _variant_t ListNames ( );
    enum XlLocationInTable GetLocationInTable ( );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & _arg1 );
    HRESULT Merge (
        const _variant_t & Across = vtMissing );
    HRESULT UnMerge ( );
    RangePtr GetMergeArea ( );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & _arg1 );
    _variant_t GetName ( );
    void PutName (
        const _variant_t & _arg1 );
    _variant_t NavigateArrow (
        const _variant_t & TowardPrecedent = vtMissing,
        const _variant_t & ArrowNumber = vtMissing,
        const _variant_t & LinkNumber = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    RangePtr GetNext ( );
    _bstr_t NoteText (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t GetNumberFormat ( );
    void PutNumberFormat (
        const _variant_t & _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    RangePtr GetOffset (
        const _variant_t & RowOffset = vtMissing,
        const _variant_t & ColumnOffset = vtMissing );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _variant_t GetOutlineLevel ( );
    void PutOutlineLevel (
        const _variant_t & _arg1 );
    long GetPageBreak ( );
    void PutPageBreak (
        long _arg1 );
    _variant_t Parse (
        const _variant_t & ParseLine = vtMissing,
        const _variant_t & Destination = vtMissing );
    _variant_t _PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotTablePtr GetPivotTable ( );
    RangePtr GetPrecedents ( );
    _variant_t GetPrefixCharacter ( );
    RangePtr GetPrevious ( );
    _variant_t _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    _QueryTablePtr GetQueryTable ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    _variant_t RemoveSubtotal ( );
    VARIANT_BOOL Replace (
        const _variant_t & What,
        const _variant_t & Replacement,
        const _variant_t & LookAt = vtMissing,
        const _variant_t & SearchOrder = vtMissing,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing,
        const _variant_t & SearchFormat = vtMissing,
        const _variant_t & ReplaceFormat = vtMissing );
    RangePtr GetResize (
        const _variant_t & RowSize = vtMissing,
        const _variant_t & ColumnSize = vtMissing );
    long GetRow ( );
    RangePtr RowDifferences (
        const _variant_t & Comparison );
    _variant_t GetRowHeight ( );
    void PutRowHeight (
        const _variant_t & _arg1 );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t Select ( );
    _variant_t Show ( );
    _variant_t ShowDependents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShowDetail ( );
    void PutShowDetail (
        const _variant_t & _arg1 );
    _variant_t ShowErrors ( );
    _variant_t ShowPrecedents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & _arg1 );
    _variant_t Sort (
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Key2,
        const _variant_t & Type,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortMethod SortMethod,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3 );
    _variant_t SortSpecial (
        enum XlSortMethod SortMethod,
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Type,
        const _variant_t & Key2,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3 );
    SoundNotePtr GetSoundNote ( );
    RangePtr SpecialCells (
        enum XlCellType Type,
        const _variant_t & Value = vtMissing );
    _variant_t GetStyle ( );
    void PutStyle (
        const _variant_t & _arg1 );
    _variant_t SubscribeTo (
        _bstr_t Edition,
        enum XlSubscribeToFormat Format );
    _variant_t Subtotal (
        long GroupBy,
        enum XlConsolidationFunction Function,
        const _variant_t & TotalList,
        const _variant_t & Replace,
        const _variant_t & PageBreaks,
        enum XlSummaryRow SummaryBelowData );
    _variant_t GetSummary ( );
    _variant_t Table (
        const _variant_t & RowInput = vtMissing,
        const _variant_t & ColumnInput = vtMissing );
    _variant_t GetText ( );
    _variant_t TextToColumns (
        const _variant_t & Destination,
        enum XlTextParsingType DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing,
        const _variant_t & TrailingMinusNumbers = vtMissing );
    _variant_t GetTop ( );
    _variant_t Ungroup ( );
    _variant_t GetUseStandardHeight ( );
    void PutUseStandardHeight (
        const _variant_t & _arg1 );
    _variant_t GetUseStandardWidth ( );
    void PutUseStandardWidth (
        const _variant_t & _arg1 );
    ValidationPtr GetValidation ( );
    _variant_t GetValue (
        const _variant_t & RangeValueDataType = vtMissing );
    void PutValue (
        const _variant_t & RangeValueDataType,
        const _variant_t & _arg2 = vtMissing );
    _variant_t GetValue2 ( );
    void PutValue2 (
        const _variant_t & _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetWidth ( );
    _WorksheetPtr GetWorksheet ( );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & _arg1 );
    CommentPtr AddComment (
        const _variant_t & Text = vtMissing );
    CommentPtr GetComment ( );
    HRESULT ClearComments ( );
    PhoneticPtr GetPhonetic ( );
    FormatConditionsPtr GetFormatConditions ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    HyperlinksPtr GetHyperlinks ( );
    PhoneticsPtr GetPhonetics ( );
    HRESULT SetPhonetic ( );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t _arg1 );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    PivotCellPtr GetPivotCell ( );
    HRESULT Dirty ( );
    ErrorsPtr GetErrors ( );
    SmartTagsPtr GetSmartTags ( );
    HRESULT Speak (
        const _variant_t & SpeakDirection = vtMissing,
        const _variant_t & SpeakFormulas = vtMissing );
    _variant_t PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    VARIANT_BOOL GetAllowEdit ( );
    ListObjectPtr GetListObject ( );
    XPathPtr GetXPath ( );
};

struct __declspec(uuid("0002440f-0000-0000-c000-000000000046"))
ChartEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Resize ( );
    HRESULT MouseDown (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseUp (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseMove (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT BeforeRightClick (
        VARIANT_BOOL * Cancel );
    HRESULT DragPlot ( );
    HRESULT DragOver ( );
    HRESULT BeforeDoubleClick (
        long ElementID,
        long Arg1,
        long Arg2,
        VARIANT_BOOL * Cancel );
    HRESULT Select (
        long ElementID,
        long Arg1,
        long Arg2 );
    HRESULT SeriesChange (
        long SeriesIndex,
        long PointIndex );
    HRESULT Calculate ( );
};

struct __declspec(uuid("00024402-0000-0000-c000-000000000046"))
VPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak _arg1 );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * _arg1 );
};

struct __declspec(uuid("00024401-0000-0000-c000-000000000046"))
HPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak _arg1 );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * _arg1 );
};

struct __declspec(uuid("00024404-0000-0000-c000-000000000046"))
HPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    HPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HPageBreakPtr GetItem (
        long Index );
    HPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HPageBreakPtr Add (
        IDispatch * Before );
};

struct __declspec(uuid("00024405-0000-0000-c000-000000000046"))
VPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    VPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    VPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    VPageBreakPtr GetItem (
        long Index );
    VPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    VPageBreakPtr Add (
        IDispatch * Before );
};

struct __declspec(uuid("00024407-0000-0000-c000-000000000046"))
RecentFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    long GetIndex ( );
    _WorkbookPtr Open ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024406-0000-0000-c000-000000000046"))
RecentFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RecentFilePtr _Default[];
    __declspec(property(get=GetItem))
    RecentFilePtr Item[];
    __declspec(property(get=GetMaximum,put=PutMaximum))
    long Maximum;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetMaximum ( );
    void PutMaximum (
        long _arg1 );
    long GetCount ( );
    RecentFilePtr GetItem (
        long Index );
    RecentFilePtr Get_Default (
        long Index );
    RecentFilePtr Add (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024411-0000-0000-c000-000000000046"))
DocEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT SelectionChange (
        struct Range * Target );
    HRESULT BeforeDoubleClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT BeforeRightClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Calculate ( );
    HRESULT Change (
        struct Range * Target );
    HRESULT FollowHyperlink (
        struct Hyperlink * Target );
    HRESULT PivotTableUpdate (
        struct PivotTable * Target );
};

struct __declspec(uuid("00020852-0000-0000-c000-000000000046"))
Style : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlOrientation Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _bstr_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    long IndentLevel;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    VARIANT_BOOL FormulaHidden;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    VARIANT_BOOL ShrinkToFit;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    VARIANT_BOOL WrapText;
    __declspec(property(get=GetNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIncludeAlignment,put=PutIncludeAlignment))
    VARIANT_BOOL IncludeAlignment;
    __declspec(property(get=GetIncludeBorder,put=PutIncludeBorder))
    VARIANT_BOOL IncludeBorder;
    __declspec(property(get=GetIncludeFont,put=PutIncludeFont))
    VARIANT_BOOL IncludeFont;
    __declspec(property(get=GetIncludeNumber,put=PutIncludeNumber))
    VARIANT_BOOL IncludeNumber;
    __declspec(property(get=GetIncludePatterns,put=PutIncludePatterns))
    VARIANT_BOOL IncludePatterns;
    __declspec(property(get=GetIncludeProtection,put=PutIncludeProtection))
    VARIANT_BOOL IncludeProtection;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBuiltIn ( );
    BordersPtr GetBorders ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetFormulaHidden ( );
    void PutFormulaHidden (
        VARIANT_BOOL _arg1 );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign _arg1 );
    VARIANT_BOOL GetIncludeAlignment ( );
    void PutIncludeAlignment (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeBorder ( );
    void PutIncludeBorder (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeFont ( );
    void PutIncludeFont (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeNumber ( );
    void PutIncludeNumber (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludePatterns ( );
    void PutIncludePatterns (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeProtection ( );
    void PutIncludeProtection (
        VARIANT_BOOL _arg1 );
    long GetIndentLevel ( );
    void PutIndentLevel (
        long _arg1 );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & _arg1 );
    _bstr_t GetName ( );
    _bstr_t GetNameLocal ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    _bstr_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        _bstr_t _arg1 );
    enum XlOrientation GetOrientation ( );
    void PutOrientation (
        enum XlOrientation _arg1 );
    VARIANT_BOOL GetShrinkToFit ( );
    void PutShrinkToFit (
        VARIANT_BOOL _arg1 );
    _bstr_t GetValue ( );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign _arg1 );
    VARIANT_BOOL GetWrapText ( );
    void PutWrapText (
        VARIANT_BOOL _arg1 );
    _bstr_t Get_Default ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
};

struct __declspec(uuid("00020853-0000-0000-c000-000000000046"))
Styles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    StylePtr _Default[];
    __declspec(property(get=GetItem))
    StylePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    StylePtr Add (
        _bstr_t Name,
        const _variant_t & BasedOn = vtMissing );
    long GetCount ( );
    StylePtr GetItem (
        const _variant_t & Index );
    _variant_t Merge (
        const _variant_t & Workbook );
    IUnknownPtr Get_NewEnum ( );
    StylePtr Get_Default (
        const _variant_t & Index );
};

struct __declspec(uuid("00020855-0000-0000-c000-000000000046"))
Borders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    BorderPtr _Default[];
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetItem))
    BorderPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    long GetCount ( );
    BorderPtr GetItem (
        enum XlBordersIndex Index );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & _arg1 );
    IUnknownPtr Get_NewEnum ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & _arg1 );
    BorderPtr Get_Default (
        enum XlBordersIndex Index );
};

struct __declspec(uuid("00020857-0000-0000-c000-000000000046"))
AddIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstalled,put=PutInstalled))
    VARIANT_BOOL Installed;
    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSubject))
    _bstr_t Subject;
    __declspec(property(get=GetCLSID))
    _bstr_t CLSID;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;
    __declspec(property(get=GetComments))
    _bstr_t Comments;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    _bstr_t GetComments ( );
    _bstr_t GetFullName ( );
    VARIANT_BOOL GetInstalled ( );
    void PutInstalled (
        VARIANT_BOOL _arg1 );
    _bstr_t GetKeywords ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    _bstr_t GetSubject ( );
    _bstr_t GetTitle ( );
    _bstr_t GetprogID ( );
    _bstr_t GetCLSID ( );
};

struct __declspec(uuid("00020858-0000-0000-c000-000000000046"))
AddIns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AddInPtr _Default[];
    __declspec(property(get=GetItem))
    AddInPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    AddInPtr Add (
        _bstr_t Filename,
        const _variant_t & ExcelCopyFile = vtMissing );
    long GetCount ( );
    AddInPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    AddInPtr Get_Default (
        const _variant_t & Index );
};

struct __declspec(uuid("0002085c-0000-0000-c000-000000000046"))
Toolbar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToolbarButtons))
    ToolbarButtonsPtr ToolbarButtons;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetProtection,put=PutProtection))
    enum XlToolbarProtection Protection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    HRESULT Delete ( );
    long GetHeight ( );
    void PutHeight (
        long _arg1 );
    long GetLeft ( );
    void PutLeft (
        long _arg1 );
    _bstr_t GetName ( );
    long GetPosition ( );
    void PutPosition (
        long _arg1 );
    enum XlToolbarProtection GetProtection ( );
    void PutProtection (
        enum XlToolbarProtection _arg1 );
    HRESULT Reset ( );
    ToolbarButtonsPtr GetToolbarButtons ( );
    long GetTop ( );
    void PutTop (
        long _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetWidth ( );
    void PutWidth (
        long _arg1 );
};

struct __declspec(uuid("0002085d-0000-0000-c000-000000000046"))
Toolbars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    ToolbarPtr Get_Default (
        const _variant_t & Index );
    ToolbarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002085e-0000-0000-c000-000000000046"))
ToolbarButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPushed,put=PutPushed))
    VARIANT_BOOL Pushed;
    __declspec(property(get=GetIsGap))
    VARIANT_BOOL IsGap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL _arg1 );
    HRESULT Copy (
        struct Toolbar * Toolbar,
        long Before );
    HRESULT CopyFace ( );
    HRESULT Delete ( );
    HRESULT Edit ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long _arg1 );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t _arg1 );
    long GetID ( );
    VARIANT_BOOL GetIsGap ( );
    HRESULT Move (
        struct Toolbar * Toolbar,
        long Before );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    HRESULT PasteFace ( );
    VARIANT_BOOL GetPushed ( );
    void PutPushed (
        VARIANT_BOOL _arg1 );
    HRESULT Reset ( );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t _arg1 );
    long GetWidth ( );
    void PutWidth (
        long _arg1 );
};

struct __declspec(uuid("0002085f-0000-0000-c000-000000000046"))
ToolbarButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarButtonPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarButtonPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarButtonPtr Add (
        const _variant_t & Button = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & Pushed = vtMissing,
        const _variant_t & Enabled = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    long GetCount ( );
    ToolbarButtonPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ToolbarButtonPtr Get_Default (
        long Index );
};

struct __declspec(uuid("00020860-0000-0000-c000-000000000046"))
Areas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RangePtr _Default[];
    __declspec(property(get=GetItem))
    RangePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    RangePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    RangePtr Get_Default (
        long Index );
};

struct __declspec(uuid("00024412-0000-0000-c000-000000000046"))
WorkbookEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Open ( );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT BeforeClose (
        VARIANT_BOOL * Cancel );
    HRESULT BeforeSave (
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT BeforePrint (
        VARIANT_BOOL * Cancel );
    HRESULT NewSheet (
        IDispatch * Sh );
    HRESULT AddinInstall ( );
    HRESULT AddinUninstall ( );
    HRESULT WindowResize (
        struct Window * Wn );
    HRESULT WindowActivate (
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct Window * Wn );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
    HRESULT SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target );
    HRESULT PivotTableCloseConnection (
        struct PivotTable * Target );
    HRESULT PivotTableOpenConnection (
        struct PivotTable * Target );
    HRESULT Sync (
        enum Office::MsoSyncEventType SyncEventType );
    HRESULT BeforeXmlImport (
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL IsRefresh,
        VARIANT_BOOL * Cancel );
    HRESULT AfterXmlImport (
        struct XmlMap * Map,
        VARIANT_BOOL IsRefresh,
        enum XlXmlImportResult Result );
    HRESULT BeforeXmlExport (
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL * Cancel );
    HRESULT AfterXmlExport (
        struct XmlMap * Map,
        _bstr_t Url,
        enum XlXmlExportResult Result );
};

struct __declspec(uuid("00020863-0000-0000-c000-000000000046"))
MenuBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuBarPtr _Default[];
    __declspec(property(get=GetItem))
    MenuBarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuBarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    MenuBarPtr Get_Default (
        const _variant_t & Index );
    MenuBarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00020864-0000-0000-c000-000000000046"))
MenuBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenus))
    MenusPtr Menus;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetBuiltIn ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    HRESULT Delete ( );
    long GetIndex ( );
    MenusPtr GetMenus ( );
    HRESULT Reset ( );
};

struct __declspec(uuid("00020865-0000-0000-c000-000000000046"))
Menus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuPtr _Default[];
    __declspec(property(get=GetItem))
    MenuPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuPtr Add (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    MenuPtr Get_Default (
        const _variant_t & Index );
    MenuPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00020866-0000-0000-c000-000000000046"))
Menu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenuItems))
    MenuItemsPtr MenuItems;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetIndex ( );
    MenuItemsPtr GetMenuItems ( );
};

struct __declspec(uuid("00020867-0000-0000-c000-000000000046"))
MenuItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuItemPtr Add (
        _bstr_t Caption,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    MenuPtr AddMenu (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00020868-0000-0000-c000-000000000046"))
MenuItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    VARIANT_BOOL GetChecked ( );
    void PutChecked (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long _arg1 );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t _arg1 );
    long GetIndex ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002086d-0000-0000-c000-000000000046"))
Charts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _ChartPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("0002086f-0000-0000-c000-000000000046"))
DrawingObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    VARIANT_BOOL MultiSelect;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    FontPtr GetFont ( );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    long GetInputType ( );
    void PutInputType (
        long _arg1 );
    InteriorPtr GetInterior ( );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMultiSelect ( );
    void PutMultiSelect (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t Reshape (
        long Vertex,
        const _variant_t & Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    _variant_t Selected (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    IDispatchPtr Ungroup ( );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    _variant_t Vertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    GroupObjectPtr Group ( );
    _variant_t LinkCombo (
        const _variant_t & Link = vtMissing );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002441c-0000-0000-c000-000000000046"))
PivotCache : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetSourceType))
    enum XlPivotTableSourceType SourceType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum XlQueryType QueryType;
    __declspec(property(get=GetADOConnection))
    IDispatchPtr ADOConnection;
    __declspec(property(get=GetIsConnected))
    VARIANT_BOOL IsConnected;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetOLAP))
    VARIANT_BOOL OLAP;
    __declspec(property(get=GetMissingItemsLimit,put=PutMissingItemsLimit))
    enum XlPivotTableMissingItems MissingItemsLimit;
    __declspec(property(get=GetSourceConnectionFile,put=PutSourceConnectionFile))
    _bstr_t SourceConnectionFile;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetOptimizeCache,put=PutOptimizeCache))
    VARIANT_BOOL OptimizeCache;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetLocalConnection,put=PutLocalConnection))
    _variant_t LocalConnection;
    __declspec(property(get=GetUseLocalConnection,put=PutUseLocalConnection))
    VARIANT_BOOL UseLocalConnection;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetSourceDataFile))
    _bstr_t SourceDataFile;
    __declspec(property(get=GetRobustConnect,put=PutRobustConnect))
    enum XlRobustConnect RobustConnect;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL _arg1 );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL _arg1 );
    long GetIndex ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetOptimizeCache ( );
    void PutOptimizeCache (
        VARIANT_BOOL _arg1 );
    long GetRecordCount ( );
    HRESULT Refresh ( );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL _arg1 );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL _arg1 );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & _arg1 );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & _arg1 );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType _arg1 );
    enum XlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL _arg1 );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long _arg1 );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * _arg1 );
    HRESULT ResetTimer ( );
    _variant_t GetLocalConnection ( );
    void PutLocalConnection (
        const _variant_t & _arg1 );
    PivotTablePtr CreatePivotTable (
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & DefaultVersion = vtMissing );
    VARIANT_BOOL GetUseLocalConnection ( );
    void PutUseLocalConnection (
        VARIANT_BOOL _arg1 );
    IDispatchPtr GetADOConnection ( );
    VARIANT_BOOL GetIsConnected ( );
    HRESULT MakeConnection ( );
    VARIANT_BOOL GetOLAP ( );
    enum XlPivotTableSourceType GetSourceType ( );
    enum XlPivotTableMissingItems GetMissingItemsLimit ( );
    void PutMissingItemsLimit (
        enum XlPivotTableMissingItems _arg1 );
    _bstr_t GetSourceConnectionFile ( );
    void PutSourceConnectionFile (
        _bstr_t _arg1 );
    _bstr_t GetSourceDataFile ( );
    enum XlRobustConnect GetRobustConnect ( );
    void PutRobustConnect (
        enum XlRobustConnect _arg1 );
    HRESULT SaveAsODC (
        _bstr_t ODCFileName,
        const _variant_t & Description = vtMissing,
        const _variant_t & Keywords = vtMissing );
};

struct __declspec(uuid("0002441d-0000-0000-c000-000000000046"))
PivotCaches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotCachePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotCachePtr Item (
        const _variant_t & Index );
    PivotCachePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotCachePtr Add (
        enum XlPivotTableSourceType SourceType,
        const _variant_t & SourceData = vtMissing );
};

struct __declspec(uuid("0002441e-0000-0000-c000-000000000046"))
PivotFormula : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    long GetIndex ( );
    void PutIndex (
        long _arg1 );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002441f-0000-0000-c000-000000000046"))
PivotFormulas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFormulaPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFormulaPtr _Add (
        _bstr_t Formula );
    PivotFormulaPtr Item (
        const _variant_t & Index );
    PivotFormulaPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotFormulaPtr Add (
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );
};

struct __declspec(uuid("00020872-0000-0000-c000-000000000046"))
PivotTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPageFieldWrapCount,put=PutPageFieldWrapCount))
    long PageFieldWrapCount;
    __declspec(property(get=GetPivotSelectionStandard,put=PutPivotSelectionStandard))
    _bstr_t PivotSelectionStandard;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetDataPivotField))
    PivotFieldPtr DataPivotField;
    __declspec(property(get=GetEnableDataValueEditing,put=PutEnableDataValueEditing))
    VARIANT_BOOL EnableDataValueEditing;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetRowGrand,put=PutRowGrand))
    VARIANT_BOOL RowGrand;
    __declspec(property(get=GetColumnGrand,put=PutColumnGrand))
    VARIANT_BOOL ColumnGrand;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;
    __declspec(property(get=GetTableRange1))
    RangePtr TableRange1;
    __declspec(property(get=GetTableRange2))
    RangePtr TableRange2;
    __declspec(property(get=GetRowRange))
    RangePtr RowRange;
    __declspec(property(get=GetColumnRange))
    RangePtr ColumnRange;
    __declspec(property(get=GetPageRange))
    RangePtr PageRange;
    __declspec(property(get=GetDataLabelRange))
    RangePtr DataLabelRange;
    __declspec(property(get=GetDataBodyRange))
    RangePtr DataBodyRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMDX))
    _bstr_t MDX;
    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetPageRangeCells))
    RangePtr PageRangeCells;
    __declspec(property(get=GetCacheIndex,put=PutCacheIndex))
    long CacheIndex;
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetDisplayErrorString,put=PutDisplayErrorString))
    VARIANT_BOOL DisplayErrorString;
    __declspec(property(get=GetDisplayNullString,put=PutDisplayNullString))
    VARIANT_BOOL DisplayNullString;
    __declspec(property(get=GetEnableDrilldown,put=PutEnableDrilldown))
    VARIANT_BOOL EnableDrilldown;
    __declspec(property(get=GetEnableFieldDialog,put=PutEnableFieldDialog))
    VARIANT_BOOL EnableFieldDialog;
    __declspec(property(get=GetEnableWizard,put=PutEnableWizard))
    VARIANT_BOOL EnableWizard;
    __declspec(property(get=GetErrorString,put=PutErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetManualUpdate,put=PutManualUpdate))
    VARIANT_BOOL ManualUpdate;
    __declspec(property(get=GetMergeLabels,put=PutMergeLabels))
    VARIANT_BOOL MergeLabels;
    __declspec(property(get=GetNullString,put=PutNullString))
    _bstr_t NullString;
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotFormulas))
    PivotFormulasPtr PivotFormulas;
    __declspec(property(get=GetSubtotalHiddenPageItems,put=PutSubtotalHiddenPageItems))
    VARIANT_BOOL SubtotalHiddenPageItems;
    __declspec(property(get=GetPageFieldStyle,put=PutPageFieldStyle))
    _bstr_t PageFieldStyle;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetViewCalculatedMembers,put=PutViewCalculatedMembers))
    VARIANT_BOOL ViewCalculatedMembers;
    __declspec(property(get=GetPivotSelection,put=PutPivotSelection))
    _bstr_t PivotSelection;
    __declspec(property(get=GetSelectionMode,put=PutSelectionMode))
    enum XlPTSelectionMode SelectionMode;
    __declspec(property(get=GetTableStyle,put=PutTableStyle))
    _bstr_t TableStyle;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetVacatedStyle,put=PutVacatedStyle))
    _bstr_t VacatedStyle;
    __declspec(property(get=GetCalculatedMembers))
    CalculatedMembersPtr CalculatedMembers;
    __declspec(property(get=GetPrintTitles,put=PutPrintTitles))
    VARIANT_BOOL PrintTitles;
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetGrandTotalName,put=PutGrandTotalName))
    _bstr_t GrandTotalName;
    __declspec(property(get=GetSmallGrid,put=PutSmallGrid))
    VARIANT_BOOL SmallGrid;
    __declspec(property(get=GetRepeatItemsOnEachPrintedPage,put=PutRepeatItemsOnEachPrintedPage))
    VARIANT_BOOL RepeatItemsOnEachPrintedPage;
    __declspec(property(get=GetTotalsAnnotation,put=PutTotalsAnnotation))
    VARIANT_BOOL TotalsAnnotation;
    __declspec(property(get=GetDisplayImmediateItems,put=PutDisplayImmediateItems))
    VARIANT_BOOL DisplayImmediateItems;
    __declspec(property(get=GetEnableFieldList,put=PutEnableFieldList))
    VARIANT_BOOL EnableFieldList;
    __declspec(property(get=GetVisualTotals,put=PutVisualTotals))
    VARIANT_BOOL VisualTotals;
    __declspec(property(get=GetShowPageMultipleItemLabel,put=PutShowPageMultipleItemLabel))
    VARIANT_BOOL ShowPageMultipleItemLabel;
    __declspec(property(get=GetVersion))
    enum XlPivotTableVersionList Version;
    __declspec(property(get=GetDisplayEmptyRow,put=PutDisplayEmptyRow))
    VARIANT_BOOL DisplayEmptyRow;
    __declspec(property(get=GetDisplayEmptyColumn,put=PutDisplayEmptyColumn))
    VARIANT_BOOL DisplayEmptyColumn;
    __declspec(property(get=GetShowCellBackgroundFromOLAP,put=PutShowCellBackgroundFromOLAP))
    VARIANT_BOOL ShowCellBackgroundFromOLAP;
    __declspec(property(get=GetPageFieldOrder,put=PutPageFieldOrder))
    long PageFieldOrder;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AddToTable = vtMissing );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetColumnGrand ( );
    void PutColumnGrand (
        VARIANT_BOOL _arg1 );
    RangePtr GetColumnRange ( );
    _variant_t ShowPages (
        const _variant_t & PageField = vtMissing );
    RangePtr GetDataBodyRange ( );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataLabelRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL _arg1 );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetPageRange ( );
    RangePtr GetPageRangeCells ( );
    IDispatchPtr PivotFields (
        const _variant_t & Index = vtMissing );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL RefreshTable ( );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetRowGrand ( );
    void PutRowGrand (
        VARIANT_BOOL _arg1 );
    RangePtr GetRowRange ( );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL _arg1 );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & _arg1 );
    RangePtr GetTableRange1 ( );
    RangePtr GetTableRange2 ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    long GetCacheIndex ( );
    void PutCacheIndex (
        long _arg1 );
    CalculatedFieldsPtr CalculatedFields ( );
    VARIANT_BOOL GetDisplayErrorString ( );
    void PutDisplayErrorString (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayNullString ( );
    void PutDisplayNullString (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableDrilldown ( );
    void PutEnableDrilldown (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableFieldDialog ( );
    void PutEnableFieldDialog (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableWizard ( );
    void PutEnableWizard (
        VARIANT_BOOL _arg1 );
    _bstr_t GetErrorString ( );
    void PutErrorString (
        _bstr_t _arg1 );
    double GetData (
        _bstr_t Name );
    HRESULT ListFormulas ( );
    VARIANT_BOOL GetManualUpdate ( );
    void PutManualUpdate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMergeLabels ( );
    void PutMergeLabels (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNullString ( );
    void PutNullString (
        _bstr_t _arg1 );
    PivotCachePtr PivotCache ( );
    PivotFormulasPtr GetPivotFormulas ( );
    HRESULT PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing );
    VARIANT_BOOL GetSubtotalHiddenPageItems ( );
    void PutSubtotalHiddenPageItems (
        VARIANT_BOOL _arg1 );
    long GetPageFieldOrder ( );
    void PutPageFieldOrder (
        long _arg1 );
    _bstr_t GetPageFieldStyle ( );
    void PutPageFieldStyle (
        _bstr_t _arg1 );
    long GetPageFieldWrapCount ( );
    void PutPageFieldWrapCount (
        long _arg1 );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL _arg1 );
    HRESULT _PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode );
    _bstr_t GetPivotSelection ( );
    void PutPivotSelection (
        _bstr_t _arg1 );
    enum XlPTSelectionMode GetSelectionMode ( );
    void PutSelectionMode (
        enum XlPTSelectionMode _arg1 );
    _bstr_t GetTableStyle ( );
    void PutTableStyle (
        _bstr_t _arg1 );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t _arg1 );
    HRESULT Update ( );
    _bstr_t GetVacatedStyle ( );
    void PutVacatedStyle (
        _bstr_t _arg1 );
    HRESULT Format (
        enum XlPivotFormatType Format );
    VARIANT_BOOL GetPrintTitles ( );
    void PutPrintTitles (
        VARIANT_BOOL _arg1 );
    CubeFieldsPtr GetCubeFields ( );
    _bstr_t GetGrandTotalName ( );
    void PutGrandTotalName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetSmallGrid ( );
    void PutSmallGrid (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRepeatItemsOnEachPrintedPage ( );
    void PutRepeatItemsOnEachPrintedPage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTotalsAnnotation ( );
    void PutTotalsAnnotation (
        VARIANT_BOOL _arg1 );
    HRESULT PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode,
        const _variant_t & UseStandardName = vtMissing );
    _bstr_t GetPivotSelectionStandard ( );
    void PutPivotSelectionStandard (
        _bstr_t _arg1 );
    RangePtr GetPivotData (
        const _variant_t & DataField = vtMissing,
        const _variant_t & Field1 = vtMissing,
        const _variant_t & Item1 = vtMissing,
        const _variant_t & Field2 = vtMissing,
        const _variant_t & Item2 = vtMissing,
        const _variant_t & Field3 = vtMissing,
        const _variant_t & Item3 = vtMissing,
        const _variant_t & Field4 = vtMissing,
        const _variant_t & Item4 = vtMissing,
        const _variant_t & Field5 = vtMissing,
        const _variant_t & Item5 = vtMissing,
        const _variant_t & Field6 = vtMissing,
        const _variant_t & Item6 = vtMissing,
        const _variant_t & Field7 = vtMissing,
        const _variant_t & Item7 = vtMissing,
        const _variant_t & Field8 = vtMissing,
        const _variant_t & Item8 = vtMissing,
        const _variant_t & Field9 = vtMissing,
        const _variant_t & Item9 = vtMissing,
        const _variant_t & Field10 = vtMissing,
        const _variant_t & Item10 = vtMissing,
        const _variant_t & Field11 = vtMissing,
        const _variant_t & Item11 = vtMissing,
        const _variant_t & Field12 = vtMissing,
        const _variant_t & Item12 = vtMissing,
        const _variant_t & Field13 = vtMissing,
        const _variant_t & Item13 = vtMissing,
        const _variant_t & Field14 = vtMissing,
        const _variant_t & Item14 = vtMissing );
    PivotFieldPtr GetDataPivotField ( );
    VARIANT_BOOL GetEnableDataValueEditing ( );
    void PutEnableDataValueEditing (
        VARIANT_BOOL _arg1 );
    PivotFieldPtr AddDataField (
        IDispatch * Field,
        const _variant_t & Caption = vtMissing,
        const _variant_t & Function = vtMissing );
    _bstr_t GetMDX ( );
    VARIANT_BOOL GetViewCalculatedMembers ( );
    void PutViewCalculatedMembers (
        VARIANT_BOOL _arg1 );
    CalculatedMembersPtr GetCalculatedMembers ( );
    VARIANT_BOOL GetDisplayImmediateItems ( );
    void PutDisplayImmediateItems (
        VARIANT_BOOL _arg1 );
    _variant_t Dummy15 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL GetEnableFieldList ( );
    void PutEnableFieldList (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetVisualTotals ( );
    void PutVisualTotals (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowPageMultipleItemLabel ( );
    void PutShowPageMultipleItemLabel (
        VARIANT_BOOL _arg1 );
    enum XlPivotTableVersionList GetVersion ( );
    _bstr_t CreateCubeFile (
        _bstr_t File,
        const _variant_t & Measures = vtMissing,
        const _variant_t & Levels = vtMissing,
        const _variant_t & Members = vtMissing,
        const _variant_t & Properties = vtMissing );
    VARIANT_BOOL GetDisplayEmptyRow ( );
    void PutDisplayEmptyRow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayEmptyColumn ( );
    void PutDisplayEmptyColumn (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowCellBackgroundFromOLAP ( );
    void PutShowCellBackgroundFromOLAP (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00020873-0000-0000-c000-000000000046"))
PivotTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotTablePtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotTablePtr Add (
        struct PivotCache * PivotCache,
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & DefaultVersion = vtMissing );
};

struct __declspec(uuid("00020874-0000-0000-c000-000000000046"))
PivotField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetShowAllItems,put=PutShowAllItems))
    VARIANT_BOOL ShowAllItems;
    __declspec(property(get=GetFunction,put=PutFunction))
    enum XlConsolidationFunction Function;
    __declspec(property(get=GetPosition,put=PutPosition))
    _variant_t Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPivotFieldOrientation Orientation;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetHiddenItemsList,put=PutHiddenItemsList))
    _variant_t HiddenItemsList;
    __declspec(property(get=GetDatabaseSort,put=PutDatabaseSort))
    VARIANT_BOOL DatabaseSort;
    __declspec(property(get=GetIsMemberProperty))
    VARIANT_BOOL IsMemberProperty;
    __declspec(property(get=GetPropertyParentField))
    PivotFieldPtr PropertyParentField;
    __declspec(property(get=GetPropertyOrder,put=PutPropertyOrder))
    long PropertyOrder;
    __declspec(property(get=GetEnableItemSelection,put=PutEnableItemSelection))
    VARIANT_BOOL EnableItemSelection;
    __declspec(property(get=GetCurrentPageList,put=PutCurrentPageList))
    _variant_t CurrentPageList;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetDataType))
    enum XlPivotFieldDataType DataType;
    __declspec(property(get=GetGroupLevel))
    _variant_t GroupLevel;
    __declspec(property(get=GetTotalLevels))
    _variant_t TotalLevels;
    __declspec(property(get=GetVisibleItems))
    _variant_t VisibleItems[];
    __declspec(property(get=GetHiddenItems))
    _variant_t HiddenItems[];
    __declspec(property(get=GetParentItems))
    _variant_t ParentItems[];
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetParentField))
    PivotFieldPtr ParentField;
    __declspec(property(get=GetSubtotals,put=PutSubtotals))
    _variant_t Subtotals[];
    __declspec(property(get=GetBaseField,put=PutBaseField))
    _variant_t BaseField;
    __declspec(property(get=GetBaseItem,put=PutBaseItem))
    _variant_t BaseItem;
    __declspec(property(get=GetChildField))
    PivotFieldPtr ChildField;
    __declspec(property(get=GetCurrentPage,put=PutCurrentPage))
    _variant_t CurrentPage;
    __declspec(property(get=GetDragToColumn,put=PutDragToColumn))
    VARIANT_BOOL DragToColumn;
    __declspec(property(get=GetDragToHide,put=PutDragToHide))
    VARIANT_BOOL DragToHide;
    __declspec(property(get=GetDragToPage,put=PutDragToPage))
    VARIANT_BOOL DragToPage;
    __declspec(property(get=GetDragToRow,put=PutDragToRow))
    VARIANT_BOOL DragToRow;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetServerBased,put=PutServerBased))
    VARIANT_BOOL ServerBased;
    __declspec(property(get=GetAutoSortOrder))
    long AutoSortOrder;
    __declspec(property(get=GetAutoSortField))
    _bstr_t AutoSortField;
    __declspec(property(get=GetAutoShowType))
    long AutoShowType;
    __declspec(property(get=GetAutoShowRange))
    long AutoShowRange;
    __declspec(property(get=GetDragToData,put=PutDragToData))
    VARIANT_BOOL DragToData;
    __declspec(property(get=GetAutoShowCount))
    long AutoShowCount;
    __declspec(property(get=GetAutoShowField))
    _bstr_t AutoShowField;
    __declspec(property(get=GetLayoutBlankLine,put=PutLayoutBlankLine))
    VARIANT_BOOL LayoutBlankLine;
    __declspec(property(get=GetLayoutSubtotalLocation,put=PutLayoutSubtotalLocation))
    enum XlSubtototalLocationType LayoutSubtotalLocation;
    __declspec(property(get=GetLayoutPageBreak,put=PutLayoutPageBreak))
    VARIANT_BOOL LayoutPageBreak;
    __declspec(property(get=GetLayoutForm,put=PutLayoutForm))
    enum XlLayoutFormType LayoutForm;
    __declspec(property(get=GetSubtotalName,put=PutSubtotalName))
    _bstr_t SubtotalName;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetCubeField))
    CubeFieldPtr CubeField;
    __declspec(property(get=GetCurrentPageName,put=PutCurrentPageName))
    _bstr_t CurrentPageName;
    __declspec(property(get=GetCalculation,put=PutCalculation))
    enum XlPivotFieldCalculation Calculation;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotFieldCalculation GetCalculation ( );
    void PutCalculation (
        enum XlPivotFieldCalculation _arg1 );
    PivotFieldPtr GetChildField ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetCurrentPage ( );
    void PutCurrentPage (
        const _variant_t & _arg1 );
    RangePtr GetDataRange ( );
    enum XlPivotFieldDataType GetDataType ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    enum XlConsolidationFunction GetFunction ( );
    void PutFunction (
        enum XlConsolidationFunction _arg1 );
    _variant_t GetGroupLevel ( );
    _variant_t GetHiddenItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    enum XlPivotFieldOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPivotFieldOrientation _arg1 );
    VARIANT_BOOL GetShowAllItems ( );
    void PutShowAllItems (
        VARIANT_BOOL _arg1 );
    PivotFieldPtr GetParentField ( );
    _variant_t GetParentItems (
        const _variant_t & Index = vtMissing );
    _variant_t PivotItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetPosition ( );
    void PutPosition (
        const _variant_t & _arg1 );
    _bstr_t GetSourceName ( );
    _variant_t GetSubtotals (
        const _variant_t & Index = vtMissing );
    void PutSubtotals (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _variant_t GetBaseField ( );
    void PutBaseField (
        const _variant_t & _arg1 );
    _variant_t GetBaseItem ( );
    void PutBaseItem (
        const _variant_t & _arg1 );
    _variant_t GetTotalLevels ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    _variant_t GetVisibleItems (
        const _variant_t & Index = vtMissing );
    CalculatedItemsPtr CalculatedItems ( );
    HRESULT Delete ( );
    VARIANT_BOOL GetDragToColumn ( );
    void PutDragToColumn (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToHide ( );
    void PutDragToHide (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToPage ( );
    void PutDragToPage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToRow ( );
    void PutDragToRow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToData ( );
    void PutDragToData (
        VARIANT_BOOL _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    VARIANT_BOOL GetIsCalculated ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetServerBased ( );
    void PutServerBased (
        VARIANT_BOOL _arg1 );
    HRESULT AutoSort (
        long Order,
        _bstr_t Field );
    HRESULT AutoShow (
        long Type,
        long Range,
        long Count,
        _bstr_t Field );
    long GetAutoSortOrder ( );
    _bstr_t GetAutoSortField ( );
    long GetAutoShowType ( );
    long GetAutoShowRange ( );
    long GetAutoShowCount ( );
    _bstr_t GetAutoShowField ( );
    VARIANT_BOOL GetLayoutBlankLine ( );
    void PutLayoutBlankLine (
        VARIANT_BOOL _arg1 );
    enum XlSubtototalLocationType GetLayoutSubtotalLocation ( );
    void PutLayoutSubtotalLocation (
        enum XlSubtototalLocationType _arg1 );
    VARIANT_BOOL GetLayoutPageBreak ( );
    void PutLayoutPageBreak (
        VARIANT_BOOL _arg1 );
    enum XlLayoutFormType GetLayoutForm ( );
    void PutLayoutForm (
        enum XlLayoutFormType _arg1 );
    _bstr_t GetSubtotalName ( );
    void PutSubtotalName (
        _bstr_t _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL _arg1 );
    CubeFieldPtr GetCubeField ( );
    _bstr_t GetCurrentPageName ( );
    void PutCurrentPageName (
        _bstr_t _arg1 );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t _arg1 );
    _variant_t GetHiddenItemsList ( );
    void PutHiddenItemsList (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetDatabaseSort ( );
    void PutDatabaseSort (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIsMemberProperty ( );
    PivotFieldPtr GetPropertyParentField ( );
    long GetPropertyOrder ( );
    void PutPropertyOrder (
        long _arg1 );
    VARIANT_BOOL GetEnableItemSelection ( );
    void PutEnableItemSelection (
        VARIANT_BOOL _arg1 );
    _variant_t GetCurrentPageList ( );
    void PutCurrentPageList (
        const _variant_t & _arg1 );
    HRESULT AddPageItem (
        _bstr_t Item,
        const _variant_t & ClearList = vtMissing );
};

struct __declspec(uuid("00020875-0000-0000-c000-000000000046"))
PivotFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotTablePtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotTablePtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024420-0000-0000-c000-000000000046"))
CalculatedFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFieldPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFieldPtr _Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotFieldPtr Item (
        const _variant_t & Index );
    PivotFieldPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
    PivotFieldPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );
};

struct __declspec(uuid("00020876-0000-0000-c000-000000000046"))
PivotItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    VARIANT_BOOL ShowDetail;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _variant_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetParentShowDetail))
    VARIANT_BOOL ParentShowDetail;
    __declspec(property(get=GetSourceNameStandard))
    _bstr_t SourceNameStandard;
    __declspec(property(get=GetParentItem))
    PivotItemPtr ParentItem;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    PivotItemPtr GetParentItem ( );
    VARIANT_BOOL GetParentShowDetail ( );
    long GetPosition ( );
    void PutPosition (
        long _arg1 );
    VARIANT_BOOL GetShowDetail ( );
    void PutShowDetail (
        VARIANT_BOOL _arg1 );
    _variant_t GetSourceName ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
    VARIANT_BOOL GetIsCalculated ( );
    long GetRecordCount ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL _arg1 );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t _arg1 );
    _bstr_t GetSourceNameStandard ( );
};

struct __declspec(uuid("00020877-0000-0000-c000-000000000046"))
PivotItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    HRESULT Add (
        _bstr_t Name );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024421-0000-0000-c000-000000000046"))
CalculatedItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr _Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
    PivotItemPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );
};

struct __declspec(uuid("00020878-0000-0000-c000-000000000046"))
Characters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetPhoneticCharacters,put=PutPhoneticCharacters))
    _bstr_t PhoneticCharacters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    long GetCount ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _variant_t Insert (
        _bstr_t String );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _bstr_t GetPhoneticCharacters ( );
    void PutPhoneticCharacters (
        _bstr_t _arg1 );
};

struct __declspec(uuid("00020879-0000-0000-c000-000000000046"))
Dialogs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    DialogPtr _Default[];
    __declspec(property(get=GetItem))
    DialogPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    DialogPtr GetItem (
        enum XlBuiltInDialog Index );
    DialogPtr Get_Default (
        enum XlBuiltInDialog Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002087a-0000-0000-c000-000000000046"))
Dialog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Show (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
};

struct __declspec(uuid("0002087b-0000-0000-c000-000000000046"))
SoundNote : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    _variant_t Import (
        _bstr_t Filename );
    _variant_t Play ( );
    _variant_t Record ( );
};

struct __declspec(uuid("0002087d-0000-0000-c000-000000000046"))
Button : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("0002087e-0000-0000-c000-000000000046"))
Buttons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    ButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002087f-0000-0000-c000-000000000046"))
CheckBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020880-0000-0000-c000-000000000046"))
CheckBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    CheckBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020881-0000-0000-c000-000000000046"))
OptionButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    GroupBoxPtr GetGroupBox ( );
};

struct __declspec(uuid("00020882-0000-0000-c000-000000000046"))
OptionButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    GroupBoxPtr GetGroupBox ( );
    OptionButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020883-0000-0000-c000-000000000046"))
EditBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLinkedObject))
    _bstr_t LinkedObject;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    long GetInputType ( );
    void PutInputType (
        long _arg1 );
    _bstr_t GetLinkedObject ( );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00020884-0000-0000-c000-000000000046"))
EditBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    long GetInputType ( );
    void PutInputType (
        long _arg1 );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL _arg1 );
    EditBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    _variant_t Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020885-0000-0000-c000-000000000046"))
ScrollBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
};

struct __declspec(uuid("00020886-0000-0000-c000-000000000046"))
ScrollBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
    ScrollBarPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020887-0000-0000-c000-000000000046"))
ListBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
};

struct __declspec(uuid("00020888-0000-0000-c000-000000000046"))
ListBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    ListBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020889-0000-0000-c000-000000000046"))
GroupBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("0002088a-0000-0000-c000-000000000046"))
GroupBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    GroupBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002088b-0000-0000-c000-000000000046"))
DropDown : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002088c-0000-0000-c000-000000000046"))
DropDowns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    DropDownPtr Add (
        double Left,
        double Top,
        double Width,
        double Height,
        const _variant_t & Editable = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002088d-0000-0000-c000-000000000046"))
Spinner : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
};

struct __declspec(uuid("0002088e-0000-0000-c000-000000000046"))
Spinners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    SpinnerPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002088f-0000-0000-c000-000000000046"))
DialogFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
};

struct __declspec(uuid("00020890-0000-0000-c000-000000000046"))
Label : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020891-0000-0000-c000-000000000046"))
Labels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    LabelPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020894-0000-0000-c000-000000000046"))
Panes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PanePtr _Default[];
    __declspec(property(get=GetItem))
    PanePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PanePtr GetItem (
        long Index );
    PanePtr Get_Default (
        long Index );
};

struct __declspec(uuid("00020895-0000-0000-c000-000000000046"))
Pane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Activate ( );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long _arg1 );
    long GetScrollRow ( );
    void PutScrollRow (
        long _arg1 );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    RangePtr GetVisibleRange ( );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );
};

struct __declspec(uuid("00020896-0000-0000-c000-000000000046"))
Scenarios : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ScenarioPtr Add (
        _bstr_t Name,
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing,
        const _variant_t & Comment = vtMissing,
        const _variant_t & Locked = vtMissing,
        const _variant_t & Hidden = vtMissing );
    long GetCount ( );
    _variant_t CreateSummary (
        enum XlSummaryReportType ReportType,
        const _variant_t & ResultCells = vtMissing );
    ScenarioPtr Item (
        const _variant_t & Index );
    _variant_t Merge (
        const _variant_t & Source );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020897-0000-0000-c000-000000000046"))
Scenario : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValues))
    _variant_t Values[];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHidden,put=PutHidden))
    VARIANT_BOOL Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetChangingCells))
    RangePtr ChangingCells;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t ChangeScenario (
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing );
    RangePtr GetChangingCells ( );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t _arg1 );
    _variant_t Delete ( );
    VARIANT_BOOL GetHidden ( );
    void PutHidden (
        VARIANT_BOOL _arg1 );
    long GetIndex ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t Show ( );
    _variant_t GetValues (
        const _variant_t & Index = vtMissing );
};

struct __declspec(uuid("00020898-0000-0000-c000-000000000046"))
GroupObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
};

struct __declspec(uuid("00020899-0000-0000-c000-000000000046"))
GroupObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002089a-0000-0000-c000-000000000046"))
Line : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
};

struct __declspec(uuid("0002089b-0000-0000-c000-000000000046"))
Lines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    LinePtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002089c-0000-0000-c000-000000000046"))
Rectangle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002089d-0000-0000-c000-000000000046"))
Rectangles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    RectanglePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002089e-0000-0000-c000-000000000046"))
Oval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002089f-0000-0000-c000-000000000046"))
Ovals : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    OvalPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208a0-0000-0000-c000-000000000046"))
Arc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
};

struct __declspec(uuid("000208a1-0000-0000-c000-000000000046"))
Arcs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    ArcPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024410-0000-0000-c000-000000000046"))
OLEObjectEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GotFocus ( );
    HRESULT LostFocus ( );
};

struct __declspec(uuid("000208a2-0000-0000-c000-000000000046"))
_OLEObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;
    __declspec(property(get=GetOLEType))
    _variant_t OLEType;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAltHTML,put=PutAltHTML))
    _bstr_t AltHTML;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t Activate ( );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL _arg1 );
    IDispatchPtr GetObject ( );
    _variant_t GetOLEType ( );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t _arg1 );
    _variant_t Update ( );
    _variant_t Verb (
        enum XlOLEVerb Verb );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    _bstr_t GetprogID ( );
    _bstr_t GetAltHTML ( );
    void PutAltHTML (
        _bstr_t _arg1 );
};

struct __declspec(uuid("000208a3-0000-0000-c000-000000000046"))
OLEObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL _arg1 );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t _arg1 );
    _OLEObjectPtr Add (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208a4-0000-0000-c000-000000000046"))
TextBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208a5-0000-0000-c000-000000000046"))
TextBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    TextBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208a6-0000-0000-c000-000000000046"))
Picture : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
};

struct __declspec(uuid("000208a7-0000-0000-c000-000000000046"))
Pictures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    PicturePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    PicturePtr Insert (
        _bstr_t Filename,
        const _variant_t & Converter = vtMissing );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PicturePtr Paste (
        const _variant_t & Link = vtMissing );
};

struct __declspec(uuid("000208a8-0000-0000-c000-000000000046"))
Drawing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetVertices))
    _variant_t Vertices[][];
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t AddVertex (
        double Left,
        double Top );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    _variant_t GetVertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );
};

struct __declspec(uuid("000208a9-0000-0000-c000-000000000046"))
Drawings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    DrawingPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2,
        VARIANT_BOOL Closed );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208aa-0000-0000-c000-000000000046"))
RoutingSlip : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRecipients,put=PutRecipients))
    _variant_t Recipients[];
    __declspec(property(get=GetSubject,put=PutSubject))
    _variant_t Subject;
    __declspec(property(get=GetMessage,put=PutMessage))
    _variant_t Message;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    enum XlRoutingSlipDelivery Delivery;
    __declspec(property(get=GetReturnWhenDone,put=PutReturnWhenDone))
    VARIANT_BOOL ReturnWhenDone;
    __declspec(property(get=GetTrackStatus,put=PutTrackStatus))
    VARIANT_BOOL TrackStatus;
    __declspec(property(get=GetStatus))
    enum XlRoutingSlipStatus Status;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlRoutingSlipDelivery GetDelivery ( );
    void PutDelivery (
        enum XlRoutingSlipDelivery _arg1 );
    _variant_t GetMessage ( );
    void PutMessage (
        const _variant_t & _arg1 );
    _variant_t GetRecipients (
        const _variant_t & Index = vtMissing );
    void PutRecipients (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _variant_t Reset ( );
    VARIANT_BOOL GetReturnWhenDone ( );
    void PutReturnWhenDone (
        VARIANT_BOOL _arg1 );
    enum XlRoutingSlipStatus GetStatus ( );
    _variant_t GetSubject ( );
    void PutSubject (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetTrackStatus ( );
    void PutTrackStatus (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208ab-0000-0000-c000-000000000046"))
Outline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSummaryColumn,put=PutSummaryColumn))
    enum XlSummaryColumn SummaryColumn;
    __declspec(property(get=GetSummaryRow,put=PutSummaryRow))
    enum XlSummaryRow SummaryRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutomaticStyles,put=PutAutomaticStyles))
    VARIANT_BOOL AutomaticStyles;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutomaticStyles ( );
    void PutAutomaticStyles (
        VARIANT_BOOL _arg1 );
    _variant_t ShowLevels (
        const _variant_t & RowLevels = vtMissing,
        const _variant_t & ColumnLevels = vtMissing );
    enum XlSummaryColumn GetSummaryColumn ( );
    void PutSummaryColumn (
        enum XlSummaryColumn _arg1 );
    enum XlSummaryRow GetSummaryRow ( );
    void PutSummaryRow (
        enum XlSummaryRow _arg1 );
};

struct __declspec(uuid("000208ad-0000-0000-c000-000000000046"))
Module : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    HRESULT Delete ( );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t _arg1 );
    long GetIndex ( );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick ( );
    void PutOnDoubleClick (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetActivate ( );
    void PutOnSheetActivate (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetDeactivate ( );
    void PutOnSheetDeactivate (
        _bstr_t _arg1 );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );
    VARIANT_BOOL GetProtectContents ( );
    VARIANT_BOOL GetProtectionMode ( );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    enum XlSheetVisibility GetVisible ( );
    void PutVisible (
        enum XlSheetVisibility _arg1 );
    ShapesPtr GetShapes ( );
    _variant_t InsertFile (
        const _variant_t & Filename,
        const _variant_t & Merge = vtMissing );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );
};

struct __declspec(uuid("000208ae-0000-0000-c000-000000000046"))
Modules : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ModulePtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("000208af-0000-0000-c000-000000000046"))
DialogSheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetEnableAutoFilter,put=PutEnableAutoFilter))
    VARIANT_BOOL EnableAutoFilter;
    __declspec(property(get=GetEnableOutlining,put=PutEnableOutlining))
    VARIANT_BOOL EnableOutlining;
    __declspec(property(get=GetEnablePivotTable,put=PutEnablePivotTable))
    VARIANT_BOOL EnablePivotTable;
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtection))
    ProtectionPtr Protection;
    __declspec(property(get=GetDialogFrame))
    DialogFramePtr DialogFrame;
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetEnableCalculation,put=PutEnableCalculation))
    VARIANT_BOOL EnableCalculation;
    __declspec(property(get=GetEnableSelection,put=PutEnableSelection))
    enum XlEnableSelection EnableSelection;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    _variant_t DefaultButton;
    __declspec(property(get=GetScrollArea,put=PutScrollArea))
    _bstr_t ScrollArea;
    __declspec(property(get=GetQueryTables))
    QueryTablesPtr QueryTables;
    __declspec(property(get=GetDisplayPageBreaks,put=PutDisplayPageBreaks))
    VARIANT_BOOL DisplayPageBreaks;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate;
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects;
    __declspec(property(get=GetProtectScenarios))
    VARIANT_BOOL ProtectScenarios;
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetMailEnvelope))
    Office::IMsoEnvelopeVBPtr MailEnvelope;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick;
    __declspec(property(get=GetAutoFilter))
    AutoFilterPtr AutoFilter;
    __declspec(property(get=GetTab))
    TabPtr Tab;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetCustomProperties))
    CustomPropertiesPtr CustomProperties;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayAutomaticPageBreaks,put=PutDisplayAutomaticPageBreaks))
    VARIANT_BOOL DisplayAutomaticPageBreaks;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    long _DisplayRightToLeft;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetFocus,put=PutFocus))
    _variant_t Focus;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    HRESULT Delete ( );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t _arg1 );
    long GetIndex ( );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick ( );
    void PutOnDoubleClick (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetActivate ( );
    void PutOnSheetActivate (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetDeactivate ( );
    void PutOnSheetDeactivate (
        _bstr_t _arg1 );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );
    VARIANT_BOOL GetProtectContents ( );
    VARIANT_BOOL GetProtectDrawingObjects ( );
    VARIANT_BOOL GetProtectionMode ( );
    VARIANT_BOOL GetProtectScenarios ( );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    enum XlSheetVisibility GetVisible ( );
    void PutVisible (
        enum XlSheetVisibility _arg1 );
    ShapesPtr GetShapes ( );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetEnableCalculation ( );
    void PutEnableCalculation (
        VARIANT_BOOL _arg1 );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetDisplayAutomaticPageBreaks ( );
    void PutDisplayAutomaticPageBreaks (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetEnableAutoFilter ( );
    void PutEnableAutoFilter (
        VARIANT_BOOL _arg1 );
    enum XlEnableSelection GetEnableSelection ( );
    void PutEnableSelection (
        enum XlEnableSelection _arg1 );
    VARIANT_BOOL GetEnableOutlining ( );
    void PutEnableOutlining (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnablePivotTable ( );
    void PutEnablePivotTable (
        VARIANT_BOOL _arg1 );
    _variant_t Evaluate (
        const _variant_t & Name );
    _variant_t _Evaluate (
        const _variant_t & Name );
    HRESULT ResetAllPageBreaks ( );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing );
    NamesPtr GetNames ( );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing );
    HRESULT Paste (
        const _variant_t & Destination = vtMissing,
        const _variant_t & Link = vtMissing );
    HRESULT _PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing );
    _bstr_t GetScrollArea ( );
    void PutScrollArea (
        _bstr_t _arg1 );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    QueryTablesPtr GetQueryTables ( );
    VARIANT_BOOL GetDisplayPageBreaks ( );
    void PutDisplayPageBreaks (
        VARIANT_BOOL _arg1 );
    CommentsPtr GetComments ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT ClearCircles ( );
    HRESULT CircleInvalid ( );
    long Get_DisplayRightToLeft ( );
    void Put_DisplayRightToLeft (
        long _arg1 );
    AutoFilterPtr GetAutoFilter ( );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    void PutDisplayRightToLeft (
        VARIANT_BOOL _arg1 );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    HRESULT _CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        const _variant_t & IgnoreFinalYaa = vtMissing,
        const _variant_t & SpellScript = vtMissing );
    TabPtr GetTab ( );
    Office::IMsoEnvelopeVBPtr GetMailEnvelope ( );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing );
    CustomPropertiesPtr GetCustomProperties ( );
    SmartTagsPtr GetSmartTags ( );
    ProtectionPtr GetProtection ( );
    HRESULT PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & NoHTMLFormatting = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        const _variant_t & AllowFormattingCells = vtMissing,
        const _variant_t & AllowFormattingColumns = vtMissing,
        const _variant_t & AllowFormattingRows = vtMissing,
        const _variant_t & AllowInsertingColumns = vtMissing,
        const _variant_t & AllowInsertingRows = vtMissing,
        const _variant_t & AllowInsertingHyperlinks = vtMissing,
        const _variant_t & AllowDeletingColumns = vtMissing,
        const _variant_t & AllowDeletingRows = vtMissing,
        const _variant_t & AllowSorting = vtMissing,
        const _variant_t & AllowFiltering = vtMissing,
        const _variant_t & AllowUsingPivotTables = vtMissing );
    _variant_t GetDefaultButton ( );
    void PutDefaultButton (
        const _variant_t & _arg1 );
    DialogFramePtr GetDialogFrame ( );
    IDispatchPtr EditBoxes (
        const _variant_t & Index = vtMissing );
    _variant_t GetFocus ( );
    void PutFocus (
        const _variant_t & _arg1 );
    VARIANT_BOOL Hide (
        const _variant_t & Cancel = vtMissing );
    VARIANT_BOOL Show ( );
};

struct __declspec(uuid("000208b0-0000-0000-c000-000000000046"))
DialogSheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DialogSheetPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("000208b1-0000-0000-c000-000000000046"))
Worksheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing,
        const _variant_t & Type = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    HRESULT FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("000208b4-0000-0000-c000-000000000046"))
PageSetup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    double LeftMargin;
    __declspec(property(get=GetRightMargin,put=PutRightMargin))
    double RightMargin;
    __declspec(property(get=GetPrintErrors,put=PutPrintErrors))
    enum XlPrintErrors PrintErrors;
    __declspec(property(get=GetCenterHeaderPicture))
    GraphicPtr CenterHeaderPicture;
    __declspec(property(get=GetCenterFooterPicture))
    GraphicPtr CenterFooterPicture;
    __declspec(property(get=GetLeftHeaderPicture))
    GraphicPtr LeftHeaderPicture;
    __declspec(property(get=GetLeftFooterPicture))
    GraphicPtr LeftFooterPicture;
    __declspec(property(get=GetRightHeaderPicture))
    GraphicPtr RightHeaderPicture;
    __declspec(property(get=GetTopMargin,put=PutTopMargin))
    double TopMargin;
    __declspec(property(get=GetBottomMargin,put=PutBottomMargin))
    double BottomMargin;
    __declspec(property(get=GetPrintHeadings,put=PutPrintHeadings))
    VARIANT_BOOL PrintHeadings;
    __declspec(property(get=GetPrintGridlines,put=PutPrintGridlines))
    VARIANT_BOOL PrintGridlines;
    __declspec(property(get=GetCenterHorizontally,put=PutCenterHorizontally))
    VARIANT_BOOL CenterHorizontally;
    __declspec(property(get=GetOrder,put=PutOrder))
    enum XlOrder Order;
    __declspec(property(get=GetCenterVertically,put=PutCenterVertically))
    VARIANT_BOOL CenterVertically;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    enum XlPaperSize PaperSize;
    __declspec(property(get=GetFirstPageNumber,put=PutFirstPageNumber))
    long FirstPageNumber;
    __declspec(property(get=GetBlackAndWhite,put=PutBlackAndWhite))
    VARIANT_BOOL BlackAndWhite;
    __declspec(property(get=GetCenterFooter,put=PutCenterFooter))
    _bstr_t CenterFooter;
    __declspec(property(get=GetCenterHeader,put=PutCenterHeader))
    _bstr_t CenterHeader;
    __declspec(property(get=GetChartSize,put=PutChartSize))
    enum XlObjectSize ChartSize;
    __declspec(property(get=GetDraft,put=PutDraft))
    VARIANT_BOOL Draft;
    __declspec(property(get=GetPrintNotes,put=PutPrintNotes))
    VARIANT_BOOL PrintNotes;
    __declspec(property(get=GetPrintQuality,put=PutPrintQuality))
    _variant_t PrintQuality[];
    __declspec(property(get=GetPrintTitleColumns,put=PutPrintTitleColumns))
    _bstr_t PrintTitleColumns;
    __declspec(property(get=GetPrintTitleRows,put=PutPrintTitleRows))
    _bstr_t PrintTitleRows;
    __declspec(property(get=GetRightFooter,put=PutRightFooter))
    _bstr_t RightFooter;
    __declspec(property(get=GetRightHeader,put=PutRightHeader))
    _bstr_t RightHeader;
    __declspec(property(get=GetFitToPagesTall,put=PutFitToPagesTall))
    _variant_t FitToPagesTall;
    __declspec(property(get=GetFitToPagesWide,put=PutFitToPagesWide))
    _variant_t FitToPagesWide;
    __declspec(property(get=GetFooterMargin,put=PutFooterMargin))
    double FooterMargin;
    __declspec(property(get=GetHeaderMargin,put=PutHeaderMargin))
    double HeaderMargin;
    __declspec(property(get=GetLeftFooter,put=PutLeftFooter))
    _bstr_t LeftFooter;
    __declspec(property(get=GetPrintComments,put=PutPrintComments))
    enum XlPrintLocation PrintComments;
    __declspec(property(get=GetLeftHeader,put=PutLeftHeader))
    _bstr_t LeftHeader;
    __declspec(property(get=GetPrintArea,put=PutPrintArea))
    _bstr_t PrintArea;
    __declspec(property(get=GetRightFooterPicture))
    GraphicPtr RightFooterPicture;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPageOrientation Orientation;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBlackAndWhite ( );
    void PutBlackAndWhite (
        VARIANT_BOOL _arg1 );
    double GetBottomMargin ( );
    void PutBottomMargin (
        double _arg1 );
    _bstr_t GetCenterFooter ( );
    void PutCenterFooter (
        _bstr_t _arg1 );
    _bstr_t GetCenterHeader ( );
    void PutCenterHeader (
        _bstr_t _arg1 );
    VARIANT_BOOL GetCenterHorizontally ( );
    void PutCenterHorizontally (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCenterVertically ( );
    void PutCenterVertically (
        VARIANT_BOOL _arg1 );
    enum XlObjectSize GetChartSize ( );
    void PutChartSize (
        enum XlObjectSize _arg1 );
    VARIANT_BOOL GetDraft ( );
    void PutDraft (
        VARIANT_BOOL _arg1 );
    long GetFirstPageNumber ( );
    void PutFirstPageNumber (
        long _arg1 );
    _variant_t GetFitToPagesTall ( );
    void PutFitToPagesTall (
        const _variant_t & _arg1 );
    _variant_t GetFitToPagesWide ( );
    void PutFitToPagesWide (
        const _variant_t & _arg1 );
    double GetFooterMargin ( );
    void PutFooterMargin (
        double _arg1 );
    double GetHeaderMargin ( );
    void PutHeaderMargin (
        double _arg1 );
    _bstr_t GetLeftFooter ( );
    void PutLeftFooter (
        _bstr_t _arg1 );
    _bstr_t GetLeftHeader ( );
    void PutLeftHeader (
        _bstr_t _arg1 );
    double GetLeftMargin ( );
    void PutLeftMargin (
        double _arg1 );
    enum XlOrder GetOrder ( );
    void PutOrder (
        enum XlOrder _arg1 );
    enum XlPageOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPageOrientation _arg1 );
    enum XlPaperSize GetPaperSize ( );
    void PutPaperSize (
        enum XlPaperSize _arg1 );
    _bstr_t GetPrintArea ( );
    void PutPrintArea (
        _bstr_t _arg1 );
    VARIANT_BOOL GetPrintGridlines ( );
    void PutPrintGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrintHeadings ( );
    void PutPrintHeadings (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrintNotes ( );
    void PutPrintNotes (
        VARIANT_BOOL _arg1 );
    _variant_t GetPrintQuality (
        const _variant_t & Index = vtMissing );
    void PutPrintQuality (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _bstr_t GetPrintTitleColumns ( );
    void PutPrintTitleColumns (
        _bstr_t _arg1 );
    _bstr_t GetPrintTitleRows ( );
    void PutPrintTitleRows (
        _bstr_t _arg1 );
    _bstr_t GetRightFooter ( );
    void PutRightFooter (
        _bstr_t _arg1 );
    _bstr_t GetRightHeader ( );
    void PutRightHeader (
        _bstr_t _arg1 );
    double GetRightMargin ( );
    void PutRightMargin (
        double _arg1 );
    double GetTopMargin ( );
    void PutTopMargin (
        double _arg1 );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & _arg1 );
    enum XlPrintLocation GetPrintComments ( );
    void PutPrintComments (
        enum XlPrintLocation _arg1 );
    enum XlPrintErrors GetPrintErrors ( );
    void PutPrintErrors (
        enum XlPrintErrors _arg1 );
    GraphicPtr GetCenterHeaderPicture ( );
    GraphicPtr GetCenterFooterPicture ( );
    GraphicPtr GetLeftHeaderPicture ( );
    GraphicPtr GetLeftFooterPicture ( );
    GraphicPtr GetRightHeaderPicture ( );
    GraphicPtr GetRightFooterPicture ( );
};

struct __declspec(uuid("000208b8-0000-0000-c000-000000000046"))
Names : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    NamePtr Add (
        const _variant_t & Name = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        const _variant_t & Visible = vtMissing,
        const _variant_t & MacroType = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Category = vtMissing,
        const _variant_t & NameLocal = vtMissing,
        const _variant_t & RefersToLocal = vtMissing,
        const _variant_t & CategoryLocal = vtMissing,
        const _variant_t & RefersToR1C1 = vtMissing,
        const _variant_t & RefersToR1C1Local = vtMissing );
    NamePtr Item (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing );
    NamePtr _Default (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("000208b9-0000-0000-c000-000000000046"))
Name : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetCategoryLocal,put=PutCategoryLocal))
    _bstr_t CategoryLocal;
    __declspec(property(get=GetMacroType,put=PutMacroType))
    enum XlXLMMacroType MacroType;
    __declspec(property(get=GetRefersTo,put=PutRefersTo))
    _variant_t RefersTo;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetRefersToLocal,put=PutRefersToLocal))
    _variant_t RefersToLocal;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t _Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetRefersToR1C1,put=PutRefersToR1C1))
    _variant_t RefersToR1C1;
    __declspec(property(get=GetRefersToR1C1Local,put=PutRefersToR1C1Local))
    _variant_t RefersToR1C1Local;
    __declspec(property(get=GetRefersToRange))
    RangePtr RefersToRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShortcutKey,put=PutShortcutKey))
    _bstr_t ShortcutKey;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    long GetIndex ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t _arg1 );
    _bstr_t GetCategoryLocal ( );
    void PutCategoryLocal (
        _bstr_t _arg1 );
    HRESULT Delete ( );
    enum XlXLMMacroType GetMacroType ( );
    void PutMacroType (
        enum XlXLMMacroType _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t GetRefersTo ( );
    void PutRefersTo (
        const _variant_t & _arg1 );
    _bstr_t GetShortcutKey ( );
    void PutShortcutKey (
        _bstr_t _arg1 );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t _arg1 );
    _variant_t GetRefersToLocal ( );
    void PutRefersToLocal (
        const _variant_t & _arg1 );
    _variant_t GetRefersToR1C1 ( );
    void PutRefersToR1C1 (
        const _variant_t & _arg1 );
    _variant_t GetRefersToR1C1Local ( );
    void PutRefersToR1C1Local (
        const _variant_t & _arg1 );
    RangePtr GetRefersToRange ( );
};

struct __declspec(uuid("000208cf-0000-0000-c000-000000000046"))
ChartObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetChart))
    _ChartPtr Chart;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetProtectChartObject,put=PutProtectChartObject))
    VARIANT_BOOL ProtectChartObject;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t Activate ( );
    _ChartPtr GetChart ( );
    VARIANT_BOOL GetProtectChartObject ( );
    void PutProtectChartObject (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208d0-0000-0000-c000-000000000046"))
ChartObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    ChartObjectPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208d1-0000-0000-c000-000000000046"))
Mailer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWhichAddress,put=PutWhichAddress))
    _variant_t WhichAddress;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBCCRecipients,put=PutBCCRecipients))
    _variant_t BCCRecipients;
    __declspec(property(get=GetCCRecipients,put=PutCCRecipients))
    _variant_t CCRecipients;
    __declspec(property(get=GetEnclosures,put=PutEnclosures))
    _variant_t Enclosures;
    __declspec(property(get=GetReceived))
    VARIANT_BOOL Received;
    __declspec(property(get=GetSendDateTime))
    DATE SendDateTime;
    __declspec(property(get=GetSender))
    _bstr_t Sender;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetToRecipients,put=PutToRecipients))
    _variant_t ToRecipients;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetBCCRecipients ( );
    void PutBCCRecipients (
        const _variant_t & _arg1 );
    _variant_t GetCCRecipients ( );
    void PutCCRecipients (
        const _variant_t & _arg1 );
    _variant_t GetEnclosures ( );
    void PutEnclosures (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetReceived ( );
    DATE GetSendDateTime ( );
    _bstr_t GetSender ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t _arg1 );
    _variant_t GetToRecipients ( );
    void PutToRecipients (
        const _variant_t & _arg1 );
    _variant_t GetWhichAddress ( );
    void PutWhichAddress (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024422-0000-0000-c000-000000000046"))
CustomViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomViewPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CustomViewPtr Item (
        const _variant_t & ViewName );
    CustomViewPtr Add (
        _bstr_t ViewName,
        const _variant_t & PrintSettings = vtMissing,
        const _variant_t & RowColSettings = vtMissing );
    CustomViewPtr Get_Default (
        const _variant_t & ViewName );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024423-0000-0000-c000-000000000046"))
CustomView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrintSettings))
    VARIANT_BOOL PrintSettings;
    __declspec(property(get=GetRowColSettings))
    VARIANT_BOOL RowColSettings;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetPrintSettings ( );
    VARIANT_BOOL GetRowColSettings ( );
    HRESULT Show ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024424-0000-0000-c000-000000000046"))
FormatConditions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FormatConditionPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FormatConditionPtr Item (
        const _variant_t & Index );
    FormatConditionPtr Add (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    FormatConditionPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024425-0000-0000-c000-000000000046"))
FormatCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Modify (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetType ( );
    long GetOperator ( );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    InteriorPtr GetInterior ( );
    BordersPtr GetBorders ( );
    FontPtr GetFont ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024426-0000-0000-c000-000000000046"))
Comments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CommentPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CommentPtr Item (
        long Index );
    CommentPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024427-0000-0000-c000-000000000046"))
Comment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    ShapePtr GetShape ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    _bstr_t Text (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Overwrite = vtMissing );
    HRESULT Delete ( );
    CommentPtr Next ( );
    CommentPtr Previous ( );
};

struct __declspec(uuid("0002441b-0000-0000-c000-000000000046"))
RefreshEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeRefresh (
        VARIANT_BOOL * Cancel );
    HRESULT AfterRefresh (
        VARIANT_BOOL Success );
};

struct __declspec(uuid("00024428-0000-0000-c000-000000000046"))
_QueryTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTextFilePromptOnRefresh,put=PutTextFilePromptOnRefresh))
    VARIANT_BOOL TextFilePromptOnRefresh;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetTextFileDecimalSeparator,put=PutTextFileDecimalSeparator))
    _bstr_t TextFileDecimalSeparator;
    __declspec(property(get=GetTextFileThousandsSeparator,put=PutTextFileThousandsSeparator))
    _bstr_t TextFileThousandsSeparator;
    __declspec(property(get=GetWebSelectionType,put=PutWebSelectionType))
    enum XlWebSelectionType WebSelectionType;
    __declspec(property(get=GetWebFormatting,put=PutWebFormatting))
    enum XlWebFormatting WebFormatting;
    __declspec(property(get=GetWebTables,put=PutWebTables))
    _bstr_t WebTables;
    __declspec(property(get=GetWebPreFormattedTextToColumns,put=PutWebPreFormattedTextToColumns))
    VARIANT_BOOL WebPreFormattedTextToColumns;
    __declspec(property(get=GetWebSingleBlockTextImport,put=PutWebSingleBlockTextImport))
    VARIANT_BOOL WebSingleBlockTextImport;
    __declspec(property(get=GetWebDisableDateRecognition,put=PutWebDisableDateRecognition))
    VARIANT_BOOL WebDisableDateRecognition;
    __declspec(property(get=GetWebConsecutiveDelimitersAsOne,put=PutWebConsecutiveDelimitersAsOne))
    VARIANT_BOOL WebConsecutiveDelimitersAsOne;
    __declspec(property(get=GetSourceConnectionFile,put=PutSourceConnectionFile))
    _bstr_t SourceConnectionFile;
    __declspec(property(get=GetSourceDataFile,put=PutSourceDataFile))
    _bstr_t SourceDataFile;
    __declspec(property(get=GetRobustConnect,put=PutRobustConnect))
    enum XlRobustConnect RobustConnect;
    __declspec(property(get=GetDestination))
    RangePtr Destination;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFieldNames,put=PutFieldNames))
    VARIANT_BOOL FieldNames;
    __declspec(property(get=GetRowNumbers,put=PutRowNumbers))
    VARIANT_BOOL RowNumbers;
    __declspec(property(get=GetFillAdjacentFormulas,put=PutFillAdjacentFormulas))
    VARIANT_BOOL FillAdjacentFormulas;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRefreshing))
    VARIANT_BOOL Refreshing;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetFetchedRowOverflow))
    VARIANT_BOOL FetchedRowOverflow;
    __declspec(property(get=GetRefreshStyle,put=PutRefreshStyle))
    enum XlCellInsertionMode RefreshStyle;
    __declspec(property(get=GetPostText,put=PutPostText))
    _bstr_t PostText;
    __declspec(property(get=GetResultRange))
    RangePtr ResultRange;
    __declspec(property(get=GetParameters))
    ParametersPtr Parameters;
    __declspec(property(get=GetTablesOnlyFromHTML,put=PutTablesOnlyFromHTML))
    VARIANT_BOOL TablesOnlyFromHTML;
    __declspec(property(get=GetEnableEditing,put=PutEnableEditing))
    VARIANT_BOOL EnableEditing;
    __declspec(property(get=GetListObject))
    ListObjectPtr ListObject;
    __declspec(property(get=GetTextFileVisualLayout,put=PutTextFileVisualLayout))
    enum XlTextVisualLayoutType TextFileVisualLayout;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum XlQueryType QueryType;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetWebDisableRedirections,put=PutWebDisableRedirections))
    VARIANT_BOOL WebDisableRedirections;
    __declspec(property(get=GetEditWebPage,put=PutEditWebPage))
    _variant_t EditWebPage;
    __declspec(property(get=GetTextFileTrailingMinusNumbers,put=PutTextFileTrailingMinusNumbers))
    VARIANT_BOOL TextFileTrailingMinusNumbers;
    __declspec(property(get=GetTextFilePlatform,put=PutTextFilePlatform))
    long TextFilePlatform;
    __declspec(property(get=GetTextFileStartRow,put=PutTextFileStartRow))
    long TextFileStartRow;
    __declspec(property(get=GetTextFileParseType,put=PutTextFileParseType))
    enum XlTextParsingType TextFileParseType;
    __declspec(property(get=GetTextFileTextQualifier,put=PutTextFileTextQualifier))
    enum XlTextQualifier TextFileTextQualifier;
    __declspec(property(get=GetTextFileConsecutiveDelimiter,put=PutTextFileConsecutiveDelimiter))
    VARIANT_BOOL TextFileConsecutiveDelimiter;
    __declspec(property(get=GetTextFileTabDelimiter,put=PutTextFileTabDelimiter))
    VARIANT_BOOL TextFileTabDelimiter;
    __declspec(property(get=GetTextFileSemicolonDelimiter,put=PutTextFileSemicolonDelimiter))
    VARIANT_BOOL TextFileSemicolonDelimiter;
    __declspec(property(get=GetTextFileCommaDelimiter,put=PutTextFileCommaDelimiter))
    VARIANT_BOOL TextFileCommaDelimiter;
    __declspec(property(get=GetTextFileSpaceDelimiter,put=PutTextFileSpaceDelimiter))
    VARIANT_BOOL TextFileSpaceDelimiter;
    __declspec(property(get=GetTextFileOtherDelimiter,put=PutTextFileOtherDelimiter))
    _bstr_t TextFileOtherDelimiter;
    __declspec(property(get=GetTextFileColumnDataTypes,put=PutTextFileColumnDataTypes))
    _variant_t TextFileColumnDataTypes;
    __declspec(property(get=GetTextFileFixedColumnWidths,put=PutTextFileFixedColumnWidths))
    _variant_t TextFileFixedColumnWidths;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetPreserveColumnInfo,put=PutPreserveColumnInfo))
    VARIANT_BOOL PreserveColumnInfo;
    __declspec(property(get=GetAdjustColumnWidth,put=PutAdjustColumnWidth))
    VARIANT_BOOL AdjustColumnWidth;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetFieldNames ( );
    void PutFieldNames (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRowNumbers ( );
    void PutRowNumbers (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFillAdjacentFormulas ( );
    void PutFillAdjacentFormulas (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRefreshing ( );
    VARIANT_BOOL GetFetchedRowOverflow ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL _arg1 );
    HRESULT CancelRefresh ( );
    enum XlCellInsertionMode GetRefreshStyle ( );
    void PutRefreshStyle (
        enum XlCellInsertionMode _arg1 );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL _arg1 );
    RangePtr GetDestination ( );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & _arg1 );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & _arg1 );
    _bstr_t GetPostText ( );
    void PutPostText (
        _bstr_t _arg1 );
    RangePtr GetResultRange ( );
    HRESULT Delete ( );
    VARIANT_BOOL Refresh (
        const _variant_t & BackgroundQuery = vtMissing );
    ParametersPtr GetParameters ( );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * _arg1 );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTablesOnlyFromHTML ( );
    void PutTablesOnlyFromHTML (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableEditing ( );
    void PutEnableEditing (
        VARIANT_BOOL _arg1 );
    long GetTextFilePlatform ( );
    void PutTextFilePlatform (
        long _arg1 );
    long GetTextFileStartRow ( );
    void PutTextFileStartRow (
        long _arg1 );
    enum XlTextParsingType GetTextFileParseType ( );
    void PutTextFileParseType (
        enum XlTextParsingType _arg1 );
    enum XlTextQualifier GetTextFileTextQualifier ( );
    void PutTextFileTextQualifier (
        enum XlTextQualifier _arg1 );
    VARIANT_BOOL GetTextFileConsecutiveDelimiter ( );
    void PutTextFileConsecutiveDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileTabDelimiter ( );
    void PutTextFileTabDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileSemicolonDelimiter ( );
    void PutTextFileSemicolonDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileCommaDelimiter ( );
    void PutTextFileCommaDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileSpaceDelimiter ( );
    void PutTextFileSpaceDelimiter (
        VARIANT_BOOL _arg1 );
    _bstr_t GetTextFileOtherDelimiter ( );
    void PutTextFileOtherDelimiter (
        _bstr_t _arg1 );
    _variant_t GetTextFileColumnDataTypes ( );
    void PutTextFileColumnDataTypes (
        const _variant_t & _arg1 );
    _variant_t GetTextFileFixedColumnWidths ( );
    void PutTextFileFixedColumnWidths (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPreserveColumnInfo ( );
    void PutPreserveColumnInfo (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAdjustColumnWidth ( );
    void PutAdjustColumnWidth (
        VARIANT_BOOL _arg1 );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & _arg1 );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType _arg1 );
    VARIANT_BOOL GetTextFilePromptOnRefresh ( );
    void PutTextFilePromptOnRefresh (
        VARIANT_BOOL _arg1 );
    enum XlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL _arg1 );
    _bstr_t GetTextFileDecimalSeparator ( );
    void PutTextFileDecimalSeparator (
        _bstr_t _arg1 );
    _bstr_t GetTextFileThousandsSeparator ( );
    void PutTextFileThousandsSeparator (
        _bstr_t _arg1 );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long _arg1 );
    HRESULT ResetTimer ( );
    enum XlWebSelectionType GetWebSelectionType ( );
    void PutWebSelectionType (
        enum XlWebSelectionType _arg1 );
    enum XlWebFormatting GetWebFormatting ( );
    void PutWebFormatting (
        enum XlWebFormatting _arg1 );
    _bstr_t GetWebTables ( );
    void PutWebTables (
        _bstr_t _arg1 );
    VARIANT_BOOL GetWebPreFormattedTextToColumns ( );
    void PutWebPreFormattedTextToColumns (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebSingleBlockTextImport ( );
    void PutWebSingleBlockTextImport (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebDisableDateRecognition ( );
    void PutWebDisableDateRecognition (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebConsecutiveDelimitersAsOne ( );
    void PutWebConsecutiveDelimitersAsOne (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebDisableRedirections ( );
    void PutWebDisableRedirections (
        VARIANT_BOOL _arg1 );
    _variant_t GetEditWebPage ( );
    void PutEditWebPage (
        const _variant_t & _arg1 );
    _bstr_t GetSourceConnectionFile ( );
    void PutSourceConnectionFile (
        _bstr_t _arg1 );
    _bstr_t GetSourceDataFile ( );
    void PutSourceDataFile (
        _bstr_t _arg1 );
    enum XlRobustConnect GetRobustConnect ( );
    void PutRobustConnect (
        enum XlRobustConnect _arg1 );
    VARIANT_BOOL GetTextFileTrailingMinusNumbers ( );
    void PutTextFileTrailingMinusNumbers (
        VARIANT_BOOL _arg1 );
    HRESULT SaveAsODC (
        _bstr_t ODCFileName,
        const _variant_t & Description = vtMissing,
        const _variant_t & Keywords = vtMissing );
    ListObjectPtr GetListObject ( );
    enum XlTextVisualLayoutType GetTextFileVisualLayout ( );
    void PutTextFileVisualLayout (
        enum XlTextVisualLayoutType _arg1 );
};

struct __declspec(uuid("00024429-0000-0000-c000-000000000046"))
QueryTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _QueryTablePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    _QueryTablePtr Add (
        const _variant_t & Connection,
        struct Range * Destination,
        const _variant_t & Sql = vtMissing );
    _QueryTablePtr Item (
        const _variant_t & Index );
    _QueryTablePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002442a-0000-0000-c000-000000000046"))
Parameter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceRange))
    RangePtr SourceRange;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetType))
    enum XlParameterType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDataType,put=PutDataType))
    enum XlParameterDataType DataType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRefreshOnChange,put=PutRefreshOnChange))
    VARIANT_BOOL RefreshOnChange;
    __declspec(property(get=GetPromptString))
    _bstr_t PromptString;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlParameterDataType GetDataType ( );
    void PutDataType (
        enum XlParameterDataType _arg1 );
    enum XlParameterType GetType ( );
    _bstr_t GetPromptString ( );
    _variant_t GetValue ( );
    RangePtr GetSourceRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    HRESULT SetParam (
        enum XlParameterType Type,
        const _variant_t & Value );
    VARIANT_BOOL GetRefreshOnChange ( );
    void PutRefreshOnChange (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002442b-0000-0000-c000-000000000046"))
Parameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ParameterPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ParameterPtr Add (
        _bstr_t Name,
        const _variant_t & iDataType = vtMissing );
    long GetCount ( );
    ParameterPtr Item (
        const _variant_t & Index );
    ParameterPtr Get_Default (
        const _variant_t & Index );
    HRESULT Delete ( );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002442c-0000-0000-c000-000000000046"))
ODBCError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );
};

struct __declspec(uuid("0002442d-0000-0000-c000-000000000046"))
ODBCErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ODBCErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ODBCErrorPtr Item (
        long Index );
    ODBCErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002442f-0000-0000-c000-000000000046"))
Validation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlertStyle))
    long AlertStyle;
    __declspec(property(get=GetIgnoreBlank,put=PutIgnoreBlank))
    VARIANT_BOOL IgnoreBlank;
    __declspec(property(get=GetIMEMode,put=PutIMEMode))
    long IMEMode;
    __declspec(property(get=GetInCellDropdown,put=PutInCellDropdown))
    VARIANT_BOOL InCellDropdown;
    __declspec(property(get=GetErrorMessage,put=PutErrorMessage))
    _bstr_t ErrorMessage;
    __declspec(property(get=GetErrorTitle,put=PutErrorTitle))
    _bstr_t ErrorTitle;
    __declspec(property(get=GetInputMessage,put=PutInputMessage))
    _bstr_t InputMessage;
    __declspec(property(get=GetInputTitle,put=PutInputTitle))
    _bstr_t InputTitle;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetShowError,put=PutShowError))
    VARIANT_BOOL ShowError;
    __declspec(property(get=GetShowInput,put=PutShowInput))
    VARIANT_BOOL ShowInput;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Add (
        enum XlDVType Type,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetAlertStyle ( );
    VARIANT_BOOL GetIgnoreBlank ( );
    void PutIgnoreBlank (
        VARIANT_BOOL _arg1 );
    long GetIMEMode ( );
    void PutIMEMode (
        long _arg1 );
    VARIANT_BOOL GetInCellDropdown ( );
    void PutInCellDropdown (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
    _bstr_t GetErrorMessage ( );
    void PutErrorMessage (
        _bstr_t _arg1 );
    _bstr_t GetErrorTitle ( );
    void PutErrorTitle (
        _bstr_t _arg1 );
    _bstr_t GetInputMessage ( );
    void PutInputMessage (
        _bstr_t _arg1 );
    _bstr_t GetInputTitle ( );
    void PutInputTitle (
        _bstr_t _arg1 );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    HRESULT Modify (
        const _variant_t & Type = vtMissing,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetOperator ( );
    VARIANT_BOOL GetShowError ( );
    void PutShowError (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowInput ( );
    void PutShowInput (
        VARIANT_BOOL _arg1 );
    long GetType ( );
    VARIANT_BOOL GetValue ( );
};

struct __declspec(uuid("00024430-0000-0000-c000-000000000046"))
Hyperlinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HyperlinkPtr _Default[];
    __declspec(property(get=GetItem))
    HyperlinkPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        IDispatch * Anchor,
        _bstr_t Address,
        const _variant_t & SubAddress = vtMissing,
        const _variant_t & ScreenTip = vtMissing,
        const _variant_t & TextToDisplay = vtMissing );
    long GetCount ( );
    HyperlinkPtr GetItem (
        const _variant_t & Index );
    HyperlinkPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024431-0000-0000-c000-000000000046"))
Hyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetScreenTip,put=PutScreenTip))
    _bstr_t ScreenTip;
    __declspec(property(get=GetTextToDisplay,put=PutTextToDisplay))
    _bstr_t TextToDisplay;
    __declspec(property(get=GetEmailSubject,put=PutEmailSubject))
    _bstr_t EmailSubject;
    __declspec(property(get=GetSubAddress,put=PutSubAddress))
    _bstr_t SubAddress;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    RangePtr GetRange ( );
    ShapePtr GetShape ( );
    _bstr_t GetSubAddress ( );
    void PutSubAddress (
        _bstr_t _arg1 );
    _bstr_t GetAddress ( );
    void PutAddress (
        _bstr_t _arg1 );
    long GetType ( );
    HRESULT AddToFavorites ( );
    HRESULT Delete ( );
    HRESULT Follow (
        const _variant_t & NewWindow = vtMissing,
        const _variant_t & AddHistory = vtMissing,
        const _variant_t & ExtraInfo = vtMissing,
        const _variant_t & Method = vtMissing,
        const _variant_t & HeaderInfo = vtMissing );
    _bstr_t GetEmailSubject ( );
    void PutEmailSubject (
        _bstr_t _arg1 );
    _bstr_t GetScreenTip ( );
    void PutScreenTip (
        _bstr_t _arg1 );
    _bstr_t GetTextToDisplay ( );
    void PutTextToDisplay (
        _bstr_t _arg1 );
    HRESULT CreateNewDocument (
        _bstr_t Filename,
        VARIANT_BOOL EditNow,
        VARIANT_BOOL Overwrite );
};

struct __declspec(uuid("00024411-0001-0000-c000-000000000046"))
IDocEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SelectionChange (
        struct Range * Target );
    HRESULT BeforeDoubleClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT BeforeRightClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Calculate ( );
    HRESULT Change (
        struct Range * Target );
    HRESULT FollowHyperlink (
        struct Hyperlink * Target );
    HRESULT PivotTableUpdate (
        struct PivotTable * Target );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SelectionChange (
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_BeforeDoubleClick (
        /*[in]*/ struct Range * Target,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_BeforeRightClick (
        /*[in]*/ struct Range * Target,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
      virtual HRESULT __stdcall raw_Calculate ( ) = 0;
      virtual HRESULT __stdcall raw_Change (
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_FollowHyperlink (
        /*[in]*/ struct Hyperlink * Target ) = 0;
      virtual HRESULT __stdcall raw_PivotTableUpdate (
        /*[in]*/ struct PivotTable * Target ) = 0;
};

struct __declspec(uuid("00024432-0000-0000-c000-000000000046"))
AutoFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetFilters))
    FiltersPtr Filters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetRange ( );
    FiltersPtr GetFilters ( );
};

struct __declspec(uuid("00024433-0000-0000-c000-000000000046"))
Filters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FilterPtr _Default[];
    __declspec(property(get=GetItem))
    FilterPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FilterPtr Get_Default (
        long Index );
    FilterPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024434-0000-0000-c000-000000000046"))
Filter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOn))
    VARIANT_BOOL On;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCriteria1))
    _variant_t Criteria1;
    __declspec(property(get=GetOperator))
    enum XlAutoFilterOperator Operator;
    __declspec(property(get=GetCriteria2))
    _variant_t Criteria2;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetOn ( );
    _variant_t GetCriteria1 ( );
    enum XlAutoFilterOperator GetOperator ( );
    _variant_t GetCriteria2 ( );
};

struct __declspec(uuid("000208d4-0000-0000-c000-000000000046"))
AutoCorrect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayAutoCorrectOptions,put=PutDisplayAutoCorrectOptions))
    VARIANT_BOOL DisplayAutoCorrectOptions;
    __declspec(property(get=GetCorrectSentenceCap,put=PutCorrectSentenceCap))
    VARIANT_BOOL CorrectSentenceCap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCorrectCapsLock,put=PutCorrectCapsLock))
    VARIANT_BOOL CorrectCapsLock;
    __declspec(property(get=GetAutoExpandListRange,put=PutAutoExpandListRange))
    VARIANT_BOOL AutoExpandListRange;
    __declspec(property(get=GetExcelReplaceText,put=PutExcelReplaceText))
    VARIANT_BOOL ExcelReplaceText;
    __declspec(property(get=GetTwoInitialCapitals,put=PutTwoInitialCapitals))
    VARIANT_BOOL TwoInitialCapitals;
    __declspec(property(get=GetCapitalizeNamesOfDays,put=PutCapitalizeNamesOfDays))
    VARIANT_BOOL CapitalizeNamesOfDays;
    __declspec(property(get=GetReplacementList,put=PutReplacementList))
    _variant_t ReplacementList[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddReplacement (
        _bstr_t What,
        _bstr_t Replacement );
    VARIANT_BOOL GetCapitalizeNamesOfDays ( );
    void PutCapitalizeNamesOfDays (
        VARIANT_BOOL _arg1 );
    _variant_t DeleteReplacement (
        _bstr_t What );
    _variant_t GetReplacementList (
        const _variant_t & Index = vtMissing );
    void PutReplacementList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    VARIANT_BOOL GetExcelReplaceText ( );
    void PutExcelReplaceText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTwoInitialCapitals ( );
    void PutTwoInitialCapitals (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCorrectSentenceCap ( );
    void PutCorrectSentenceCap (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCorrectCapsLock ( );
    void PutCorrectCapsLock (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayAutoCorrectOptions ( );
    void PutDisplayAutoCorrectOptions (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoExpandListRange ( );
    void PutAutoExpandListRange (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00020854-0000-0000-c000-000000000046"))
Border : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & _arg1 );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020870-0000-0000-c000-000000000046"))
Interior : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetPatternColorIndex,put=PutPatternColorIndex))
    _variant_t PatternColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    _variant_t InvertIfNegative;
    __declspec(property(get=GetPatternColor,put=PutPatternColor))
    _variant_t PatternColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPattern,put=PutPattern))
    _variant_t Pattern;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    _variant_t GetInvertIfNegative ( );
    void PutInvertIfNegative (
        const _variant_t & _arg1 );
    _variant_t GetPattern ( );
    void PutPattern (
        const _variant_t & _arg1 );
    _variant_t GetPatternColor ( );
    void PutPatternColor (
        const _variant_t & _arg1 );
    _variant_t GetPatternColorIndex ( );
    void PutPatternColorIndex (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024435-0000-0000-c000-000000000046"))
ChartFillFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetBackColor))
    ChartColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor))
    ChartColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    long GradientVariant;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        float Degree );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT UserPicture (
        const _variant_t & PictureFile = vtMissing,
        const _variant_t & PictureFormat = vtMissing,
        const _variant_t & PictureStackUnit = vtMissing,
        const _variant_t & PicturePlacement = vtMissing );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    ChartColorFormatPtr GetBackColor ( );
    ChartColorFormatPtr GetForeColor ( );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    long GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState _arg1 );
};

struct __declspec(uuid("00024436-0000-0000-c000-000000000046"))
ChartColorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    long _Default;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    long SchemeColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetExcelRGB))
    long ExcelRGB;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetSchemeColor ( );
    void PutSchemeColor (
        long _arg1 );
    long GetExcelRGB ( );
    long Get_Default ( );
    long GetType ( );
};

struct __declspec(uuid("00020848-0000-0000-c000-000000000046"))
Axis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisTitle))
    AxisTitlePtr AxisTitle;
    __declspec(property(get=GetDisplayUnit,put=PutDisplayUnit))
    enum XlDisplayUnit DisplayUnit;
    __declspec(property(get=GetDisplayUnitCustom,put=PutDisplayUnitCustom))
    double DisplayUnitCustom;
    __declspec(property(get=GetHasDisplayUnitLabel,put=PutHasDisplayUnitLabel))
    VARIANT_BOOL HasDisplayUnitLabel;
    __declspec(property(get=GetDisplayUnitLabel))
    DisplayUnitLabelPtr DisplayUnitLabel;
    __declspec(property(get=GetMajorGridlines))
    GridlinesPtr MajorGridlines;
    __declspec(property(get=GetMinorGridlines))
    GridlinesPtr MinorGridlines;
    __declspec(property(get=GetTickLabels))
    TickLabelsPtr TickLabels;
    __declspec(property(get=GetBaseUnit,put=PutBaseUnit))
    enum XlTimeUnit BaseUnit;
    __declspec(property(get=GetBaseUnitIsAuto,put=PutBaseUnitIsAuto))
    VARIANT_BOOL BaseUnitIsAuto;
    __declspec(property(get=GetMajorUnitScale,put=PutMajorUnitScale))
    enum XlTimeUnit MajorUnitScale;
    __declspec(property(get=GetMinorUnitScale,put=PutMinorUnitScale))
    enum XlTimeUnit MinorUnitScale;
    __declspec(property(get=GetCategoryType,put=PutCategoryType))
    enum XlCategoryType CategoryType;
    __declspec(property(get=GetHasMajorGridlines,put=PutHasMajorGridlines))
    VARIANT_BOOL HasMajorGridlines;
    __declspec(property(get=GetHasMinorGridlines,put=PutHasMinorGridlines))
    VARIANT_BOOL HasMinorGridlines;
    __declspec(property(get=GetMajorTickMark,put=PutMajorTickMark))
    enum XlTickMark MajorTickMark;
    __declspec(property(get=GetMinorTickMark,put=PutMinorTickMark))
    enum XlTickMark MinorTickMark;
    __declspec(property(get=GetTickLabelPosition,put=PutTickLabelPosition))
    enum XlTickLabelPosition TickLabelPosition;
    __declspec(property(get=GetTickLabelSpacing,put=PutTickLabelSpacing))
    long TickLabelSpacing;
    __declspec(property(get=GetType,put=PutType))
    enum XlAxisType Type;
    __declspec(property(get=GetTickMarkSpacing,put=PutTickMarkSpacing))
    long TickMarkSpacing;
    __declspec(property(get=GetMinimumScale,put=PutMinimumScale))
    double MinimumScale;
    __declspec(property(get=GetMinimumScaleIsAuto,put=PutMinimumScaleIsAuto))
    VARIANT_BOOL MinimumScaleIsAuto;
    __declspec(property(get=GetMaximumScale,put=PutMaximumScale))
    double MaximumScale;
    __declspec(property(get=GetMaximumScaleIsAuto,put=PutMaximumScaleIsAuto))
    VARIANT_BOOL MaximumScaleIsAuto;
    __declspec(property(get=GetMajorUnit,put=PutMajorUnit))
    double MajorUnit;
    __declspec(property(get=GetMajorUnitIsAuto,put=PutMajorUnitIsAuto))
    VARIANT_BOOL MajorUnitIsAuto;
    __declspec(property(get=GetMinorUnit,put=PutMinorUnit))
    double MinorUnit;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetMinorUnitIsAuto,put=PutMinorUnitIsAuto))
    VARIANT_BOOL MinorUnitIsAuto;
    __declspec(property(get=GetScaleType,put=PutScaleType))
    enum XlScaleType ScaleType;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetReversePlotOrder,put=PutReversePlotOrder))
    VARIANT_BOOL ReversePlotOrder;
    __declspec(property(get=GetAxisBetweenCategories,put=PutAxisBetweenCategories))
    VARIANT_BOOL AxisBetweenCategories;
    __declspec(property(get=GetAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetCrosses,put=PutCrosses))
    enum XlAxisCrosses Crosses;
    __declspec(property(get=GetCrossesAt,put=PutCrossesAt))
    double CrossesAt;
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCategoryNames,put=PutCategoryNames))
    _variant_t CategoryNames;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAxisBetweenCategories ( );
    void PutAxisBetweenCategories (
        VARIANT_BOOL _arg1 );
    enum XlAxisGroup GetAxisGroup ( );
    AxisTitlePtr GetAxisTitle ( );
    BorderPtr GetBorder ( );
    _variant_t GetCategoryNames ( );
    void PutCategoryNames (
        const _variant_t & _arg1 );
    enum XlAxisCrosses GetCrosses ( );
    void PutCrosses (
        enum XlAxisCrosses _arg1 );
    double GetCrossesAt ( );
    void PutCrossesAt (
        double _arg1 );
    _variant_t Delete ( );
    VARIANT_BOOL GetHasMajorGridlines ( );
    void PutHasMajorGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasMinorGridlines ( );
    void PutHasMinorGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasTitle ( );
    void PutHasTitle (
        VARIANT_BOOL _arg1 );
    GridlinesPtr GetMajorGridlines ( );
    enum XlTickMark GetMajorTickMark ( );
    void PutMajorTickMark (
        enum XlTickMark _arg1 );
    double GetMajorUnit ( );
    void PutMajorUnit (
        double _arg1 );
    VARIANT_BOOL GetMajorUnitIsAuto ( );
    void PutMajorUnitIsAuto (
        VARIANT_BOOL _arg1 );
    double GetMaximumScale ( );
    void PutMaximumScale (
        double _arg1 );
    VARIANT_BOOL GetMaximumScaleIsAuto ( );
    void PutMaximumScaleIsAuto (
        VARIANT_BOOL _arg1 );
    double GetMinimumScale ( );
    void PutMinimumScale (
        double _arg1 );
    VARIANT_BOOL GetMinimumScaleIsAuto ( );
    void PutMinimumScaleIsAuto (
        VARIANT_BOOL _arg1 );
    GridlinesPtr GetMinorGridlines ( );
    enum XlTickMark GetMinorTickMark ( );
    void PutMinorTickMark (
        enum XlTickMark _arg1 );
    double GetMinorUnit ( );
    void PutMinorUnit (
        double _arg1 );
    VARIANT_BOOL GetMinorUnitIsAuto ( );
    void PutMinorUnitIsAuto (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetReversePlotOrder ( );
    void PutReversePlotOrder (
        VARIANT_BOOL _arg1 );
    enum XlScaleType GetScaleType ( );
    void PutScaleType (
        enum XlScaleType _arg1 );
    _variant_t Select ( );
    enum XlTickLabelPosition GetTickLabelPosition ( );
    void PutTickLabelPosition (
        enum XlTickLabelPosition _arg1 );
    TickLabelsPtr GetTickLabels ( );
    long GetTickLabelSpacing ( );
    void PutTickLabelSpacing (
        long _arg1 );
    long GetTickMarkSpacing ( );
    void PutTickMarkSpacing (
        long _arg1 );
    enum XlAxisType GetType ( );
    void PutType (
        enum XlAxisType _arg1 );
    enum XlTimeUnit GetBaseUnit ( );
    void PutBaseUnit (
        enum XlTimeUnit _arg1 );
    VARIANT_BOOL GetBaseUnitIsAuto ( );
    void PutBaseUnitIsAuto (
        VARIANT_BOOL _arg1 );
    enum XlTimeUnit GetMajorUnitScale ( );
    void PutMajorUnitScale (
        enum XlTimeUnit _arg1 );
    enum XlTimeUnit GetMinorUnitScale ( );
    void PutMinorUnitScale (
        enum XlTimeUnit _arg1 );
    enum XlCategoryType GetCategoryType ( );
    void PutCategoryType (
        enum XlCategoryType _arg1 );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    enum XlDisplayUnit GetDisplayUnit ( );
    void PutDisplayUnit (
        enum XlDisplayUnit _arg1 );
    double GetDisplayUnitCustom ( );
    void PutDisplayUnitCustom (
        double _arg1 );
    VARIANT_BOOL GetHasDisplayUnitLabel ( );
    void PutHasDisplayUnitLabel (
        VARIANT_BOOL _arg1 );
    DisplayUnitLabelPtr GetDisplayUnitLabel ( );
};

struct __declspec(uuid("00020849-0000-0000-c000-000000000046"))
ChartTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("0002084a-0000-0000-c000-000000000046"))
AxisTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020859-0000-0000-c000-000000000046"))
ChartGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVaryByCategories,put=PutVaryByCategories))
    VARIANT_BOOL VaryByCategories;
    __declspec(property(get=GetHasDropLines,put=PutHasDropLines))
    VARIANT_BOOL HasDropLines;
    __declspec(property(get=GetHasHiLoLines,put=PutHasHiLoLines))
    VARIANT_BOOL HasHiLoLines;
    __declspec(property(get=GetFirstSliceAngle,put=PutFirstSliceAngle))
    long FirstSliceAngle;
    __declspec(property(get=GetHasRadarAxisLabels,put=PutHasRadarAxisLabels))
    VARIANT_BOOL HasRadarAxisLabels;
    __declspec(property(get=GetHasSeriesLines,put=PutHasSeriesLines))
    VARIANT_BOOL HasSeriesLines;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHasUpDownBars,put=PutHasUpDownBars))
    VARIANT_BOOL HasUpDownBars;
    __declspec(property(get=GetUpBars))
    UpBarsPtr UpBars;
    __declspec(property(get=GetDownBars))
    DownBarsPtr DownBars;
    __declspec(property(get=GetDropLines))
    DropLinesPtr DropLines;
    __declspec(property(get=GetHiLoLines))
    HiLoLinesPtr HiLoLines;
    __declspec(property(get=GetRadarAxisLabels))
    TickLabelsPtr RadarAxisLabels;
    __declspec(property(get=GetSeriesLines))
    SeriesLinesPtr SeriesLines;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSizeRepresents,put=PutSizeRepresents))
    enum XlSizeRepresents SizeRepresents;
    __declspec(property(get=GetBubbleScale,put=PutBubbleScale))
    long BubbleScale;
    __declspec(property(get=GetShowNegativeBubbles,put=PutShowNegativeBubbles))
    VARIANT_BOOL ShowNegativeBubbles;
    __declspec(property(get=GetSplitType,put=PutSplitType))
    enum XlChartSplitType SplitType;
    __declspec(property(get=GetSplitValue,put=PutSplitValue))
    _variant_t SplitValue;
    __declspec(property(get=GetSecondPlotSize,put=PutSecondPlotSize))
    long SecondPlotSize;
    __declspec(property(get=GetHas3DShading,put=PutHas3DShading))
    VARIANT_BOOL Has3DShading;
    __declspec(property(get=GetDoughnutHoleSize,put=PutDoughnutHoleSize))
    long DoughnutHoleSize;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetSubType,put=PutSubType))
    long SubType;
    __declspec(property(get=GetGapWidth,put=PutGapWidth))
    long GapWidth;
    __declspec(property(get=GetOverlap,put=PutOverlap))
    long Overlap;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup _arg1 );
    long GetDoughnutHoleSize ( );
    void PutDoughnutHoleSize (
        long _arg1 );
    DownBarsPtr GetDownBars ( );
    DropLinesPtr GetDropLines ( );
    long GetFirstSliceAngle ( );
    void PutFirstSliceAngle (
        long _arg1 );
    long GetGapWidth ( );
    void PutGapWidth (
        long _arg1 );
    VARIANT_BOOL GetHasDropLines ( );
    void PutHasDropLines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasHiLoLines ( );
    void PutHasHiLoLines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasRadarAxisLabels ( );
    void PutHasRadarAxisLabels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasSeriesLines ( );
    void PutHasSeriesLines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasUpDownBars ( );
    void PutHasUpDownBars (
        VARIANT_BOOL _arg1 );
    HiLoLinesPtr GetHiLoLines ( );
    long GetIndex ( );
    long GetOverlap ( );
    void PutOverlap (
        long _arg1 );
    TickLabelsPtr GetRadarAxisLabels ( );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing );
    SeriesLinesPtr GetSeriesLines ( );
    long GetSubType ( );
    void PutSubType (
        long _arg1 );
    long GetType ( );
    void PutType (
        long _arg1 );
    UpBarsPtr GetUpBars ( );
    VARIANT_BOOL GetVaryByCategories ( );
    void PutVaryByCategories (
        VARIANT_BOOL _arg1 );
    enum XlSizeRepresents GetSizeRepresents ( );
    void PutSizeRepresents (
        enum XlSizeRepresents _arg1 );
    long GetBubbleScale ( );
    void PutBubbleScale (
        long _arg1 );
    VARIANT_BOOL GetShowNegativeBubbles ( );
    void PutShowNegativeBubbles (
        VARIANT_BOOL _arg1 );
    enum XlChartSplitType GetSplitType ( );
    void PutSplitType (
        enum XlChartSplitType _arg1 );
    _variant_t GetSplitValue ( );
    void PutSplitValue (
        const _variant_t & _arg1 );
    long GetSecondPlotSize ( );
    void PutSecondPlotSize (
        long _arg1 );
    VARIANT_BOOL GetHas3DShading ( );
    void PutHas3DShading (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002085a-0000-0000-c000-000000000046"))
ChartGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ChartGroupPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002085b-0000-0000-c000-000000000046"))
Axes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    AxisPtr Item (
        enum XlAxisType Type,
        enum XlAxisGroup AxisGroup );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020869-0000-0000-c000-000000000046"))
Points : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PointPtr Item (
        long Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002086a-0000-0000-c000-000000000046"))
Point : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetHasDataLabel,put=PutHasDataLabel))
    VARIANT_BOOL HasDataLabel;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetSecondaryPlot,put=PutSecondaryPlot))
    VARIANT_BOOL SecondaryPlot;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    long GetExplosion ( );
    void PutExplosion (
        long _arg1 );
    VARIANT_BOOL GetHasDataLabel ( );
    void PutHasDataLabel (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL _arg1 );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long _arg1 );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle _arg1 );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType _arg1 );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long _arg1 );
    _variant_t Select ( );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSecondaryPlot ( );
    void PutSecondaryPlot (
        VARIANT_BOOL _arg1 );
    ChartFillFormatPtr GetFill ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );
};

struct __declspec(uuid("0002086b-0000-0000-c000-000000000046"))
Series : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetHasDataLabels,put=PutHasDataLabels))
    VARIANT_BOOL HasDataLabels;
    __declspec(property(get=GetHasLeaderLines,put=PutHasLeaderLines))
    VARIANT_BOOL HasLeaderLines;
    __declspec(property(get=GetChartType,put=PutChartType))
    enum XlChartType ChartType;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _bstr_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _bstr_t FormulaR1C1;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _bstr_t FormulaR1C1Local;
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetXValues,put=PutXValues))
    _variant_t XValues;
    __declspec(property(get=GetErrorBars))
    ErrorBarsPtr ErrorBars;
    __declspec(property(get=GetHasErrorBars,put=PutHasErrorBars))
    VARIANT_BOOL HasErrorBars;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetValues,put=PutValues))
    _variant_t Values;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetBubbleSizes,put=PutBubbleSizes))
    _variant_t BubbleSizes;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetPlotOrder,put=PutPlotOrder))
    long PlotOrder;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetHas3DEffect,put=PutHas3DEffect))
    VARIANT_BOOL Has3DEffect;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetLeaderLines))
    LeaderLinesPtr LeaderLines;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup _arg1 );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    IDispatchPtr DataLabels (
        const _variant_t & Index = vtMissing );
    _variant_t Delete ( );
    _variant_t ErrorBar (
        enum XlErrorBarDirection Direction,
        enum XlErrorBarInclude Include,
        enum XlErrorBarType Type,
        const _variant_t & Amount = vtMissing,
        const _variant_t & MinusValues = vtMissing );
    ErrorBarsPtr GetErrorBars ( );
    long GetExplosion ( );
    void PutExplosion (
        long _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetFormulaLocal ( );
    void PutFormulaLocal (
        _bstr_t _arg1 );
    _bstr_t GetFormulaR1C1 ( );
    void PutFormulaR1C1 (
        _bstr_t _arg1 );
    _bstr_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        _bstr_t _arg1 );
    VARIANT_BOOL GetHasDataLabels ( );
    void PutHasDataLabels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasErrorBars ( );
    void PutHasErrorBars (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL _arg1 );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long _arg1 );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType _arg1 );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long _arg1 );
    long GetPlotOrder ( );
    void PutPlotOrder (
        long _arg1 );
    IDispatchPtr Points (
        const _variant_t & Index = vtMissing );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Trendlines (
        const _variant_t & Index = vtMissing );
    long GetType ( );
    void PutType (
        long _arg1 );
    enum XlChartType GetChartType ( );
    void PutChartType (
        enum XlChartType _arg1 );
    HRESULT ApplyCustomType (
        enum XlChartType ChartType );
    _variant_t GetValues ( );
    void PutValues (
        const _variant_t & _arg1 );
    _variant_t GetXValues ( );
    void PutXValues (
        const _variant_t & _arg1 );
    _variant_t GetBubbleSizes ( );
    void PutBubbleSizes (
        const _variant_t & _arg1 );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape _arg1 );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHas3DEffect ( );
    void PutHas3DEffect (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasLeaderLines ( );
    void PutHasLeaderLines (
        VARIANT_BOOL _arg1 );
    LeaderLinesPtr GetLeaderLines ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );
};

struct __declspec(uuid("0002086c-0000-0000-c000-000000000046"))
SeriesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SeriesPtr Add (
        const _variant_t & Source,
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing );
    long GetCount ( );
    _variant_t Extend (
        const _variant_t & Source,
        const _variant_t & Rowcol = vtMissing,
        const _variant_t & CategoryLabels = vtMissing );
    SeriesPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    _variant_t Paste (
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing,
        const _variant_t & NewSeries = vtMissing );
    SeriesPtr NewSeries ( );
};

struct __declspec(uuid("000208b2-0000-0000-c000-000000000046"))
DataLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;
    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL _arg1 );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & _arg1 );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition _arg1 );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL _arg1 );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208b3-0000-0000-c000-000000000046"))
DataLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL _arg1 );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & _arg1 );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition _arg1 );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL _arg1 );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & _arg1 );
    long GetCount ( );
    DataLabelPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208ba-0000-0000-c000-000000000046"))
LegendEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLegendKey))
    LegendKeyPtr LegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    long GetIndex ( );
    LegendKeyPtr GetLegendKey ( );
    _variant_t Select ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
};

struct __declspec(uuid("000208bb-0000-0000-c000-000000000046"))
LegendEntries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    LegendEntryPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208bc-0000-0000-c000-000000000046"))
LegendKey : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    long PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL _arg1 );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long _arg1 );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle _arg1 );
    long GetPictureType ( );
    void PutPictureType (
        long _arg1 );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long _arg1 );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL _arg1 );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208bd-0000-0000-c000-000000000046"))
Trendlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    TrendlinePtr Add (
        enum XlTrendlineType Type,
        const _variant_t & Order = vtMissing,
        const _variant_t & Period = vtMissing,
        const _variant_t & Forward = vtMissing,
        const _variant_t & Backward = vtMissing,
        const _variant_t & Intercept = vtMissing,
        const _variant_t & DisplayEquation = vtMissing,
        const _variant_t & DisplayRSquared = vtMissing,
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    TrendlinePtr Item (
        const _variant_t & Index = vtMissing );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208be-0000-0000-c000-000000000046"))
Trendline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetForward,put=PutForward))
    long Forward;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetType,put=PutType))
    enum XlTrendlineType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPeriod,put=PutPeriod))
    long Period;
    __declspec(property(get=GetBackward,put=PutBackward))
    long Backward;
    __declspec(property(get=GetIntercept,put=PutIntercept))
    double Intercept;
    __declspec(property(get=GetInterceptIsAuto,put=PutInterceptIsAuto))
    VARIANT_BOOL InterceptIsAuto;
    __declspec(property(get=GetNameIsAuto,put=PutNameIsAuto))
    VARIANT_BOOL NameIsAuto;
    __declspec(property(get=GetDisplayRSquared,put=PutDisplayRSquared))
    VARIANT_BOOL DisplayRSquared;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetDisplayEquation,put=PutDisplayEquation))
    VARIANT_BOOL DisplayEquation;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetBackward ( );
    void PutBackward (
        long _arg1 );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    VARIANT_BOOL GetDisplayEquation ( );
    void PutDisplayEquation (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayRSquared ( );
    void PutDisplayRSquared (
        VARIANT_BOOL _arg1 );
    long GetForward ( );
    void PutForward (
        long _arg1 );
    long GetIndex ( );
    double GetIntercept ( );
    void PutIntercept (
        double _arg1 );
    VARIANT_BOOL GetInterceptIsAuto ( );
    void PutInterceptIsAuto (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNameIsAuto ( );
    void PutNameIsAuto (
        VARIANT_BOOL _arg1 );
    long GetOrder ( );
    void PutOrder (
        long _arg1 );
    long GetPeriod ( );
    void PutPeriod (
        long _arg1 );
    _variant_t Select ( );
    enum XlTrendlineType GetType ( );
    void PutType (
        enum XlTrendlineType _arg1 );
};

struct __declspec(uuid("000208c0-0000-0000-c000-000000000046"))
Corners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
};

struct __declspec(uuid("000208c1-0000-0000-c000-000000000046"))
SeriesLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("000208c2-0000-0000-c000-000000000046"))
HiLoLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("000208c3-0000-0000-c000-000000000046"))
Gridlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("000208c4-0000-0000-c000-000000000046"))
DropLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("00024437-0000-0000-c000-000000000046"))
LeaderLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    HRESULT Delete ( );
    HRESULT Select ( );
};

struct __declspec(uuid("000208c5-0000-0000-c000-000000000046"))
UpBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
};

struct __declspec(uuid("000208c6-0000-0000-c000-000000000046"))
DownBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
};

struct __declspec(uuid("000208c7-0000-0000-c000-000000000046"))
Floor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & _arg1 );
    HRESULT Paste ( );
};

struct __declspec(uuid("000208c8-0000-0000-c000-000000000046"))
Walls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    _variant_t PictureUnit;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & _arg1 );
    HRESULT Paste ( );
    _variant_t GetPictureUnit ( );
    void PutPictureUnit (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208c9-0000-0000-c000-000000000046"))
TickLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetDepth))
    long Depth;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlTickLabelOrientation Orientation;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetOffset,put=PutOffset))
    long Offset;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _bstr_t GetName ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    enum XlTickLabelOrientation GetOrientation ( );
    void PutOrientation (
        enum XlTickLabelOrientation _arg1 );
    _variant_t Select ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    long GetDepth ( );
    long GetOffset ( );
    void PutOffset (
        long _arg1 );
    long GetAlignment ( );
    void PutAlignment (
        long _arg1 );
};

struct __declspec(uuid("000208cb-0000-0000-c000-000000000046"))
PlotArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetInsideLeft))
    double InsideLeft;
    __declspec(property(get=GetInsideTop))
    double InsideTop;
    __declspec(property(get=GetInsideWidth))
    double InsideWidth;
    __declspec(property(get=GetInsideHeight))
    double InsideHeight;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    double GetInsideLeft ( );
    double GetInsideTop ( );
    double GetInsideWidth ( );
    double GetInsideHeight ( );
};

struct __declspec(uuid("000208cc-0000-0000-c000-000000000046"))
ChartArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t Copy ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208cd-0000-0000-c000-000000000046"))
Legend : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlLegendPosition Position;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    IDispatchPtr LegendEntries (
        const _variant_t & Index = vtMissing );
    enum XlLegendPosition GetPosition ( );
    void PutPosition (
        enum XlLegendPosition _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t Clear ( );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208ce-0000-0000-c000-000000000046"))
ErrorBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetEndStyle,put=PutEndStyle))
    enum XlEndStyleCap EndStyle;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    _variant_t ClearFormats ( );
    enum XlEndStyleCap GetEndStyle ( );
    void PutEndStyle (
        enum XlEndStyleCap _arg1 );
};

struct __declspec(uuid("00020843-0000-0000-c000-000000000046"))
DataTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetHasBorderHorizontal,put=PutHasBorderHorizontal))
    VARIANT_BOOL HasBorderHorizontal;
    __declspec(property(get=GetHasBorderVertical,put=PutHasBorderVertical))
    VARIANT_BOOL HasBorderVertical;
    __declspec(property(get=GetHasBorderOutline,put=PutHasBorderOutline))
    VARIANT_BOOL HasBorderOutline;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasBorderHorizontal ( );
    void PutHasBorderHorizontal (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasBorderVertical ( );
    void PutHasBorderVertical (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasBorderOutline ( );
    void PutHasBorderOutline (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    FontPtr GetFont ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024438-0000-0000-c000-000000000046"))
Phonetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetCharacterType ( );
    void PutCharacterType (
        long _arg1 );
    long GetAlignment ( );
    void PutAlignment (
        long _arg1 );
    FontPtr GetFont ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
};

struct __declspec(uuid("00024439-0000-0000-c000-000000000046"))
Shape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCanvasItems))
    Office::CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum XlPlacement Placement;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetDrawingObject))
    IDispatchPtr DrawingObject;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetControlFormat))
    ControlFormatPtr ControlFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetFormControlType))
    enum XlFormControl FormControlType;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetID))
    long ID;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    ShapePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType _arg1 );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float _arg1 );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float _arg1 );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float _arg1 );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float _arg1 );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState _arg1 );
    float GetWidth ( );
    void PutWidth (
        float _arg1 );
    long GetZOrderPosition ( );
    HyperlinkPtr GetHyperlink ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode _arg1 );
    IDispatchPtr GetDrawingObject ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    RangePtr GetTopLeftCell ( );
    RangePtr GetBottomRightCell ( );
    enum XlPlacement GetPlacement ( );
    void PutPlacement (
        enum XlPlacement _arg1 );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT CopyPicture (
        const _variant_t & Appearance = vtMissing,
        const _variant_t & Format = vtMissing );
    ControlFormatPtr GetControlFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    OLEFormatPtr GetOLEFormat ( );
    enum XlFormControl GetFormControlType ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t _arg1 );
    Office::ScriptPtr GetScript ( );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagram ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    Office::CanvasShapesPtr GetCanvasItems ( );
    long GetID ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );
};

struct __declspec(uuid("0002443a-0000-0000-c000-000000000046"))
Shapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t Filename,
        enum Office::MsoTriState LinkToFile,
        enum Office::MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum Office::MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr GetRange (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    ShapePtr AddFormControl (
        enum XlFormControl Type,
        long Left,
        long Top,
        long Width,
        long Height );
    ShapePtr AddOLEObject (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    ShapePtr AddDiagram (
        enum Office::MsoDiagramType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddCanvas (
        float Left,
        float Top,
        float Width,
        float Height );
};

struct __declspec(uuid("0002443b-0000-0000-c000-000000000046"))
ShapeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetCanvasItems))
    Office::CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Align (
        enum Office::MsoAlignCmd AlignCmd,
        enum Office::MsoTriState RelativeTo );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Distribute (
        enum Office::MsoDistributeCmd DistributeCmd,
        enum Office::MsoTriState RelativeTo );
    ShapeRangePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    ShapePtr Group ( );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    ShapePtr Regroup ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType _arg1 );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float _arg1 );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float _arg1 );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float _arg1 );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float _arg1 );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState _arg1 );
    float GetWidth ( );
    void PutWidth (
        float _arg1 );
    long GetZOrderPosition ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode _arg1 );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t _arg1 );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagram ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    Office::CanvasShapesPtr GetCanvasItems ( );
    long GetID ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );
};

struct __declspec(uuid("0002443c-0000-0000-c000-000000000046"))
GroupShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapeRangePtr GetRange (
        const _variant_t & Index );
};

struct __declspec(uuid("0002443d-0000-0000-c000-000000000046"))
TextFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetAutoMargins,put=PutAutoMargins))
    VARIANT_BOOL AutoMargins;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float _arg1 );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float _arg1 );
    float GetMarginRight ( );
    void PutMarginRight (
        float _arg1 );
    float GetMarginTop ( );
    void PutMarginTop (
        float _arg1 );
    enum Office::MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum Office::MsoTextOrientation _arg1 );
    CharactersPtr Characters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign _arg1 );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    VARIANT_BOOL GetAutoMargins ( );
    void PutAutoMargins (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002443e-0000-0000-c000-000000000046"))
ConnectorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    long EndConnectionSite;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    enum Office::MsoTriState BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    long BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    enum Office::MsoTriState EndConnected;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT BeginConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT EndDisconnect ( );
    enum Office::MsoTriState GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    long GetBeginConnectionSite ( );
    enum Office::MsoTriState GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    long GetEndConnectionSite ( );
    enum Office::MsoConnectorType GetType ( );
    void PutType (
        enum Office::MsoConnectorType _arg1 );
};

struct __declspec(uuid("0002443f-0000-0000-c000-000000000046"))
FreeformBuilder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        const _variant_t & X2 = vtMissing,
        const _variant_t & Y2 = vtMissing,
        const _variant_t & X3 = vtMissing,
        const _variant_t & Y3 = vtMissing );
    ShapePtr ConvertToShape ( );
};

struct __declspec(uuid("00024440-0000-0000-c000-000000000046"))
ControlFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListCount,put=PutListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddItem (
        _bstr_t Text,
        const _variant_t & Index = vtMissing );
    HRESULT RemoveAllItems ( );
    HRESULT RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    long GetListCount ( );
    void PutListCount (
        long _arg1 );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
};

struct __declspec(uuid("00024441-0000-0000-c000-000000000046"))
OLEFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    IDispatchPtr GetObject ( );
    _bstr_t GetprogID ( );
    HRESULT Verb (
        const _variant_t & Verb = vtMissing );
};

struct __declspec(uuid("00024442-0000-0000-c000-000000000046"))
LinkFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    HRESULT Update ( );
};

struct __declspec(uuid("00024443-0000-0000-c000-000000000046"))
PublishObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PublishObjectPtr _Default[];
    __declspec(property(get=GetItem))
    PublishObjectPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    PublishObjectPtr Add (
        enum XlSourceType SourceType,
        _bstr_t Filename,
        const _variant_t & Sheet = vtMissing,
        const _variant_t & Source = vtMissing,
        const _variant_t & HtmlType = vtMissing,
        const _variant_t & DivID = vtMissing,
        const _variant_t & Title = vtMissing );
    long GetCount ( );
    PublishObjectPtr GetItem (
        const _variant_t & Index );
    PublishObjectPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
    HRESULT Publish ( );
};

struct __declspec(uuid("00024445-0000-0000-c000-000000000046"))
OLEDBError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetNative))
    long Native;
    __declspec(property(get=GetStage))
    long Stage;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );
    long GetNative ( );
    long GetNumber ( );
    long GetStage ( );
};

struct __declspec(uuid("00024446-0000-0000-c000-000000000046"))
OLEDBErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    OLEDBErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    OLEDBErrorPtr Item (
        long Index );
    OLEDBErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024447-0000-0000-c000-000000000046"))
Phonetics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    long Start;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    long GetStart ( );
    long GetLength ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetCharacterType ( );
    void PutCharacterType (
        long _arg1 );
    long GetAlignment ( );
    void PutAlignment (
        long _arg1 );
    FontPtr GetFont ( );
    IDispatchPtr GetItem (
        long Index );
    HRESULT Delete ( );
    HRESULT Add (
        long Start,
        long Length,
        _bstr_t Text );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    IDispatchPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002444a-0000-0000-c000-000000000046"))
PivotLayout : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotFields))
    IDispatchPtr PivotFields[];
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotCache))
    PivotCachePtr PivotCache;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPivotFields (
        const _variant_t & Index = vtMissing );
    CubeFieldsPtr GetCubeFields ( );
    PivotCachePtr GetPivotCache ( );
    PivotTablePtr GetPivotTable ( );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t _arg1 );
    HRESULT AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AppendField = vtMissing );
};

struct __declspec(uuid("0002084c-0000-0000-c000-000000000046"))
DisplayUnitLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024450-0000-0000-c000-000000000046"))
CellFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior,put=PutRefInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(get=GetBorders,put=PutRefBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BordersPtr GetBorders ( );
    void PutRefBorders (
        struct Borders * _arg1 );
    FontPtr GetFont ( );
    void PutRefFont (
        struct Font * _arg1 );
    InteriorPtr GetInterior ( );
    void PutRefInterior (
        struct Interior * _arg1 );
    _variant_t GetNumberFormat ( );
    void PutNumberFormat (
        const _variant_t & _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & _arg1 );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & _arg1 );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & _arg1 );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & _arg1 );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & _arg1 );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & _arg1 );
    HRESULT Clear ( );
};

struct __declspec(uuid("00024451-0000-0000-c000-000000000046"))
UsedObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );
};

struct __declspec(uuid("00024452-0000-0000-c000-000000000046"))
CustomProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomPropertyPtr _Default[];
    __declspec(property(get=GetItem))
    CustomPropertyPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    CustomPropertyPtr Add (
        _bstr_t Name,
        const _variant_t & Value );
    long GetCount ( );
    CustomPropertyPtr Get_Default (
        const _variant_t & Index );
    CustomPropertyPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024453-0000-0000-c000-000000000046"))
CustomProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _variant_t _Default;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    _variant_t Get_Default ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024454-0000-0000-c000-000000000046"))
CalculatedMembers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CalculatedMemberPtr _Default[];
    __declspec(property(get=GetItem))
    CalculatedMemberPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CalculatedMemberPtr GetItem (
        const _variant_t & Index );
    CalculatedMemberPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    CalculatedMemberPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & SolveOrder = vtMissing,
        const _variant_t & Type = vtMissing );
};

struct __declspec(uuid("00024455-0000-0000-c000-000000000046"))
CalculatedMember : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFormula))
    _bstr_t Formula;
    __declspec(property(get=GetSolveOrder))
    long SolveOrder;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetType))
    enum XlCalculatedMemberType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetFormula ( );
    _bstr_t GetSourceName ( );
    long GetSolveOrder ( );
    VARIANT_BOOL GetIsValid ( );
    _bstr_t Get_Default ( );
    HRESULT Delete ( );
    enum XlCalculatedMemberType GetType ( );
};

struct __declspec(uuid("00024456-0000-0000-c000-000000000046"))
Watches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WatchPtr _Default[];
    __declspec(property(get=GetItem))
    WatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    WatchPtr Add (
        const _variant_t & Source );
    long GetCount ( );
    WatchPtr Get_Default (
        const _variant_t & Index );
    WatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024457-0000-0000-c000-000000000046"))
Watch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSource))
    _variant_t Source;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _variant_t GetSource ( );
};

struct __declspec(uuid("00024458-0000-0000-c000-000000000046"))
PivotCell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetDataField))
    PivotFieldPtr DataField;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotCellType))
    enum XlPivotCellType PivotCellType;
    __declspec(property(get=GetRowItems))
    PivotItemListPtr RowItems;
    __declspec(property(get=GetColumnItems))
    PivotItemListPtr ColumnItems;
    __declspec(property(get=GetCustomSubtotalFunction))
    enum XlConsolidationFunction CustomSubtotalFunction;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDummy18))
    _bstr_t Dummy18;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotCellType GetPivotCellType ( );
    PivotTablePtr GetPivotTable ( );
    PivotFieldPtr GetDataField ( );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotItemListPtr GetRowItems ( );
    PivotItemListPtr GetColumnItems ( );
    RangePtr GetRange ( );
    _bstr_t GetDummy18 ( );
    enum XlConsolidationFunction GetCustomSubtotalFunction ( );
};

struct __declspec(uuid("00024459-0000-0000-c000-000000000046"))
Graphic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetBrightness ( );
    void PutBrightness (
        float _arg1 );
    enum Office::MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum Office::MsoPictureColorType _arg1 );
    float GetContrast ( );
    void PutContrast (
        float _arg1 );
    float GetCropBottom ( );
    void PutCropBottom (
        float _arg1 );
    float GetCropLeft ( );
    void PutCropLeft (
        float _arg1 );
    float GetCropRight ( );
    void PutCropRight (
        float _arg1 );
    float GetCropTop ( );
    void PutCropTop (
        float _arg1 );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t _arg1 );
    float GetHeight ( );
    void PutHeight (
        float _arg1 );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState _arg1 );
    float GetWidth ( );
    void PutWidth (
        float _arg1 );
};

struct __declspec(uuid("0002445a-0000-0000-c000-000000000046"))
AutoRecover : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;
    __declspec(property(get=GetTime,put=PutTime))
    long Time;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetTime ( );
    void PutTime (
        long _arg1 );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002445b-0000-0000-c000-000000000046"))
ErrorCheckingOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUnlockedFormulaCells,put=PutUnlockedFormulaCells))
    VARIANT_BOOL UnlockedFormulaCells;
    __declspec(property(get=GetEmptyCellReferences,put=PutEmptyCellReferences))
    VARIANT_BOOL EmptyCellReferences;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetListDataValidation,put=PutListDataValidation))
    VARIANT_BOOL ListDataValidation;
    __declspec(property(get=GetBackgroundChecking,put=PutBackgroundChecking))
    VARIANT_BOOL BackgroundChecking;
    __declspec(property(get=GetIndicatorColorIndex,put=PutIndicatorColorIndex))
    enum XlColorIndex IndicatorColorIndex;
    __declspec(property(get=GetEvaluateToError,put=PutEvaluateToError))
    VARIANT_BOOL EvaluateToError;
    __declspec(property(get=GetTextDate,put=PutTextDate))
    VARIANT_BOOL TextDate;
    __declspec(property(get=GetNumberAsText,put=PutNumberAsText))
    VARIANT_BOOL NumberAsText;
    __declspec(property(get=GetInconsistentFormula,put=PutInconsistentFormula))
    VARIANT_BOOL InconsistentFormula;
    __declspec(property(get=GetOmittedCells,put=PutOmittedCells))
    VARIANT_BOOL OmittedCells;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundChecking ( );
    void PutBackgroundChecking (
        VARIANT_BOOL _arg1 );
    enum XlColorIndex GetIndicatorColorIndex ( );
    void PutIndicatorColorIndex (
        enum XlColorIndex _arg1 );
    VARIANT_BOOL GetEvaluateToError ( );
    void PutEvaluateToError (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextDate ( );
    void PutTextDate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetNumberAsText ( );
    void PutNumberAsText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetInconsistentFormula ( );
    void PutInconsistentFormula (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetOmittedCells ( );
    void PutOmittedCells (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUnlockedFormulaCells ( );
    void PutUnlockedFormulaCells (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEmptyCellReferences ( );
    void PutEmptyCellReferences (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetListDataValidation ( );
    void PutListDataValidation (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002445c-0000-0000-c000-000000000046"))
Errors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ErrorPtr _Default[];
    __declspec(property(get=GetItem))
    ErrorPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ErrorPtr GetItem (
        const _variant_t & Index );
    ErrorPtr Get_Default (
        const _variant_t & Index );
};

struct __declspec(uuid("0002445d-0000-0000-c000-000000000046"))
Error : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIgnore,put=PutIgnore))
    VARIANT_BOOL Ignore;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetValue ( );
    VARIANT_BOOL GetIgnore ( );
    void PutIgnore (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002445e-0000-0000-c000-000000000046"))
SmartTagAction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetType))
    enum XlSmartTagControlType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPresentInPane))
    VARIANT_BOOL PresentInPane;
    __declspec(property(get=GetExpandHelp,put=PutExpandHelp))
    VARIANT_BOOL ExpandHelp;
    __declspec(property(get=GetCheckboxState,put=PutCheckboxState))
    VARIANT_BOOL CheckboxState;
    __declspec(property(get=GetTextboxText,put=PutTextboxText))
    _bstr_t TextboxText;
    __declspec(property(get=GetListSelection,put=PutListSelection))
    long ListSelection;
    __declspec(property(get=GetRadioGroupSelection,put=PutRadioGroupSelection))
    long RadioGroupSelection;
    __declspec(property(get=GetActiveXControl))
    IDispatchPtr ActiveXControl;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    HRESULT Execute ( );
    _bstr_t Get_Default ( );
    enum XlSmartTagControlType GetType ( );
    VARIANT_BOOL GetPresentInPane ( );
    VARIANT_BOOL GetExpandHelp ( );
    void PutExpandHelp (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCheckboxState ( );
    void PutCheckboxState (
        VARIANT_BOOL _arg1 );
    _bstr_t GetTextboxText ( );
    void PutTextboxText (
        _bstr_t _arg1 );
    long GetListSelection ( );
    void PutListSelection (
        long _arg1 );
    long GetRadioGroupSelection ( );
    void PutRadioGroupSelection (
        long _arg1 );
    IDispatchPtr GetActiveXControl ( );
};

struct __declspec(uuid("0002445f-0000-0000-c000-000000000046"))
SmartTagActions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagActionPtr _Default[];
    __declspec(property(get=GetItem))
    SmartTagActionPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    SmartTagActionPtr Get_Default (
        const _variant_t & Index );
    SmartTagActionPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024460-0000-0000-c000-000000000046"))
SmartTag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetDownloadURL))
    _bstr_t DownloadURL;
    __declspec(property(get=GetXML))
    _bstr_t XML;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetSmartTagActions))
    SmartTagActionsPtr SmartTagActions;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProperties))
    CustomPropertiesPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetDownloadURL ( );
    _bstr_t GetName ( );
    _bstr_t Get_Default ( );
    _bstr_t GetXML ( );
    RangePtr GetRange ( );
    HRESULT Delete ( );
    SmartTagActionsPtr GetSmartTagActions ( );
    CustomPropertiesPtr GetProperties ( );
};

struct __declspec(uuid("00024461-0000-0000-c000-000000000046"))
SmartTags : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SmartTagPtr Add (
        _bstr_t SmartTagType );
    long GetCount ( );
    SmartTagPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024462-0000-0000-c000-000000000046"))
SmartTagRecognizer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    _bstr_t GetprogID ( );
    _bstr_t Get_Default ( );
    _bstr_t GetFullName ( );
};

struct __declspec(uuid("00024463-0000-0000-c000-000000000046"))
SmartTagRecognizers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagRecognizerPtr _Default[];
    __declspec(property(get=GetRecognize,put=PutRecognize))
    VARIANT_BOOL Recognize;
    __declspec(property(get=GetItem))
    SmartTagRecognizerPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    SmartTagRecognizerPtr GetItem (
        const _variant_t & Index );
    SmartTagRecognizerPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL GetRecognize ( );
    void PutRecognize (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00024464-0000-0000-c000-000000000046"))
SmartTagOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplaySmartTags,put=PutDisplaySmartTags))
    enum XlSmartTagDisplayMode DisplaySmartTags;
    __declspec(property(get=GetEmbedSmartTags,put=PutEmbedSmartTags))
    VARIANT_BOOL EmbedSmartTags;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlSmartTagDisplayMode GetDisplaySmartTags ( );
    void PutDisplaySmartTags (
        enum XlSmartTagDisplayMode _arg1 );
    VARIANT_BOOL GetEmbedSmartTags ( );
    void PutEmbedSmartTags (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00024465-0000-0000-c000-000000000046"))
SpellingOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDictLang,put=PutDictLang))
    long DictLang;
    __declspec(property(get=GetUserDict,put=PutUserDict))
    _bstr_t UserDict;
    __declspec(property(get=GetIgnoreCaps,put=PutIgnoreCaps))
    VARIANT_BOOL IgnoreCaps;
    __declspec(property(get=GetSuggestMainOnly,put=PutSuggestMainOnly))
    VARIANT_BOOL SuggestMainOnly;
    __declspec(property(get=GetIgnoreMixedDigits,put=PutIgnoreMixedDigits))
    VARIANT_BOOL IgnoreMixedDigits;
    __declspec(property(get=GetIgnoreFileNames,put=PutIgnoreFileNames))
    VARIANT_BOOL IgnoreFileNames;
    __declspec(property(get=GetGermanPostReform,put=PutGermanPostReform))
    VARIANT_BOOL GermanPostReform;
    __declspec(property(get=GetKoreanCombineAux,put=PutKoreanCombineAux))
    VARIANT_BOOL KoreanCombineAux;
    __declspec(property(get=GetKoreanUseAutoChangeList,put=PutKoreanUseAutoChangeList))
    VARIANT_BOOL KoreanUseAutoChangeList;
    __declspec(property(get=GetKoreanProcessCompound,put=PutKoreanProcessCompound))
    VARIANT_BOOL KoreanProcessCompound;
    __declspec(property(get=GetHebrewModes,put=PutHebrewModes))
    enum XlHebrewModes HebrewModes;
    __declspec(property(get=GetArabicModes,put=PutArabicModes))
    enum XlArabicModes ArabicModes;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetDictLang ( );
    void PutDictLang (
        long _arg1 );
    _bstr_t GetUserDict ( );
    void PutUserDict (
        _bstr_t _arg1 );
    VARIANT_BOOL GetIgnoreCaps ( );
    void PutIgnoreCaps (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSuggestMainOnly ( );
    void PutSuggestMainOnly (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIgnoreMixedDigits ( );
    void PutIgnoreMixedDigits (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIgnoreFileNames ( );
    void PutIgnoreFileNames (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetGermanPostReform ( );
    void PutGermanPostReform (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetKoreanCombineAux ( );
    void PutKoreanCombineAux (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetKoreanUseAutoChangeList ( );
    void PutKoreanUseAutoChangeList (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetKoreanProcessCompound ( );
    void PutKoreanProcessCompound (
        VARIANT_BOOL _arg1 );
    enum XlHebrewModes GetHebrewModes ( );
    void PutHebrewModes (
        enum XlHebrewModes _arg1 );
    enum XlArabicModes GetArabicModes ( );
    void PutArabicModes (
        enum XlArabicModes _arg1 );
};

struct __declspec(uuid("00024466-0000-0000-c000-000000000046"))
Speech : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    enum XlSpeakDirection Direction;
    __declspec(property(get=GetSpeakCellOnEnter,put=PutSpeakCellOnEnter))
    VARIANT_BOOL SpeakCellOnEnter;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Speak (
        _bstr_t Text,
        const _variant_t & SpeakAsync = vtMissing,
        const _variant_t & SpeakXML = vtMissing,
        const _variant_t & Purge = vtMissing );
    enum XlSpeakDirection GetDirection ( );
    void PutDirection (
        enum XlSpeakDirection _arg1 );
    VARIANT_BOOL GetSpeakCellOnEnter ( );
    void PutSpeakCellOnEnter (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00024467-0000-0000-c000-000000000046"))
Protection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowFormattingCells))
    VARIANT_BOOL AllowFormattingCells;
    __declspec(property(get=GetAllowFormattingColumns))
    VARIANT_BOOL AllowFormattingColumns;
    __declspec(property(get=GetAllowFormattingRows))
    VARIANT_BOOL AllowFormattingRows;
    __declspec(property(get=GetAllowInsertingColumns))
    VARIANT_BOOL AllowInsertingColumns;
    __declspec(property(get=GetAllowInsertingRows))
    VARIANT_BOOL AllowInsertingRows;
    __declspec(property(get=GetAllowInsertingHyperlinks))
    VARIANT_BOOL AllowInsertingHyperlinks;
    __declspec(property(get=GetAllowDeletingColumns))
    VARIANT_BOOL AllowDeletingColumns;
    __declspec(property(get=GetAllowDeletingRows))
    VARIANT_BOOL AllowDeletingRows;
    __declspec(property(get=GetAllowSorting))
    VARIANT_BOOL AllowSorting;
    __declspec(property(get=GetAllowFiltering))
    VARIANT_BOOL AllowFiltering;
    __declspec(property(get=GetAllowUsingPivotTables))
    VARIANT_BOOL AllowUsingPivotTables;
    __declspec(property(get=GetAllowEditRanges))
    AllowEditRangesPtr AllowEditRanges;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetAllowFormattingCells ( );
    VARIANT_BOOL GetAllowFormattingColumns ( );
    VARIANT_BOOL GetAllowFormattingRows ( );
    VARIANT_BOOL GetAllowInsertingColumns ( );
    VARIANT_BOOL GetAllowInsertingRows ( );
    VARIANT_BOOL GetAllowInsertingHyperlinks ( );
    VARIANT_BOOL GetAllowDeletingColumns ( );
    VARIANT_BOOL GetAllowDeletingRows ( );
    VARIANT_BOOL GetAllowSorting ( );
    VARIANT_BOOL GetAllowFiltering ( );
    VARIANT_BOOL GetAllowUsingPivotTables ( );
    AllowEditRangesPtr GetAllowEditRanges ( );
};

struct __declspec(uuid("00024468-0000-0000-c000-000000000046"))
PivotItemList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024469-0000-0000-c000-000000000046"))
Tab : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    enum XlColorIndex ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    enum XlColorIndex GetColorIndex ( );
    void PutColorIndex (
        enum XlColorIndex _arg1 );
};

struct __declspec(uuid("0002446a-0000-0000-c000-000000000046"))
AllowEditRanges : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AllowEditRangePtr _Default[];
    __declspec(property(get=GetItem))
    AllowEditRangePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    AllowEditRangePtr GetItem (
        const _variant_t & Index );
    AllowEditRangePtr Add (
        _bstr_t Title,
        struct Range * Range,
        const _variant_t & Password = vtMissing );
    AllowEditRangePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024467-0001-0000-c000-000000000046"))
IProtection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowFormattingCells))
    VARIANT_BOOL AllowFormattingCells;
    __declspec(property(get=GetAllowFormattingColumns))
    VARIANT_BOOL AllowFormattingColumns;
    __declspec(property(get=GetAllowFormattingRows))
    VARIANT_BOOL AllowFormattingRows;
    __declspec(property(get=GetAllowInsertingColumns))
    VARIANT_BOOL AllowInsertingColumns;
    __declspec(property(get=GetAllowInsertingRows))
    VARIANT_BOOL AllowInsertingRows;
    __declspec(property(get=GetAllowInsertingHyperlinks))
    VARIANT_BOOL AllowInsertingHyperlinks;
    __declspec(property(get=GetAllowDeletingColumns))
    VARIANT_BOOL AllowDeletingColumns;
    __declspec(property(get=GetAllowDeletingRows))
    VARIANT_BOOL AllowDeletingRows;
    __declspec(property(get=GetAllowSorting))
    VARIANT_BOOL AllowSorting;
    __declspec(property(get=GetAllowFiltering))
    VARIANT_BOOL AllowFiltering;
    __declspec(property(get=GetAllowUsingPivotTables))
    VARIANT_BOOL AllowUsingPivotTables;
    __declspec(property(get=GetAllowEditRanges))
    AllowEditRangesPtr AllowEditRanges;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAllowFormattingCells ( );
    VARIANT_BOOL GetAllowFormattingColumns ( );
    VARIANT_BOOL GetAllowFormattingRows ( );
    VARIANT_BOOL GetAllowInsertingColumns ( );
    VARIANT_BOOL GetAllowInsertingRows ( );
    VARIANT_BOOL GetAllowInsertingHyperlinks ( );
    VARIANT_BOOL GetAllowDeletingColumns ( );
    VARIANT_BOOL GetAllowDeletingRows ( );
    VARIANT_BOOL GetAllowSorting ( );
    VARIANT_BOOL GetAllowFiltering ( );
    VARIANT_BOOL GetAllowUsingPivotTables ( );
    AllowEditRangesPtr GetAllowEditRanges ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AllowFormattingCells (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowFormattingColumns (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowFormattingRows (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowInsertingColumns (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowInsertingRows (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowInsertingHyperlinks (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowDeletingColumns (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowDeletingRows (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowSorting (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowFiltering (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowUsingPivotTables (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowEditRanges (
        /*[out,retval]*/ struct AllowEditRanges * * RHS ) = 0;
};

struct __declspec(uuid("0002446b-0000-0000-c000-000000000046"))
AllowEditRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange,put=PutRefRange))
    RangePtr Range;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetUsers))
    UserAccessListPtr Users;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t _arg1 );
    RangePtr GetRange ( );
    void PutRefRange (
        struct Range * _arg1 );
    HRESULT ChangePassword (
        _bstr_t Password );
    HRESULT Delete ( );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    UserAccessListPtr GetUsers ( );
};

struct __declspec(uuid("0002446a-0001-0000-c000-000000000046"))
IAllowEditRanges : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AllowEditRangePtr _Default[];
    __declspec(property(get=GetItem))
    AllowEditRangePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    AllowEditRangePtr GetItem (
        const _variant_t & Index );
    AllowEditRangePtr Add (
        _bstr_t Title,
        struct Range * Range,
        const _variant_t & Password = vtMissing );
    AllowEditRangePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AllowEditRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Title,
        /*[in]*/ struct Range * Range,
        /*[in]*/ VARIANT Password,
        /*[out,retval]*/ struct AllowEditRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AllowEditRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002446c-0000-0000-c000-000000000046"))
UserAccessList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    UserAccessPtr _Default[];
    __declspec(property(get=GetItem))
    UserAccessPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    UserAccessPtr GetItem (
        const _variant_t & Index );
    UserAccessPtr Add (
        _bstr_t Name,
        VARIANT_BOOL AllowEdit );
    HRESULT DeleteAll ( );
    UserAccessPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002446b-0001-0000-c000-000000000046"))
IAllowEditRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange,put=PutRefRange))
    RangePtr Range;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetUsers))
    UserAccessListPtr Users;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t RHS );
    RangePtr GetRange ( );
    void PutRefRange (
        struct Range * RHS );
    HRESULT ChangePassword (
        _bstr_t Password );
    HRESULT Delete ( );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    UserAccessListPtr GetUsers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Range (
        /*[in]*/ struct Range * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChangePassword (
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Users (
        /*[out,retval]*/ struct UserAccessList * * RHS ) = 0;
};

struct __declspec(uuid("0002446d-0000-0000-c000-000000000046"))
UserAccess : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowEdit,put=PutAllowEdit))
    VARIANT_BOOL AllowEdit;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetName ( );
    VARIANT_BOOL GetAllowEdit ( );
    void PutAllowEdit (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
};

struct __declspec(uuid("0002446c-0001-0000-c000-000000000046"))
IUserAccessList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    UserAccessPtr _Default[];
    __declspec(property(get=GetItem))
    UserAccessPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    UserAccessPtr GetItem (
        const _variant_t & Index );
    UserAccessPtr Add (
        _bstr_t Name,
        VARIANT_BOOL AllowEdit );
    HRESULT DeleteAll ( );
    UserAccessPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct UserAccess * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL AllowEdit,
        /*[out,retval]*/ struct UserAccess * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DeleteAll ( ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct UserAccess * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002446e-0000-0000-c000-000000000046"))
RTD : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetThrottleInterval,put=PutThrottleInterval))
    long ThrottleInterval;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetThrottleInterval ( );
    void PutThrottleInterval (
        long _arg1 );
    HRESULT RefreshData ( );
    HRESULT RestartServers ( );
};

struct __declspec(uuid("0002446f-0000-0000-c000-000000000046"))
Diagram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNodes))
    DiagramNodesPtr Nodes;
    __declspec(property(get=GetType))
    enum Office::MsoDiagramType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DiagramNodesPtr GetNodes ( );
    enum Office::MsoDiagramType GetType ( );
    enum Office::MsoTriState GetAutoLayout ( );
    void PutAutoLayout (
        enum Office::MsoTriState _arg1 );
    enum Office::MsoTriState GetReverse ( );
    void PutReverse (
        enum Office::MsoTriState _arg1 );
    enum Office::MsoTriState GetAutoFormat ( );
    void PutAutoFormat (
        enum Office::MsoTriState _arg1 );
    HRESULT Convert (
        enum Office::MsoDiagramType Type );
    HRESULT FitText ( );
};

struct __declspec(uuid("00024470-0000-0000-c000-000000000046"))
ListObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ListObjectPtr _Default[];
    __declspec(property(get=GetItem))
    ListObjectPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ListObjectPtr Add (
        enum XlListObjectSourceType SourceType,
        const _variant_t & Source,
        const _variant_t & LinkSource,
        enum XlYesNoGuess XlListObjectHasHeaders,
        const _variant_t & Destination = vtMissing );
    ListObjectPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ListObjectPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
};

struct __declspec(uuid("00024471-0000-0000-c000-000000000046"))
ListObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetDataBodyRange))
    RangePtr DataBodyRange;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetHeaderRowRange))
    RangePtr HeaderRowRange;
    __declspec(property(get=GetInsertRowRange))
    RangePtr InsertRowRange;
    __declspec(property(get=GetListColumns))
    ListColumnsPtr ListColumns;
    __declspec(property(get=GetListRows))
    ListRowsPtr ListRows;
    __declspec(property(get=GetQueryTable))
    _QueryTablePtr QueryTable;
    __declspec(property(get=GetDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetShowAutoFilter,put=PutShowAutoFilter))
    VARIANT_BOOL ShowAutoFilter;
    __declspec(property(get=GetShowTotals,put=PutShowTotals))
    VARIANT_BOOL ShowTotals;
    __declspec(property(get=GetSourceType))
    enum XlListObjectSourceType SourceType;
    __declspec(property(get=GetTotalsRowRange))
    RangePtr TotalsRowRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSharePointURL))
    _bstr_t SharePointURL;
    __declspec(property(get=GetXmlMap))
    XmlMapPtr XmlMap;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Publish (
        const _variant_t & Target,
        VARIANT_BOOL LinkSource );
    HRESULT Refresh ( );
    HRESULT Unlink ( );
    HRESULT Unlist ( );
    HRESULT UpdateChanges (
        enum XlListConflict iConflictType );
    HRESULT Resize (
        struct Range * Range );
    _bstr_t Get_Default ( );
    VARIANT_BOOL GetActive ( );
    RangePtr GetDataBodyRange ( );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    RangePtr GetHeaderRowRange ( );
    RangePtr GetInsertRowRange ( );
    ListColumnsPtr GetListColumns ( );
    ListRowsPtr GetListRows ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _QueryTablePtr GetQueryTable ( );
    RangePtr GetRange ( );
    VARIANT_BOOL GetShowAutoFilter ( );
    void PutShowAutoFilter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowTotals ( );
    void PutShowTotals (
        VARIANT_BOOL _arg1 );
    enum XlListObjectSourceType GetSourceType ( );
    RangePtr GetTotalsRowRange ( );
    _bstr_t GetSharePointURL ( );
    XmlMapPtr GetXmlMap ( );
};

struct __declspec(uuid("00024472-0000-0000-c000-000000000046"))
ListColumns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ListColumnPtr _Default[];
    __declspec(property(get=GetItem))
    ListColumnPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ListColumnPtr Add (
        const _variant_t & Position = vtMissing );
    ListColumnPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ListColumnPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
};

struct __declspec(uuid("00024473-0000-0000-c000-000000000046"))
ListColumn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetListDataFormat))
    ListDataFormatPtr ListDataFormat;
    __declspec(property(get=GetTotalsCalculation,put=PutTotalsCalculation))
    enum XlTotalsCalculation TotalsCalculation;
    __declspec(property(get=GetXPath))
    XPathPtr XPath;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSharePointFormula))
    _bstr_t SharePointFormula;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Get_Default ( );
    ListDataFormatPtr GetListDataFormat ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    RangePtr GetRange ( );
    enum XlTotalsCalculation GetTotalsCalculation ( );
    void PutTotalsCalculation (
        enum XlTotalsCalculation _arg1 );
    XPathPtr GetXPath ( );
    _bstr_t GetSharePointFormula ( );
};

struct __declspec(uuid("00024474-0000-0000-c000-000000000046"))
ListRows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ListRowPtr _Default[];
    __declspec(property(get=GetItem))
    ListRowPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ListRowPtr Add (
        const _variant_t & Position = vtMissing );
    ListRowPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ListRowPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
};

struct __declspec(uuid("00024475-0000-0000-c000-000000000046"))
ListRow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetInvalidData))
    VARIANT_BOOL InvalidData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    long GetIndex ( );
    VARIANT_BOOL GetInvalidData ( );
    RangePtr GetRange ( );
};

struct __declspec(uuid("00024476-0000-0000-c000-000000000046"))
XmlNamespace : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetUri))
    _bstr_t Uri;
    __declspec(property(get=GetPrefix))
    _bstr_t Prefix;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    _bstr_t GetUri ( );
    _bstr_t GetPrefix ( );
};

struct __declspec(uuid("00024477-0000-0000-c000-000000000046"))
XmlNamespaces : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    XmlNamespacePtr _Default[];
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetItem))
    XmlNamespacePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlNamespacePtr Get_Default (
        const _variant_t & Index );
    XmlNamespacePtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    _bstr_t GetValue ( );
    IUnknownPtr Get_NewEnum ( );
    HRESULT InstallManifest (
        _bstr_t Path,
        const _variant_t & InstallForAllUsers = vtMissing );
};

struct __declspec(uuid("00024478-0000-0000-c000-000000000046"))
XmlDataBinding : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSourceUrl))
    _bstr_t SourceUrl;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    enum XlXmlImportResult Refresh ( );
    HRESULT LoadSettings (
        _bstr_t Url );
    HRESULT ClearSettings ( );
    _bstr_t GetSourceUrl ( );
};

struct __declspec(uuid("00024479-0000-0000-c000-000000000046"))
XmlSchema : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNamespace))
    XmlNamespacePtr Namespace;
    __declspec(property(get=GetXML))
    _bstr_t XML;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlNamespacePtr GetNamespace ( );
    _bstr_t GetXML ( );
    _bstr_t GetName ( );
};

struct __declspec(uuid("0002447a-0000-0000-c000-000000000046"))
XmlSchemas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    XmlSchemaPtr _Default[];
    __declspec(property(get=GetItem))
    XmlSchemaPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlSchemaPtr Get_Default (
        const _variant_t & Index );
    XmlSchemaPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002447b-0000-0000-c000-000000000046"))
XmlMap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetSaveDataSourceDefinition,put=PutSaveDataSourceDefinition))
    VARIANT_BOOL SaveDataSourceDefinition;
    __declspec(property(get=GetPreserveColumnFilter,put=PutPreserveColumnFilter))
    VARIANT_BOOL PreserveColumnFilter;
    __declspec(property(get=GetPreserveNumberFormatting,put=PutPreserveNumberFormatting))
    VARIANT_BOOL PreserveNumberFormatting;
    __declspec(property(get=GetAppendOnImport,put=PutAppendOnImport))
    VARIANT_BOOL AppendOnImport;
    __declspec(property(get=GetRootElementName))
    _bstr_t RootElementName;
    __declspec(property(get=GetRootElementNamespace))
    XmlNamespacePtr RootElementNamespace;
    __declspec(property(get=GetSchemas))
    XmlSchemasPtr Schemas;
    __declspec(property(get=GetDataBinding))
    XmlDataBindingPtr DataBinding;
    __declspec(property(get=GetAdjustColumnWidth,put=PutAdjustColumnWidth))
    VARIANT_BOOL AdjustColumnWidth;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsExportable))
    VARIANT_BOOL IsExportable;
    __declspec(property(get=GetShowImportExportValidationErrors,put=PutShowImportExportValidationErrors))
    VARIANT_BOOL ShowImportExportValidationErrors;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetIsExportable ( );
    VARIANT_BOOL GetShowImportExportValidationErrors ( );
    void PutShowImportExportValidationErrors (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSaveDataSourceDefinition ( );
    void PutSaveDataSourceDefinition (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAdjustColumnWidth ( );
    void PutAdjustColumnWidth (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPreserveColumnFilter ( );
    void PutPreserveColumnFilter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPreserveNumberFormatting ( );
    void PutPreserveNumberFormatting (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAppendOnImport ( );
    void PutAppendOnImport (
        VARIANT_BOOL _arg1 );
    _bstr_t GetRootElementName ( );
    XmlNamespacePtr GetRootElementNamespace ( );
    XmlSchemasPtr GetSchemas ( );
    XmlDataBindingPtr GetDataBinding ( );
    HRESULT Delete ( );
    enum XlXmlImportResult Import (
        _bstr_t Url,
        const _variant_t & Overwrite = vtMissing );
    enum XlXmlImportResult ImportXml (
        _bstr_t XmlData,
        const _variant_t & Overwrite = vtMissing );
    enum XlXmlExportResult Export (
        _bstr_t Url,
        const _variant_t & Overwrite = vtMissing );
    enum XlXmlExportResult ExportXml (
        BSTR * Data );
};

struct __declspec(uuid("00024412-0001-0000-c000-000000000046"))
IWorkbookEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Open ( );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT BeforeClose (
        VARIANT_BOOL * Cancel );
    HRESULT BeforeSave (
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT BeforePrint (
        VARIANT_BOOL * Cancel );
    HRESULT NewSheet (
        IDispatch * Sh );
    HRESULT AddinInstall ( );
    HRESULT AddinUninstall ( );
    HRESULT WindowResize (
        struct Window * Wn );
    HRESULT WindowActivate (
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct Window * Wn );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
    HRESULT SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target );
    HRESULT PivotTableCloseConnection (
        struct PivotTable * Target );
    HRESULT PivotTableOpenConnection (
        struct PivotTable * Target );
    HRESULT Sync (
        enum Office::MsoSyncEventType SyncEventType );
    HRESULT BeforeXmlImport (
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL IsRefresh,
        VARIANT_BOOL * Cancel );
    HRESULT AfterXmlImport (
        struct XmlMap * Map,
        VARIANT_BOOL IsRefresh,
        enum XlXmlImportResult Result );
    HRESULT BeforeXmlExport (
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL * Cancel );
    HRESULT AfterXmlExport (
        struct XmlMap * Map,
        _bstr_t Url,
        enum XlXmlExportResult Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Open ( ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
      virtual HRESULT __stdcall raw_BeforeClose (
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_BeforeSave (
        /*[in]*/ VARIANT_BOOL SaveAsUI,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_BeforePrint (
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_NewSheet (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_AddinInstall ( ) = 0;
      virtual HRESULT __stdcall raw_AddinUninstall ( ) = 0;
      virtual HRESULT __stdcall raw_WindowResize (
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowActivate (
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowDeactivate (
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_SheetSelectionChange (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_SheetBeforeDoubleClick (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SheetBeforeRightClick (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SheetActivate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetDeactivate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetCalculate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetChange (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_SheetFollowHyperlink (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Hyperlink * Target ) = 0;
      virtual HRESULT __stdcall raw_SheetPivotTableUpdate (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct PivotTable * Target ) = 0;
      virtual HRESULT __stdcall raw_PivotTableCloseConnection (
        /*[in]*/ struct PivotTable * Target ) = 0;
      virtual HRESULT __stdcall raw_PivotTableOpenConnection (
        /*[in]*/ struct PivotTable * Target ) = 0;
      virtual HRESULT __stdcall raw_Sync (
        /*[in]*/ enum Office::MsoSyncEventType SyncEventType ) = 0;
      virtual HRESULT __stdcall raw_BeforeXmlImport (
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR Url,
        /*[in]*/ VARIANT_BOOL IsRefresh,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_AfterXmlImport (
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ VARIANT_BOOL IsRefresh,
        /*[in]*/ enum XlXmlImportResult Result ) = 0;
      virtual HRESULT __stdcall raw_BeforeXmlExport (
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR Url,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_AfterXmlExport (
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR Url,
        /*[in]*/ enum XlXmlExportResult Result ) = 0;
};

struct __declspec(uuid("0002447c-0000-0000-c000-000000000046"))
XmlMaps : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    XmlMapPtr _Default[];
    __declspec(property(get=GetItem))
    XmlMapPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlMapPtr Add (
        _bstr_t Schema,
        const _variant_t & RootElementName = vtMissing );
    XmlMapPtr Get_Default (
        const _variant_t & Index );
    XmlMapPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002447d-0000-0000-c000-000000000046"))
ListDataFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    enum XlListDataType _Default;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetChoices))
    _variant_t Choices;
    __declspec(property(get=GetDecimalPlaces))
    long DecimalPlaces;
    __declspec(property(get=GetDefaultValue))
    _variant_t DefaultValue;
    __declspec(property(get=GetIsPercent))
    VARIANT_BOOL IsPercent;
    __declspec(property(get=Getlcid))
    long lcid;
    __declspec(property(get=GetMaxCharacters))
    long MaxCharacters;
    __declspec(property(get=GetMaxNumber))
    _variant_t MaxNumber;
    __declspec(property(get=GetMinNumber))
    _variant_t MinNumber;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRequired))
    VARIANT_BOOL Required;
    __declspec(property(get=GetType))
    enum XlListDataType Type;
    __declspec(property(get=GetAllowFillIn))
    VARIANT_BOOL AllowFillIn;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlListDataType Get_Default ( );
    _variant_t GetChoices ( );
    long GetDecimalPlaces ( );
    _variant_t GetDefaultValue ( );
    VARIANT_BOOL GetIsPercent ( );
    long Getlcid ( );
    long GetMaxCharacters ( );
    _variant_t GetMaxNumber ( );
    _variant_t GetMinNumber ( );
    VARIANT_BOOL GetRequired ( );
    enum XlListDataType GetType ( );
    VARIANT_BOOL GetReadOnly ( );
    VARIANT_BOOL GetAllowFillIn ( );
};

struct __declspec(uuid("0002447e-0000-0000-c000-000000000046"))
XPath : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMap))
    XmlMapPtr Map;
    __declspec(property(get=GetRepeating))
    VARIANT_BOOL Repeating;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    _bstr_t GetValue ( );
    XmlMapPtr GetMap ( );
    HRESULT SetValue (
        struct XmlMap * Map,
        _bstr_t XPath,
        const _variant_t & SelectionNamespace = vtMissing,
        const _variant_t & Repeating = vtMissing );
    HRESULT Clear ( );
    VARIANT_BOOL GetRepeating ( );
};

struct __declspec(uuid("0002442e-0001-0000-c000-000000000046"))
IDummy : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT _ActiveSheetOrChart ( );
    HRESULT ExcelRGB ( );
    HRESULT ChDir ( );
    HRESULT DoScript ( );
    HRESULT DirectObject ( );
    HRESULT RefreshDocument ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw__ActiveSheetOrChart ( ) = 0;
      virtual HRESULT __stdcall raw_ExcelRGB ( ) = 0;
      virtual HRESULT __stdcall raw_ChDir ( ) = 0;
      virtual HRESULT __stdcall raw_DoScript ( ) = 0;
      virtual HRESULT __stdcall raw_DirectObject ( ) = 0;
      virtual HRESULT __stdcall raw_RefreshDocument ( ) = 0;
};

struct __declspec(uuid("0002444f-0001-0000-c000-000000000046"))
ICanvasShapes : IDispatch
{};

struct __declspec(uuid("59191da1-ea47-11ce-a51f-00aa0061507f"))
QueryTable;
    // [ default ] dispinterface _QueryTable
    // [ default, source ] dispinterface RefreshEvents

struct __declspec(uuid("00024500-0000-0000-c000-000000000046"))
Application;
    // [ default ] interface _Application
    // [ default, source ] dispinterface AppEvents

struct __declspec(uuid("00020892-0001-0000-c000-000000000046"))
IWindows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WindowPtr _Default[];
    __declspec(property(get=GetSyncScrollingSideBySide,put=PutSyncScrollingSideBySide))
    VARIANT_BOOL SyncScrollingSideBySide;
    __declspec(property(get=GetItem))
    WindowPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Arrange (
        enum XlArrangeStyle ArrangeStyle,
        const _variant_t & ActiveWorkbook = vtMissing,
        const _variant_t & SyncHorizontal = vtMissing,
        const _variant_t & SyncVertical = vtMissing );
    long GetCount ( );
    WindowPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    WindowPtr Get_Default (
        const _variant_t & Index );
    VARIANT_BOOL CompareSideBySideWith (
        const _variant_t & WindowName );
    VARIANT_BOOL BreakSideBySide ( );
    VARIANT_BOOL GetSyncScrollingSideBySide ( );
    void PutSyncScrollingSideBySide (
        VARIANT_BOOL RHS );
    HRESULT ResetPositionsSideBySide ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Arrange (
        /*[in]*/ enum XlArrangeStyle ArrangeStyle,
        /*[in]*/ VARIANT ActiveWorkbook,
        /*[in]*/ VARIANT SyncHorizontal,
        /*[in]*/ VARIANT SyncVertical,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CompareSideBySideWith (
        /*[in]*/ VARIANT WindowName,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_BreakSideBySide (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_SyncScrollingSideBySide (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SyncScrollingSideBySide (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_ResetPositionsSideBySide ( ) = 0;
};

struct __declspec(uuid("00020845-0001-0000-c000-000000000046"))
IWorksheetFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _WSFunction (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Count (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL IsNA (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsError (
        const _variant_t & Arg1 );
    double Sum (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Average (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Min (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Max (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Npv (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double StDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _bstr_t Dollar (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Fixed (
        double Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing );
    double Pi ( );
    double Ln (
        double Arg1 );
    double Log10 (
        double Arg1 );
    double Round (
        double Arg1,
        double Arg2 );
    _variant_t Lookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Index (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _bstr_t Rept (
        _bstr_t Arg1,
        double Arg2 );
    VARIANT_BOOL And (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL Or (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DCount (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DSum (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DAverage (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMin (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMax (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DStDev (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Var (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DVar (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t Text (
        const _variant_t & Arg1,
        _bstr_t Arg2 );
    _variant_t LinEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Trend (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t LogEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Growth (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    double Pv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Fv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double NPer (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Pmt (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Rate (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double MIrr (
        const _variant_t & Arg1,
        double Arg2,
        double Arg3 );
    double Irr (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Match (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Weekday (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Search (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Transpose (
        const _variant_t & Arg1 );
    double Atan2 (
        double Arg1,
        double Arg2 );
    double Asin (
        double Arg1 );
    double Acos (
        double Arg1 );
    _variant_t Choose (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t HLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    _variant_t VLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Log (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Proper (
        _bstr_t Arg1 );
    _bstr_t Trim (
        _bstr_t Arg1 );
    _bstr_t Replace (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    _bstr_t Substitute (
        _bstr_t Arg1,
        _bstr_t Arg2,
        _bstr_t Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Find (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    VARIANT_BOOL IsErr (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsText (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsNumber (
        const _variant_t & Arg1 );
    double Sln (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Syd (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double Ddb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _bstr_t Clean (
        _bstr_t Arg1 );
    double MDeterm (
        const _variant_t & Arg1 );
    _variant_t MInverse (
        const _variant_t & Arg1 );
    _variant_t MMult (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Ipmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double Ppmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double CountA (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Product (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Fact (
        double Arg1 );
    double DProduct (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsNonText (
        const _variant_t & Arg1 );
    double StDevP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double VarP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DStDevP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DVarP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsLogical (
        const _variant_t & Arg1 );
    double DCountA (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t USDollar (
        double Arg1,
        double Arg2 );
    double FindB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    double SearchB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _bstr_t ReplaceB (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    double RoundUp (
        double Arg1,
        double Arg2 );
    double RoundDown (
        double Arg1,
        double Arg2 );
    double Rank (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Days360 (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Vdb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        double Arg5,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing );
    double Median (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumProduct (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Sinh (
        double Arg1 );
    double Cosh (
        double Arg1 );
    double Tanh (
        double Arg1 );
    double Asinh (
        double Arg1 );
    double Acosh (
        double Arg1 );
    double Atanh (
        double Arg1 );
    _variant_t DGet (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Db (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _variant_t Frequency (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double AveDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double BetaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double GammaLn (
        double Arg1 );
    double BetaInv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double BinomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double ChiDist (
        double Arg1,
        double Arg2 );
    double ChiInv (
        double Arg1,
        double Arg2 );
    double Combin (
        double Arg1,
        double Arg2 );
    double Confidence (
        double Arg1,
        double Arg2,
        double Arg3 );
    double CritBinom (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Even (
        double Arg1 );
    double ExponDist (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double FDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double FInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Fisher (
        double Arg1 );
    double FisherInv (
        double Arg1 );
    double Floor (
        double Arg1,
        double Arg2 );
    double GammaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double GammaInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Ceiling (
        double Arg1,
        double Arg2 );
    double HypGeomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double LogNormDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double LogInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NegBinomDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double NormSDist (
        double Arg1 );
    double NormInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormSInv (
        double Arg1 );
    double Standardize (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Odd (
        double Arg1 );
    double Permut (
        double Arg1,
        double Arg2 );
    double Poisson (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double TDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Weibull (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double SumXMY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2MY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2PY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double ChiTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Correl (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Covar (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Forecast (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double FTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Intercept (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Pearson (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double RSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double StEyx (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Slope (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double TTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        double Arg4 );
    double Prob (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing );
    double DevSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double GeoMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double HarMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Kurt (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Skew (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double ZTest (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Large (
        const _variant_t & Arg1,
        double Arg2 );
    double Small (
        const _variant_t & Arg1,
        double Arg2 );
    double Quartile (
        const _variant_t & Arg1,
        double Arg2 );
    double Percentile (
        const _variant_t & Arg1,
        double Arg2 );
    double PercentRank (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Mode (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double TrimMean (
        const _variant_t & Arg1,
        double Arg2 );
    double TInv (
        double Arg1,
        double Arg2 );
    double Power (
        double Arg1,
        double Arg2 );
    double Radians (
        double Arg1 );
    double Degrees (
        double Arg1 );
    double Subtotal (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumIf (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double CountIf (
        struct Range * Arg1,
        const _variant_t & Arg2 );
    double CountBlank (
        struct Range * Arg1 );
    double Ispmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    _bstr_t Roman (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Asc (
        _bstr_t Arg1 );
    _bstr_t Dbcs (
        _bstr_t Arg1 );
    _bstr_t Phonetic (
        struct Range * Arg1 );
    _bstr_t BahtText (
        double Arg1 );
    _bstr_t ThaiDayOfWeek (
        double Arg1 );
    _bstr_t ThaiDigit (
        _bstr_t Arg1 );
    _bstr_t ThaiMonthOfYear (
        double Arg1 );
    _bstr_t ThaiNumSound (
        double Arg1 );
    _bstr_t ThaiNumString (
        double Arg1 );
    double ThaiStringLength (
        _bstr_t Arg1 );
    VARIANT_BOOL IsThaiDigit (
        _bstr_t Arg1 );
    double RoundBahtDown (
        double Arg1 );
    double RoundBahtUp (
        double Arg1 );
    double ThaiYear (
        double Arg1 );
    _variant_t RTD (
        const _variant_t & progID,
        const _variant_t & server,
        const _variant_t & topic1,
        const _variant_t & topic2 = vtMissing,
        const _variant_t & topic3 = vtMissing,
        const _variant_t & topic4 = vtMissing,
        const _variant_t & topic5 = vtMissing,
        const _variant_t & topic6 = vtMissing,
        const _variant_t & topic7 = vtMissing,
        const _variant_t & topic8 = vtMissing,
        const _variant_t & topic9 = vtMissing,
        const _variant_t & topic10 = vtMissing,
        const _variant_t & topic11 = vtMissing,
        const _variant_t & topic12 = vtMissing,
        const _variant_t & topic13 = vtMissing,
        const _variant_t & topic14 = vtMissing,
        const _variant_t & topic15 = vtMissing,
        const _variant_t & topic16 = vtMissing,
        const _variant_t & topic17 = vtMissing,
        const _variant_t & topic18 = vtMissing,
        const _variant_t & topic19 = vtMissing,
        const _variant_t & topic20 = vtMissing,
        const _variant_t & topic21 = vtMissing,
        const _variant_t & topic22 = vtMissing,
        const _variant_t & topic23 = vtMissing,
        const _variant_t & topic24 = vtMissing,
        const _variant_t & topic25 = vtMissing,
        const _variant_t & topic26 = vtMissing,
        const _variant_t & topic27 = vtMissing,
        const _variant_t & topic28 = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__WSFunction (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Count (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsNA (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsError (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Sum (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Average (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Min (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Max (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Npv (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_StDev (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dollar (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Fixed (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Pi (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ln (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Log10 (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Round (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Lookup (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Index (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rept (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_And (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Or (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_DCount (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DSum (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DAverage (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DMin (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DMax (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DStDev (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Var (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DVar (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Text (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ BSTR Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_LinEst (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Trend (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_LogEst (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Growth (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Pv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Fv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NPer (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Pmt (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rate (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_MIrr (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Irr (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Match (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Weekday (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Search (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Transpose (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Atan2 (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Asin (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Acos (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Choose (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_HLookup (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_VLookup (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Log (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Proper (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Trim (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ BSTR Arg4,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Substitute (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ BSTR Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsErr (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsText (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsNumber (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Sln (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Syd (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ddb (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Clean (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_MDeterm (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_MInverse (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_MMult (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ipmt (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ppmt (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CountA (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Product (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Fact (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DProduct (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsNonText (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_StDevP (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_VarP (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DStDevP (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DVarP (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsLogical (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_DCountA (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_USDollar (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_FindB (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SearchB (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ReplaceB (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ BSTR Arg4,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_RoundUp (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_RoundDown (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rank (
        /*[in]*/ double Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Days360 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Vdb (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ double Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Median (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumProduct (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Sinh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cosh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Tanh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Asinh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Acosh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Atanh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DGet (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Db (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Frequency (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AveDev (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_BetaDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_GammaLn (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_BetaInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_BinomDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT_BOOL Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChiDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChiInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Combin (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Confidence (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CritBinom (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Even (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ExponDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT_BOOL Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_FDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_FInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Fisher (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_FisherInv (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Floor (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_GammaDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT_BOOL Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_GammaInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ceiling (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_HypGeomDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_LogNormDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_LogInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NegBinomDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NormDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT_BOOL Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NormSDist (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NormInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NormSInv (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Standardize (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Odd (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Permut (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Poisson (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT_BOOL Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_TDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Weibull (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT_BOOL Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumXMY2 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumX2MY2 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumX2PY2 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChiTest (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Correl (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Covar (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Forecast (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_FTest (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Intercept (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Pearson (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_RSq (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_StEyx (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Slope (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_TTest (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Prob (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DevSq (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_GeoMean (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_HarMean (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumSq (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Kurt (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Skew (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ZTest (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Large (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Small (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Quartile (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Percentile (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_PercentRank (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Mode (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_TrimMean (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_TInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Power (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Radians (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Degrees (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Subtotal (
        /*[in]*/ double Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumIf (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CountIf (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CountBlank (
        /*[in]*/ struct Range * Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ispmt (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Roman (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Asc (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dbcs (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Phonetic (
        /*[in]*/ struct Range * Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_BahtText (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiDayOfWeek (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiDigit (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiMonthOfYear (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiNumSound (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiNumString (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiStringLength (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsThaiDigit (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_RoundBahtDown (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_RoundBahtUp (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiYear (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_RTD (
        /*[in]*/ VARIANT progID,
        /*[in]*/ VARIANT server,
        /*[in]*/ VARIANT topic1,
        /*[in]*/ VARIANT topic2,
        /*[in]*/ VARIANT topic3,
        /*[in]*/ VARIANT topic4,
        /*[in]*/ VARIANT topic5,
        /*[in]*/ VARIANT topic6,
        /*[in]*/ VARIANT topic7,
        /*[in]*/ VARIANT topic8,
        /*[in]*/ VARIANT topic9,
        /*[in]*/ VARIANT topic10,
        /*[in]*/ VARIANT topic11,
        /*[in]*/ VARIANT topic12,
        /*[in]*/ VARIANT topic13,
        /*[in]*/ VARIANT topic14,
        /*[in]*/ VARIANT topic15,
        /*[in]*/ VARIANT topic16,
        /*[in]*/ VARIANT topic17,
        /*[in]*/ VARIANT topic18,
        /*[in]*/ VARIANT topic19,
        /*[in]*/ VARIANT topic20,
        /*[in]*/ VARIANT topic21,
        /*[in]*/ VARIANT topic22,
        /*[in]*/ VARIANT topic23,
        /*[in]*/ VARIANT topic24,
        /*[in]*/ VARIANT topic25,
        /*[in]*/ VARIANT topic26,
        /*[in]*/ VARIANT topic27,
        /*[in]*/ VARIANT topic28,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208d7-0000-0000-c000-000000000046"))
Sheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    HRESULT FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type,
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[in]*/ VARIANT Type,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_FillAcrossSheets (
        /*[in]*/ struct Range * Range,
        /*[in]*/ enum XlFillWith Type,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("00024404-0001-0000-c000-000000000046"))
IHPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    HPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HPageBreakPtr GetItem (
        long Index );
    HPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HPageBreakPtr Add (
        IDispatch * Before );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct HPageBreak * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct HPageBreak * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Before,
        /*[out,retval]*/ struct HPageBreak * * RHS ) = 0;
};

struct __declspec(uuid("00024405-0001-0000-c000-000000000046"))
IVPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    VPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    VPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    VPageBreakPtr GetItem (
        long Index );
    VPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    VPageBreakPtr Add (
        IDispatch * Before );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct VPageBreak * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct VPageBreak * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Before,
        /*[out,retval]*/ struct VPageBreak * * RHS ) = 0;
};

struct __declspec(uuid("00024406-0001-0000-c000-000000000046"))
IRecentFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RecentFilePtr _Default[];
    __declspec(property(get=GetItem))
    RecentFilePtr Item[];
    __declspec(property(get=GetMaximum,put=PutMaximum))
    long Maximum;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetMaximum ( );
    void PutMaximum (
        long RHS );
    long GetCount ( );
    RecentFilePtr GetItem (
        long Index );
    RecentFilePtr Get_Default (
        long Index );
    RecentFilePtr Add (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Maximum (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct RecentFile * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct RecentFile * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct RecentFile * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208d8-0000-0000-c000-000000000046"))
_Worksheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetScrollArea,put=PutScrollArea))
    _bstr_t ScrollArea;
    __declspec(property(get=GetQueryTables))
    QueryTablesPtr QueryTables;
    __declspec(property(get=GetDisplayPageBreaks,put=PutDisplayPageBreaks))
    VARIANT_BOOL DisplayPageBreaks;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft[];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetConsolidationFunction))
    enum XlConsolidationFunction ConsolidationFunction[];
    __declspec(property(get=GetConsolidationOptions))
    _variant_t ConsolidationOptions[];
    __declspec(property(get=GetConsolidationSources))
    _variant_t ConsolidationSources[];
    __declspec(property(get=GetAutoFilterMode,put=PutAutoFilterMode))
    VARIANT_BOOL AutoFilterMode[];
    __declspec(property(get=GetAutoFilter))
    AutoFilterPtr AutoFilter;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetFilterMode))
    VARIANT_BOOL FilterMode[];
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMailEnvelope))
    Office::IMsoEnvelopeVBPtr MailEnvelope;
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetCustomProperties))
    CustomPropertiesPtr CustomProperties;
    __declspec(property(get=GetTab))
    TabPtr Tab;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetEnableAutoFilter,put=PutEnableAutoFilter))
    VARIANT_BOOL EnableAutoFilter[];
    __declspec(property(get=GetEnableOutlining,put=PutEnableOutlining))
    VARIANT_BOOL EnableOutlining[];
    __declspec(property(get=GetEnablePivotTable,put=PutEnablePivotTable))
    VARIANT_BOOL EnablePivotTable[];
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetListObjects))
    ListObjectsPtr ListObjects;
    __declspec(property(get=GetProtection))
    ProtectionPtr Protection;
    __declspec(property(get=GetTransitionExpEval,put=PutTransitionExpEval))
    VARIANT_BOOL TransitionExpEval[];
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects[];
    __declspec(property(get=GetProtectScenarios))
    VARIANT_BOOL ProtectScenarios[];
    __declspec(property(get=GetOnCalculate,put=PutOnCalculate))
    _bstr_t OnCalculate[];
    __declspec(property(get=GetTransitionFormEntry,put=PutTransitionFormEntry))
    VARIANT_BOOL TransitionFormEntry[];
    __declspec(property(get=GetOnEntry,put=PutOnEntry))
    _bstr_t OnEntry[];
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetCircularReference))
    RangePtr CircularReference[];
    __declspec(property(get=GetOnData,put=PutOnData))
    _bstr_t OnData[];
    __declspec(property(get=GetStandardHeight))
    double StandardHeight[];
    __declspec(property(get=GetUsedRange))
    RangePtr UsedRange[];
    __declspec(property(get=GetStandardWidth,put=PutStandardWidth))
    double StandardWidth[];
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetDisplayAutomaticPageBreaks,put=PutDisplayAutomaticPageBreaks))
    VARIANT_BOOL DisplayAutomaticPageBreaks[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    long _DisplayRightToLeft[];
    __declspec(property(get=GetOutline))
    OutlinePtr Outline;
    __declspec(property(get=GetEnableCalculation,put=PutEnableCalculation))
    VARIANT_BOOL EnableCalculation;
    __declspec(property(get=GetEnableSelection,put=PutEnableSelection))
    enum XlEnableSelection EnableSelection;
    __declspec(property(get=GetType))
    enum XlSheetType Type[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectDrawingObjects (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    VARIANT_BOOL GetProtectScenarios (
        long lcid = 0 );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    VARIANT_BOOL GetTransitionExpEval (
        long lcid = 0 );
    void PutTransitionExpEval (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetAutoFilterMode (
        long lcid = 0 );
    void PutAutoFilterMode (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT SetBackgroundPicture (
        _bstr_t Filename );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Calculate (
        long lcid = 0 );
    VARIANT_BOOL GetEnableCalculation ( );
    void PutEnableCalculation (
        VARIANT_BOOL RHS );
    RangePtr GetCells ( );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        long lcid = 0 );
    RangePtr GetCircularReference (
        long lcid = 0 );
    HRESULT ClearArrows (
        long lcid = 0 );
    RangePtr GetColumns ( );
    enum XlConsolidationFunction GetConsolidationFunction (
        long lcid = 0 );
    _variant_t GetConsolidationOptions (
        long lcid = 0 );
    _variant_t GetConsolidationSources (
        long lcid = 0 );
    VARIANT_BOOL GetDisplayAutomaticPageBreaks (
        long lcid = 0 );
    void PutDisplayAutomaticPageBreaks (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableAutoFilter (
        long lcid = 0 );
    void PutEnableAutoFilter (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlEnableSelection GetEnableSelection ( );
    void PutEnableSelection (
        enum XlEnableSelection RHS );
    VARIANT_BOOL GetEnableOutlining (
        long lcid = 0 );
    void PutEnableOutlining (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnablePivotTable (
        long lcid = 0 );
    void PutEnablePivotTable (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    VARIANT_BOOL GetFilterMode (
        long lcid = 0 );
    HRESULT ResetAllPageBreaks ( );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    NamesPtr GetNames ( );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _bstr_t GetOnCalculate (
        long lcid = 0 );
    void PutOnCalculate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnData (
        long lcid = 0 );
    void PutOnData (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnEntry (
        long lcid = 0 );
    void PutOnEntry (
        long lcid,
        _bstr_t RHS );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    OutlinePtr GetOutline ( );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Paste (
        const _variant_t & Destination = vtMissing,
        const _variant_t & Link = vtMissing,
        long lcid = 0 );
    HRESULT _PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        long lcid = 0 );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr PivotTables (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    PivotTablePtr PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing,
        long lcid = 0 );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    RangePtr GetRows ( );
    IDispatchPtr Scenarios (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _bstr_t GetScrollArea ( );
    void PutScrollArea (
        _bstr_t RHS );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT ShowAllData (
        long lcid = 0 );
    HRESULT ShowDataForm (
        long lcid = 0 );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    double GetStandardHeight (
        long lcid = 0 );
    double GetStandardWidth (
        long lcid = 0 );
    void PutStandardWidth (
        long lcid,
        double RHS );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetTransitionFormEntry (
        long lcid = 0 );
    void PutTransitionFormEntry (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlSheetType GetType (
        long lcid = 0 );
    RangePtr GetUsedRange (
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    QueryTablesPtr GetQueryTables ( );
    VARIANT_BOOL GetDisplayPageBreaks ( );
    void PutDisplayPageBreaks (
        VARIANT_BOOL RHS );
    CommentsPtr GetComments ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT ClearCircles ( );
    HRESULT CircleInvalid ( );
    long Get_DisplayRightToLeft (
        long lcid = 0 );
    void Put_DisplayRightToLeft (
        long lcid,
        long RHS );
    AutoFilterPtr GetAutoFilter ( );
    VARIANT_BOOL GetDisplayRightToLeft (
        long lcid = 0 );
    void PutDisplayRightToLeft (
        long lcid,
        VARIANT_BOOL RHS );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    HRESULT _CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        const _variant_t & IgnoreFinalYaa = vtMissing,
        const _variant_t & SpellScript = vtMissing,
        long lcid = 0 );
    TabPtr GetTab ( );
    Office::IMsoEnvelopeVBPtr GetMailEnvelope ( );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing );
    CustomPropertiesPtr GetCustomProperties ( );
    SmartTagsPtr GetSmartTags ( );
    ProtectionPtr GetProtection ( );
    HRESULT PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & NoHTMLFormatting = vtMissing,
        long lcid = 0 );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        const _variant_t & AllowFormattingCells = vtMissing,
        const _variant_t & AllowFormattingColumns = vtMissing,
        const _variant_t & AllowFormattingRows = vtMissing,
        const _variant_t & AllowInsertingColumns = vtMissing,
        const _variant_t & AllowInsertingRows = vtMissing,
        const _variant_t & AllowInsertingHyperlinks = vtMissing,
        const _variant_t & AllowDeletingColumns = vtMissing,
        const _variant_t & AllowDeletingRows = vtMissing,
        const _variant_t & AllowSorting = vtMissing,
        const _variant_t & AllowFiltering = vtMissing,
        const _variant_t & AllowUsingPivotTables = vtMissing );
    ListObjectsPtr GetListObjects ( );
    RangePtr XmlDataQuery (
        _bstr_t XPath,
        const _variant_t & SelectionNamespaces = vtMissing,
        const _variant_t & Map = vtMissing );
    RangePtr XmlMapQuery (
        _bstr_t XPath,
        const _variant_t & SelectionNamespaces = vtMissing,
        const _variant_t & Map = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ProtectContents (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectionMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectScenarios (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw__SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetVisibility * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlSheetVisibility RHS ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionExpEval (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionExpEval (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Arcs (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoFilterMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoFilterMode (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_SetBackgroundPicture (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_Buttons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_EnableCalculation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableCalculation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChartObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CircularReference (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearArrows (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ConsolidationFunction (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlConsolidationFunction * RHS ) = 0;
      virtual HRESULT __stdcall get_ConsolidationOptions (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ConsolidationSources (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayAutomaticPageBreaks (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayAutomaticPageBreaks (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Drawings (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DrawingObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DropDowns (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_EnableAutoFilter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAutoFilter (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableSelection (
        /*[out,retval]*/ enum XlEnableSelection * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableSelection (
        /*[in]*/ enum XlEnableSelection RHS ) = 0;
      virtual HRESULT __stdcall get_EnableOutlining (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableOutlining (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnablePivotTable (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnablePivotTable (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_FilterMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_ResetAllPageBreaks ( ) = 0;
      virtual HRESULT __stdcall raw_GroupBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_GroupObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Labels (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Lines (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OLEObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnCalculate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnCalculate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnData (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnData (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnEntry (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnEntry (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_OptionButtons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct Outline * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ovals (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ VARIANT Destination = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__PasteSpecial (
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in]*/ VARIANT DisplayAsIcon = vtMissing,
        /*[in]*/ VARIANT IconFileName = vtMissing,
        /*[in]*/ VARIANT IconIndex = vtMissing,
        /*[in]*/ VARIANT IconLabel = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Pictures (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotTables (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotTableWizard (
        /*[in]*/ VARIANT SourceType,
        /*[in]*/ VARIANT SourceData,
        /*[in]*/ VARIANT TableDestination,
        /*[in]*/ VARIANT TableName,
        /*[in]*/ VARIANT RowGrand,
        /*[in]*/ VARIANT ColumnGrand,
        /*[in]*/ VARIANT SaveData,
        /*[in]*/ VARIANT HasAutoFormat,
        /*[in]*/ VARIANT AutoPage,
        /*[in]*/ VARIANT Reserved,
        /*[in]*/ VARIANT BackgroundQuery,
        /*[in]*/ VARIANT OptimizeCache,
        /*[in]*/ VARIANT PageFieldOrder,
        /*[in]*/ VARIANT PageFieldWrapCount,
        /*[in]*/ VARIANT ReadData,
        /*[in]*/ VARIANT Connection,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Cell1,
        /*[in]*/ VARIANT Cell2,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rectangles (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Scenarios (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollArea (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollArea (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollBars (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowAllData (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ShowDataForm (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Spinners (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_StandardHeight (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_StandardWidth (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardWidth (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall raw_TextBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionFormEntry (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionFormEntry (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetType * RHS ) = 0;
      virtual HRESULT __stdcall get_UsedRange (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_QueryTables (
        /*[out,retval]*/ struct QueryTables * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayPageBreaks (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayPageBreaks (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ struct Comments * * RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearCircles ( ) = 0;
      virtual HRESULT __stdcall raw_CircleInvalid ( ) = 0;
      virtual HRESULT __stdcall get__DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoFilter (
        /*[out,retval]*/ struct AutoFilter * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in]*/ VARIANT IgnoreFinalYaa = vtMissing,
        /*[in]*/ VARIANT SpellScript = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Tab (
        /*[out,retval]*/ struct Tab * * RHS ) = 0;
      virtual HRESULT __stdcall get_MailEnvelope (
        /*[out,retval]*/ struct Office::IMsoEnvelopeVB * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in]*/ VARIANT Local = vtMissing ) = 0;
      virtual HRESULT __stdcall get_CustomProperties (
        /*[out,retval]*/ struct CustomProperties * * RHS ) = 0;
      virtual HRESULT __stdcall get_SmartTags (
        /*[out,retval]*/ struct SmartTags * * RHS ) = 0;
      virtual HRESULT __stdcall get_Protection (
        /*[out,retval]*/ struct Protection * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in]*/ VARIANT DisplayAsIcon = vtMissing,
        /*[in]*/ VARIANT IconFileName = vtMissing,
        /*[in]*/ VARIANT IconIndex = vtMissing,
        /*[in]*/ VARIANT IconLabel = vtMissing,
        /*[in]*/ VARIANT NoHTMLFormatting = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in]*/ VARIANT AllowFormattingCells = vtMissing,
        /*[in]*/ VARIANT AllowFormattingColumns = vtMissing,
        /*[in]*/ VARIANT AllowFormattingRows = vtMissing,
        /*[in]*/ VARIANT AllowInsertingColumns = vtMissing,
        /*[in]*/ VARIANT AllowInsertingRows = vtMissing,
        /*[in]*/ VARIANT AllowInsertingHyperlinks = vtMissing,
        /*[in]*/ VARIANT AllowDeletingColumns = vtMissing,
        /*[in]*/ VARIANT AllowDeletingRows = vtMissing,
        /*[in]*/ VARIANT AllowSorting = vtMissing,
        /*[in]*/ VARIANT AllowFiltering = vtMissing,
        /*[in]*/ VARIANT AllowUsingPivotTables = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ListObjects (
        /*[out,retval]*/ struct ListObjects * * RHS ) = 0;
      virtual HRESULT __stdcall raw_XmlDataQuery (
        /*[in]*/ BSTR XPath,
        /*[in]*/ VARIANT SelectionNamespaces,
        /*[in]*/ VARIANT Map,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_XmlMapQuery (
        /*[in]*/ BSTR XPath,
        /*[in]*/ VARIANT SelectionNamespaces,
        /*[in]*/ VARIANT Map,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
};

struct __declspec(uuid("00020852-0001-0000-c000-000000000046"))
IStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default[];
    __declspec(property(get=GetValue))
    _bstr_t Value[];
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlOrientation Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _bstr_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    long IndentLevel;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    VARIANT_BOOL FormulaHidden;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    VARIANT_BOOL ShrinkToFit;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    VARIANT_BOOL WrapText;
    __declspec(property(get=GetNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetIncludeAlignment,put=PutIncludeAlignment))
    VARIANT_BOOL IncludeAlignment;
    __declspec(property(get=GetIncludeBorder,put=PutIncludeBorder))
    VARIANT_BOOL IncludeBorder;
    __declspec(property(get=GetIncludeFont,put=PutIncludeFont))
    VARIANT_BOOL IncludeFont;
    __declspec(property(get=GetIncludeNumber,put=PutIncludeNumber))
    VARIANT_BOOL IncludeNumber;
    __declspec(property(get=GetIncludePatterns,put=PutIncludePatterns))
    VARIANT_BOOL IncludePatterns;
    __declspec(property(get=GetIncludeProtection,put=PutIncludeProtection))
    VARIANT_BOOL IncludeProtection;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetBuiltIn ( );
    BordersPtr GetBorders ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetFormulaHidden ( );
    void PutFormulaHidden (
        VARIANT_BOOL RHS );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign RHS );
    VARIANT_BOOL GetIncludeAlignment ( );
    void PutIncludeAlignment (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeBorder ( );
    void PutIncludeBorder (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeFont ( );
    void PutIncludeFont (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeNumber ( );
    void PutIncludeNumber (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludePatterns ( );
    void PutIncludePatterns (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeProtection ( );
    void PutIncludeProtection (
        VARIANT_BOOL RHS );
    long GetIndentLevel ( );
    void PutIndentLevel (
        long RHS );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & RHS );
    _bstr_t GetName (
        long lcid = 0 );
    _bstr_t GetNameLocal ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    _bstr_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        _bstr_t RHS );
    enum XlOrientation GetOrientation ( );
    void PutOrientation (
        enum XlOrientation RHS );
    VARIANT_BOOL GetShrinkToFit ( );
    void PutShrinkToFit (
        VARIANT_BOOL RHS );
    _bstr_t GetValue (
        long lcid = 0 );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign RHS );
    VARIANT_BOOL GetWrapText ( );
    void PutWrapText (
        VARIANT_BOOL RHS );
    _bstr_t Get_Default (
        long lcid = 0 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaHidden (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaHidden (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ enum XlHAlign * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ enum XlHAlign RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeAlignment (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeAlignment (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeBorder (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeBorder (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeFont (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeFont (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeNumber (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeNumber (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludePatterns (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludePatterns (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeProtection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeProtection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IndentLevel (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_IndentLevel (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MergeCells (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_MergeCells (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_NameLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlOrientation RHS ) = 0;
      virtual HRESULT __stdcall get_ShrinkToFit (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShrinkToFit (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ enum XlVAlign * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ enum XlVAlign RHS ) = 0;
      virtual HRESULT __stdcall get_WrapText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WrapText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00020853-0001-0000-c000-000000000046"))
IStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    StylePtr _Default[][];
    __declspec(property(get=GetItem))
    StylePtr Item[][];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    StylePtr Add (
        _bstr_t Name,
        const _variant_t & BasedOn = vtMissing );
    long GetCount ( );
    StylePtr GetItem (
        const _variant_t & Index,
        long lcid = 0 );
    _variant_t Merge (
        const _variant_t & Workbook );
    IUnknownPtr Get_NewEnum ( );
    StylePtr Get_Default (
        const _variant_t & Index,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT BasedOn,
        /*[out,retval]*/ struct Style * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Style * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ VARIANT Workbook,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Style * * RHS ) = 0;
};

struct __declspec(uuid("00020855-0001-0000-c000-000000000046"))
IBorders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    BorderPtr _Default[];
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetItem))
    BorderPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & RHS );
    long GetCount ( );
    BorderPtr GetItem (
        enum XlBordersIndex Index );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & RHS );
    IUnknownPtr Get_NewEnum ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & RHS );
    BorderPtr Get_Default (
        enum XlBordersIndex Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ enum XlBordersIndex Index,
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ enum XlBordersIndex Index,
        /*[out,retval]*/ struct Border * * RHS ) = 0;
};

struct __declspec(uuid("00020857-0001-0000-c000-000000000046"))
IAddIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstalled,put=PutInstalled))
    VARIANT_BOOL Installed;
    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSubject))
    _bstr_t Subject;
    __declspec(property(get=GetCLSID))
    _bstr_t CLSID;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;
    __declspec(property(get=GetComments))
    _bstr_t Comments;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    _bstr_t GetComments ( );
    _bstr_t GetFullName ( );
    VARIANT_BOOL GetInstalled ( );
    void PutInstalled (
        VARIANT_BOOL RHS );
    _bstr_t GetKeywords ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    _bstr_t GetSubject ( );
    _bstr_t GetTitle ( );
    _bstr_t GetprogID ( );
    _bstr_t GetCLSID ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Installed (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Installed (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Keywords (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_progID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_CLSID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00020858-0001-0000-c000-000000000046"))
IAddIns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AddInPtr _Default[];
    __declspec(property(get=GetItem))
    AddInPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    AddInPtr Add (
        _bstr_t Filename,
        const _variant_t & ExcelCopyFile = vtMissing );
    long GetCount ( );
    AddInPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    AddInPtr Get_Default (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT ExcelCopyFile,
        /*[out,retval]*/ struct AddIn * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AddIn * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AddIn * * RHS ) = 0;
};

struct __declspec(uuid("0002085c-0001-0000-c000-000000000046"))
IToolbar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToolbarButtons))
    ToolbarButtonsPtr ToolbarButtons;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetProtection,put=PutProtection))
    enum XlToolbarProtection Protection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    HRESULT Delete ( );
    long GetHeight ( );
    void PutHeight (
        long RHS );
    long GetLeft ( );
    void PutLeft (
        long RHS );
    _bstr_t GetName ( );
    long GetPosition ( );
    void PutPosition (
        long RHS );
    enum XlToolbarProtection GetProtection ( );
    void PutProtection (
        enum XlToolbarProtection RHS );
    HRESULT Reset ( );
    ToolbarButtonsPtr GetToolbarButtons ( );
    long GetTop ( );
    void PutTop (
        long RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    long GetWidth ( );
    void PutWidth (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Protection (
        /*[out,retval]*/ enum XlToolbarProtection * RHS ) = 0;
      virtual HRESULT __stdcall put_Protection (
        /*[in]*/ enum XlToolbarProtection RHS ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall get_ToolbarButtons (
        /*[out,retval]*/ struct ToolbarButtons * * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("0002085d-0001-0000-c000-000000000046"))
IToolbars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    ToolbarPtr Get_Default (
        const _variant_t & Index );
    ToolbarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct Toolbar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Toolbar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Toolbar * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002085e-0001-0000-c000-000000000046"))
IToolbarButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPushed,put=PutPushed))
    VARIANT_BOOL Pushed;
    __declspec(property(get=GetIsGap))
    VARIANT_BOOL IsGap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL RHS );
    HRESULT Copy (
        struct Toolbar * Toolbar,
        long Before );
    HRESULT CopyFace ( );
    HRESULT Delete ( );
    HRESULT Edit ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long RHS );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t RHS );
    long GetID ( );
    VARIANT_BOOL GetIsGap ( );
    HRESULT Move (
        struct Toolbar * Toolbar,
        long Before );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    HRESULT PasteFace ( );
    VARIANT_BOOL GetPushed ( );
    void PutPushed (
        VARIANT_BOOL RHS );
    HRESULT Reset ( );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t RHS );
    long GetWidth ( );
    void PutWidth (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltInFace (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BuiltInFace (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct Toolbar * Toolbar,
        /*[in]*/ long Before ) = 0;
      virtual HRESULT __stdcall raw_CopyFace ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Edit ( ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HelpContextID (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpContextID (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HelpFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpFile (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_IsGap (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ struct Toolbar * Toolbar,
        /*[in]*/ long Before ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_PasteFace ( ) = 0;
      virtual HRESULT __stdcall get_Pushed (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Pushed (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall get_StatusBar (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StatusBar (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("0002085f-0001-0000-c000-000000000046"))
IToolbarButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarButtonPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarButtonPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarButtonPtr Add (
        const _variant_t & Button = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & Pushed = vtMissing,
        const _variant_t & Enabled = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    long GetCount ( );
    ToolbarButtonPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ToolbarButtonPtr Get_Default (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Button,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT OnAction,
        /*[in]*/ VARIANT Pushed,
        /*[in]*/ VARIANT Enabled,
        /*[in]*/ VARIANT StatusBar,
        /*[in]*/ VARIANT HelpFile,
        /*[in]*/ VARIANT HelpContextID,
        /*[out,retval]*/ struct ToolbarButton * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ToolbarButton * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ToolbarButton * * RHS ) = 0;
};

struct __declspec(uuid("00020860-0001-0000-c000-000000000046"))
IAreas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RangePtr _Default[];
    __declspec(property(get=GetItem))
    RangePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    RangePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    RangePtr Get_Default (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
};

struct __declspec(uuid("00020863-0001-0000-c000-000000000046"))
IMenuBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuBarPtr _Default[];
    __declspec(property(get=GetItem))
    MenuBarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuBarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    MenuBarPtr Get_Default (
        const _variant_t & Index );
    MenuBarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020864-0001-0000-c000-000000000046"))
IMenuBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenus))
    MenusPtr Menus;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetBuiltIn ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    HRESULT Delete ( );
    long GetIndex ( );
    MenusPtr GetMenus ( );
    HRESULT Reset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Menus (
        /*[out,retval]*/ struct Menus * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
};

struct __declspec(uuid("00020865-0001-0000-c000-000000000046"))
IMenus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuPtr _Default[];
    __declspec(property(get=GetItem))
    MenuPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuPtr Add (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    MenuPtr Get_Default (
        const _variant_t & Index );
    MenuPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Caption,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT Restore,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020866-0001-0000-c000-000000000046"))
IMenu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenuItems))
    MenuItemsPtr MenuItems;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetIndex ( );
    MenuItemsPtr GetMenuItems ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MenuItems (
        /*[out,retval]*/ struct MenuItems * * RHS ) = 0;
};

struct __declspec(uuid("00020867-0001-0000-c000-000000000046"))
IMenuItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuItemPtr Add (
        _bstr_t Caption,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    MenuPtr AddMenu (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Caption,
        /*[in]*/ VARIANT OnAction,
        /*[in]*/ VARIANT ShortcutKey,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT Restore,
        /*[in]*/ VARIANT StatusBar,
        /*[in]*/ VARIANT HelpFile,
        /*[in]*/ VARIANT HelpContextID,
        /*[out,retval]*/ struct MenuItem * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddMenu (
        /*[in]*/ BSTR Caption,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT Restore,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020868-0001-0000-c000-000000000046"))
IMenuItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetChecked ( );
    void PutChecked (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long RHS );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t RHS );
    long GetIndex ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Checked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Checked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HelpContextID (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpContextID (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HelpFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpFile (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_StatusBar (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StatusBar (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002086f-0001-0000-c000-000000000046"))
IDrawingObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    VARIANT_BOOL MultiSelect;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    FontPtr GetFont ( );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    long GetInputType ( );
    void PutInputType (
        long RHS );
    InteriorPtr GetInterior ( );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetMultiSelect ( );
    void PutMultiSelect (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t Reshape (
        long Vertex,
        const _variant_t & Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    _variant_t Selected (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    IDispatchPtr Ungroup ( );
    long GetValue ( );
    void PutValue (
        long RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t Vertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    GroupObjectPtr Group ( );
    _variant_t LinkCombo (
        const _variant_t & Link = vtMissing );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy28 ( ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_CancelButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CancelButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DismissButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DismissButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DropDownLines (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DropDownLines (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual void __stdcall _Dummy47 ( ) = 0;
      virtual HRESULT __stdcall get_HelpButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_InputType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_InputType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy54 ( ) = 0;
      virtual HRESULT __stdcall raw_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy56 ( ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MultiLine (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiLine (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Reshape (
        /*[in]*/ long Vertex,
        /*[in]*/ VARIANT Insert,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Vertices (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_LinkCombo (
        /*[in]*/ VARIANT Link,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002441c-0001-0000-c000-000000000046"))
IPivotCache : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetSourceType))
    enum XlPivotTableSourceType SourceType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum XlQueryType QueryType;
    __declspec(property(get=GetADOConnection))
    IDispatchPtr ADOConnection;
    __declspec(property(get=GetIsConnected))
    VARIANT_BOOL IsConnected;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetOLAP))
    VARIANT_BOOL OLAP;
    __declspec(property(get=GetMissingItemsLimit,put=PutMissingItemsLimit))
    enum XlPivotTableMissingItems MissingItemsLimit;
    __declspec(property(get=GetSourceConnectionFile,put=PutSourceConnectionFile))
    _bstr_t SourceConnectionFile;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetOptimizeCache,put=PutOptimizeCache))
    VARIANT_BOOL OptimizeCache;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetLocalConnection,put=PutLocalConnection))
    _variant_t LocalConnection;
    __declspec(property(get=GetUseLocalConnection,put=PutUseLocalConnection))
    VARIANT_BOOL UseLocalConnection;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetSourceDataFile))
    _bstr_t SourceDataFile;
    __declspec(property(get=GetRobustConnect,put=PutRobustConnect))
    enum XlRobustConnect RobustConnect;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL RHS );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & RHS );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL RHS );
    long GetIndex ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetOptimizeCache ( );
    void PutOptimizeCache (
        VARIANT_BOOL RHS );
    long GetRecordCount ( );
    HRESULT Refresh ( );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL RHS );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & RHS );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL RHS );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & RHS );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & RHS );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType RHS );
    enum XlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL RHS );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long RHS );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * RHS );
    HRESULT ResetTimer ( );
    _variant_t GetLocalConnection ( );
    void PutLocalConnection (
        const _variant_t & RHS );
    PivotTablePtr CreatePivotTable (
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & DefaultVersion = vtMissing );
    VARIANT_BOOL GetUseLocalConnection ( );
    void PutUseLocalConnection (
        VARIANT_BOOL RHS );
    IDispatchPtr GetADOConnection ( );
    VARIANT_BOOL GetIsConnected ( );
    HRESULT MakeConnection ( );
    VARIANT_BOOL GetOLAP ( );
    enum XlPivotTableSourceType GetSourceType ( );
    enum XlPivotTableMissingItems GetMissingItemsLimit ( );
    void PutMissingItemsLimit (
        enum XlPivotTableMissingItems RHS );
    _bstr_t GetSourceConnectionFile ( );
    void PutSourceConnectionFile (
        _bstr_t RHS );
    _bstr_t GetSourceDataFile ( );
    enum XlRobustConnect GetRobustConnect ( );
    void PutRobustConnect (
        enum XlRobustConnect RHS );
    HRESULT SaveAsODC (
        _bstr_t ODCFileName,
        const _variant_t & Description = vtMissing,
        const _variant_t & Keywords = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BackgroundQuery (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BackgroundQuery (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Connection (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Connection (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_EnableRefresh (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableRefresh (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryUsed (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_OptimizeCache (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_OptimizeCache (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RecordCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall get_RefreshDate (
        /*[out,retval]*/ DATE * RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshOnFileOpen (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshOnFileOpen (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Sql (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Sql (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_SavePassword (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SavePassword (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SourceData (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceData (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CommandText (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandText (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CommandType (
        /*[out,retval]*/ enum XlCmdType * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandType (
        /*[in]*/ enum XlCmdType RHS ) = 0;
      virtual HRESULT __stdcall get_QueryType (
        /*[out,retval]*/ enum XlQueryType * RHS ) = 0;
      virtual HRESULT __stdcall get_MaintainConnection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MaintainConnection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshPeriod (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshPeriod (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Recordset (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Recordset (
        /*[in]*/ IDispatch * RHS ) = 0;
      virtual HRESULT __stdcall raw_ResetTimer ( ) = 0;
      virtual HRESULT __stdcall get_LocalConnection (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_LocalConnection (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_CreatePivotTable (
        /*[in]*/ VARIANT TableDestination,
        /*[in]*/ VARIANT TableName,
        /*[in]*/ VARIANT ReadData,
        /*[in]*/ VARIANT DefaultVersion,
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_UseLocalConnection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UseLocalConnection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ADOConnection (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_IsConnected (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_MakeConnection ( ) = 0;
      virtual HRESULT __stdcall get_OLAP (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_SourceType (
        /*[out,retval]*/ enum XlPivotTableSourceType * RHS ) = 0;
      virtual HRESULT __stdcall get_MissingItemsLimit (
        /*[out,retval]*/ enum XlPivotTableMissingItems * RHS ) = 0;
      virtual HRESULT __stdcall put_MissingItemsLimit (
        /*[in]*/ enum XlPivotTableMissingItems RHS ) = 0;
      virtual HRESULT __stdcall get_SourceConnectionFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceConnectionFile (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_SourceDataFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_RobustConnect (
        /*[out,retval]*/ enum XlRobustConnect * RHS ) = 0;
      virtual HRESULT __stdcall put_RobustConnect (
        /*[in]*/ enum XlRobustConnect RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAsODC (
        /*[in]*/ BSTR ODCFileName,
        /*[in]*/ VARIANT Description = vtMissing,
        /*[in]*/ VARIANT Keywords = vtMissing ) = 0;
};

struct __declspec(uuid("0002441d-0001-0000-c000-000000000046"))
IPivotCaches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotCachePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotCachePtr Item (
        const _variant_t & Index );
    PivotCachePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotCachePtr Add (
        enum XlPivotTableSourceType SourceType,
        const _variant_t & SourceData = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlPivotTableSourceType SourceType,
        /*[in]*/ VARIANT SourceData,
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
};

struct __declspec(uuid("0002441e-0001-0000-c000-000000000046"))
IPivotFormula : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    long GetIndex ( );
    void PutIndex (
        long RHS );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Index (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_StandardFormula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardFormula (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002441f-0001-0000-c000-000000000046"))
IPivotFormulas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFormulaPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFormulaPtr _Add (
        _bstr_t Formula );
    PivotFormulaPtr Item (
        const _variant_t & Index );
    PivotFormulaPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotFormulaPtr Add (
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw__Add (
        /*[in]*/ BSTR Formula,
        /*[out,retval]*/ struct PivotFormula * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotFormula * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotFormula * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Formula,
        /*[in]*/ VARIANT UseStandardFormula,
        /*[out,retval]*/ struct PivotFormula * * RHS ) = 0;
};

struct __declspec(uuid("00020873-0001-0000-c000-000000000046"))
IPivotTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotTablePtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotTablePtr Add (
        struct PivotCache * PivotCache,
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & DefaultVersion = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct PivotCache * PivotCache,
        /*[in]*/ VARIANT TableDestination,
        /*[in]*/ VARIANT TableName,
        /*[in]*/ VARIANT ReadData,
        /*[in]*/ VARIANT DefaultVersion,
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
};

struct __declspec(uuid("00020875-0001-0000-c000-000000000046"))
IPivotFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotTablePtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotTablePtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024420-0001-0000-c000-000000000046"))
ICalculatedFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFieldPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFieldPtr _Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotFieldPtr Item (
        const _variant_t & Index );
    PivotFieldPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
    PivotFieldPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw__Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Formula,
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Field,
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Formula,
        /*[in]*/ VARIANT UseStandardFormula,
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
};

struct __declspec(uuid("00020876-0001-0000-c000-000000000046"))
IPivotItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    VARIANT_BOOL ShowDetail;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _variant_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetParentShowDetail))
    VARIANT_BOOL ParentShowDetail;
    __declspec(property(get=GetSourceNameStandard))
    _bstr_t SourceNameStandard;
    __declspec(property(get=GetParentItem))
    PivotItemPtr ParentItem;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    PivotItemPtr GetParentItem ( );
    VARIANT_BOOL GetParentShowDetail ( );
    long GetPosition ( );
    void PutPosition (
        long RHS );
    VARIANT_BOOL GetShowDetail ( );
    void PutShowDetail (
        VARIANT_BOOL RHS );
    _variant_t GetSourceName ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );
    VARIANT_BOOL GetIsCalculated ( );
    long GetRecordCount ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL RHS );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t RHS );
    _bstr_t GetSourceNameStandard ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChildItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LabelRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ParentItem (
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall get_ParentShowDetail (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ShowDetail (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowDetail (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_IsCalculated (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_RecordCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DrilledDown (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DrilledDown (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_StandardFormula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardFormula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_SourceNameStandard (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00020877-0001-0000-c000-000000000046"))
IPivotItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    HRESULT Add (
        _bstr_t Name );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024421-0001-0000-c000-000000000046"))
ICalculatedItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr _Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
    PivotItemPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw__Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Formula,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Field,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Formula,
        /*[in]*/ VARIANT UseStandardFormula,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
};

struct __declspec(uuid("00020878-0001-0000-c000-000000000046"))
ICharacters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetPhoneticCharacters,put=PutPhoneticCharacters))
    _bstr_t PhoneticCharacters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    long GetCount ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _variant_t Insert (
        _bstr_t String );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _bstr_t GetPhoneticCharacters ( );
    void PutPhoneticCharacters (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR String,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticCharacters (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticCharacters (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("00020879-0001-0000-c000-000000000046"))
IDialogs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    DialogPtr _Default[];
    __declspec(property(get=GetItem))
    DialogPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    DialogPtr GetItem (
        enum XlBuiltInDialog Index );
    DialogPtr Get_Default (
        enum XlBuiltInDialog Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ enum XlBuiltInDialog Index,
        /*[out,retval]*/ struct Dialog * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ enum XlBuiltInDialog Index,
        /*[out,retval]*/ struct Dialog * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002087a-0001-0000-c000-000000000046"))
IDialog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Show (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("0002087b-0001-0000-c000-000000000046"))
ISoundNote : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    _variant_t Import (
        _bstr_t Filename );
    _variant_t Play ( );
    _variant_t Record ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Play (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Record (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("0002087d-0001-0000-c000-000000000046"))
IButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CancelButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CancelButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DismissButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DismissButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HelpButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002087e-0001-0000-c000-000000000046"))
IButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    ButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CancelButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CancelButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DismissButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DismissButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HelpButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Button * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002087f-0001-0000-c000-000000000046"))
ICheckBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020880-0001-0000-c000-000000000046"))
ICheckBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    CheckBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct CheckBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020881-0001-0000-c000-000000000046"))
IOptionButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    GroupBoxPtr GetGroupBox ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_GroupBox (
        /*[out,retval]*/ struct GroupBox * * RHS ) = 0;
};

struct __declspec(uuid("00020882-0001-0000-c000-000000000046"))
IOptionButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    GroupBoxPtr GetGroupBox ( );
    OptionButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_GroupBox (
        /*[out,retval]*/ struct GroupBox * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct OptionButton * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020883-0001-0000-c000-000000000046"))
IEditBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLinkedObject))
    _bstr_t LinkedObject;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    long GetInputType ( );
    void PutInputType (
        long RHS );
    _bstr_t GetLinkedObject ( );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_InputType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_InputType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedObject (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_MultiLine (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiLine (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PasswordEdit (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PasswordEdit (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00020884-0001-0000-c000-000000000046"))
IEditBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    long GetInputType ( );
    void PutInputType (
        long RHS );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL RHS );
    EditBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    _variant_t Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_InputType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_InputType (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy34 ( ) = 0;
      virtual HRESULT __stdcall get_MultiLine (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiLine (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PasswordEdit (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PasswordEdit (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct EditBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020885-0001-0000-c000-000000000046"))
IScrollBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00020886-0001-0000-c000-000000000046"))
IScrollBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );
    ScrollBarPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct ScrollBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020887-0001-0000-c000-000000000046"))
IListBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedObject (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00020888-0001-0000-c000-000000000046"))
IListBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );
    ListBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy31 ( ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct ListBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020889-0001-0000-c000-000000000046"))
IGroupBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002088a-0001-0000-c000-000000000046"))
IGroupBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    GroupBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct GroupBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002088b-0001-0000-c000-000000000046"))
IDropDown : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedObject (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_DropDownLines (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DropDownLines (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002088c-0001-0000-c000-000000000046"))
IDropDowns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    DropDownPtr Add (
        double Left,
        double Top,
        double Width,
        double Height,
        const _variant_t & Editable = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy31 ( ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_DropDownLines (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DropDownLines (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ VARIANT Editable,
        /*[out,retval]*/ struct DropDown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002088d-0001-0000-c000-000000000046"))
ISpinner : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("0002088e-0001-0000-c000-000000000046"))
ISpinners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );
    SpinnerPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Spinner * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002088f-0001-0000-c000-000000000046"))
IDialogFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual void __stdcall _Dummy4 ( ) = 0;
      virtual void __stdcall _Dummy5 ( ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy7 ( ) = 0;
      virtual void __stdcall _Dummy8 ( ) = 0;
      virtual void __stdcall _Dummy9 ( ) = 0;
      virtual void __stdcall _Dummy10 ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy17 ( ) = 0;
      virtual void __stdcall _Dummy18 ( ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy20 ( ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual void __stdcall _Dummy23 ( ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy25 ( ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("00020890-0001-0000-c000-000000000046"))
ILabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020891-0001-0000-c000-000000000046"))
ILabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    LabelPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Label * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020894-0001-0000-c000-000000000046"))
IPanes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PanePtr _Default[];
    __declspec(property(get=GetItem))
    PanePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PanePtr GetItem (
        long Index );
    PanePtr Get_Default (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Pane * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Pane * * RHS ) = 0;
};

struct __declspec(uuid("00020895-0001-0000-c000-000000000046"))
IPane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Activate ( );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long RHS );
    long GetScrollRow ( );
    void PutScrollRow (
        long RHS );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    RangePtr GetVisibleRange ( );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_LargeScroll (
        /*[in]*/ VARIANT Down,
        /*[in]*/ VARIANT Up,
        /*[in]*/ VARIANT ToRight,
        /*[in]*/ VARIANT ToLeft,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollColumn (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollColumn (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollRow (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollRow (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_SmallScroll (
        /*[in]*/ VARIANT Down,
        /*[in]*/ VARIANT Up,
        /*[in]*/ VARIANT ToRight,
        /*[in]*/ VARIANT ToLeft,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollIntoView (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ VARIANT Start = vtMissing ) = 0;
};

struct __declspec(uuid("00020896-0001-0000-c000-000000000046"))
IScenarios : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ScenarioPtr Add (
        _bstr_t Name,
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing,
        const _variant_t & Comment = vtMissing,
        const _variant_t & Locked = vtMissing,
        const _variant_t & Hidden = vtMissing );
    long GetCount ( );
    _variant_t CreateSummary (
        enum XlSummaryReportType ReportType,
        const _variant_t & ResultCells = vtMissing );
    ScenarioPtr Item (
        const _variant_t & Index );
    _variant_t Merge (
        const _variant_t & Source );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT ChangingCells,
        /*[in]*/ VARIANT Values,
        /*[in]*/ VARIANT Comment,
        /*[in]*/ VARIANT Locked,
        /*[in]*/ VARIANT Hidden,
        /*[out,retval]*/ struct Scenario * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreateSummary (
        /*[in]*/ enum XlSummaryReportType ReportType,
        /*[in]*/ VARIANT ResultCells,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Scenario * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ VARIANT Source,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020897-0001-0000-c000-000000000046"))
IScenario : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValues))
    _variant_t Values[];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHidden,put=PutHidden))
    VARIANT_BOOL Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetChangingCells))
    RangePtr ChangingCells;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t ChangeScenario (
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing );
    RangePtr GetChangingCells ( );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t RHS );
    _variant_t Delete ( );
    VARIANT_BOOL GetHidden ( );
    void PutHidden (
        VARIANT_BOOL RHS );
    long GetIndex ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _variant_t Show ( );
    _variant_t GetValues (
        const _variant_t & Index = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChangeScenario (
        /*[in]*/ VARIANT ChangingCells,
        /*[in]*/ VARIANT Values,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ChangingCells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("00020898-0001-0000-c000-000000000046"))
IGroupObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual void __stdcall _Dummy27 ( ) = 0;
      virtual void __stdcall _Dummy28 ( ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy30 ( ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual void __stdcall _Dummy37 ( ) = 0;
      virtual void __stdcall _Dummy38 ( ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy41 ( ) = 0;
      virtual void __stdcall _Dummy42 ( ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
      virtual void __stdcall _Dummy44 ( ) = 0;
      virtual void __stdcall _Dummy45 ( ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual void __stdcall _Dummy47 ( ) = 0;
      virtual void __stdcall _Dummy48 ( ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy50 ( ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual void __stdcall _Dummy52 ( ) = 0;
      virtual void __stdcall _Dummy53 ( ) = 0;
      virtual void __stdcall _Dummy54 ( ) = 0;
      virtual void __stdcall _Dummy55 ( ) = 0;
      virtual void __stdcall _Dummy56 ( ) = 0;
      virtual void __stdcall _Dummy57 ( ) = 0;
      virtual void __stdcall _Dummy58 ( ) = 0;
      virtual void __stdcall _Dummy59 ( ) = 0;
      virtual void __stdcall _Dummy60 ( ) = 0;
      virtual void __stdcall _Dummy61 ( ) = 0;
      virtual void __stdcall _Dummy62 ( ) = 0;
      virtual void __stdcall _Dummy63 ( ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy65 ( ) = 0;
      virtual void __stdcall _Dummy66 ( ) = 0;
      virtual void __stdcall _Dummy67 ( ) = 0;
      virtual void __stdcall _Dummy68 ( ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy70 ( ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy72 ( ) = 0;
      virtual void __stdcall _Dummy73 ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy75 ( ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy77 ( ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00020899-0001-0000-c000-000000000046"))
IGroupObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual void __stdcall _Dummy27 ( ) = 0;
      virtual void __stdcall _Dummy28 ( ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy30 ( ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual void __stdcall _Dummy37 ( ) = 0;
      virtual void __stdcall _Dummy38 ( ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy41 ( ) = 0;
      virtual void __stdcall _Dummy42 ( ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
      virtual void __stdcall _Dummy44 ( ) = 0;
      virtual void __stdcall _Dummy45 ( ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual void __stdcall _Dummy47 ( ) = 0;
      virtual void __stdcall _Dummy48 ( ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy50 ( ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual void __stdcall _Dummy52 ( ) = 0;
      virtual void __stdcall _Dummy53 ( ) = 0;
      virtual void __stdcall _Dummy54 ( ) = 0;
      virtual void __stdcall _Dummy55 ( ) = 0;
      virtual void __stdcall _Dummy56 ( ) = 0;
      virtual void __stdcall _Dummy57 ( ) = 0;
      virtual void __stdcall _Dummy58 ( ) = 0;
      virtual void __stdcall _Dummy59 ( ) = 0;
      virtual void __stdcall _Dummy60 ( ) = 0;
      virtual void __stdcall _Dummy61 ( ) = 0;
      virtual void __stdcall _Dummy62 ( ) = 0;
      virtual void __stdcall _Dummy63 ( ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy65 ( ) = 0;
      virtual void __stdcall _Dummy66 ( ) = 0;
      virtual void __stdcall _Dummy67 ( ) = 0;
      virtual void __stdcall _Dummy68 ( ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy70 ( ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy72 ( ) = 0;
      virtual void __stdcall _Dummy73 ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy75 ( ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy77 ( ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002089a-0001-0000-c000-000000000046"))
ILine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
};

struct __declspec(uuid("0002089b-0001-0000-c000-000000000046"))
ILines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    LinePtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[out,retval]*/ struct Line * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002089c-0001-0000-c000-000000000046"))
IRectangle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002089d-0001-0000-c000-000000000046"))
IRectangles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    RectanglePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Rectangle * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002089e-0001-0000-c000-000000000046"))
IOval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002089f-0001-0000-c000-000000000046"))
IOvals : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    OvalPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Oval * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208a0-0001-0000-c000-000000000046"))
IArc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
};

struct __declspec(uuid("000208a1-0001-0000-c000-000000000046"))
IArcs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    ArcPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[out,retval]*/ struct Arc * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208a2-0001-0000-c000-000000000046"))
_IOLEObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;
    __declspec(property(get=GetOLEType))
    _variant_t OLEType;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAltHTML,put=PutAltHTML))
    _bstr_t AltHTML;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t Activate ( );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL RHS );
    IDispatchPtr GetObject ( );
    _variant_t GetOLEType ( );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t RHS );
    _variant_t Update ( );
    _variant_t Verb (
        enum XlOLEVerb Verb );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    _bstr_t GetprogID ( );
    _bstr_t GetAltHTML ( );
    void PutAltHTML (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoLoad (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoLoad (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoUpdate (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OLEType (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Verb (
        /*[in]*/ enum XlOLEVerb Verb,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_progID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AltHTML (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_AltHTML (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("000208a4-0001-0000-c000-000000000046"))
ITextBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("000208a5-0001-0000-c000-000000000046"))
ITextBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    TextBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct TextBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208a7-0001-0000-c000-000000000046"))
IPictures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    PicturePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    PicturePtr Insert (
        _bstr_t Filename,
        const _variant_t & Converter = vtMissing );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PicturePtr Paste (
        const _variant_t & Link = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Picture * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Converter,
        /*[out,retval]*/ struct Picture * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ VARIANT Link,
        /*[out,retval]*/ struct Picture * * RHS ) = 0;
};

struct __declspec(uuid("000208a8-0001-0000-c000-000000000046"))
IDrawing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetVertices))
    _variant_t Vertices[][];
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t AddVertex (
        double Left,
        double Top );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    _variant_t GetVertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Reshape (
        /*[in]*/ long Vertex,
        /*[in]*/ VARIANT_BOOL Insert,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208a9-0001-0000-c000-000000000046"))
IDrawings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    DrawingPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2,
        VARIANT_BOOL Closed );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy44 ( ) = 0;
      virtual HRESULT __stdcall raw_Reshape (
        /*[in]*/ long Vertex,
        /*[in]*/ VARIANT_BOOL Insert,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy46 ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[in]*/ VARIANT_BOOL Closed,
        /*[out,retval]*/ struct Drawing * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208aa-0001-0000-c000-000000000046"))
IRoutingSlip : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRecipients,put=PutRecipients))
    _variant_t Recipients[];
    __declspec(property(get=GetSubject,put=PutSubject))
    _variant_t Subject;
    __declspec(property(get=GetMessage,put=PutMessage))
    _variant_t Message;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    enum XlRoutingSlipDelivery Delivery;
    __declspec(property(get=GetReturnWhenDone,put=PutReturnWhenDone))
    VARIANT_BOOL ReturnWhenDone;
    __declspec(property(get=GetTrackStatus,put=PutTrackStatus))
    VARIANT_BOOL TrackStatus;
    __declspec(property(get=GetStatus))
    enum XlRoutingSlipStatus Status;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlRoutingSlipDelivery GetDelivery ( );
    void PutDelivery (
        enum XlRoutingSlipDelivery RHS );
    _variant_t GetMessage ( );
    void PutMessage (
        const _variant_t & RHS );
    _variant_t GetRecipients (
        const _variant_t & Index = vtMissing );
    void PutRecipients (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _variant_t Reset ( );
    VARIANT_BOOL GetReturnWhenDone ( );
    void PutReturnWhenDone (
        VARIANT_BOOL RHS );
    enum XlRoutingSlipStatus GetStatus ( );
    _variant_t GetSubject ( );
    void PutSubject (
        const _variant_t & RHS );
    VARIANT_BOOL GetTrackStatus ( );
    void PutTrackStatus (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Delivery (
        /*[out,retval]*/ enum XlRoutingSlipDelivery * RHS ) = 0;
      virtual HRESULT __stdcall put_Delivery (
        /*[in]*/ enum XlRoutingSlipDelivery RHS ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Message (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Recipients (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Recipients (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Reset (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ReturnWhenDone (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ReturnWhenDone (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum XlRoutingSlipStatus * RHS ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TrackStatus (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TrackStatus (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("000208ab-0001-0000-c000-000000000046"))
IOutline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSummaryColumn,put=PutSummaryColumn))
    enum XlSummaryColumn SummaryColumn;
    __declspec(property(get=GetSummaryRow,put=PutSummaryRow))
    enum XlSummaryRow SummaryRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutomaticStyles,put=PutAutomaticStyles))
    VARIANT_BOOL AutomaticStyles;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutomaticStyles ( );
    void PutAutomaticStyles (
        VARIANT_BOOL RHS );
    _variant_t ShowLevels (
        const _variant_t & RowLevels = vtMissing,
        const _variant_t & ColumnLevels = vtMissing );
    enum XlSummaryColumn GetSummaryColumn ( );
    void PutSummaryColumn (
        enum XlSummaryColumn RHS );
    enum XlSummaryRow GetSummaryRow ( );
    void PutSummaryRow (
        enum XlSummaryRow RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutomaticStyles (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutomaticStyles (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowLevels (
        /*[in]*/ VARIANT RowLevels,
        /*[in]*/ VARIANT ColumnLevels,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SummaryColumn (
        /*[out,retval]*/ enum XlSummaryColumn * RHS ) = 0;
      virtual HRESULT __stdcall put_SummaryColumn (
        /*[in]*/ enum XlSummaryColumn RHS ) = 0;
      virtual HRESULT __stdcall get_SummaryRow (
        /*[out,retval]*/ enum XlSummaryRow * RHS ) = 0;
      virtual HRESULT __stdcall put_SummaryRow (
        /*[in]*/ enum XlSummaryRow RHS ) = 0;
};

struct __declspec(uuid("000208ad-0001-0000-c000-000000000046"))
IModule : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    _variant_t InsertFile (
        const _variant_t & Filename,
        const _variant_t & Merge = vtMissing );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy18 ( ) = 0;
      virtual HRESULT __stdcall raw__Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ProtectContents (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual void __stdcall _Dummy21 ( ) = 0;
      virtual HRESULT __stdcall get_ProtectionMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual void __stdcall _Dummy23 ( ) = 0;
      virtual HRESULT __stdcall raw__SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetVisibility * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlSheetVisibility RHS ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * RHS ) = 0;
      virtual HRESULT __stdcall raw_InsertFile (
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT Merge,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing ) = 0;
};

struct __declspec(uuid("000208ae-0001-0000-c000-000000000046"))
IModules : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ModulePtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ struct Module * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy7 ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208af-0001-0000-c000-000000000046"))
IDialogSheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetEnableAutoFilter,put=PutEnableAutoFilter))
    VARIANT_BOOL EnableAutoFilter[];
    __declspec(property(get=GetEnableOutlining,put=PutEnableOutlining))
    VARIANT_BOOL EnableOutlining[];
    __declspec(property(get=GetEnablePivotTable,put=PutEnablePivotTable))
    VARIANT_BOOL EnablePivotTable[];
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtection))
    ProtectionPtr Protection;
    __declspec(property(get=GetDialogFrame))
    DialogFramePtr DialogFrame;
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetEnableCalculation,put=PutEnableCalculation))
    VARIANT_BOOL EnableCalculation;
    __declspec(property(get=GetEnableSelection,put=PutEnableSelection))
    enum XlEnableSelection EnableSelection;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    _variant_t DefaultButton;
    __declspec(property(get=GetScrollArea,put=PutScrollArea))
    _bstr_t ScrollArea;
    __declspec(property(get=GetQueryTables))
    QueryTablesPtr QueryTables;
    __declspec(property(get=GetDisplayPageBreaks,put=PutDisplayPageBreaks))
    VARIANT_BOOL DisplayPageBreaks;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects[];
    __declspec(property(get=GetProtectScenarios))
    VARIANT_BOOL ProtectScenarios[];
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft[];
    __declspec(property(get=GetMailEnvelope))
    Office::IMsoEnvelopeVBPtr MailEnvelope;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetAutoFilter))
    AutoFilterPtr AutoFilter;
    __declspec(property(get=GetTab))
    TabPtr Tab;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetCustomProperties))
    CustomPropertiesPtr CustomProperties;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayAutomaticPageBreaks,put=PutDisplayAutomaticPageBreaks))
    VARIANT_BOOL DisplayAutomaticPageBreaks[];
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    long _DisplayRightToLeft[];
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetFocus,put=PutFocus))
    _variant_t Focus;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectDrawingObjects (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    VARIANT_BOOL GetProtectScenarios (
        long lcid = 0 );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableCalculation ( );
    void PutEnableCalculation (
        VARIANT_BOOL RHS );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetDisplayAutomaticPageBreaks (
        long lcid = 0 );
    void PutDisplayAutomaticPageBreaks (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableAutoFilter (
        long lcid = 0 );
    void PutEnableAutoFilter (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlEnableSelection GetEnableSelection ( );
    void PutEnableSelection (
        enum XlEnableSelection RHS );
    VARIANT_BOOL GetEnableOutlining (
        long lcid = 0 );
    void PutEnableOutlining (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnablePivotTable (
        long lcid = 0 );
    void PutEnablePivotTable (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    HRESULT ResetAllPageBreaks ( );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    NamesPtr GetNames ( );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Paste (
        const _variant_t & Destination = vtMissing,
        const _variant_t & Link = vtMissing,
        long lcid = 0 );
    HRESULT _PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        long lcid = 0 );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _bstr_t GetScrollArea ( );
    void PutScrollArea (
        _bstr_t RHS );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    QueryTablesPtr GetQueryTables ( );
    VARIANT_BOOL GetDisplayPageBreaks ( );
    void PutDisplayPageBreaks (
        VARIANT_BOOL RHS );
    CommentsPtr GetComments ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT ClearCircles ( );
    HRESULT CircleInvalid ( );
    long Get_DisplayRightToLeft (
        long lcid = 0 );
    void Put_DisplayRightToLeft (
        long lcid,
        long RHS );
    AutoFilterPtr GetAutoFilter ( );
    VARIANT_BOOL GetDisplayRightToLeft (
        long lcid = 0 );
    void PutDisplayRightToLeft (
        long lcid,
        VARIANT_BOOL RHS );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    HRESULT _CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        const _variant_t & IgnoreFinalYaa = vtMissing,
        const _variant_t & SpellScript = vtMissing,
        long lcid = 0 );
    TabPtr GetTab ( );
    Office::IMsoEnvelopeVBPtr GetMailEnvelope ( );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing );
    CustomPropertiesPtr GetCustomProperties ( );
    SmartTagsPtr GetSmartTags ( );
    ProtectionPtr GetProtection ( );
    HRESULT PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & NoHTMLFormatting = vtMissing,
        long lcid = 0 );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        const _variant_t & AllowFormattingCells = vtMissing,
        const _variant_t & AllowFormattingColumns = vtMissing,
        const _variant_t & AllowFormattingRows = vtMissing,
        const _variant_t & AllowInsertingColumns = vtMissing,
        const _variant_t & AllowInsertingRows = vtMissing,
        const _variant_t & AllowInsertingHyperlinks = vtMissing,
        const _variant_t & AllowDeletingColumns = vtMissing,
        const _variant_t & AllowDeletingRows = vtMissing,
        const _variant_t & AllowSorting = vtMissing,
        const _variant_t & AllowFiltering = vtMissing,
        const _variant_t & AllowUsingPivotTables = vtMissing );
    _variant_t GetDefaultButton ( );
    void PutDefaultButton (
        const _variant_t & RHS );
    DialogFramePtr GetDialogFrame ( );
    IDispatchPtr EditBoxes (
        const _variant_t & Index = vtMissing );
    _variant_t GetFocus ( );
    void PutFocus (
        const _variant_t & RHS );
    VARIANT_BOOL Hide (
        const _variant_t & Cancel = vtMissing );
    VARIANT_BOOL Show ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ProtectContents (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectionMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectScenarios (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw__SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetVisibility * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlSheetVisibility RHS ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * RHS ) = 0;
      virtual void __stdcall _Dummy29 ( ) = 0;
      virtual HRESULT __stdcall raw_Arcs (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy31 ( ) = 0;
      virtual void __stdcall _Dummy32 ( ) = 0;
      virtual HRESULT __stdcall raw_Buttons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy34 ( ) = 0;
      virtual HRESULT __stdcall get_EnableCalculation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableCalculation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual HRESULT __stdcall raw_ChartObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy40 ( ) = 0;
      virtual void __stdcall _Dummy41 ( ) = 0;
      virtual void __stdcall _Dummy42 ( ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
      virtual void __stdcall _Dummy44 ( ) = 0;
      virtual void __stdcall _Dummy45 ( ) = 0;
      virtual HRESULT __stdcall get_DisplayAutomaticPageBreaks (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayAutomaticPageBreaks (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Drawings (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DrawingObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DropDowns (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_EnableAutoFilter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAutoFilter (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableSelection (
        /*[out,retval]*/ enum XlEnableSelection * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableSelection (
        /*[in]*/ enum XlEnableSelection RHS ) = 0;
      virtual HRESULT __stdcall get_EnableOutlining (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableOutlining (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnablePivotTable (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnablePivotTable (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy56 ( ) = 0;
      virtual HRESULT __stdcall raw_ResetAllPageBreaks ( ) = 0;
      virtual HRESULT __stdcall raw_GroupBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_GroupObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Labels (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Lines (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OLEObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy65 ( ) = 0;
      virtual void __stdcall _Dummy66 ( ) = 0;
      virtual void __stdcall _Dummy67 ( ) = 0;
      virtual HRESULT __stdcall raw_OptionButtons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy69 ( ) = 0;
      virtual HRESULT __stdcall raw_Ovals (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ VARIANT Destination = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__PasteSpecial (
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in]*/ VARIANT DisplayAsIcon = vtMissing,
        /*[in]*/ VARIANT IconFileName = vtMissing,
        /*[in]*/ VARIANT IconIndex = vtMissing,
        /*[in]*/ VARIANT IconLabel = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Pictures (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy74 ( ) = 0;
      virtual void __stdcall _Dummy75 ( ) = 0;
      virtual void __stdcall _Dummy76 ( ) = 0;
      virtual HRESULT __stdcall raw_Rectangles (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy78 ( ) = 0;
      virtual void __stdcall _Dummy79 ( ) = 0;
      virtual HRESULT __stdcall get_ScrollArea (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollArea (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollBars (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy82 ( ) = 0;
      virtual void __stdcall _Dummy83 ( ) = 0;
      virtual HRESULT __stdcall raw_Spinners (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy85 ( ) = 0;
      virtual void __stdcall _Dummy86 ( ) = 0;
      virtual HRESULT __stdcall raw_TextBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy88 ( ) = 0;
      virtual void __stdcall _Dummy89 ( ) = 0;
      virtual void __stdcall _Dummy90 ( ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_QueryTables (
        /*[out,retval]*/ struct QueryTables * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayPageBreaks (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayPageBreaks (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ struct Comments * * RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearCircles ( ) = 0;
      virtual HRESULT __stdcall raw_CircleInvalid ( ) = 0;
      virtual HRESULT __stdcall get__DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoFilter (
        /*[out,retval]*/ struct AutoFilter * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in]*/ VARIANT IgnoreFinalYaa = vtMissing,
        /*[in]*/ VARIANT SpellScript = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Tab (
        /*[out,retval]*/ struct Tab * * RHS ) = 0;
      virtual HRESULT __stdcall get_MailEnvelope (
        /*[out,retval]*/ struct Office::IMsoEnvelopeVB * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in]*/ VARIANT Local = vtMissing ) = 0;
      virtual HRESULT __stdcall get_CustomProperties (
        /*[out,retval]*/ struct CustomProperties * * RHS ) = 0;
      virtual HRESULT __stdcall get_SmartTags (
        /*[out,retval]*/ struct SmartTags * * RHS ) = 0;
      virtual HRESULT __stdcall get_Protection (
        /*[out,retval]*/ struct Protection * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in]*/ VARIANT DisplayAsIcon = vtMissing,
        /*[in]*/ VARIANT IconFileName = vtMissing,
        /*[in]*/ VARIANT IconIndex = vtMissing,
        /*[in]*/ VARIANT IconLabel = vtMissing,
        /*[in]*/ VARIANT NoHTMLFormatting = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in]*/ VARIANT AllowFormattingCells = vtMissing,
        /*[in]*/ VARIANT AllowFormattingColumns = vtMissing,
        /*[in]*/ VARIANT AllowFormattingRows = vtMissing,
        /*[in]*/ VARIANT AllowInsertingColumns = vtMissing,
        /*[in]*/ VARIANT AllowInsertingRows = vtMissing,
        /*[in]*/ VARIANT AllowInsertingHyperlinks = vtMissing,
        /*[in]*/ VARIANT AllowDeletingColumns = vtMissing,
        /*[in]*/ VARIANT AllowDeletingRows = vtMissing,
        /*[in]*/ VARIANT AllowSorting = vtMissing,
        /*[in]*/ VARIANT AllowFiltering = vtMissing,
        /*[in]*/ VARIANT AllowUsingPivotTables = vtMissing ) = 0;
      virtual void __stdcall _Dummy113 ( ) = 0;
      virtual void __stdcall _Dummy114 ( ) = 0;
      virtual void __stdcall _Dummy115 ( ) = 0;
      virtual HRESULT __stdcall get_DefaultButton (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultButton (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_DialogFrame (
        /*[out,retval]*/ struct DialogFrame * * RHS ) = 0;
      virtual HRESULT __stdcall raw_EditBoxes (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Focus (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Focus (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Hide (
        /*[in]*/ VARIANT Cancel,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("000208b0-0001-0000-c000-000000000046"))
IDialogSheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DialogSheetPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ struct DialogSheet * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy7 ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208b1-0001-0000-c000-000000000046"))
IWorksheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    HRESULT FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type,
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[in]*/ VARIANT Type,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_FillAcrossSheets (
        /*[in]*/ struct Range * Range,
        /*[in]*/ enum XlFillWith Type,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208b4-0001-0000-c000-000000000046"))
IPageSetup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    double LeftMargin;
    __declspec(property(get=GetRightMargin,put=PutRightMargin))
    double RightMargin;
    __declspec(property(get=GetPrintErrors,put=PutPrintErrors))
    enum XlPrintErrors PrintErrors;
    __declspec(property(get=GetCenterHeaderPicture))
    GraphicPtr CenterHeaderPicture;
    __declspec(property(get=GetCenterFooterPicture))
    GraphicPtr CenterFooterPicture;
    __declspec(property(get=GetLeftHeaderPicture))
    GraphicPtr LeftHeaderPicture;
    __declspec(property(get=GetLeftFooterPicture))
    GraphicPtr LeftFooterPicture;
    __declspec(property(get=GetRightHeaderPicture))
    GraphicPtr RightHeaderPicture;
    __declspec(property(get=GetTopMargin,put=PutTopMargin))
    double TopMargin;
    __declspec(property(get=GetBottomMargin,put=PutBottomMargin))
    double BottomMargin;
    __declspec(property(get=GetPrintHeadings,put=PutPrintHeadings))
    VARIANT_BOOL PrintHeadings;
    __declspec(property(get=GetPrintGridlines,put=PutPrintGridlines))
    VARIANT_BOOL PrintGridlines;
    __declspec(property(get=GetCenterHorizontally,put=PutCenterHorizontally))
    VARIANT_BOOL CenterHorizontally;
    __declspec(property(get=GetOrder,put=PutOrder))
    enum XlOrder Order;
    __declspec(property(get=GetCenterVertically,put=PutCenterVertically))
    VARIANT_BOOL CenterVertically;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    enum XlPaperSize PaperSize;
    __declspec(property(get=GetFirstPageNumber,put=PutFirstPageNumber))
    long FirstPageNumber;
    __declspec(property(get=GetBlackAndWhite,put=PutBlackAndWhite))
    VARIANT_BOOL BlackAndWhite;
    __declspec(property(get=GetCenterFooter,put=PutCenterFooter))
    _bstr_t CenterFooter;
    __declspec(property(get=GetCenterHeader,put=PutCenterHeader))
    _bstr_t CenterHeader;
    __declspec(property(get=GetChartSize,put=PutChartSize))
    enum XlObjectSize ChartSize;
    __declspec(property(get=GetDraft,put=PutDraft))
    VARIANT_BOOL Draft;
    __declspec(property(get=GetPrintNotes,put=PutPrintNotes))
    VARIANT_BOOL PrintNotes;
    __declspec(property(get=GetPrintQuality,put=PutPrintQuality))
    _variant_t PrintQuality[];
    __declspec(property(get=GetPrintTitleColumns,put=PutPrintTitleColumns))
    _bstr_t PrintTitleColumns;
    __declspec(property(get=GetPrintTitleRows,put=PutPrintTitleRows))
    _bstr_t PrintTitleRows;
    __declspec(property(get=GetRightFooter,put=PutRightFooter))
    _bstr_t RightFooter;
    __declspec(property(get=GetRightHeader,put=PutRightHeader))
    _bstr_t RightHeader;
    __declspec(property(get=GetFitToPagesTall,put=PutFitToPagesTall))
    _variant_t FitToPagesTall;
    __declspec(property(get=GetFitToPagesWide,put=PutFitToPagesWide))
    _variant_t FitToPagesWide;
    __declspec(property(get=GetFooterMargin,put=PutFooterMargin))
    double FooterMargin;
    __declspec(property(get=GetHeaderMargin,put=PutHeaderMargin))
    double HeaderMargin;
    __declspec(property(get=GetLeftFooter,put=PutLeftFooter))
    _bstr_t LeftFooter;
    __declspec(property(get=GetPrintComments,put=PutPrintComments))
    enum XlPrintLocation PrintComments;
    __declspec(property(get=GetLeftHeader,put=PutLeftHeader))
    _bstr_t LeftHeader;
    __declspec(property(get=GetPrintArea,put=PutPrintArea))
    _bstr_t PrintArea;
    __declspec(property(get=GetRightFooterPicture))
    GraphicPtr RightFooterPicture;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPageOrientation Orientation;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBlackAndWhite ( );
    void PutBlackAndWhite (
        VARIANT_BOOL RHS );
    double GetBottomMargin ( );
    void PutBottomMargin (
        double RHS );
    _bstr_t GetCenterFooter ( );
    void PutCenterFooter (
        _bstr_t RHS );
    _bstr_t GetCenterHeader ( );
    void PutCenterHeader (
        _bstr_t RHS );
    VARIANT_BOOL GetCenterHorizontally ( );
    void PutCenterHorizontally (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCenterVertically ( );
    void PutCenterVertically (
        VARIANT_BOOL RHS );
    enum XlObjectSize GetChartSize ( );
    void PutChartSize (
        enum XlObjectSize RHS );
    VARIANT_BOOL GetDraft ( );
    void PutDraft (
        VARIANT_BOOL RHS );
    long GetFirstPageNumber ( );
    void PutFirstPageNumber (
        long RHS );
    _variant_t GetFitToPagesTall ( );
    void PutFitToPagesTall (
        const _variant_t & RHS );
    _variant_t GetFitToPagesWide ( );
    void PutFitToPagesWide (
        const _variant_t & RHS );
    double GetFooterMargin ( );
    void PutFooterMargin (
        double RHS );
    double GetHeaderMargin ( );
    void PutHeaderMargin (
        double RHS );
    _bstr_t GetLeftFooter ( );
    void PutLeftFooter (
        _bstr_t RHS );
    _bstr_t GetLeftHeader ( );
    void PutLeftHeader (
        _bstr_t RHS );
    double GetLeftMargin ( );
    void PutLeftMargin (
        double RHS );
    enum XlOrder GetOrder ( );
    void PutOrder (
        enum XlOrder RHS );
    enum XlPageOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPageOrientation RHS );
    enum XlPaperSize GetPaperSize ( );
    void PutPaperSize (
        enum XlPaperSize RHS );
    _bstr_t GetPrintArea ( );
    void PutPrintArea (
        _bstr_t RHS );
    VARIANT_BOOL GetPrintGridlines ( );
    void PutPrintGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPrintHeadings ( );
    void PutPrintHeadings (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPrintNotes ( );
    void PutPrintNotes (
        VARIANT_BOOL RHS );
    _variant_t GetPrintQuality (
        const _variant_t & Index = vtMissing );
    void PutPrintQuality (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _bstr_t GetPrintTitleColumns ( );
    void PutPrintTitleColumns (
        _bstr_t RHS );
    _bstr_t GetPrintTitleRows ( );
    void PutPrintTitleRows (
        _bstr_t RHS );
    _bstr_t GetRightFooter ( );
    void PutRightFooter (
        _bstr_t RHS );
    _bstr_t GetRightHeader ( );
    void PutRightHeader (
        _bstr_t RHS );
    double GetRightMargin ( );
    void PutRightMargin (
        double RHS );
    double GetTopMargin ( );
    void PutTopMargin (
        double RHS );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & RHS );
    enum XlPrintLocation GetPrintComments ( );
    void PutPrintComments (
        enum XlPrintLocation RHS );
    enum XlPrintErrors GetPrintErrors ( );
    void PutPrintErrors (
        enum XlPrintErrors RHS );
    GraphicPtr GetCenterHeaderPicture ( );
    GraphicPtr GetCenterFooterPicture ( );
    GraphicPtr GetLeftHeaderPicture ( );
    GraphicPtr GetLeftFooterPicture ( );
    GraphicPtr GetRightHeaderPicture ( );
    GraphicPtr GetRightFooterPicture ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BlackAndWhite (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BlackAndWhite (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_BottomMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_BottomMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_CenterFooter (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_CenterFooter (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_CenterHeader (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_CenterHeader (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_CenterHorizontally (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CenterHorizontally (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CenterVertically (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CenterVertically (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ChartSize (
        /*[out,retval]*/ enum XlObjectSize * RHS ) = 0;
      virtual HRESULT __stdcall put_ChartSize (
        /*[in]*/ enum XlObjectSize RHS ) = 0;
      virtual HRESULT __stdcall get_Draft (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Draft (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FirstPageNumber (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_FirstPageNumber (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_FitToPagesTall (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FitToPagesTall (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FitToPagesWide (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FitToPagesWide (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FooterMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_FooterMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_HeaderMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_HeaderMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_LeftFooter (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LeftFooter (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LeftHeader (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LeftHeader (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LeftMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_LeftMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ enum XlOrder * RHS ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ enum XlOrder RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlPageOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlPageOrientation RHS ) = 0;
      virtual HRESULT __stdcall get_PaperSize (
        /*[out,retval]*/ enum XlPaperSize * RHS ) = 0;
      virtual HRESULT __stdcall put_PaperSize (
        /*[in]*/ enum XlPaperSize RHS ) = 0;
      virtual HRESULT __stdcall get_PrintArea (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintArea (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PrintGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PrintHeadings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintHeadings (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PrintNotes (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintNotes (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PrintQuality (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintQuality (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_PrintTitleColumns (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintTitleColumns (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PrintTitleRows (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintTitleRows (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RightFooter (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_RightFooter (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RightHeader (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_RightHeader (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RightMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_RightMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_TopMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintComments (
        /*[out,retval]*/ enum XlPrintLocation * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintComments (
        /*[in]*/ enum XlPrintLocation RHS ) = 0;
      virtual HRESULT __stdcall get_PrintErrors (
        /*[out,retval]*/ enum XlPrintErrors * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintErrors (
        /*[in]*/ enum XlPrintErrors RHS ) = 0;
      virtual HRESULT __stdcall get_CenterHeaderPicture (
        /*[out,retval]*/ struct Graphic * * RHS ) = 0;
      virtual HRESULT __stdcall get_CenterFooterPicture (
        /*[out,retval]*/ struct Graphic * * RHS ) = 0;
      virtual HRESULT __stdcall get_LeftHeaderPicture (
        /*[out,retval]*/ struct Graphic * * RHS ) = 0;
      virtual HRESULT __stdcall get_LeftFooterPicture (
        /*[out,retval]*/ struct Graphic * * RHS ) = 0;
      virtual HRESULT __stdcall get_RightHeaderPicture (
        /*[out,retval]*/ struct Graphic * * RHS ) = 0;
      virtual HRESULT __stdcall get_RightFooterPicture (
        /*[out,retval]*/ struct Graphic * * RHS ) = 0;
};

struct __declspec(uuid("000208b8-0001-0000-c000-000000000046"))
INames : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    NamePtr Add (
        const _variant_t & Name = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        const _variant_t & Visible = vtMissing,
        const _variant_t & MacroType = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Category = vtMissing,
        const _variant_t & NameLocal = vtMissing,
        const _variant_t & RefersToLocal = vtMissing,
        const _variant_t & CategoryLocal = vtMissing,
        const _variant_t & RefersToR1C1 = vtMissing,
        const _variant_t & RefersToR1C1Local = vtMissing );
    NamePtr Item (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        long lcid = 0 );
    NamePtr _Default (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT RefersTo,
        /*[in]*/ VARIANT Visible,
        /*[in]*/ VARIANT MacroType,
        /*[in]*/ VARIANT ShortcutKey,
        /*[in]*/ VARIANT Category,
        /*[in]*/ VARIANT NameLocal,
        /*[in]*/ VARIANT RefersToLocal,
        /*[in]*/ VARIANT CategoryLocal,
        /*[in]*/ VARIANT RefersToR1C1,
        /*[in]*/ VARIANT RefersToR1C1Local,
        /*[out,retval]*/ struct Name * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT IndexLocal,
        /*[in]*/ VARIANT RefersTo,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Name * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT IndexLocal,
        /*[in]*/ VARIANT RefersTo,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Name * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208b9-0001-0000-c000-000000000046"))
IName : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category[];
    __declspec(property(get=GetCategoryLocal,put=PutCategoryLocal))
    _bstr_t CategoryLocal;
    __declspec(property(get=GetMacroType,put=PutMacroType))
    enum XlXLMMacroType MacroType;
    __declspec(property(get=GetRefersTo,put=PutRefersTo))
    _variant_t RefersTo[];
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetRefersToLocal,put=PutRefersToLocal))
    _variant_t RefersToLocal;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name[];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetRefersToR1C1,put=PutRefersToR1C1))
    _variant_t RefersToR1C1[];
    __declspec(property(get=GetRefersToR1C1Local,put=PutRefersToR1C1Local))
    _variant_t RefersToR1C1Local;
    __declspec(property(get=GetRefersToRange))
    RangePtr RefersToRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShortcutKey,put=PutShortcutKey))
    _bstr_t ShortcutKey;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    long GetIndex ( );
    _bstr_t GetCategory (
        long lcidIn = 0 );
    void PutCategory (
        long lcidIn,
        _bstr_t RHS );
    _bstr_t GetCategoryLocal ( );
    void PutCategoryLocal (
        _bstr_t RHS );
    HRESULT Delete ( );
    enum XlXLMMacroType GetMacroType ( );
    void PutMacroType (
        enum XlXLMMacroType RHS );
    _bstr_t GetName (
        long lcidIn = 0 );
    void PutName (
        long lcidIn,
        _bstr_t RHS );
    _variant_t GetRefersTo (
        long lcidIn = 0 );
    void PutRefersTo (
        long lcidIn,
        const _variant_t & RHS );
    _bstr_t GetShortcutKey ( );
    void PutShortcutKey (
        _bstr_t RHS );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t RHS );
    _variant_t GetRefersToLocal ( );
    void PutRefersToLocal (
        const _variant_t & RHS );
    _variant_t GetRefersToR1C1 (
        long lcidIn = 0 );
    void PutRefersToR1C1 (
        long lcidIn,
        const _variant_t & RHS );
    _variant_t GetRefersToR1C1Local ( );
    void PutRefersToR1C1Local (
        const _variant_t & RHS );
    RangePtr GetRefersToRange ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[in,lcid]*/ long lcidIn,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in,lcid]*/ long lcidIn,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_CategoryLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_CategoryLocal (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_MacroType (
        /*[out,retval]*/ enum XlXLMMacroType * RHS ) = 0;
      virtual HRESULT __stdcall put_MacroType (
        /*[in]*/ enum XlXLMMacroType RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in,lcid]*/ long lcidIn,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in,lcid]*/ long lcidIn,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RefersTo (
        /*[in,lcid]*/ long lcidIn,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RefersTo (
        /*[in,lcid]*/ long lcidIn,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ShortcutKey (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ShortcutKey (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NameLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NameLocal (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RefersToLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RefersToLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_RefersToR1C1 (
        /*[in,lcid]*/ long lcidIn,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RefersToR1C1 (
        /*[in,lcid]*/ long lcidIn,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_RefersToR1C1Local (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RefersToR1C1Local (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_RefersToRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
};

struct __declspec(uuid("000208d0-0001-0000-c000-000000000046"))
IChartObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    ChartObjectPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy25 ( ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual void __stdcall _Dummy27 ( ) = 0;
      virtual void __stdcall _Dummy28 ( ) = 0;
      virtual void __stdcall _Dummy29 ( ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct ChartObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208d1-0001-0000-c000-000000000046"))
IMailer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWhichAddress,put=PutWhichAddress))
    _variant_t WhichAddress;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBCCRecipients,put=PutBCCRecipients))
    _variant_t BCCRecipients;
    __declspec(property(get=GetCCRecipients,put=PutCCRecipients))
    _variant_t CCRecipients;
    __declspec(property(get=GetEnclosures,put=PutEnclosures))
    _variant_t Enclosures;
    __declspec(property(get=GetReceived))
    VARIANT_BOOL Received;
    __declspec(property(get=GetSendDateTime))
    DATE SendDateTime;
    __declspec(property(get=GetSender))
    _bstr_t Sender;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetToRecipients,put=PutToRecipients))
    _variant_t ToRecipients;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetBCCRecipients ( );
    void PutBCCRecipients (
        const _variant_t & RHS );
    _variant_t GetCCRecipients ( );
    void PutCCRecipients (
        const _variant_t & RHS );
    _variant_t GetEnclosures ( );
    void PutEnclosures (
        const _variant_t & RHS );
    VARIANT_BOOL GetReceived ( );
    DATE GetSendDateTime ( );
    _bstr_t GetSender ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t RHS );
    _variant_t GetToRecipients ( );
    void PutToRecipients (
        const _variant_t & RHS );
    _variant_t GetWhichAddress ( );
    void PutWhichAddress (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BCCRecipients (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_BCCRecipients (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CCRecipients (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CCRecipients (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Enclosures (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Enclosures (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Received (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_SendDateTime (
        /*[out,retval]*/ DATE * RHS ) = 0;
      virtual HRESULT __stdcall get_Sender (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ToRecipients (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ToRecipients (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_WhichAddress (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_WhichAddress (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024422-0001-0000-c000-000000000046"))
ICustomViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomViewPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CustomViewPtr Item (
        const _variant_t & ViewName );
    CustomViewPtr Add (
        _bstr_t ViewName,
        const _variant_t & PrintSettings = vtMissing,
        const _variant_t & RowColSettings = vtMissing );
    CustomViewPtr Get_Default (
        const _variant_t & ViewName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT ViewName,
        /*[out,retval]*/ struct CustomView * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR ViewName,
        /*[in]*/ VARIANT PrintSettings,
        /*[in]*/ VARIANT RowColSettings,
        /*[out,retval]*/ struct CustomView * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT ViewName,
        /*[out,retval]*/ struct CustomView * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024423-0001-0000-c000-000000000046"))
ICustomView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrintSettings))
    VARIANT_BOOL PrintSettings;
    __declspec(property(get=GetRowColSettings))
    VARIANT_BOOL RowColSettings;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetPrintSettings ( );
    VARIANT_BOOL GetRowColSettings ( );
    HRESULT Show ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PrintSettings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_RowColSettings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024424-0001-0000-c000-000000000046"))
IFormatConditions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FormatConditionPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FormatConditionPtr Item (
        const _variant_t & Index );
    FormatConditionPtr Add (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    FormatConditionPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct FormatCondition * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlFormatConditionType Type,
        /*[in]*/ VARIANT Operator,
        /*[in]*/ VARIANT Formula1,
        /*[in]*/ VARIANT Formula2,
        /*[out,retval]*/ struct FormatCondition * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct FormatCondition * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024425-0001-0000-c000-000000000046"))
IFormatCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Modify (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetType ( );
    long GetOperator ( );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    InteriorPtr GetInterior ( );
    BordersPtr GetBorders ( );
    FontPtr GetFont ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Modify (
        /*[in]*/ enum XlFormatConditionType Type,
        /*[in]*/ VARIANT Operator = vtMissing,
        /*[in]*/ VARIANT Formula1 = vtMissing,
        /*[in]*/ VARIANT Formula2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Operator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula1 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula2 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024426-0001-0000-c000-000000000046"))
IComments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CommentPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CommentPtr Item (
        long Index );
    CommentPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024427-0001-0000-c000-000000000046"))
IComment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    ShapePtr GetShape ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    _bstr_t Text (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Overwrite = vtMissing );
    HRESULT Delete ( );
    CommentPtr Next ( );
    CommentPtr Previous ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Text (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Overwrite,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Next (
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Previous (
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
};

struct __declspec(uuid("00024428-0001-0000-c000-000000000046"))
_IQueryTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTextFilePromptOnRefresh,put=PutTextFilePromptOnRefresh))
    VARIANT_BOOL TextFilePromptOnRefresh;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetTextFileDecimalSeparator,put=PutTextFileDecimalSeparator))
    _bstr_t TextFileDecimalSeparator;
    __declspec(property(get=GetTextFileThousandsSeparator,put=PutTextFileThousandsSeparator))
    _bstr_t TextFileThousandsSeparator;
    __declspec(property(get=GetWebSelectionType,put=PutWebSelectionType))
    enum XlWebSelectionType WebSelectionType;
    __declspec(property(get=GetWebFormatting,put=PutWebFormatting))
    enum XlWebFormatting WebFormatting;
    __declspec(property(get=GetWebTables,put=PutWebTables))
    _bstr_t WebTables;
    __declspec(property(get=GetWebPreFormattedTextToColumns,put=PutWebPreFormattedTextToColumns))
    VARIANT_BOOL WebPreFormattedTextToColumns;
    __declspec(property(get=GetWebSingleBlockTextImport,put=PutWebSingleBlockTextImport))
    VARIANT_BOOL WebSingleBlockTextImport;
    __declspec(property(get=GetWebDisableDateRecognition,put=PutWebDisableDateRecognition))
    VARIANT_BOOL WebDisableDateRecognition;
    __declspec(property(get=GetWebConsecutiveDelimitersAsOne,put=PutWebConsecutiveDelimitersAsOne))
    VARIANT_BOOL WebConsecutiveDelimitersAsOne;
    __declspec(property(get=GetSourceConnectionFile,put=PutSourceConnectionFile))
    _bstr_t SourceConnectionFile;
    __declspec(property(get=GetSourceDataFile,put=PutSourceDataFile))
    _bstr_t SourceDataFile;
    __declspec(property(get=GetRobustConnect,put=PutRobustConnect))
    enum XlRobustConnect RobustConnect;
    __declspec(property(get=GetDestination))
    RangePtr Destination;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFieldNames,put=PutFieldNames))
    VARIANT_BOOL FieldNames;
    __declspec(property(get=GetRowNumbers,put=PutRowNumbers))
    VARIANT_BOOL RowNumbers;
    __declspec(property(get=GetFillAdjacentFormulas,put=PutFillAdjacentFormulas))
    VARIANT_BOOL FillAdjacentFormulas;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRefreshing))
    VARIANT_BOOL Refreshing;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetFetchedRowOverflow))
    VARIANT_BOOL FetchedRowOverflow;
    __declspec(property(get=GetRefreshStyle,put=PutRefreshStyle))
    enum XlCellInsertionMode RefreshStyle;
    __declspec(property(get=GetPostText,put=PutPostText))
    _bstr_t PostText;
    __declspec(property(get=GetResultRange))
    RangePtr ResultRange;
    __declspec(property(get=GetParameters))
    ParametersPtr Parameters;
    __declspec(property(get=GetTablesOnlyFromHTML,put=PutTablesOnlyFromHTML))
    VARIANT_BOOL TablesOnlyFromHTML;
    __declspec(property(get=GetEnableEditing,put=PutEnableEditing))
    VARIANT_BOOL EnableEditing;
    __declspec(property(get=GetListObject))
    ListObjectPtr ListObject;
    __declspec(property(get=GetTextFileVisualLayout,put=PutTextFileVisualLayout))
    enum XlTextVisualLayoutType TextFileVisualLayout;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum XlQueryType QueryType;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetWebDisableRedirections,put=PutWebDisableRedirections))
    VARIANT_BOOL WebDisableRedirections;
    __declspec(property(get=GetEditWebPage,put=PutEditWebPage))
    _variant_t EditWebPage;
    __declspec(property(get=GetTextFileTrailingMinusNumbers,put=PutTextFileTrailingMinusNumbers))
    VARIANT_BOOL TextFileTrailingMinusNumbers;
    __declspec(property(get=GetTextFilePlatform,put=PutTextFilePlatform))
    long TextFilePlatform;
    __declspec(property(get=GetTextFileStartRow,put=PutTextFileStartRow))
    long TextFileStartRow;
    __declspec(property(get=GetTextFileParseType,put=PutTextFileParseType))
    enum XlTextParsingType TextFileParseType;
    __declspec(property(get=GetTextFileTextQualifier,put=PutTextFileTextQualifier))
    enum XlTextQualifier TextFileTextQualifier;
    __declspec(property(get=GetTextFileConsecutiveDelimiter,put=PutTextFileConsecutiveDelimiter))
    VARIANT_BOOL TextFileConsecutiveDelimiter;
    __declspec(property(get=GetTextFileTabDelimiter,put=PutTextFileTabDelimiter))
    VARIANT_BOOL TextFileTabDelimiter;
    __declspec(property(get=GetTextFileSemicolonDelimiter,put=PutTextFileSemicolonDelimiter))
    VARIANT_BOOL TextFileSemicolonDelimiter;
    __declspec(property(get=GetTextFileCommaDelimiter,put=PutTextFileCommaDelimiter))
    VARIANT_BOOL TextFileCommaDelimiter;
    __declspec(property(get=GetTextFileSpaceDelimiter,put=PutTextFileSpaceDelimiter))
    VARIANT_BOOL TextFileSpaceDelimiter;
    __declspec(property(get=GetTextFileOtherDelimiter,put=PutTextFileOtherDelimiter))
    _bstr_t TextFileOtherDelimiter;
    __declspec(property(get=GetTextFileColumnDataTypes,put=PutTextFileColumnDataTypes))
    _variant_t TextFileColumnDataTypes;
    __declspec(property(get=GetTextFileFixedColumnWidths,put=PutTextFileFixedColumnWidths))
    _variant_t TextFileFixedColumnWidths;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetPreserveColumnInfo,put=PutPreserveColumnInfo))
    VARIANT_BOOL PreserveColumnInfo;
    __declspec(property(get=GetAdjustColumnWidth,put=PutAdjustColumnWidth))
    VARIANT_BOOL AdjustColumnWidth;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    VARIANT_BOOL GetFieldNames ( );
    void PutFieldNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRowNumbers ( );
    void PutRowNumbers (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetFillAdjacentFormulas ( );
    void PutFillAdjacentFormulas (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRefreshing ( );
    VARIANT_BOOL GetFetchedRowOverflow ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL RHS );
    HRESULT CancelRefresh ( );
    enum XlCellInsertionMode GetRefreshStyle ( );
    void PutRefreshStyle (
        enum XlCellInsertionMode RHS );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL RHS );
    RangePtr GetDestination ( );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & RHS );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & RHS );
    _bstr_t GetPostText ( );
    void PutPostText (
        _bstr_t RHS );
    RangePtr GetResultRange ( );
    HRESULT Delete ( );
    VARIANT_BOOL Refresh (
        const _variant_t & BackgroundQuery = vtMissing );
    ParametersPtr GetParameters ( );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * RHS );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTablesOnlyFromHTML ( );
    void PutTablesOnlyFromHTML (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableEditing ( );
    void PutEnableEditing (
        VARIANT_BOOL RHS );
    long GetTextFilePlatform ( );
    void PutTextFilePlatform (
        long RHS );
    long GetTextFileStartRow ( );
    void PutTextFileStartRow (
        long RHS );
    enum XlTextParsingType GetTextFileParseType ( );
    void PutTextFileParseType (
        enum XlTextParsingType RHS );
    enum XlTextQualifier GetTextFileTextQualifier ( );
    void PutTextFileTextQualifier (
        enum XlTextQualifier RHS );
    VARIANT_BOOL GetTextFileConsecutiveDelimiter ( );
    void PutTextFileConsecutiveDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileTabDelimiter ( );
    void PutTextFileTabDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileSemicolonDelimiter ( );
    void PutTextFileSemicolonDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileCommaDelimiter ( );
    void PutTextFileCommaDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileSpaceDelimiter ( );
    void PutTextFileSpaceDelimiter (
        VARIANT_BOOL RHS );
    _bstr_t GetTextFileOtherDelimiter ( );
    void PutTextFileOtherDelimiter (
        _bstr_t RHS );
    _variant_t GetTextFileColumnDataTypes ( );
    void PutTextFileColumnDataTypes (
        const _variant_t & RHS );
    _variant_t GetTextFileFixedColumnWidths ( );
    void PutTextFileFixedColumnWidths (
        const _variant_t & RHS );
    VARIANT_BOOL GetPreserveColumnInfo ( );
    void PutPreserveColumnInfo (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAdjustColumnWidth ( );
    void PutAdjustColumnWidth (
        VARIANT_BOOL RHS );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & RHS );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType RHS );
    VARIANT_BOOL GetTextFilePromptOnRefresh ( );
    void PutTextFilePromptOnRefresh (
        VARIANT_BOOL RHS );
    enum XlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL RHS );
    _bstr_t GetTextFileDecimalSeparator ( );
    void PutTextFileDecimalSeparator (
        _bstr_t RHS );
    _bstr_t GetTextFileThousandsSeparator ( );
    void PutTextFileThousandsSeparator (
        _bstr_t RHS );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long RHS );
    HRESULT ResetTimer ( );
    enum XlWebSelectionType GetWebSelectionType ( );
    void PutWebSelectionType (
        enum XlWebSelectionType RHS );
    enum XlWebFormatting GetWebFormatting ( );
    void PutWebFormatting (
        enum XlWebFormatting RHS );
    _bstr_t GetWebTables ( );
    void PutWebTables (
        _bstr_t RHS );
    VARIANT_BOOL GetWebPreFormattedTextToColumns ( );
    void PutWebPreFormattedTextToColumns (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebSingleBlockTextImport ( );
    void PutWebSingleBlockTextImport (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebDisableDateRecognition ( );
    void PutWebDisableDateRecognition (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebConsecutiveDelimitersAsOne ( );
    void PutWebConsecutiveDelimitersAsOne (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebDisableRedirections ( );
    void PutWebDisableRedirections (
        VARIANT_BOOL RHS );
    _variant_t GetEditWebPage ( );
    void PutEditWebPage (
        const _variant_t & RHS );
    _bstr_t GetSourceConnectionFile ( );
    void PutSourceConnectionFile (
        _bstr_t RHS );
    _bstr_t GetSourceDataFile ( );
    void PutSourceDataFile (
        _bstr_t RHS );
    enum XlRobustConnect GetRobustConnect ( );
    void PutRobustConnect (
        enum XlRobustConnect RHS );
    VARIANT_BOOL GetTextFileTrailingMinusNumbers ( );
    void PutTextFileTrailingMinusNumbers (
        VARIANT_BOOL RHS );
    HRESULT SaveAsODC (
        _bstr_t ODCFileName,
        const _variant_t & Description = vtMissing,
        const _variant_t & Keywords = vtMissing );
    ListObjectPtr GetListObject ( );
    enum XlTextVisualLayoutType GetTextFileVisualLayout ( );
    void PutTextFileVisualLayout (
        enum XlTextVisualLayoutType RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FieldNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FieldNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RowNumbers (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RowNumbers (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FillAdjacentFormulas (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FillAdjacentFormulas (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasAutoFormat (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasAutoFormat (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshOnFileOpen (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshOnFileOpen (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Refreshing (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_FetchedRowOverflow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_BackgroundQuery (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BackgroundQuery (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_CancelRefresh ( ) = 0;
      virtual HRESULT __stdcall get_RefreshStyle (
        /*[out,retval]*/ enum XlCellInsertionMode * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshStyle (
        /*[in]*/ enum XlCellInsertionMode RHS ) = 0;
      virtual HRESULT __stdcall get_EnableRefresh (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableRefresh (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SavePassword (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SavePassword (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Destination (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Connection (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Connection (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Sql (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Sql (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PostText (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PostText (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ResultRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Refresh (
        /*[in]*/ VARIANT BackgroundQuery,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct Parameters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Recordset (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Recordset (
        /*[in]*/ IDispatch * RHS ) = 0;
      virtual HRESULT __stdcall get_SaveData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TablesOnlyFromHTML (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TablesOnlyFromHTML (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableEditing (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableEditing (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFilePlatform (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFilePlatform (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileStartRow (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileStartRow (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileParseType (
        /*[out,retval]*/ enum XlTextParsingType * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileParseType (
        /*[in]*/ enum XlTextParsingType RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileTextQualifier (
        /*[out,retval]*/ enum XlTextQualifier * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileTextQualifier (
        /*[in]*/ enum XlTextQualifier RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileConsecutiveDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileConsecutiveDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileTabDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileTabDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileSemicolonDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileSemicolonDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileCommaDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileCommaDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileSpaceDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileSpaceDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileOtherDelimiter (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileOtherDelimiter (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileColumnDataTypes (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileColumnDataTypes (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileFixedColumnWidths (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileFixedColumnWidths (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PreserveColumnInfo (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PreserveColumnInfo (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PreserveFormatting (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PreserveFormatting (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AdjustColumnWidth (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AdjustColumnWidth (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CommandText (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandText (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CommandType (
        /*[out,retval]*/ enum XlCmdType * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandType (
        /*[in]*/ enum XlCmdType RHS ) = 0;
      virtual HRESULT __stdcall get_TextFilePromptOnRefresh (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFilePromptOnRefresh (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_QueryType (
        /*[out,retval]*/ enum XlQueryType * RHS ) = 0;
      virtual HRESULT __stdcall get_MaintainConnection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MaintainConnection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileDecimalSeparator (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileDecimalSeparator (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileThousandsSeparator (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileThousandsSeparator (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshPeriod (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshPeriod (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_ResetTimer ( ) = 0;
      virtual HRESULT __stdcall get_WebSelectionType (
        /*[out,retval]*/ enum XlWebSelectionType * RHS ) = 0;
      virtual HRESULT __stdcall put_WebSelectionType (
        /*[in]*/ enum XlWebSelectionType RHS ) = 0;
      virtual HRESULT __stdcall get_WebFormatting (
        /*[out,retval]*/ enum XlWebFormatting * RHS ) = 0;
      virtual HRESULT __stdcall put_WebFormatting (
        /*[in]*/ enum XlWebFormatting RHS ) = 0;
      virtual HRESULT __stdcall get_WebTables (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_WebTables (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_WebPreFormattedTextToColumns (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebPreFormattedTextToColumns (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_WebSingleBlockTextImport (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebSingleBlockTextImport (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_WebDisableDateRecognition (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebDisableDateRecognition (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_WebConsecutiveDelimitersAsOne (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebConsecutiveDelimitersAsOne (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_WebDisableRedirections (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebDisableRedirections (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EditWebPage (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_EditWebPage (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_SourceConnectionFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceConnectionFile (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_SourceDataFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceDataFile (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RobustConnect (
        /*[out,retval]*/ enum XlRobustConnect * RHS ) = 0;
      virtual HRESULT __stdcall put_RobustConnect (
        /*[in]*/ enum XlRobustConnect RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileTrailingMinusNumbers (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileTrailingMinusNumbers (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAsODC (
        /*[in]*/ BSTR ODCFileName,
        /*[in]*/ VARIANT Description = vtMissing,
        /*[in]*/ VARIANT Keywords = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ListObject (
        /*[out,retval]*/ struct ListObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileVisualLayout (
        /*[out,retval]*/ enum XlTextVisualLayoutType * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileVisualLayout (
        /*[in]*/ enum XlTextVisualLayoutType RHS ) = 0;
};

struct __declspec(uuid("00024429-0001-0000-c000-000000000046"))
IQueryTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _QueryTablePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    _QueryTablePtr Add (
        const _variant_t & Connection,
        struct Range * Destination,
        const _variant_t & Sql = vtMissing );
    _QueryTablePtr Item (
        const _variant_t & Index );
    _QueryTablePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Connection,
        /*[in]*/ struct Range * Destination,
        /*[in]*/ VARIANT Sql,
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002442a-0001-0000-c000-000000000046"))
IParameter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceRange))
    RangePtr SourceRange;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetType))
    enum XlParameterType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDataType,put=PutDataType))
    enum XlParameterDataType DataType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRefreshOnChange,put=PutRefreshOnChange))
    VARIANT_BOOL RefreshOnChange;
    __declspec(property(get=GetPromptString))
    _bstr_t PromptString;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlParameterDataType GetDataType ( );
    void PutDataType (
        enum XlParameterDataType RHS );
    enum XlParameterType GetType ( );
    _bstr_t GetPromptString ( );
    _variant_t GetValue ( );
    RangePtr GetSourceRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    HRESULT SetParam (
        enum XlParameterType Type,
        const _variant_t & Value );
    VARIANT_BOOL GetRefreshOnChange ( );
    void PutRefreshOnChange (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ enum XlParameterDataType * RHS ) = 0;
      virtual HRESULT __stdcall put_DataType (
        /*[in]*/ enum XlParameterDataType RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlParameterType * RHS ) = 0;
      virtual HRESULT __stdcall get_PromptString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SourceRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_SetParam (
        /*[in]*/ enum XlParameterType Type,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_RefreshOnChange (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshOnChange (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002442b-0001-0000-c000-000000000046"))
IParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ParameterPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ParameterPtr Add (
        _bstr_t Name,
        const _variant_t & iDataType = vtMissing );
    long GetCount ( );
    ParameterPtr Item (
        const _variant_t & Index );
    ParameterPtr Get_Default (
        const _variant_t & Index );
    HRESULT Delete ( );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT iDataType,
        /*[out,retval]*/ struct Parameter * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Parameter * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Parameter * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002442c-0001-0000-c000-000000000046"))
IODBCError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SqlState (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("0002442d-0001-0000-c000-000000000046"))
IODBCErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ODBCErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ODBCErrorPtr Item (
        long Index );
    ODBCErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ODBCError * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ODBCError * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002442f-0001-0000-c000-000000000046"))
IValidation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlertStyle))
    long AlertStyle;
    __declspec(property(get=GetIgnoreBlank,put=PutIgnoreBlank))
    VARIANT_BOOL IgnoreBlank;
    __declspec(property(get=GetIMEMode,put=PutIMEMode))
    long IMEMode;
    __declspec(property(get=GetInCellDropdown,put=PutInCellDropdown))
    VARIANT_BOOL InCellDropdown;
    __declspec(property(get=GetErrorMessage,put=PutErrorMessage))
    _bstr_t ErrorMessage;
    __declspec(property(get=GetErrorTitle,put=PutErrorTitle))
    _bstr_t ErrorTitle;
    __declspec(property(get=GetInputMessage,put=PutInputMessage))
    _bstr_t InputMessage;
    __declspec(property(get=GetInputTitle,put=PutInputTitle))
    _bstr_t InputTitle;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetShowError,put=PutShowError))
    VARIANT_BOOL ShowError;
    __declspec(property(get=GetShowInput,put=PutShowInput))
    VARIANT_BOOL ShowInput;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Add (
        enum XlDVType Type,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetAlertStyle ( );
    VARIANT_BOOL GetIgnoreBlank ( );
    void PutIgnoreBlank (
        VARIANT_BOOL RHS );
    long GetIMEMode ( );
    void PutIMEMode (
        long RHS );
    VARIANT_BOOL GetInCellDropdown ( );
    void PutInCellDropdown (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );
    _bstr_t GetErrorMessage ( );
    void PutErrorMessage (
        _bstr_t RHS );
    _bstr_t GetErrorTitle ( );
    void PutErrorTitle (
        _bstr_t RHS );
    _bstr_t GetInputMessage ( );
    void PutInputMessage (
        _bstr_t RHS );
    _bstr_t GetInputTitle ( );
    void PutInputTitle (
        _bstr_t RHS );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    HRESULT Modify (
        const _variant_t & Type = vtMissing,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetOperator ( );
    VARIANT_BOOL GetShowError ( );
    void PutShowError (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowInput ( );
    void PutShowInput (
        VARIANT_BOOL RHS );
    long GetType ( );
    VARIANT_BOOL GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlDVType Type,
        /*[in]*/ VARIANT AlertStyle = vtMissing,
        /*[in]*/ VARIANT Operator = vtMissing,
        /*[in]*/ VARIANT Formula1 = vtMissing,
        /*[in]*/ VARIANT Formula2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_AlertStyle (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_IgnoreBlank (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IgnoreBlank (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IMEMode (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_IMEMode (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_InCellDropdown (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InCellDropdown (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_ErrorMessage (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ErrorMessage (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorTitle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ErrorTitle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_InputMessage (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_InputMessage (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_InputTitle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_InputTitle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Formula1 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula2 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Modify (
        /*[in]*/ VARIANT Type = vtMissing,
        /*[in]*/ VARIANT AlertStyle = vtMissing,
        /*[in]*/ VARIANT Operator = vtMissing,
        /*[in]*/ VARIANT Formula1 = vtMissing,
        /*[in]*/ VARIANT Formula2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Operator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowError (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowError (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowInput (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowInput (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("00024430-0001-0000-c000-000000000046"))
IHyperlinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HyperlinkPtr _Default[];
    __declspec(property(get=GetItem))
    HyperlinkPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        IDispatch * Anchor,
        _bstr_t Address,
        const _variant_t & SubAddress = vtMissing,
        const _variant_t & ScreenTip = vtMissing,
        const _variant_t & TextToDisplay = vtMissing );
    long GetCount ( );
    HyperlinkPtr GetItem (
        const _variant_t & Index );
    HyperlinkPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Anchor,
        /*[in]*/ BSTR Address,
        /*[in]*/ VARIANT SubAddress,
        /*[in]*/ VARIANT ScreenTip,
        /*[in]*/ VARIANT TextToDisplay,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Hyperlink * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Hyperlink * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024431-0001-0000-c000-000000000046"))
IHyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetScreenTip,put=PutScreenTip))
    _bstr_t ScreenTip;
    __declspec(property(get=GetTextToDisplay,put=PutTextToDisplay))
    _bstr_t TextToDisplay;
    __declspec(property(get=GetEmailSubject,put=PutEmailSubject))
    _bstr_t EmailSubject;
    __declspec(property(get=GetSubAddress,put=PutSubAddress))
    _bstr_t SubAddress;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    RangePtr GetRange ( );
    ShapePtr GetShape ( );
    _bstr_t GetSubAddress ( );
    void PutSubAddress (
        _bstr_t RHS );
    _bstr_t GetAddress ( );
    void PutAddress (
        _bstr_t RHS );
    long GetType ( );
    HRESULT AddToFavorites ( );
    HRESULT Delete ( );
    HRESULT Follow (
        const _variant_t & NewWindow = vtMissing,
        const _variant_t & AddHistory = vtMissing,
        const _variant_t & ExtraInfo = vtMissing,
        const _variant_t & Method = vtMissing,
        const _variant_t & HeaderInfo = vtMissing );
    _bstr_t GetEmailSubject ( );
    void PutEmailSubject (
        _bstr_t RHS );
    _bstr_t GetScreenTip ( );
    void PutScreenTip (
        _bstr_t RHS );
    _bstr_t GetTextToDisplay ( );
    void PutTextToDisplay (
        _bstr_t RHS );
    HRESULT CreateNewDocument (
        _bstr_t Filename,
        VARIANT_BOOL EditNow,
        VARIANT_BOOL Overwrite );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_SubAddress (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SubAddress (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Address (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Follow (
        /*[in]*/ VARIANT NewWindow = vtMissing,
        /*[in]*/ VARIANT AddHistory = vtMissing,
        /*[in]*/ VARIANT ExtraInfo = vtMissing,
        /*[in]*/ VARIANT Method = vtMissing,
        /*[in]*/ VARIANT HeaderInfo = vtMissing ) = 0;
      virtual HRESULT __stdcall get_EmailSubject (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_EmailSubject (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ScreenTip (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ScreenTip (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_TextToDisplay (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextToDisplay (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_CreateNewDocument (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT_BOOL EditNow,
        /*[in]*/ VARIANT_BOOL Overwrite ) = 0;
};

struct __declspec(uuid("00024432-0001-0000-c000-000000000046"))
IAutoFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetFilters))
    FiltersPtr Filters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetRange ( );
    FiltersPtr GetFilters ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Filters (
        /*[out,retval]*/ struct Filters * * RHS ) = 0;
};

struct __declspec(uuid("00024433-0001-0000-c000-000000000046"))
IFilters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FilterPtr _Default[];
    __declspec(property(get=GetItem))
    FilterPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FilterPtr Get_Default (
        long Index );
    FilterPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Filter * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Filter * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024434-0001-0000-c000-000000000046"))
IFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOn))
    VARIANT_BOOL On;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCriteria1))
    _variant_t Criteria1;
    __declspec(property(get=GetOperator))
    enum XlAutoFilterOperator Operator;
    __declspec(property(get=GetCriteria2))
    _variant_t Criteria2;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetOn ( );
    _variant_t GetCriteria1 ( );
    enum XlAutoFilterOperator GetOperator ( );
    _variant_t GetCriteria2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_On (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Criteria1 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Operator (
        /*[out,retval]*/ enum XlAutoFilterOperator * RHS ) = 0;
      virtual HRESULT __stdcall get_Criteria2 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208d4-0001-0000-c000-000000000046"))
IAutoCorrect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayAutoCorrectOptions,put=PutDisplayAutoCorrectOptions))
    VARIANT_BOOL DisplayAutoCorrectOptions;
    __declspec(property(get=GetCorrectSentenceCap,put=PutCorrectSentenceCap))
    VARIANT_BOOL CorrectSentenceCap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCorrectCapsLock,put=PutCorrectCapsLock))
    VARIANT_BOOL CorrectCapsLock;
    __declspec(property(get=GetAutoExpandListRange,put=PutAutoExpandListRange))
    VARIANT_BOOL AutoExpandListRange;
    __declspec(property(get=GetExcelReplaceText,put=PutExcelReplaceText))
    VARIANT_BOOL ExcelReplaceText;
    __declspec(property(get=GetTwoInitialCapitals,put=PutTwoInitialCapitals))
    VARIANT_BOOL TwoInitialCapitals;
    __declspec(property(get=GetCapitalizeNamesOfDays,put=PutCapitalizeNamesOfDays))
    VARIANT_BOOL CapitalizeNamesOfDays;
    __declspec(property(get=GetReplacementList,put=PutReplacementList))
    _variant_t ReplacementList[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddReplacement (
        _bstr_t What,
        _bstr_t Replacement );
    VARIANT_BOOL GetCapitalizeNamesOfDays ( );
    void PutCapitalizeNamesOfDays (
        VARIANT_BOOL RHS );
    _variant_t DeleteReplacement (
        _bstr_t What );
    _variant_t GetReplacementList (
        const _variant_t & Index = vtMissing );
    void PutReplacementList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    VARIANT_BOOL GetExcelReplaceText ( );
    void PutExcelReplaceText (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTwoInitialCapitals ( );
    void PutTwoInitialCapitals (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCorrectSentenceCap ( );
    void PutCorrectSentenceCap (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCorrectCapsLock ( );
    void PutCorrectCapsLock (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayAutoCorrectOptions ( );
    void PutDisplayAutoCorrectOptions (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAutoExpandListRange ( );
    void PutAutoExpandListRange (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddReplacement (
        /*[in]*/ BSTR What,
        /*[in]*/ BSTR Replacement,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CapitalizeNamesOfDays (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CapitalizeNamesOfDays (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_DeleteReplacement (
        /*[in]*/ BSTR What,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ReplacementList (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ReplacementList (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ExcelReplaceText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ExcelReplaceText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TwoInitialCapitals (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TwoInitialCapitals (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CorrectSentenceCap (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CorrectSentenceCap (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CorrectCapsLock (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CorrectCapsLock (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayAutoCorrectOptions (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayAutoCorrectOptions (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoExpandListRange (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoExpandListRange (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00020854-0001-0000-c000-000000000046"))
IBorder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & RHS );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & RHS );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020870-0001-0000-c000-000000000046"))
IInterior : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetPatternColorIndex,put=PutPatternColorIndex))
    _variant_t PatternColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    _variant_t InvertIfNegative;
    __declspec(property(get=GetPatternColor,put=PutPatternColor))
    _variant_t PatternColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPattern,put=PutPattern))
    _variant_t Pattern;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & RHS );
    _variant_t GetInvertIfNegative ( );
    void PutInvertIfNegative (
        const _variant_t & RHS );
    _variant_t GetPattern ( );
    void PutPattern (
        const _variant_t & RHS );
    _variant_t GetPatternColor ( );
    void PutPatternColor (
        const _variant_t & RHS );
    _variant_t GetPatternColorIndex ( );
    void PutPatternColorIndex (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PatternColor (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PatternColor (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PatternColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PatternColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024435-0001-0000-c000-000000000046"))
IChartFillFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetBackColor))
    ChartColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor))
    ChartColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    long GradientVariant;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        float Degree );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT UserPicture (
        const _variant_t & PictureFile = vtMissing,
        const _variant_t & PictureFormat = vtMissing,
        const _variant_t & PictureStackUnit = vtMissing,
        const _variant_t & PicturePlacement = vtMissing );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    ChartColorFormatPtr GetBackColor ( );
    ChartColorFormatPtr GetForeColor ( );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    long GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OneColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ long Variant,
        /*[in]*/ float Degree ) = 0;
      virtual HRESULT __stdcall raw_TwoColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ long Variant ) = 0;
      virtual HRESULT __stdcall raw_PresetTextured (
        /*[in]*/ enum Office::MsoPresetTexture PresetTexture ) = 0;
      virtual HRESULT __stdcall raw_Solid ( ) = 0;
      virtual HRESULT __stdcall raw_Patterned (
        /*[in]*/ enum Office::MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall raw_UserPicture (
        /*[in]*/ VARIANT PictureFile = vtMissing,
        /*[in]*/ VARIANT PictureFormat = vtMissing,
        /*[in]*/ VARIANT PictureStackUnit = vtMissing,
        /*[in]*/ VARIANT PicturePlacement = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_UserTextured (
        /*[in]*/ BSTR TextureFile ) = 0;
      virtual HRESULT __stdcall raw_PresetGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ long Variant,
        /*[in]*/ enum Office::MsoPresetGradientType PresetGradientType ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ChartColorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ChartColorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientColorType (
        /*[out,retval]*/ enum Office::MsoGradientColorType * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientDegree (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientStyle (
        /*[out,retval]*/ enum Office::MsoGradientStyle * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientVariant (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Office::MsoPatternType * RHS ) = 0;
      virtual HRESULT __stdcall get_PresetGradientType (
        /*[out,retval]*/ enum Office::MsoPresetGradientType * RHS ) = 0;
      virtual HRESULT __stdcall get_PresetTexture (
        /*[out,retval]*/ enum Office::MsoPresetTexture * RHS ) = 0;
      virtual HRESULT __stdcall get_TextureName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_TextureType (
        /*[out,retval]*/ enum Office::MsoTextureType * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoFillType * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
};

struct __declspec(uuid("00024436-0001-0000-c000-000000000046"))
IChartColorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    long _Default;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    long SchemeColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetExcelRGB))
    long ExcelRGB;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetSchemeColor ( );
    void PutSchemeColor (
        long RHS );
    long GetExcelRGB ( );
    long Get_Default ( );
    long GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SchemeColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SchemeColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ExcelRGB (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
};

struct __declspec(uuid("00020848-0001-0000-c000-000000000046"))
IAxis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisTitle))
    AxisTitlePtr AxisTitle;
    __declspec(property(get=GetDisplayUnit,put=PutDisplayUnit))
    enum XlDisplayUnit DisplayUnit;
    __declspec(property(get=GetDisplayUnitCustom,put=PutDisplayUnitCustom))
    double DisplayUnitCustom;
    __declspec(property(get=GetHasDisplayUnitLabel,put=PutHasDisplayUnitLabel))
    VARIANT_BOOL HasDisplayUnitLabel;
    __declspec(property(get=GetDisplayUnitLabel))
    DisplayUnitLabelPtr DisplayUnitLabel;
    __declspec(property(get=GetMajorGridlines))
    GridlinesPtr MajorGridlines;
    __declspec(property(get=GetMinorGridlines))
    GridlinesPtr MinorGridlines;
    __declspec(property(get=GetTickLabels))
    TickLabelsPtr TickLabels;
    __declspec(property(get=GetBaseUnit,put=PutBaseUnit))
    enum XlTimeUnit BaseUnit;
    __declspec(property(get=GetBaseUnitIsAuto,put=PutBaseUnitIsAuto))
    VARIANT_BOOL BaseUnitIsAuto;
    __declspec(property(get=GetMajorUnitScale,put=PutMajorUnitScale))
    enum XlTimeUnit MajorUnitScale;
    __declspec(property(get=GetMinorUnitScale,put=PutMinorUnitScale))
    enum XlTimeUnit MinorUnitScale;
    __declspec(property(get=GetCategoryType,put=PutCategoryType))
    enum XlCategoryType CategoryType;
    __declspec(property(get=GetHasMajorGridlines,put=PutHasMajorGridlines))
    VARIANT_BOOL HasMajorGridlines;
    __declspec(property(get=GetHasMinorGridlines,put=PutHasMinorGridlines))
    VARIANT_BOOL HasMinorGridlines;
    __declspec(property(get=GetMajorTickMark,put=PutMajorTickMark))
    enum XlTickMark MajorTickMark;
    __declspec(property(get=GetMinorTickMark,put=PutMinorTickMark))
    enum XlTickMark MinorTickMark;
    __declspec(property(get=GetTickLabelPosition,put=PutTickLabelPosition))
    enum XlTickLabelPosition TickLabelPosition;
    __declspec(property(get=GetTickLabelSpacing,put=PutTickLabelSpacing))
    long TickLabelSpacing;
    __declspec(property(get=GetType,put=PutType))
    enum XlAxisType Type;
    __declspec(property(get=GetTickMarkSpacing,put=PutTickMarkSpacing))
    long TickMarkSpacing;
    __declspec(property(get=GetMinimumScale,put=PutMinimumScale))
    double MinimumScale;
    __declspec(property(get=GetMinimumScaleIsAuto,put=PutMinimumScaleIsAuto))
    VARIANT_BOOL MinimumScaleIsAuto;
    __declspec(property(get=GetMaximumScale,put=PutMaximumScale))
    double MaximumScale;
    __declspec(property(get=GetMaximumScaleIsAuto,put=PutMaximumScaleIsAuto))
    VARIANT_BOOL MaximumScaleIsAuto;
    __declspec(property(get=GetMajorUnit,put=PutMajorUnit))
    double MajorUnit;
    __declspec(property(get=GetMajorUnitIsAuto,put=PutMajorUnitIsAuto))
    VARIANT_BOOL MajorUnitIsAuto;
    __declspec(property(get=GetMinorUnit,put=PutMinorUnit))
    double MinorUnit;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetMinorUnitIsAuto,put=PutMinorUnitIsAuto))
    VARIANT_BOOL MinorUnitIsAuto;
    __declspec(property(get=GetScaleType,put=PutScaleType))
    enum XlScaleType ScaleType;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetReversePlotOrder,put=PutReversePlotOrder))
    VARIANT_BOOL ReversePlotOrder;
    __declspec(property(get=GetAxisBetweenCategories,put=PutAxisBetweenCategories))
    VARIANT_BOOL AxisBetweenCategories;
    __declspec(property(get=GetAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetCrosses,put=PutCrosses))
    enum XlAxisCrosses Crosses;
    __declspec(property(get=GetCrossesAt,put=PutCrossesAt))
    double CrossesAt;
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCategoryNames,put=PutCategoryNames))
    _variant_t CategoryNames;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAxisBetweenCategories ( );
    void PutAxisBetweenCategories (
        VARIANT_BOOL RHS );
    enum XlAxisGroup GetAxisGroup ( );
    AxisTitlePtr GetAxisTitle ( );
    BorderPtr GetBorder ( );
    _variant_t GetCategoryNames ( );
    void PutCategoryNames (
        const _variant_t & RHS );
    enum XlAxisCrosses GetCrosses ( );
    void PutCrosses (
        enum XlAxisCrosses RHS );
    double GetCrossesAt ( );
    void PutCrossesAt (
        double RHS );
    _variant_t Delete ( );
    VARIANT_BOOL GetHasMajorGridlines ( );
    void PutHasMajorGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasMinorGridlines ( );
    void PutHasMinorGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasTitle ( );
    void PutHasTitle (
        VARIANT_BOOL RHS );
    GridlinesPtr GetMajorGridlines ( );
    enum XlTickMark GetMajorTickMark ( );
    void PutMajorTickMark (
        enum XlTickMark RHS );
    double GetMajorUnit ( );
    void PutMajorUnit (
        double RHS );
    VARIANT_BOOL GetMajorUnitIsAuto ( );
    void PutMajorUnitIsAuto (
        VARIANT_BOOL RHS );
    double GetMaximumScale ( );
    void PutMaximumScale (
        double RHS );
    VARIANT_BOOL GetMaximumScaleIsAuto ( );
    void PutMaximumScaleIsAuto (
        VARIANT_BOOL RHS );
    double GetMinimumScale ( );
    void PutMinimumScale (
        double RHS );
    VARIANT_BOOL GetMinimumScaleIsAuto ( );
    void PutMinimumScaleIsAuto (
        VARIANT_BOOL RHS );
    GridlinesPtr GetMinorGridlines ( );
    enum XlTickMark GetMinorTickMark ( );
    void PutMinorTickMark (
        enum XlTickMark RHS );
    double GetMinorUnit ( );
    void PutMinorUnit (
        double RHS );
    VARIANT_BOOL GetMinorUnitIsAuto ( );
    void PutMinorUnitIsAuto (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetReversePlotOrder ( );
    void PutReversePlotOrder (
        VARIANT_BOOL RHS );
    enum XlScaleType GetScaleType ( );
    void PutScaleType (
        enum XlScaleType RHS );
    _variant_t Select ( );
    enum XlTickLabelPosition GetTickLabelPosition ( );
    void PutTickLabelPosition (
        enum XlTickLabelPosition RHS );
    TickLabelsPtr GetTickLabels ( );
    long GetTickLabelSpacing ( );
    void PutTickLabelSpacing (
        long RHS );
    long GetTickMarkSpacing ( );
    void PutTickMarkSpacing (
        long RHS );
    enum XlAxisType GetType ( );
    void PutType (
        enum XlAxisType RHS );
    enum XlTimeUnit GetBaseUnit ( );
    void PutBaseUnit (
        enum XlTimeUnit RHS );
    VARIANT_BOOL GetBaseUnitIsAuto ( );
    void PutBaseUnitIsAuto (
        VARIANT_BOOL RHS );
    enum XlTimeUnit GetMajorUnitScale ( );
    void PutMajorUnitScale (
        enum XlTimeUnit RHS );
    enum XlTimeUnit GetMinorUnitScale ( );
    void PutMinorUnitScale (
        enum XlTimeUnit RHS );
    enum XlCategoryType GetCategoryType ( );
    void PutCategoryType (
        enum XlCategoryType RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    enum XlDisplayUnit GetDisplayUnit ( );
    void PutDisplayUnit (
        enum XlDisplayUnit RHS );
    double GetDisplayUnitCustom ( );
    void PutDisplayUnitCustom (
        double RHS );
    VARIANT_BOOL GetHasDisplayUnitLabel ( );
    void PutHasDisplayUnitLabel (
        VARIANT_BOOL RHS );
    DisplayUnitLabelPtr GetDisplayUnitLabel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisBetweenCategories (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AxisBetweenCategories (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AxisGroup (
        /*[out,retval]*/ enum XlAxisGroup * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisTitle (
        /*[out,retval]*/ struct AxisTitle * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_CategoryNames (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CategoryNames (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Crosses (
        /*[out,retval]*/ enum XlAxisCrosses * RHS ) = 0;
      virtual HRESULT __stdcall put_Crosses (
        /*[in]*/ enum XlAxisCrosses RHS ) = 0;
      virtual HRESULT __stdcall get_CrossesAt (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_CrossesAt (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_HasMajorGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasMajorGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasMinorGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasMinorGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasTitle (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasTitle (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MajorGridlines (
        /*[out,retval]*/ struct Gridlines * * RHS ) = 0;
      virtual HRESULT __stdcall get_MajorTickMark (
        /*[out,retval]*/ enum XlTickMark * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorTickMark (
        /*[in]*/ enum XlTickMark RHS ) = 0;
      virtual HRESULT __stdcall get_MajorUnit (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorUnit (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MajorUnitIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorUnitIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MaximumScale (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MaximumScale (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MaximumScaleIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MaximumScaleIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MinimumScale (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MinimumScale (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MinimumScaleIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MinimumScaleIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MinorGridlines (
        /*[out,retval]*/ struct Gridlines * * RHS ) = 0;
      virtual HRESULT __stdcall get_MinorTickMark (
        /*[out,retval]*/ enum XlTickMark * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorTickMark (
        /*[in]*/ enum XlTickMark RHS ) = 0;
      virtual HRESULT __stdcall get_MinorUnit (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorUnit (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MinorUnitIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorUnitIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ReversePlotOrder (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ReversePlotOrder (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ScaleType (
        /*[out,retval]*/ enum XlScaleType * RHS ) = 0;
      virtual HRESULT __stdcall put_ScaleType (
        /*[in]*/ enum XlScaleType RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_TickLabelPosition (
        /*[out,retval]*/ enum XlTickLabelPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_TickLabelPosition (
        /*[in]*/ enum XlTickLabelPosition RHS ) = 0;
      virtual HRESULT __stdcall get_TickLabels (
        /*[out,retval]*/ struct TickLabels * * RHS ) = 0;
      virtual HRESULT __stdcall get_TickLabelSpacing (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TickLabelSpacing (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TickMarkSpacing (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TickMarkSpacing (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlAxisType * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlAxisType RHS ) = 0;
      virtual HRESULT __stdcall get_BaseUnit (
        /*[out,retval]*/ enum XlTimeUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseUnit (
        /*[in]*/ enum XlTimeUnit RHS ) = 0;
      virtual HRESULT __stdcall get_BaseUnitIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseUnitIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MajorUnitScale (
        /*[out,retval]*/ enum XlTimeUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorUnitScale (
        /*[in]*/ enum XlTimeUnit RHS ) = 0;
      virtual HRESULT __stdcall get_MinorUnitScale (
        /*[out,retval]*/ enum XlTimeUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorUnitScale (
        /*[in]*/ enum XlTimeUnit RHS ) = 0;
      virtual HRESULT __stdcall get_CategoryType (
        /*[out,retval]*/ enum XlCategoryType * RHS ) = 0;
      virtual HRESULT __stdcall put_CategoryType (
        /*[in]*/ enum XlCategoryType RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayUnit (
        /*[out,retval]*/ enum XlDisplayUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayUnit (
        /*[in]*/ enum XlDisplayUnit RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayUnitCustom (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayUnitCustom (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_HasDisplayUnitLabel (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDisplayUnitLabel (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayUnitLabel (
        /*[out,retval]*/ struct DisplayUnitLabel * * RHS ) = 0;
};

struct __declspec(uuid("00020849-0001-0000-c000-000000000046"))
IChartTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002084a-0001-0000-c000-000000000046"))
IAxisTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020859-0001-0000-c000-000000000046"))
IChartGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVaryByCategories,put=PutVaryByCategories))
    VARIANT_BOOL VaryByCategories;
    __declspec(property(get=GetHasDropLines,put=PutHasDropLines))
    VARIANT_BOOL HasDropLines;
    __declspec(property(get=GetHasHiLoLines,put=PutHasHiLoLines))
    VARIANT_BOOL HasHiLoLines;
    __declspec(property(get=GetFirstSliceAngle,put=PutFirstSliceAngle))
    long FirstSliceAngle;
    __declspec(property(get=GetHasRadarAxisLabels,put=PutHasRadarAxisLabels))
    VARIANT_BOOL HasRadarAxisLabels;
    __declspec(property(get=GetHasSeriesLines,put=PutHasSeriesLines))
    VARIANT_BOOL HasSeriesLines;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHasUpDownBars,put=PutHasUpDownBars))
    VARIANT_BOOL HasUpDownBars;
    __declspec(property(get=GetUpBars))
    UpBarsPtr UpBars;
    __declspec(property(get=GetDownBars))
    DownBarsPtr DownBars;
    __declspec(property(get=GetDropLines))
    DropLinesPtr DropLines;
    __declspec(property(get=GetHiLoLines))
    HiLoLinesPtr HiLoLines;
    __declspec(property(get=GetRadarAxisLabels))
    TickLabelsPtr RadarAxisLabels;
    __declspec(property(get=GetSeriesLines))
    SeriesLinesPtr SeriesLines;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSizeRepresents,put=PutSizeRepresents))
    enum XlSizeRepresents SizeRepresents;
    __declspec(property(get=GetBubbleScale,put=PutBubbleScale))
    long BubbleScale;
    __declspec(property(get=GetShowNegativeBubbles,put=PutShowNegativeBubbles))
    VARIANT_BOOL ShowNegativeBubbles;
    __declspec(property(get=GetSplitType,put=PutSplitType))
    enum XlChartSplitType SplitType;
    __declspec(property(get=GetSplitValue,put=PutSplitValue))
    _variant_t SplitValue;
    __declspec(property(get=GetSecondPlotSize,put=PutSecondPlotSize))
    long SecondPlotSize;
    __declspec(property(get=GetHas3DShading,put=PutHas3DShading))
    VARIANT_BOOL Has3DShading;
    __declspec(property(get=GetDoughnutHoleSize,put=PutDoughnutHoleSize))
    long DoughnutHoleSize;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetSubType,put=PutSubType))
    long SubType;
    __declspec(property(get=GetGapWidth,put=PutGapWidth))
    long GapWidth;
    __declspec(property(get=GetOverlap,put=PutOverlap))
    long Overlap;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup RHS );
    long GetDoughnutHoleSize ( );
    void PutDoughnutHoleSize (
        long RHS );
    DownBarsPtr GetDownBars ( );
    DropLinesPtr GetDropLines ( );
    long GetFirstSliceAngle ( );
    void PutFirstSliceAngle (
        long RHS );
    long GetGapWidth ( );
    void PutGapWidth (
        long RHS );
    VARIANT_BOOL GetHasDropLines ( );
    void PutHasDropLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasHiLoLines ( );
    void PutHasHiLoLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasRadarAxisLabels ( );
    void PutHasRadarAxisLabels (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasSeriesLines ( );
    void PutHasSeriesLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasUpDownBars ( );
    void PutHasUpDownBars (
        VARIANT_BOOL RHS );
    HiLoLinesPtr GetHiLoLines ( );
    long GetIndex ( );
    long GetOverlap ( );
    void PutOverlap (
        long RHS );
    TickLabelsPtr GetRadarAxisLabels ( );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing );
    SeriesLinesPtr GetSeriesLines ( );
    long GetSubType ( );
    void PutSubType (
        long RHS );
    long GetType ( );
    void PutType (
        long RHS );
    UpBarsPtr GetUpBars ( );
    VARIANT_BOOL GetVaryByCategories ( );
    void PutVaryByCategories (
        VARIANT_BOOL RHS );
    enum XlSizeRepresents GetSizeRepresents ( );
    void PutSizeRepresents (
        enum XlSizeRepresents RHS );
    long GetBubbleScale ( );
    void PutBubbleScale (
        long RHS );
    VARIANT_BOOL GetShowNegativeBubbles ( );
    void PutShowNegativeBubbles (
        VARIANT_BOOL RHS );
    enum XlChartSplitType GetSplitType ( );
    void PutSplitType (
        enum XlChartSplitType RHS );
    _variant_t GetSplitValue ( );
    void PutSplitValue (
        const _variant_t & RHS );
    long GetSecondPlotSize ( );
    void PutSecondPlotSize (
        long RHS );
    VARIANT_BOOL GetHas3DShading ( );
    void PutHas3DShading (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisGroup (
        /*[out,retval]*/ enum XlAxisGroup * RHS ) = 0;
      virtual HRESULT __stdcall put_AxisGroup (
        /*[in]*/ enum XlAxisGroup RHS ) = 0;
      virtual HRESULT __stdcall get_DoughnutHoleSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DoughnutHoleSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_DownBars (
        /*[out,retval]*/ struct DownBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct DropLines * * RHS ) = 0;
      virtual HRESULT __stdcall get_FirstSliceAngle (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_FirstSliceAngle (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_GapWidth (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_GapWidth (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HasDropLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDropLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasHiLoLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasHiLoLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasRadarAxisLabels (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasRadarAxisLabels (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasSeriesLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasSeriesLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasUpDownBars (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasUpDownBars (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HiLoLines (
        /*[out,retval]*/ struct HiLoLines * * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Overlap (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Overlap (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_RadarAxisLabels (
        /*[out,retval]*/ struct TickLabels * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SeriesCollection (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SeriesLines (
        /*[out,retval]*/ struct SeriesLines * * RHS ) = 0;
      virtual HRESULT __stdcall get_SubType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SubType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_UpBars (
        /*[out,retval]*/ struct UpBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_VaryByCategories (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_VaryByCategories (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SizeRepresents (
        /*[out,retval]*/ enum XlSizeRepresents * RHS ) = 0;
      virtual HRESULT __stdcall put_SizeRepresents (
        /*[in]*/ enum XlSizeRepresents RHS ) = 0;
      virtual HRESULT __stdcall get_BubbleScale (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_BubbleScale (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ShowNegativeBubbles (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowNegativeBubbles (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SplitType (
        /*[out,retval]*/ enum XlChartSplitType * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitType (
        /*[in]*/ enum XlChartSplitType RHS ) = 0;
      virtual HRESULT __stdcall get_SplitValue (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitValue (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_SecondPlotSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SecondPlotSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Has3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Has3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002085a-0001-0000-c000-000000000046"))
IChartGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ChartGroupPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002085b-0001-0000-c000-000000000046"))
IAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    AxisPtr Item (
        enum XlAxisType Type,
        enum XlAxisGroup AxisGroup );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ enum XlAxisType Type,
        /*[in]*/ enum XlAxisGroup AxisGroup,
        /*[out,retval]*/ struct Axis * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020869-0001-0000-c000-000000000046"))
IPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PointPtr Item (
        long Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Point * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002086a-0001-0000-c000-000000000046"))
IPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetHasDataLabel,put=PutHasDataLabel))
    VARIANT_BOOL HasDataLabel;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetSecondaryPlot,put=PutSecondaryPlot))
    VARIANT_BOOL SecondaryPlot;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    long GetExplosion ( );
    void PutExplosion (
        long RHS );
    VARIANT_BOOL GetHasDataLabel ( );
    void PutHasDataLabel (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType RHS );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    _variant_t Select ( );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSecondaryPlot ( );
    void PutSecondaryPlot (
        VARIANT_BOOL RHS );
    ChartFillFormatPtr GetFill ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[in]*/ VARIANT HasLeaderLines,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataLabel (
        /*[out,retval]*/ struct DataLabel * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Explosion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Explosion (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HasDataLabel (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDataLabel (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ enum XlMarkerStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ enum XlMarkerStyle RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ enum XlChartPictureType * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ enum XlChartPictureType RHS ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToSides (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToSides (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToFront (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToFront (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToEnd (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToEnd (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SecondaryPlot (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SecondaryPlot (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[in]*/ VARIANT HasLeaderLines,
        /*[in]*/ VARIANT ShowSeriesName,
        /*[in]*/ VARIANT ShowCategoryName,
        /*[in]*/ VARIANT ShowValue,
        /*[in]*/ VARIANT ShowPercentage,
        /*[in]*/ VARIANT ShowBubbleSize,
        /*[in]*/ VARIANT Separator,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("0002086b-0001-0000-c000-000000000046"))
ISeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetHasDataLabels,put=PutHasDataLabels))
    VARIANT_BOOL HasDataLabels;
    __declspec(property(get=GetHasLeaderLines,put=PutHasLeaderLines))
    VARIANT_BOOL HasLeaderLines;
    __declspec(property(get=GetChartType,put=PutChartType))
    enum XlChartType ChartType;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _bstr_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _bstr_t FormulaR1C1;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _bstr_t FormulaR1C1Local;
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetXValues,put=PutXValues))
    _variant_t XValues;
    __declspec(property(get=GetErrorBars))
    ErrorBarsPtr ErrorBars;
    __declspec(property(get=GetHasErrorBars,put=PutHasErrorBars))
    VARIANT_BOOL HasErrorBars;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetValues,put=PutValues))
    _variant_t Values;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetBubbleSizes,put=PutBubbleSizes))
    _variant_t BubbleSizes;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetPlotOrder,put=PutPlotOrder))
    long PlotOrder;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetHas3DEffect,put=PutHas3DEffect))
    VARIANT_BOOL Has3DEffect;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetLeaderLines))
    LeaderLinesPtr LeaderLines;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup RHS );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    IDispatchPtr DataLabels (
        const _variant_t & Index = vtMissing );
    _variant_t Delete ( );
    _variant_t ErrorBar (
        enum XlErrorBarDirection Direction,
        enum XlErrorBarInclude Include,
        enum XlErrorBarType Type,
        const _variant_t & Amount = vtMissing,
        const _variant_t & MinusValues = vtMissing );
    ErrorBarsPtr GetErrorBars ( );
    long GetExplosion ( );
    void PutExplosion (
        long RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _bstr_t GetFormulaLocal ( );
    void PutFormulaLocal (
        _bstr_t RHS );
    _bstr_t GetFormulaR1C1 ( );
    void PutFormulaR1C1 (
        _bstr_t RHS );
    _bstr_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        _bstr_t RHS );
    VARIANT_BOOL GetHasDataLabels ( );
    void PutHasDataLabels (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasErrorBars ( );
    void PutHasErrorBars (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType RHS );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    long GetPlotOrder ( );
    void PutPlotOrder (
        long RHS );
    IDispatchPtr Points (
        const _variant_t & Index = vtMissing );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL RHS );
    IDispatchPtr Trendlines (
        const _variant_t & Index = vtMissing );
    long GetType ( );
    void PutType (
        long RHS );
    enum XlChartType GetChartType ( );
    void PutChartType (
        enum XlChartType RHS );
    HRESULT ApplyCustomType (
        enum XlChartType ChartType );
    _variant_t GetValues ( );
    void PutValues (
        const _variant_t & RHS );
    _variant_t GetXValues ( );
    void PutXValues (
        const _variant_t & RHS );
    _variant_t GetBubbleSizes ( );
    void PutBubbleSizes (
        const _variant_t & RHS );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape RHS );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHas3DEffect ( );
    void PutHas3DEffect (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasLeaderLines ( );
    void PutHasLeaderLines (
        VARIANT_BOOL RHS );
    LeaderLinesPtr GetLeaderLines ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[in]*/ VARIANT HasLeaderLines,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisGroup (
        /*[out,retval]*/ enum XlAxisGroup * RHS ) = 0;
      virtual HRESULT __stdcall put_AxisGroup (
        /*[in]*/ enum XlAxisGroup RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_DataLabels (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ErrorBar (
        /*[in]*/ enum XlErrorBarDirection Direction,
        /*[in]*/ enum XlErrorBarInclude Include,
        /*[in]*/ enum XlErrorBarType Type,
        /*[in]*/ VARIANT Amount,
        /*[in]*/ VARIANT MinusValues,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorBars (
        /*[out,retval]*/ struct ErrorBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_Explosion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Explosion (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaLocal (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1 (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1Local (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1Local (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HasDataLabels (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDataLabels (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasErrorBars (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasErrorBars (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ enum XlMarkerStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ enum XlMarkerStyle RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ enum XlChartPictureType * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ enum XlChartPictureType RHS ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PlotOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PlotOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Points (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Trendlines (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ChartType (
        /*[out,retval]*/ enum XlChartType * RHS ) = 0;
      virtual HRESULT __stdcall put_ChartType (
        /*[in]*/ enum XlChartType RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyCustomType (
        /*[in]*/ enum XlChartType ChartType ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Values (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_XValues (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_XValues (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_BubbleSizes (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_BubbleSizes (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_BarShape (
        /*[out,retval]*/ enum XlBarShape * RHS ) = 0;
      virtual HRESULT __stdcall put_BarShape (
        /*[in]*/ enum XlBarShape RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToSides (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToSides (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToFront (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToFront (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToEnd (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToEnd (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Has3DEffect (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Has3DEffect (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasLeaderLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasLeaderLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LeaderLines (
        /*[out,retval]*/ struct LeaderLines * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[in]*/ VARIANT HasLeaderLines,
        /*[in]*/ VARIANT ShowSeriesName,
        /*[in]*/ VARIANT ShowCategoryName,
        /*[in]*/ VARIANT ShowValue,
        /*[in]*/ VARIANT ShowPercentage,
        /*[in]*/ VARIANT ShowBubbleSize,
        /*[in]*/ VARIANT Separator,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("0002086c-0001-0000-c000-000000000046"))
ISeriesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SeriesPtr Add (
        const _variant_t & Source,
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing );
    long GetCount ( );
    _variant_t Extend (
        const _variant_t & Source,
        const _variant_t & Rowcol = vtMissing,
        const _variant_t & CategoryLabels = vtMissing );
    SeriesPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    _variant_t Paste (
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing,
        const _variant_t & NewSeries = vtMissing );
    SeriesPtr NewSeries ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Source,
        /*[in]*/ enum XlRowCol Rowcol,
        /*[in]*/ VARIANT SeriesLabels,
        /*[in]*/ VARIANT CategoryLabels,
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ struct Series * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Extend (
        /*[in]*/ VARIANT Source,
        /*[in]*/ VARIANT Rowcol,
        /*[in]*/ VARIANT CategoryLabels,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Series * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ enum XlRowCol Rowcol,
        /*[in]*/ VARIANT SeriesLabels,
        /*[in]*/ VARIANT CategoryLabels,
        /*[in]*/ VARIANT Replace,
        /*[in]*/ VARIANT NewSeries,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_NewSeries (
        /*[out,retval]*/ struct Series * * RHS ) = 0;
};

struct __declspec(uuid("000208b2-0001-0000-c000-000000000046"))
IDataLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;
    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & RHS );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition RHS );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL RHS );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLinked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ShowLegendKey (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowLegendKey (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlDataLabelPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlDataLabelPosition RHS ) = 0;
      virtual HRESULT __stdcall get_ShowSeriesName (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowSeriesName (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowCategoryName (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowCategoryName (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowValue (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowValue (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowPercentage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowPercentage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowBubbleSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowBubbleSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Separator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Separator (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208b3-0001-0000-c000-000000000046"))
IDataLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & RHS );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition RHS );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL RHS );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & RHS );
    long GetCount ( );
    DataLabelPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual void __stdcall _Dummy9 ( ) = 0;
      virtual void __stdcall _Dummy10 ( ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy13 ( ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy16 ( ) = 0;
      virtual void __stdcall _Dummy17 ( ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLinked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ShowLegendKey (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowLegendKey (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlDataLabelPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlDataLabelPosition RHS ) = 0;
      virtual HRESULT __stdcall get_ShowSeriesName (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowSeriesName (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowCategoryName (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowCategoryName (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowValue (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowValue (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowPercentage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowPercentage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowBubbleSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowBubbleSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Separator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Separator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DataLabel * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208ba-0001-0000-c000-000000000046"))
ILegendEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLegendKey))
    LegendKeyPtr LegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    long GetIndex ( );
    LegendKeyPtr GetLegendKey ( );
    _variant_t Select ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_LegendKey (
        /*[out,retval]*/ struct LegendKey * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
};

struct __declspec(uuid("000208bb-0001-0000-c000-000000000046"))
ILegendEntries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    LegendEntryPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct LegendEntry * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208bc-0001-0000-c000-000000000046"))
ILegendKey : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    long PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    long GetPictureType ( );
    void PutPictureType (
        long RHS );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ enum XlMarkerStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ enum XlMarkerStyle RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("000208bd-0001-0000-c000-000000000046"))
ITrendlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    TrendlinePtr Add (
        enum XlTrendlineType Type,
        const _variant_t & Order = vtMissing,
        const _variant_t & Period = vtMissing,
        const _variant_t & Forward = vtMissing,
        const _variant_t & Backward = vtMissing,
        const _variant_t & Intercept = vtMissing,
        const _variant_t & DisplayEquation = vtMissing,
        const _variant_t & DisplayRSquared = vtMissing,
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    TrendlinePtr Item (
        const _variant_t & Index = vtMissing );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlTrendlineType Type,
        /*[in]*/ VARIANT Order,
        /*[in]*/ VARIANT Period,
        /*[in]*/ VARIANT Forward,
        /*[in]*/ VARIANT Backward,
        /*[in]*/ VARIANT Intercept,
        /*[in]*/ VARIANT DisplayEquation,
        /*[in]*/ VARIANT DisplayRSquared,
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct Trendline * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Trendline * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208be-0001-0000-c000-000000000046"))
ITrendline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetForward,put=PutForward))
    long Forward;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetType,put=PutType))
    enum XlTrendlineType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPeriod,put=PutPeriod))
    long Period;
    __declspec(property(get=GetBackward,put=PutBackward))
    long Backward;
    __declspec(property(get=GetIntercept,put=PutIntercept))
    double Intercept;
    __declspec(property(get=GetInterceptIsAuto,put=PutInterceptIsAuto))
    VARIANT_BOOL InterceptIsAuto;
    __declspec(property(get=GetNameIsAuto,put=PutNameIsAuto))
    VARIANT_BOOL NameIsAuto;
    __declspec(property(get=GetDisplayRSquared,put=PutDisplayRSquared))
    VARIANT_BOOL DisplayRSquared;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetDisplayEquation,put=PutDisplayEquation))
    VARIANT_BOOL DisplayEquation;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetBackward ( );
    void PutBackward (
        long RHS );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    VARIANT_BOOL GetDisplayEquation ( );
    void PutDisplayEquation (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayRSquared ( );
    void PutDisplayRSquared (
        VARIANT_BOOL RHS );
    long GetForward ( );
    void PutForward (
        long RHS );
    long GetIndex ( );
    double GetIntercept ( );
    void PutIntercept (
        double RHS );
    VARIANT_BOOL GetInterceptIsAuto ( );
    void PutInterceptIsAuto (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    VARIANT_BOOL GetNameIsAuto ( );
    void PutNameIsAuto (
        VARIANT_BOOL RHS );
    long GetOrder ( );
    void PutOrder (
        long RHS );
    long GetPeriod ( );
    void PutPeriod (
        long RHS );
    _variant_t Select ( );
    enum XlTrendlineType GetType ( );
    void PutType (
        enum XlTrendlineType RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Backward (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Backward (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataLabel (
        /*[out,retval]*/ struct DataLabel * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayEquation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayEquation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRSquared (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRSquared (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Forward (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Forward (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Intercept (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Intercept (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_InterceptIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InterceptIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NameIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NameIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Period (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Period (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlTrendlineType * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlTrendlineType RHS ) = 0;
};

struct __declspec(uuid("000208c0-0001-0000-c000-000000000046"))
ICorners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c1-0001-0000-c000-000000000046"))
ISeriesLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c2-0001-0000-c000-000000000046"))
IHiLoLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c3-0001-0000-c000-000000000046"))
IGridlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c4-0001-0000-c000-000000000046"))
IDropLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("00024437-0001-0000-c000-000000000046"))
ILeaderLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    HRESULT Delete ( );
    HRESULT Select ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
};

struct __declspec(uuid("000208c5-0001-0000-c000-000000000046"))
IUpBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
};

struct __declspec(uuid("000208c6-0001-0000-c000-000000000046"))
IDownBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
};

struct __declspec(uuid("000208c7-0001-0000-c000-000000000046"))
IFloor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & RHS );
    HRESULT Paste ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
};

struct __declspec(uuid("000208c8-0001-0000-c000-000000000046"))
IWalls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    _variant_t PictureUnit;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & RHS );
    HRESULT Paste ( );
    _variant_t GetPictureUnit ( );
    void PutPictureUnit (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208c9-0001-0000-c000-000000000046"))
ITickLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetDepth))
    long Depth;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlTickLabelOrientation Orientation;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetOffset,put=PutOffset))
    long Offset;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _bstr_t GetName ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    enum XlTickLabelOrientation GetOrientation ( );
    void PutOrientation (
        enum XlTickLabelOrientation RHS );
    _variant_t Select ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    long GetDepth ( );
    long GetOffset ( );
    void PutOffset (
        long RHS );
    long GetAlignment ( );
    void PutAlignment (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLinked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlTickLabelOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlTickLabelOrientation RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("000208cb-0001-0000-c000-000000000046"))
IPlotArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetInsideLeft))
    double InsideLeft;
    __declspec(property(get=GetInsideTop))
    double InsideTop;
    __declspec(property(get=GetInsideWidth))
    double InsideWidth;
    __declspec(property(get=GetInsideHeight))
    double InsideHeight;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    double GetInsideLeft ( );
    double GetInsideTop ( );
    double GetInsideWidth ( );
    double GetInsideHeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_InsideLeft (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_InsideTop (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_InsideWidth (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_InsideHeight (
        /*[out,retval]*/ double * RHS ) = 0;
};

struct __declspec(uuid("000208cc-0001-0000-c000-000000000046"))
IChartArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t Copy ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearContents (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208cd-0001-0000-c000-000000000046"))
ILegend : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlLegendPosition Position;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    IDispatchPtr LegendEntries (
        const _variant_t & Index = vtMissing );
    enum XlLegendPosition GetPosition ( );
    void PutPosition (
        enum XlLegendPosition RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t Clear ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall raw_LegendEntries (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlLegendPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlLegendPosition RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208ce-0001-0000-c000-000000000046"))
IErrorBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetEndStyle,put=PutEndStyle))
    enum XlEndStyleCap EndStyle;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    _variant_t ClearFormats ( );
    enum XlEndStyleCap GetEndStyle ( );
    void PutEndStyle (
        enum XlEndStyleCap RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_EndStyle (
        /*[out,retval]*/ enum XlEndStyleCap * RHS ) = 0;
      virtual HRESULT __stdcall put_EndStyle (
        /*[in]*/ enum XlEndStyleCap RHS ) = 0;
};

struct __declspec(uuid("00020843-0001-0000-c000-000000000046"))
IDataTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetHasBorderHorizontal,put=PutHasBorderHorizontal))
    VARIANT_BOOL HasBorderHorizontal;
    __declspec(property(get=GetHasBorderVertical,put=PutHasBorderVertical))
    VARIANT_BOOL HasBorderVertical;
    __declspec(property(get=GetHasBorderOutline,put=PutHasBorderOutline))
    VARIANT_BOOL HasBorderOutline;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderHorizontal ( );
    void PutHasBorderHorizontal (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderVertical ( );
    void PutHasBorderVertical (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderOutline ( );
    void PutHasBorderOutline (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    FontPtr GetFont ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowLegendKey (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowLegendKey (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasBorderHorizontal (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasBorderHorizontal (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasBorderVertical (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasBorderVertical (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasBorderOutline (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasBorderOutline (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024438-0001-0000-c000-000000000046"))
IPhonetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    long GetCharacterType ( );
    void PutCharacterType (
        long RHS );
    long GetAlignment ( );
    void PutAlignment (
        long RHS );
    FontPtr GetFont ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CharacterType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_CharacterType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002443a-0001-0000-c000-000000000046"))
IShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t Filename,
        enum Office::MsoTriState LinkToFile,
        enum Office::MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum Office::MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr GetRange (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    ShapePtr AddFormControl (
        enum XlFormControl Type,
        long Left,
        long Top,
        long Width,
        long Height );
    ShapePtr AddOLEObject (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    ShapePtr AddDiagram (
        enum Office::MsoDiagramType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddCanvas (
        float Left,
        float Top,
        float Width,
        float Height );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddCallout (
        /*[in]*/ enum Office::MsoCalloutType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddConnector (
        /*[in]*/ enum Office::MsoConnectorType Type,
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddCurve (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddLabel (
        /*[in]*/ enum Office::MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddPicture (
        /*[in]*/ BSTR Filename,
        /*[in]*/ enum Office::MsoTriState LinkToFile,
        /*[in]*/ enum Office::MsoTriState SaveWithDocument,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddPolyline (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddShape (
        /*[in]*/ enum Office::MsoAutoShapeType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddTextEffect (
        /*[in]*/ enum Office::MsoPresetTextEffect PresetTextEffect,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR FontName,
        /*[in]*/ float FontSize,
        /*[in]*/ enum Office::MsoTriState FontBold,
        /*[in]*/ enum Office::MsoTriState FontItalic,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddTextbox (
        /*[in]*/ enum Office::MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BuildFreeform (
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[out,retval]*/ struct FreeformBuilder * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall raw_AddFormControl (
        /*[in]*/ enum XlFormControl Type,
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddOLEObject (
        /*[in]*/ VARIANT ClassType,
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT Link,
        /*[in]*/ VARIANT DisplayAsIcon,
        /*[in]*/ VARIANT IconFileName,
        /*[in]*/ VARIANT IconIndex,
        /*[in]*/ VARIANT IconLabel,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[in]*/ VARIANT Width,
        /*[in]*/ VARIANT Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddDiagram (
        /*[in]*/ enum Office::MsoDiagramType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddCanvas (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
};

struct __declspec(uuid("0002443c-0001-0000-c000-000000000046"))
IGroupShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapeRangePtr GetRange (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
};

struct __declspec(uuid("0002443d-0001-0000-c000-000000000046"))
ITextFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetAutoMargins,put=PutAutoMargins))
    VARIANT_BOOL AutoMargins;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float RHS );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float RHS );
    float GetMarginRight ( );
    void PutMarginRight (
        float RHS );
    float GetMarginTop ( );
    void PutMarginTop (
        float RHS );
    enum Office::MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum Office::MsoTextOrientation RHS );
    CharactersPtr Characters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign RHS );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    VARIANT_BOOL GetAutoMargins ( );
    void PutAutoMargins (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_MarginBottom (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_MarginBottom (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_MarginLeft (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_MarginLeft (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_MarginRight (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_MarginRight (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_MarginTop (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_MarginTop (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum Office::MsoTextOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum Office::MsoTextOrientation RHS ) = 0;
      virtual HRESULT __stdcall raw_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ enum XlHAlign * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ enum XlHAlign RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ enum XlVAlign * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ enum XlVAlign RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoMargins (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoMargins (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002443e-0001-0000-c000-000000000046"))
IConnectorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    long EndConnectionSite;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    enum Office::MsoTriState BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    long BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    enum Office::MsoTriState EndConnected;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT BeginConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT EndDisconnect ( );
    enum Office::MsoTriState GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    long GetBeginConnectionSite ( );
    enum Office::MsoTriState GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    long GetEndConnectionSite ( );
    enum Office::MsoConnectorType GetType ( );
    void PutType (
        enum Office::MsoConnectorType RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BeginConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ long ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_BeginDisconnect ( ) = 0;
      virtual HRESULT __stdcall raw_EndConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ long ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_EndDisconnect ( ) = 0;
      virtual HRESULT __stdcall get_BeginConnected (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_BeginConnectedShape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_BeginConnectionSite (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_EndConnected (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_EndConnectedShape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_EndConnectionSite (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoConnectorType * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoConnectorType RHS ) = 0;
};

struct __declspec(uuid("0002443f-0001-0000-c000-000000000046"))
IFreeformBuilder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        const _variant_t & X2 = vtMissing,
        const _variant_t & Y2 = vtMissing,
        const _variant_t & X3 = vtMissing,
        const _variant_t & Y3 = vtMissing );
    ShapePtr ConvertToShape ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddNodes (
        /*[in]*/ enum Office::MsoSegmentType SegmentType,
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ VARIANT X2 = vtMissing,
        /*[in]*/ VARIANT Y2 = vtMissing,
        /*[in]*/ VARIANT X3 = vtMissing,
        /*[in]*/ VARIANT Y3 = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ConvertToShape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
};

struct __declspec(uuid("00024440-0001-0000-c000-000000000046"))
IControlFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListCount,put=PutListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddItem (
        _bstr_t Text,
        const _variant_t & Index = vtMissing );
    HRESULT RemoveAllItems ( );
    HRESULT RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    long GetListCount ( );
    void PutListCount (
        long RHS );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT Index = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count = vtMissing ) = 0;
      virtual HRESULT __stdcall get_DropDownLines (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DropDownLines (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListCount (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00024441-0001-0000-c000-000000000046"))
IOLEFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    IDispatchPtr GetObject ( );
    _bstr_t GetprogID ( );
    HRESULT Verb (
        const _variant_t & Verb = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_progID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Verb (
        /*[in]*/ VARIANT Verb = vtMissing ) = 0;
};

struct __declspec(uuid("00024442-0001-0000-c000-000000000046"))
ILinkFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    HRESULT Update ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoUpdate (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
};

struct __declspec(uuid("00024444-0000-0000-c000-000000000046"))
PublishObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoRepublish,put=PutAutoRepublish))
    VARIANT_BOOL AutoRepublish;
    __declspec(property(get=GetHtmlType,put=PutHtmlType))
    enum XlHtmlType HtmlType;
    __declspec(property(get=GetDivID))
    _bstr_t DivID;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetSourceType))
    enum XlSourceType SourceType;
    __declspec(property(get=GetSheet))
    _bstr_t Sheet;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSource))
    _bstr_t Source;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT Publish (
        const _variant_t & Create = vtMissing );
    _bstr_t GetDivID ( );
    _bstr_t GetSheet ( );
    enum XlSourceType GetSourceType ( );
    _bstr_t GetSource ( );
    enum XlHtmlType GetHtmlType ( );
    void PutHtmlType (
        enum XlHtmlType RHS );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t RHS );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t RHS );
    VARIANT_BOOL GetAutoRepublish ( );
    void PutAutoRepublish (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Publish (
        /*[in]*/ VARIANT Create = vtMissing ) = 0;
      virtual HRESULT __stdcall get_DivID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Sheet (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_SourceType (
        /*[out,retval]*/ enum XlSourceType * RHS ) = 0;
      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_HtmlType (
        /*[out,retval]*/ enum XlHtmlType * RHS ) = 0;
      virtual HRESULT __stdcall put_HtmlType (
        /*[in]*/ enum XlHtmlType RHS ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_AutoRepublish (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoRepublish (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024443-0001-0000-c000-000000000046"))
IPublishObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PublishObjectPtr _Default[];
    __declspec(property(get=GetItem))
    PublishObjectPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    PublishObjectPtr Add (
        enum XlSourceType SourceType,
        _bstr_t Filename,
        const _variant_t & Sheet = vtMissing,
        const _variant_t & Source = vtMissing,
        const _variant_t & HtmlType = vtMissing,
        const _variant_t & DivID = vtMissing,
        const _variant_t & Title = vtMissing );
    long GetCount ( );
    PublishObjectPtr GetItem (
        const _variant_t & Index );
    PublishObjectPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
    HRESULT Publish ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlSourceType SourceType,
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Sheet,
        /*[in]*/ VARIANT Source,
        /*[in]*/ VARIANT HtmlType,
        /*[in]*/ VARIANT DivID,
        /*[in]*/ VARIANT Title,
        /*[out,retval]*/ struct PublishObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PublishObject * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PublishObject * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Publish ( ) = 0;
};

struct __declspec(uuid("00024445-0001-0000-c000-000000000046"))
IOLEDBError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetNative))
    long Native;
    __declspec(property(get=GetStage))
    long Stage;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );
    long GetNative ( );
    long GetNumber ( );
    long GetStage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SqlState (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Native (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Stage (
        /*[out,retval]*/ long * RHS ) = 0;
};

struct __declspec(uuid("00024446-0001-0000-c000-000000000046"))
IOLEDBErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    OLEDBErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    OLEDBErrorPtr Item (
        long Index );
    OLEDBErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct OLEDBError * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct OLEDBError * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024447-0001-0000-c000-000000000046"))
IPhonetics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    long Start;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    long GetStart ( );
    long GetLength ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    long GetCharacterType ( );
    void PutCharacterType (
        long RHS );
    long GetAlignment ( );
    void PutAlignment (
        long RHS );
    FontPtr GetFont ( );
    IDispatchPtr GetItem (
        long Index );
    HRESULT Delete ( );
    HRESULT Add (
        long Start,
        long Length,
        _bstr_t Text );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    IDispatchPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CharacterType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_CharacterType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long Start,
        /*[in]*/ long Length,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024448-0000-0000-c000-000000000046"))
DefaultWebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRelyOnCSS,put=PutRelyOnCSS))
    VARIANT_BOOL RelyOnCSS;
    __declspec(property(get=GetSaveHiddenData,put=PutSaveHiddenData))
    VARIANT_BOOL SaveHiddenData;
    __declspec(property(get=GetLoadPictures,put=PutLoadPictures))
    VARIANT_BOOL LoadPictures;
    __declspec(property(get=GetOrganizeInFolder,put=PutOrganizeInFolder))
    VARIANT_BOOL OrganizeInFolder;
    __declspec(property(get=GetUpdateLinksOnSave,put=PutUpdateLinksOnSave))
    VARIANT_BOOL UpdateLinksOnSave;
    __declspec(property(get=GetUseLongFileNames,put=PutUseLongFileNames))
    VARIANT_BOOL UseLongFileNames;
    __declspec(property(get=GetCheckIfOfficeIsHTMLEditor,put=PutCheckIfOfficeIsHTMLEditor))
    VARIANT_BOOL CheckIfOfficeIsHTMLEditor;
    __declspec(property(get=GetDownloadComponents,put=PutDownloadComponents))
    VARIANT_BOOL DownloadComponents;
    __declspec(property(get=GetRelyOnVML,put=PutRelyOnVML))
    VARIANT_BOOL RelyOnVML;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAllowPNG,put=PutAllowPNG))
    VARIANT_BOOL AllowPNG;
    __declspec(property(get=GetPixelsPerInch,put=PutPixelsPerInch))
    long PixelsPerInch;
    __declspec(property(get=GetLocationOfComponents,put=PutLocationOfComponents))
    _bstr_t LocationOfComponents;
    __declspec(property(get=GetSaveNewWebPagesAsWebArchives,put=PutSaveNewWebPagesAsWebArchives))
    VARIANT_BOOL SaveNewWebPagesAsWebArchives;
    __declspec(property(get=GetAlwaysSaveInDefaultEncoding,put=PutAlwaysSaveInDefaultEncoding))
    VARIANT_BOOL AlwaysSaveInDefaultEncoding;
    __declspec(property(get=GetFonts))
    Office::WebPageFontsPtr Fonts;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetRelyOnCSS ( );
    void PutRelyOnCSS (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSaveHiddenData ( );
    void PutSaveHiddenData (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetLoadPictures ( );
    void PutLoadPictures (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUpdateLinksOnSave ( );
    void PutUpdateLinksOnSave (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUseLongFileNames ( );
    void PutUseLongFileNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCheckIfOfficeIsHTMLEditor ( );
    void PutCheckIfOfficeIsHTMLEditor (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDownloadComponents ( );
    void PutDownloadComponents (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRelyOnVML ( );
    void PutRelyOnVML (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAllowPNG ( );
    void PutAllowPNG (
        VARIANT_BOOL RHS );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize RHS );
    long GetPixelsPerInch ( );
    void PutPixelsPerInch (
        long RHS );
    _bstr_t GetLocationOfComponents ( );
    void PutLocationOfComponents (
        _bstr_t RHS );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding RHS );
    VARIANT_BOOL GetAlwaysSaveInDefaultEncoding ( );
    void PutAlwaysSaveInDefaultEncoding (
        VARIANT_BOOL RHS );
    Office::WebPageFontsPtr GetFonts ( );
    _bstr_t GetFolderSuffix ( );
    enum Office::MsoTargetBrowser GetTargetBrowser ( );
    void PutTargetBrowser (
        enum Office::MsoTargetBrowser RHS );
    VARIANT_BOOL GetSaveNewWebPagesAsWebArchives ( );
    void PutSaveNewWebPagesAsWebArchives (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RelyOnCSS (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RelyOnCSS (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SaveHiddenData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveHiddenData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LoadPictures (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LoadPictures (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_OrganizeInFolder (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_OrganizeInFolder (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UpdateLinksOnSave (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UpdateLinksOnSave (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UseLongFileNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UseLongFileNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CheckIfOfficeIsHTMLEditor (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CheckIfOfficeIsHTMLEditor (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DownloadComponents (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DownloadComponents (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RelyOnVML (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RelyOnVML (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AllowPNG (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AllowPNG (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ScreenSize (
        /*[out,retval]*/ enum Office::MsoScreenSize * RHS ) = 0;
      virtual HRESULT __stdcall put_ScreenSize (
        /*[in]*/ enum Office::MsoScreenSize RHS ) = 0;
      virtual HRESULT __stdcall get_PixelsPerInch (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PixelsPerInch (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LocationOfComponents (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LocationOfComponents (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ enum Office::MsoEncoding * RHS ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ enum Office::MsoEncoding RHS ) = 0;
      virtual HRESULT __stdcall get_AlwaysSaveInDefaultEncoding (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AlwaysSaveInDefaultEncoding (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Fonts (
        /*[out,retval]*/ struct Office::WebPageFonts * * RHS ) = 0;
      virtual HRESULT __stdcall get_FolderSuffix (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_TargetBrowser (
        /*[out,retval]*/ enum Office::MsoTargetBrowser * RHS ) = 0;
      virtual HRESULT __stdcall put_TargetBrowser (
        /*[in]*/ enum Office::MsoTargetBrowser RHS ) = 0;
      virtual HRESULT __stdcall get_SaveNewWebPagesAsWebArchives (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveNewWebPagesAsWebArchives (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024449-0000-0000-c000-000000000046"))
WebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRelyOnCSS,put=PutRelyOnCSS))
    VARIANT_BOOL RelyOnCSS;
    __declspec(property(get=GetOrganizeInFolder,put=PutOrganizeInFolder))
    VARIANT_BOOL OrganizeInFolder;
    __declspec(property(get=GetUseLongFileNames,put=PutUseLongFileNames))
    VARIANT_BOOL UseLongFileNames;
    __declspec(property(get=GetDownloadComponents,put=PutDownloadComponents))
    VARIANT_BOOL DownloadComponents;
    __declspec(property(get=GetRelyOnVML,put=PutRelyOnVML))
    VARIANT_BOOL RelyOnVML;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAllowPNG,put=PutAllowPNG))
    VARIANT_BOOL AllowPNG;
    __declspec(property(get=GetPixelsPerInch,put=PutPixelsPerInch))
    long PixelsPerInch;
    __declspec(property(get=GetLocationOfComponents,put=PutLocationOfComponents))
    _bstr_t LocationOfComponents;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetRelyOnCSS ( );
    void PutRelyOnCSS (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUseLongFileNames ( );
    void PutUseLongFileNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDownloadComponents ( );
    void PutDownloadComponents (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRelyOnVML ( );
    void PutRelyOnVML (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAllowPNG ( );
    void PutAllowPNG (
        VARIANT_BOOL RHS );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize RHS );
    long GetPixelsPerInch ( );
    void PutPixelsPerInch (
        long RHS );
    _bstr_t GetLocationOfComponents ( );
    void PutLocationOfComponents (
        _bstr_t RHS );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding RHS );
    _bstr_t GetFolderSuffix ( );
    HRESULT UseDefaultFolderSuffix ( );
    enum Office::MsoTargetBrowser GetTargetBrowser ( );
    void PutTargetBrowser (
        enum Office::MsoTargetBrowser RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RelyOnCSS (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RelyOnCSS (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_OrganizeInFolder (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_OrganizeInFolder (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UseLongFileNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UseLongFileNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DownloadComponents (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DownloadComponents (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RelyOnVML (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RelyOnVML (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AllowPNG (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AllowPNG (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ScreenSize (
        /*[out,retval]*/ enum Office::MsoScreenSize * RHS ) = 0;
      virtual HRESULT __stdcall put_ScreenSize (
        /*[in]*/ enum Office::MsoScreenSize RHS ) = 0;
      virtual HRESULT __stdcall get_PixelsPerInch (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PixelsPerInch (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LocationOfComponents (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LocationOfComponents (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ enum Office::MsoEncoding * RHS ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ enum Office::MsoEncoding RHS ) = 0;
      virtual HRESULT __stdcall get_FolderSuffix (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_UseDefaultFolderSuffix ( ) = 0;
      virtual HRESULT __stdcall get_TargetBrowser (
        /*[out,retval]*/ enum Office::MsoTargetBrowser * RHS ) = 0;
      virtual HRESULT __stdcall put_TargetBrowser (
        /*[in]*/ enum Office::MsoTargetBrowser RHS ) = 0;
};

struct __declspec(uuid("0002444b-0000-0000-c000-000000000046"))
TreeviewControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHidden,put=PutHidden))
    _variant_t Hidden;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDrilled,put=PutDrilled))
    _variant_t Drilled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetHidden ( );
    void PutHidden (
        const _variant_t & RHS );
    _variant_t GetDrilled ( );
    void PutDrilled (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Drilled (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Drilled (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002444c-0000-0000-c000-000000000046"))
CubeField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutForm,put=PutLayoutForm))
    enum XlLayoutFormType LayoutForm;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPivotFieldOrientation Orientation;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetDragToColumn,put=PutDragToColumn))
    VARIANT_BOOL DragToColumn;
    __declspec(property(get=GetDragToHide,put=PutDragToHide))
    VARIANT_BOOL DragToHide;
    __declspec(property(get=GetDragToPage,put=PutDragToPage))
    VARIANT_BOOL DragToPage;
    __declspec(property(get=GetDragToRow,put=PutDragToRow))
    VARIANT_BOOL DragToRow;
    __declspec(property(get=GetPivotFields))
    PivotFieldsPtr PivotFields;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetHasMemberProperties))
    VARIANT_BOOL HasMemberProperties;
    __declspec(property(get=GetCubeFieldType))
    enum XlCubeFieldType CubeFieldType;
    __declspec(property(get=GetTreeviewControl))
    TreeviewControlPtr TreeviewControl;
    __declspec(property(get=GetHiddenLevels,put=PutHiddenLevels))
    long HiddenLevels;
    __declspec(property(get=GetEnableMultiplePageItems,put=PutEnableMultiplePageItems))
    VARIANT_BOOL EnableMultiplePageItems;
    __declspec(property(get=GetShowInFieldList,put=PutShowInFieldList))
    VARIANT_BOOL ShowInFieldList;
    __declspec(property(get=GetDragToData,put=PutDragToData))
    VARIANT_BOOL DragToData;
    __declspec(property(get=GetLayoutSubtotalLocation,put=PutLayoutSubtotalLocation))
    enum XlSubtototalLocationType LayoutSubtotalLocation;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlCubeFieldType GetCubeFieldType ( );
    _bstr_t GetCaption ( );
    _bstr_t GetName ( );
    _bstr_t GetValue ( );
    enum XlPivotFieldOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPivotFieldOrientation RHS );
    long GetPosition ( );
    void PutPosition (
        long RHS );
    TreeviewControlPtr GetTreeviewControl ( );
    VARIANT_BOOL GetDragToColumn ( );
    void PutDragToColumn (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToHide ( );
    void PutDragToHide (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToPage ( );
    void PutDragToPage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToRow ( );
    void PutDragToRow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToData ( );
    void PutDragToData (
        VARIANT_BOOL RHS );
    long GetHiddenLevels ( );
    void PutHiddenLevels (
        long RHS );
    VARIANT_BOOL GetHasMemberProperties ( );
    enum XlLayoutFormType GetLayoutForm ( );
    void PutLayoutForm (
        enum XlLayoutFormType RHS );
    PivotFieldsPtr GetPivotFields ( );
    HRESULT AddMemberPropertyField (
        _bstr_t Property,
        const _variant_t & PropertyOrder = vtMissing );
    VARIANT_BOOL GetEnableMultiplePageItems ( );
    void PutEnableMultiplePageItems (
        VARIANT_BOOL RHS );
    enum XlSubtototalLocationType GetLayoutSubtotalLocation ( );
    void PutLayoutSubtotalLocation (
        enum XlSubtototalLocationType RHS );
    VARIANT_BOOL GetShowInFieldList ( );
    void PutShowInFieldList (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_CubeFieldType (
        /*[out,retval]*/ enum XlCubeFieldType * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlPivotFieldOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlPivotFieldOrientation RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TreeviewControl (
        /*[out,retval]*/ struct TreeviewControl * * RHS ) = 0;
      virtual HRESULT __stdcall get_DragToColumn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToColumn (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToHide (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToHide (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToPage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToPage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToRow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToRow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenLevels (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_HiddenLevels (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HasMemberProperties (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutForm (
        /*[out,retval]*/ enum XlLayoutFormType * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutForm (
        /*[in]*/ enum XlLayoutFormType RHS ) = 0;
      virtual HRESULT __stdcall get_PivotFields (
        /*[out,retval]*/ struct PivotFields * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddMemberPropertyField (
        /*[in]*/ BSTR Property,
        /*[in]*/ VARIANT PropertyOrder = vtMissing ) = 0;
      virtual HRESULT __stdcall get_EnableMultiplePageItems (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableMultiplePageItems (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutSubtotalLocation (
        /*[out,retval]*/ enum XlSubtototalLocationType * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutSubtotalLocation (
        /*[in]*/ enum XlSubtototalLocationType RHS ) = 0;
      virtual HRESULT __stdcall get_ShowInFieldList (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowInFieldList (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00020874-0001-0000-c000-000000000046"))
IPivotField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetShowAllItems,put=PutShowAllItems))
    VARIANT_BOOL ShowAllItems;
    __declspec(property(get=GetFunction,put=PutFunction))
    enum XlConsolidationFunction Function;
    __declspec(property(get=GetPosition,put=PutPosition))
    _variant_t Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPivotFieldOrientation Orientation;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetHiddenItemsList,put=PutHiddenItemsList))
    _variant_t HiddenItemsList;
    __declspec(property(get=GetDatabaseSort,put=PutDatabaseSort))
    VARIANT_BOOL DatabaseSort;
    __declspec(property(get=GetIsMemberProperty))
    VARIANT_BOOL IsMemberProperty;
    __declspec(property(get=GetPropertyParentField))
    PivotFieldPtr PropertyParentField;
    __declspec(property(get=GetPropertyOrder,put=PutPropertyOrder))
    long PropertyOrder;
    __declspec(property(get=GetEnableItemSelection,put=PutEnableItemSelection))
    VARIANT_BOOL EnableItemSelection;
    __declspec(property(get=GetCurrentPageList,put=PutCurrentPageList))
    _variant_t CurrentPageList;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetDataType))
    enum XlPivotFieldDataType DataType;
    __declspec(property(get=GetGroupLevel))
    _variant_t GroupLevel;
    __declspec(property(get=GetTotalLevels))
    _variant_t TotalLevels;
    __declspec(property(get=GetVisibleItems))
    _variant_t VisibleItems[];
    __declspec(property(get=GetHiddenItems))
    _variant_t HiddenItems[];
    __declspec(property(get=GetParentItems))
    _variant_t ParentItems[];
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetParentField))
    PivotFieldPtr ParentField;
    __declspec(property(get=GetSubtotals,put=PutSubtotals))
    _variant_t Subtotals[];
    __declspec(property(get=GetBaseField,put=PutBaseField))
    _variant_t BaseField;
    __declspec(property(get=GetBaseItem,put=PutBaseItem))
    _variant_t BaseItem;
    __declspec(property(get=GetChildField))
    PivotFieldPtr ChildField;
    __declspec(property(get=GetCurrentPage,put=PutCurrentPage))
    _variant_t CurrentPage;
    __declspec(property(get=GetDragToColumn,put=PutDragToColumn))
    VARIANT_BOOL DragToColumn;
    __declspec(property(get=GetDragToHide,put=PutDragToHide))
    VARIANT_BOOL DragToHide;
    __declspec(property(get=GetDragToPage,put=PutDragToPage))
    VARIANT_BOOL DragToPage;
    __declspec(property(get=GetDragToRow,put=PutDragToRow))
    VARIANT_BOOL DragToRow;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetServerBased,put=PutServerBased))
    VARIANT_BOOL ServerBased;
    __declspec(property(get=GetAutoSortOrder))
    long AutoSortOrder;
    __declspec(property(get=GetAutoSortField))
    _bstr_t AutoSortField;
    __declspec(property(get=GetAutoShowType))
    long AutoShowType;
    __declspec(property(get=GetAutoShowRange))
    long AutoShowRange;
    __declspec(property(get=GetDragToData,put=PutDragToData))
    VARIANT_BOOL DragToData;
    __declspec(property(get=GetAutoShowCount))
    long AutoShowCount;
    __declspec(property(get=GetAutoShowField))
    _bstr_t AutoShowField;
    __declspec(property(get=GetLayoutBlankLine,put=PutLayoutBlankLine))
    VARIANT_BOOL LayoutBlankLine;
    __declspec(property(get=GetLayoutSubtotalLocation,put=PutLayoutSubtotalLocation))
    enum XlSubtototalLocationType LayoutSubtotalLocation;
    __declspec(property(get=GetLayoutPageBreak,put=PutLayoutPageBreak))
    VARIANT_BOOL LayoutPageBreak;
    __declspec(property(get=GetLayoutForm,put=PutLayoutForm))
    enum XlLayoutFormType LayoutForm;
    __declspec(property(get=GetSubtotalName,put=PutSubtotalName))
    _bstr_t SubtotalName;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetCubeField))
    CubeFieldPtr CubeField;
    __declspec(property(get=GetCurrentPageName,put=PutCurrentPageName))
    _bstr_t CurrentPageName;
    __declspec(property(get=GetCalculation,put=PutCalculation))
    enum XlPivotFieldCalculation Calculation;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotFieldCalculation GetCalculation ( );
    void PutCalculation (
        enum XlPivotFieldCalculation RHS );
    PivotFieldPtr GetChildField ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetCurrentPage ( );
    void PutCurrentPage (
        const _variant_t & RHS );
    RangePtr GetDataRange ( );
    enum XlPivotFieldDataType GetDataType ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    enum XlConsolidationFunction GetFunction ( );
    void PutFunction (
        enum XlConsolidationFunction RHS );
    _variant_t GetGroupLevel ( );
    _variant_t GetHiddenItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    enum XlPivotFieldOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPivotFieldOrientation RHS );
    VARIANT_BOOL GetShowAllItems ( );
    void PutShowAllItems (
        VARIANT_BOOL RHS );
    PivotFieldPtr GetParentField ( );
    _variant_t GetParentItems (
        const _variant_t & Index = vtMissing );
    _variant_t PivotItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetPosition ( );
    void PutPosition (
        const _variant_t & RHS );
    _bstr_t GetSourceName ( );
    _variant_t GetSubtotals (
        const _variant_t & Index = vtMissing );
    void PutSubtotals (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _variant_t GetBaseField ( );
    void PutBaseField (
        const _variant_t & RHS );
    _variant_t GetBaseItem ( );
    void PutBaseItem (
        const _variant_t & RHS );
    _variant_t GetTotalLevels ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    _variant_t GetVisibleItems (
        const _variant_t & Index = vtMissing );
    CalculatedItemsPtr CalculatedItems ( );
    HRESULT Delete ( );
    VARIANT_BOOL GetDragToColumn ( );
    void PutDragToColumn (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToHide ( );
    void PutDragToHide (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToPage ( );
    void PutDragToPage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToRow ( );
    void PutDragToRow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToData ( );
    void PutDragToData (
        VARIANT_BOOL RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    VARIANT_BOOL GetIsCalculated ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetServerBased ( );
    void PutServerBased (
        VARIANT_BOOL RHS );
    HRESULT AutoSort (
        long Order,
        _bstr_t Field );
    HRESULT AutoShow (
        long Type,
        long Range,
        long Count,
        _bstr_t Field );
    long GetAutoSortOrder ( );
    _bstr_t GetAutoSortField ( );
    long GetAutoShowType ( );
    long GetAutoShowRange ( );
    long GetAutoShowCount ( );
    _bstr_t GetAutoShowField ( );
    VARIANT_BOOL GetLayoutBlankLine ( );
    void PutLayoutBlankLine (
        VARIANT_BOOL RHS );
    enum XlSubtototalLocationType GetLayoutSubtotalLocation ( );
    void PutLayoutSubtotalLocation (
        enum XlSubtototalLocationType RHS );
    VARIANT_BOOL GetLayoutPageBreak ( );
    void PutLayoutPageBreak (
        VARIANT_BOOL RHS );
    enum XlLayoutFormType GetLayoutForm ( );
    void PutLayoutForm (
        enum XlLayoutFormType RHS );
    _bstr_t GetSubtotalName ( );
    void PutSubtotalName (
        _bstr_t RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL RHS );
    CubeFieldPtr GetCubeField ( );
    _bstr_t GetCurrentPageName ( );
    void PutCurrentPageName (
        _bstr_t RHS );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t RHS );
    _variant_t GetHiddenItemsList ( );
    void PutHiddenItemsList (
        const _variant_t & RHS );
    VARIANT_BOOL GetDatabaseSort ( );
    void PutDatabaseSort (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIsMemberProperty ( );
    PivotFieldPtr GetPropertyParentField ( );
    long GetPropertyOrder ( );
    void PutPropertyOrder (
        long RHS );
    VARIANT_BOOL GetEnableItemSelection ( );
    void PutEnableItemSelection (
        VARIANT_BOOL RHS );
    _variant_t GetCurrentPageList ( );
    void PutCurrentPageList (
        const _variant_t & RHS );
    HRESULT AddPageItem (
        _bstr_t Item,
        const _variant_t & ClearList = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Calculation (
        /*[out,retval]*/ enum XlPivotFieldCalculation * RHS ) = 0;
      virtual HRESULT __stdcall put_Calculation (
        /*[in]*/ enum XlPivotFieldCalculation RHS ) = 0;
      virtual HRESULT __stdcall get_ChildField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChildItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentPage (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CurrentPage (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_DataRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ enum XlPivotFieldDataType * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Function (
        /*[out,retval]*/ enum XlConsolidationFunction * RHS ) = 0;
      virtual HRESULT __stdcall put_Function (
        /*[in]*/ enum XlConsolidationFunction RHS ) = 0;
      virtual HRESULT __stdcall get_GroupLevel (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LabelRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlPivotFieldOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlPivotFieldOrientation RHS ) = 0;
      virtual HRESULT __stdcall get_ShowAllItems (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowAllItems (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ParentField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_ParentItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Subtotals (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Subtotals (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_BaseField (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseField (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_BaseItem (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseItem (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TotalLevels (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CalculatedItems (
        /*[out,retval]*/ struct CalculatedItems * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_DragToColumn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToColumn (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToHide (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToHide (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToPage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToPage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToRow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToRow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_IsCalculated (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryUsed (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ServerBased (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ServerBased (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoSort (
        /*[in]*/ long Order,
        /*[in]*/ BSTR Field ) = 0;
      virtual HRESULT __stdcall raw_AutoShow (
        /*[in]*/ long Type,
        /*[in]*/ long Range,
        /*[in]*/ long Count,
        /*[in]*/ BSTR Field ) = 0;
      virtual HRESULT __stdcall get_AutoSortOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSortField (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShowType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShowRange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShowCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShowField (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutBlankLine (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutBlankLine (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutSubtotalLocation (
        /*[out,retval]*/ enum XlSubtototalLocationType * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutSubtotalLocation (
        /*[in]*/ enum XlSubtototalLocationType RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutPageBreak (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutPageBreak (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutForm (
        /*[out,retval]*/ enum XlLayoutFormType * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutForm (
        /*[in]*/ enum XlLayoutFormType RHS ) = 0;
      virtual HRESULT __stdcall get_SubtotalName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SubtotalName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DrilledDown (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DrilledDown (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CubeField (
        /*[out,retval]*/ struct CubeField * * RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentPageName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_CurrentPageName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_StandardFormula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardFormula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenItemsList (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HiddenItemsList (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_DatabaseSort (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DatabaseSort (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IsMemberProperty (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_PropertyParentField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_PropertyOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PropertyOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_EnableItemSelection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableItemSelection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentPageList (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CurrentPageList (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_AddPageItem (
        /*[in]*/ BSTR Item,
        /*[in]*/ VARIANT ClearList = vtMissing ) = 0;
};

struct __declspec(uuid("0002444d-0000-0000-c000-000000000046"))
CubeFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CubeFieldPtr _Default[];
    __declspec(property(get=GetItem))
    CubeFieldPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CubeFieldPtr GetItem (
        const _variant_t & Index );
    CubeFieldPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    CubeFieldPtr AddSet (
        _bstr_t Name,
        _bstr_t Caption );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CubeField * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CubeField * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddSet (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Caption,
        /*[out,retval]*/ struct CubeField * * RHS ) = 0;
};

struct __declspec(uuid("00020872-0001-0000-c000-000000000046"))
IPivotTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPageFieldWrapCount,put=PutPageFieldWrapCount))
    long PageFieldWrapCount;
    __declspec(property(get=GetPivotSelectionStandard,put=PutPivotSelectionStandard))
    _bstr_t PivotSelectionStandard;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetDataPivotField))
    PivotFieldPtr DataPivotField;
    __declspec(property(get=GetEnableDataValueEditing,put=PutEnableDataValueEditing))
    VARIANT_BOOL EnableDataValueEditing;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetRowGrand,put=PutRowGrand))
    VARIANT_BOOL RowGrand;
    __declspec(property(get=GetColumnGrand,put=PutColumnGrand))
    VARIANT_BOOL ColumnGrand;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;
    __declspec(property(get=GetTableRange1))
    RangePtr TableRange1;
    __declspec(property(get=GetTableRange2))
    RangePtr TableRange2;
    __declspec(property(get=GetRowRange))
    RangePtr RowRange;
    __declspec(property(get=GetColumnRange))
    RangePtr ColumnRange;
    __declspec(property(get=GetPageRange))
    RangePtr PageRange;
    __declspec(property(get=GetDataLabelRange))
    RangePtr DataLabelRange;
    __declspec(property(get=GetDataBodyRange))
    RangePtr DataBodyRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMDX))
    _bstr_t MDX;
    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetPageRangeCells))
    RangePtr PageRangeCells;
    __declspec(property(get=GetCacheIndex,put=PutCacheIndex))
    long CacheIndex;
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetDisplayErrorString,put=PutDisplayErrorString))
    VARIANT_BOOL DisplayErrorString;
    __declspec(property(get=GetDisplayNullString,put=PutDisplayNullString))
    VARIANT_BOOL DisplayNullString;
    __declspec(property(get=GetEnableDrilldown,put=PutEnableDrilldown))
    VARIANT_BOOL EnableDrilldown;
    __declspec(property(get=GetEnableFieldDialog,put=PutEnableFieldDialog))
    VARIANT_BOOL EnableFieldDialog;
    __declspec(property(get=GetEnableWizard,put=PutEnableWizard))
    VARIANT_BOOL EnableWizard;
    __declspec(property(get=GetErrorString,put=PutErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetManualUpdate,put=PutManualUpdate))
    VARIANT_BOOL ManualUpdate;
    __declspec(property(get=GetMergeLabels,put=PutMergeLabels))
    VARIANT_BOOL MergeLabels;
    __declspec(property(get=GetNullString,put=PutNullString))
    _bstr_t NullString;
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotFormulas))
    PivotFormulasPtr PivotFormulas;
    __declspec(property(get=GetSubtotalHiddenPageItems,put=PutSubtotalHiddenPageItems))
    VARIANT_BOOL SubtotalHiddenPageItems;
    __declspec(property(get=GetPageFieldStyle,put=PutPageFieldStyle))
    _bstr_t PageFieldStyle;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetViewCalculatedMembers,put=PutViewCalculatedMembers))
    VARIANT_BOOL ViewCalculatedMembers;
    __declspec(property(get=GetPivotSelection,put=PutPivotSelection))
    _bstr_t PivotSelection;
    __declspec(property(get=GetSelectionMode,put=PutSelectionMode))
    enum XlPTSelectionMode SelectionMode;
    __declspec(property(get=GetTableStyle,put=PutTableStyle))
    _bstr_t TableStyle;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetVacatedStyle,put=PutVacatedStyle))
    _bstr_t VacatedStyle;
    __declspec(property(get=GetCalculatedMembers))
    CalculatedMembersPtr CalculatedMembers;
    __declspec(property(get=GetPrintTitles,put=PutPrintTitles))
    VARIANT_BOOL PrintTitles;
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetGrandTotalName,put=PutGrandTotalName))
    _bstr_t GrandTotalName;
    __declspec(property(get=GetSmallGrid,put=PutSmallGrid))
    VARIANT_BOOL SmallGrid;
    __declspec(property(get=GetRepeatItemsOnEachPrintedPage,put=PutRepeatItemsOnEachPrintedPage))
    VARIANT_BOOL RepeatItemsOnEachPrintedPage;
    __declspec(property(get=GetTotalsAnnotation,put=PutTotalsAnnotation))
    VARIANT_BOOL TotalsAnnotation;
    __declspec(property(get=GetDisplayImmediateItems,put=PutDisplayImmediateItems))
    VARIANT_BOOL DisplayImmediateItems;
    __declspec(property(get=GetEnableFieldList,put=PutEnableFieldList))
    VARIANT_BOOL EnableFieldList;
    __declspec(property(get=GetVisualTotals,put=PutVisualTotals))
    VARIANT_BOOL VisualTotals;
    __declspec(property(get=GetShowPageMultipleItemLabel,put=PutShowPageMultipleItemLabel))
    VARIANT_BOOL ShowPageMultipleItemLabel;
    __declspec(property(get=GetVersion))
    enum XlPivotTableVersionList Version;
    __declspec(property(get=GetDisplayEmptyRow,put=PutDisplayEmptyRow))
    VARIANT_BOOL DisplayEmptyRow;
    __declspec(property(get=GetDisplayEmptyColumn,put=PutDisplayEmptyColumn))
    VARIANT_BOOL DisplayEmptyColumn;
    __declspec(property(get=GetShowCellBackgroundFromOLAP,put=PutShowCellBackgroundFromOLAP))
    VARIANT_BOOL ShowCellBackgroundFromOLAP;
    __declspec(property(get=GetPageFieldOrder,put=PutPageFieldOrder))
    long PageFieldOrder;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AddToTable = vtMissing );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetColumnGrand ( );
    void PutColumnGrand (
        VARIANT_BOOL RHS );
    RangePtr GetColumnRange ( );
    _variant_t ShowPages (
        const _variant_t & PageField = vtMissing );
    RangePtr GetDataBodyRange ( );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataLabelRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL RHS );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetPageRange ( );
    RangePtr GetPageRangeCells ( );
    IDispatchPtr PivotFields (
        const _variant_t & Index = vtMissing );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL RefreshTable ( );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetRowGrand ( );
    void PutRowGrand (
        VARIANT_BOOL RHS );
    RangePtr GetRowRange ( );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL RHS );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & RHS );
    RangePtr GetTableRange1 ( );
    RangePtr GetTableRange2 ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    long GetCacheIndex ( );
    void PutCacheIndex (
        long RHS );
    CalculatedFieldsPtr CalculatedFields ( );
    VARIANT_BOOL GetDisplayErrorString ( );
    void PutDisplayErrorString (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayNullString ( );
    void PutDisplayNullString (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableDrilldown ( );
    void PutEnableDrilldown (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableFieldDialog ( );
    void PutEnableFieldDialog (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableWizard ( );
    void PutEnableWizard (
        VARIANT_BOOL RHS );
    _bstr_t GetErrorString ( );
    void PutErrorString (
        _bstr_t RHS );
    double GetData (
        _bstr_t Name );
    HRESULT ListFormulas ( );
    VARIANT_BOOL GetManualUpdate ( );
    void PutManualUpdate (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetMergeLabels ( );
    void PutMergeLabels (
        VARIANT_BOOL RHS );
    _bstr_t GetNullString ( );
    void PutNullString (
        _bstr_t RHS );
    PivotCachePtr PivotCache ( );
    PivotFormulasPtr GetPivotFormulas ( );
    HRESULT PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing );
    VARIANT_BOOL GetSubtotalHiddenPageItems ( );
    void PutSubtotalHiddenPageItems (
        VARIANT_BOOL RHS );
    long GetPageFieldOrder ( );
    void PutPageFieldOrder (
        long RHS );
    _bstr_t GetPageFieldStyle ( );
    void PutPageFieldStyle (
        _bstr_t RHS );
    long GetPageFieldWrapCount ( );
    void PutPageFieldWrapCount (
        long RHS );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL RHS );
    HRESULT _PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode );
    _bstr_t GetPivotSelection ( );
    void PutPivotSelection (
        _bstr_t RHS );
    enum XlPTSelectionMode GetSelectionMode ( );
    void PutSelectionMode (
        enum XlPTSelectionMode RHS );
    _bstr_t GetTableStyle ( );
    void PutTableStyle (
        _bstr_t RHS );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t RHS );
    HRESULT Update ( );
    _bstr_t GetVacatedStyle ( );
    void PutVacatedStyle (
        _bstr_t RHS );
    HRESULT Format (
        enum XlPivotFormatType Format );
    VARIANT_BOOL GetPrintTitles ( );
    void PutPrintTitles (
        VARIANT_BOOL RHS );
    CubeFieldsPtr GetCubeFields ( );
    _bstr_t GetGrandTotalName ( );
    void PutGrandTotalName (
        _bstr_t RHS );
    VARIANT_BOOL GetSmallGrid ( );
    void PutSmallGrid (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRepeatItemsOnEachPrintedPage ( );
    void PutRepeatItemsOnEachPrintedPage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTotalsAnnotation ( );
    void PutTotalsAnnotation (
        VARIANT_BOOL RHS );
    HRESULT PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode,
        const _variant_t & UseStandardName = vtMissing );
    _bstr_t GetPivotSelectionStandard ( );
    void PutPivotSelectionStandard (
        _bstr_t RHS );
    RangePtr GetPivotData (
        const _variant_t & DataField = vtMissing,
        const _variant_t & Field1 = vtMissing,
        const _variant_t & Item1 = vtMissing,
        const _variant_t & Field2 = vtMissing,
        const _variant_t & Item2 = vtMissing,
        const _variant_t & Field3 = vtMissing,
        const _variant_t & Item3 = vtMissing,
        const _variant_t & Field4 = vtMissing,
        const _variant_t & Item4 = vtMissing,
        const _variant_t & Field5 = vtMissing,
        const _variant_t & Item5 = vtMissing,
        const _variant_t & Field6 = vtMissing,
        const _variant_t & Item6 = vtMissing,
        const _variant_t & Field7 = vtMissing,
        const _variant_t & Item7 = vtMissing,
        const _variant_t & Field8 = vtMissing,
        const _variant_t & Item8 = vtMissing,
        const _variant_t & Field9 = vtMissing,
        const _variant_t & Item9 = vtMissing,
        const _variant_t & Field10 = vtMissing,
        const _variant_t & Item10 = vtMissing,
        const _variant_t & Field11 = vtMissing,
        const _variant_t & Item11 = vtMissing,
        const _variant_t & Field12 = vtMissing,
        const _variant_t & Item12 = vtMissing,
        const _variant_t & Field13 = vtMissing,
        const _variant_t & Item13 = vtMissing,
        const _variant_t & Field14 = vtMissing,
        const _variant_t & Item14 = vtMissing );
    PivotFieldPtr GetDataPivotField ( );
    VARIANT_BOOL GetEnableDataValueEditing ( );
    void PutEnableDataValueEditing (
        VARIANT_BOOL RHS );
    PivotFieldPtr AddDataField (
        IDispatch * Field,
        const _variant_t & Caption = vtMissing,
        const _variant_t & Function = vtMissing );
    _bstr_t GetMDX ( );
    VARIANT_BOOL GetViewCalculatedMembers ( );
    void PutViewCalculatedMembers (
        VARIANT_BOOL RHS );
    CalculatedMembersPtr GetCalculatedMembers ( );
    VARIANT_BOOL GetDisplayImmediateItems ( );
    void PutDisplayImmediateItems (
        VARIANT_BOOL RHS );
    _variant_t Dummy15 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL GetEnableFieldList ( );
    void PutEnableFieldList (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetVisualTotals ( );
    void PutVisualTotals (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowPageMultipleItemLabel ( );
    void PutShowPageMultipleItemLabel (
        VARIANT_BOOL RHS );
    enum XlPivotTableVersionList GetVersion ( );
    _bstr_t CreateCubeFile (
        _bstr_t File,
        const _variant_t & Measures = vtMissing,
        const _variant_t & Levels = vtMissing,
        const _variant_t & Members = vtMissing,
        const _variant_t & Properties = vtMissing );
    VARIANT_BOOL GetDisplayEmptyRow ( );
    void PutDisplayEmptyRow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayEmptyColumn ( );
    void PutDisplayEmptyColumn (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowCellBackgroundFromOLAP ( );
    void PutShowCellBackgroundFromOLAP (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddFields (
        /*[in]*/ VARIANT RowFields,
        /*[in]*/ VARIANT ColumnFields,
        /*[in]*/ VARIANT PageFields,
        /*[in]*/ VARIANT AddToTable,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnGrand (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ColumnGrand (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowPages (
        /*[in]*/ VARIANT PageField,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataBodyRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataLabelRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HasAutoFormat (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasAutoFormat (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_InnerDetail (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_InnerDetail (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PageRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_PageRangeCells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshDate (
        /*[out,retval]*/ DATE * RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_RefreshTable (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_RowFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RowGrand (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RowGrand (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RowRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_SaveData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SourceData (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceData (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TableRange1 (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_TableRange2 (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_CacheIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_CacheIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_CalculatedFields (
        /*[out,retval]*/ struct CalculatedFields * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayErrorString (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayErrorString (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayNullString (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayNullString (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableDrilldown (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableDrilldown (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableFieldDialog (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableFieldDialog (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableWizard (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableWizard (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ErrorString (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_GetData (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListFormulas ( ) = 0;
      virtual HRESULT __stdcall get_ManualUpdate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ManualUpdate (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MergeLabels (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MergeLabels (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NullString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NullString (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotCache (
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotFormulas (
        /*[out,retval]*/ struct PivotFormulas * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotTableWizard (
        /*[in]*/ VARIANT SourceType = vtMissing,
        /*[in]*/ VARIANT SourceData = vtMissing,
        /*[in]*/ VARIANT TableDestination = vtMissing,
        /*[in]*/ VARIANT TableName = vtMissing,
        /*[in]*/ VARIANT RowGrand = vtMissing,
        /*[in]*/ VARIANT ColumnGrand = vtMissing,
        /*[in]*/ VARIANT SaveData = vtMissing,
        /*[in]*/ VARIANT HasAutoFormat = vtMissing,
        /*[in]*/ VARIANT AutoPage = vtMissing,
        /*[in]*/ VARIANT Reserved = vtMissing,
        /*[in]*/ VARIANT BackgroundQuery = vtMissing,
        /*[in]*/ VARIANT OptimizeCache = vtMissing,
        /*[in]*/ VARIANT PageFieldOrder = vtMissing,
        /*[in]*/ VARIANT PageFieldWrapCount = vtMissing,
        /*[in]*/ VARIANT ReadData = vtMissing,
        /*[in]*/ VARIANT Connection = vtMissing ) = 0;
      virtual HRESULT __stdcall get_SubtotalHiddenPageItems (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SubtotalHiddenPageItems (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PageFieldOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PageFieldOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PageFieldStyle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PageFieldStyle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageFieldWrapCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PageFieldWrapCount (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PreserveFormatting (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PreserveFormatting (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw__PivotSelect (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum XlPTSelectionMode Mode ) = 0;
      virtual HRESULT __stdcall get_PivotSelection (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PivotSelection (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_SelectionMode (
        /*[out,retval]*/ enum XlPTSelectionMode * RHS ) = 0;
      virtual HRESULT __stdcall put_SelectionMode (
        /*[in]*/ enum XlPTSelectionMode RHS ) = 0;
      virtual HRESULT __stdcall get_TableStyle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TableStyle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall get_VacatedStyle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_VacatedStyle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Format (
        /*[in]*/ enum XlPivotFormatType Format ) = 0;
      virtual HRESULT __stdcall get_PrintTitles (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintTitles (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CubeFields (
        /*[out,retval]*/ struct CubeFields * * RHS ) = 0;
      virtual HRESULT __stdcall get_GrandTotalName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_GrandTotalName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_SmallGrid (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallGrid (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RepeatItemsOnEachPrintedPage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RepeatItemsOnEachPrintedPage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TotalsAnnotation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TotalsAnnotation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotSelect (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum XlPTSelectionMode Mode,
        /*[in]*/ VARIANT UseStandardName = vtMissing ) = 0;
      virtual HRESULT __stdcall get_PivotSelectionStandard (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PivotSelectionStandard (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_GetPivotData (
        /*[in]*/ VARIANT DataField,
        /*[in]*/ VARIANT Field1,
        /*[in]*/ VARIANT Item1,
        /*[in]*/ VARIANT Field2,
        /*[in]*/ VARIANT Item2,
        /*[in]*/ VARIANT Field3,
        /*[in]*/ VARIANT Item3,
        /*[in]*/ VARIANT Field4,
        /*[in]*/ VARIANT Item4,
        /*[in]*/ VARIANT Field5,
        /*[in]*/ VARIANT Item5,
        /*[in]*/ VARIANT Field6,
        /*[in]*/ VARIANT Item6,
        /*[in]*/ VARIANT Field7,
        /*[in]*/ VARIANT Item7,
        /*[in]*/ VARIANT Field8,
        /*[in]*/ VARIANT Item8,
        /*[in]*/ VARIANT Field9,
        /*[in]*/ VARIANT Item9,
        /*[in]*/ VARIANT Field10,
        /*[in]*/ VARIANT Item10,
        /*[in]*/ VARIANT Field11,
        /*[in]*/ VARIANT Item11,
        /*[in]*/ VARIANT Field12,
        /*[in]*/ VARIANT Item12,
        /*[in]*/ VARIANT Field13,
        /*[in]*/ VARIANT Item13,
        /*[in]*/ VARIANT Field14,
        /*[in]*/ VARIANT Item14,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataPivotField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_EnableDataValueEditing (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableDataValueEditing (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_AddDataField (
        /*[in]*/ IDispatch * Field,
        /*[in]*/ VARIANT Caption,
        /*[in]*/ VARIANT Function,
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_MDX (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ViewCalculatedMembers (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ViewCalculatedMembers (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CalculatedMembers (
        /*[out,retval]*/ struct CalculatedMembers * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayImmediateItems (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayImmediateItems (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy15 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_EnableFieldList (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableFieldList (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_VisualTotals (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_VisualTotals (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowPageMultipleItemLabel (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowPageMultipleItemLabel (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ enum XlPivotTableVersionList * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreateCubeFile (
        /*[in]*/ BSTR File,
        /*[in]*/ VARIANT Measures,
        /*[in]*/ VARIANT Levels,
        /*[in]*/ VARIANT Members,
        /*[in]*/ VARIANT Properties,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayEmptyRow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayEmptyRow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayEmptyColumn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayEmptyColumn (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowCellBackgroundFromOLAP (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowCellBackgroundFromOLAP (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002444a-0001-0000-c000-000000000046"))
IPivotLayout : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotFields))
    IDispatchPtr PivotFields[];
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotCache))
    PivotCachePtr PivotCache;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPivotFields (
        const _variant_t & Index = vtMissing );
    CubeFieldsPtr GetCubeFields ( );
    PivotCachePtr GetPivotCache ( );
    PivotTablePtr GetPivotTable ( );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t RHS );
    HRESULT AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AppendField = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PageFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RowFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_CubeFields (
        /*[out,retval]*/ struct CubeFields * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotCache (
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotTable (
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_InnerDetail (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_InnerDetail (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_AddFields (
        /*[in]*/ VARIANT RowFields = vtMissing,
        /*[in]*/ VARIANT ColumnFields = vtMissing,
        /*[in]*/ VARIANT PageFields = vtMissing,
        /*[in]*/ VARIANT AppendField = vtMissing ) = 0;
};

struct __declspec(uuid("0002084c-0001-0000-c000-000000000046"))
IDisplayUnitLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024450-0001-0000-c000-000000000046"))
ICellFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior,put=PutRefInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat[];
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(get=GetBorders,put=PutRefBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BordersPtr GetBorders ( );
    void PutRefBorders (
        struct Borders * RHS );
    FontPtr GetFont ( );
    void PutRefFont (
        struct Font * RHS );
    InteriorPtr GetInterior ( );
    void PutRefInterior (
        struct Interior * RHS );
    _variant_t GetNumberFormat (
        long lcid = 0 );
    void PutNumberFormat (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & RHS );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & RHS );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & RHS );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & RHS );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & RHS );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & RHS );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Borders (
        /*[in]*/ struct Borders * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Interior (
        /*[in]*/ struct Interior * RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_IndentLevel (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_IndentLevel (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ShrinkToFit (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ShrinkToFit (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_WrapText (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_WrapText (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaHidden (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaHidden (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_MergeCells (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_MergeCells (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("00024451-0001-0000-c000-000000000046"))
IUsedObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
};

struct __declspec(uuid("00024452-0001-0000-c000-000000000046"))
ICustomProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomPropertyPtr _Default[];
    __declspec(property(get=GetItem))
    CustomPropertyPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    CustomPropertyPtr Add (
        _bstr_t Name,
        const _variant_t & Value );
    long GetCount ( );
    CustomPropertyPtr Get_Default (
        const _variant_t & Index );
    CustomPropertyPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Value,
        /*[out,retval]*/ struct CustomProperty * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CustomProperty * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CustomProperty * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024453-0001-0000-c000-000000000046"))
ICustomProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _variant_t _Default;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    _variant_t Get_Default ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024454-0001-0000-c000-000000000046"))
ICalculatedMembers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CalculatedMemberPtr _Default[];
    __declspec(property(get=GetItem))
    CalculatedMemberPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CalculatedMemberPtr GetItem (
        const _variant_t & Index );
    CalculatedMemberPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    CalculatedMemberPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & SolveOrder = vtMissing,
        const _variant_t & Type = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CalculatedMember * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CalculatedMember * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Formula,
        /*[in]*/ VARIANT SolveOrder,
        /*[in]*/ VARIANT Type,
        /*[out,retval]*/ struct CalculatedMember * * RHS ) = 0;
};

struct __declspec(uuid("00024455-0001-0000-c000-000000000046"))
ICalculatedMember : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFormula))
    _bstr_t Formula;
    __declspec(property(get=GetSolveOrder))
    long SolveOrder;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetType))
    enum XlCalculatedMemberType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetFormula ( );
    _bstr_t GetSourceName ( );
    long GetSolveOrder ( );
    VARIANT_BOOL GetIsValid ( );
    _bstr_t Get_Default ( );
    HRESULT Delete ( );
    enum XlCalculatedMemberType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_SolveOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlCalculatedMemberType * RHS ) = 0;
};

struct __declspec(uuid("00024456-0001-0000-c000-000000000046"))
IWatches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WatchPtr _Default[];
    __declspec(property(get=GetItem))
    WatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    WatchPtr Add (
        const _variant_t & Source );
    long GetCount ( );
    WatchPtr Get_Default (
        const _variant_t & Index );
    WatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Source,
        /*[out,retval]*/ struct Watch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Watch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Watch * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024457-0001-0000-c000-000000000046"))
IWatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSource))
    _variant_t Source;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _variant_t GetSource ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("00024458-0001-0000-c000-000000000046"))
IPivotCell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetDataField))
    PivotFieldPtr DataField;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotCellType))
    enum XlPivotCellType PivotCellType;
    __declspec(property(get=GetRowItems))
    PivotItemListPtr RowItems;
    __declspec(property(get=GetColumnItems))
    PivotItemListPtr ColumnItems;
    __declspec(property(get=GetCustomSubtotalFunction))
    enum XlConsolidationFunction CustomSubtotalFunction;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDummy18))
    _bstr_t Dummy18;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotCellType GetPivotCellType ( );
    PivotTablePtr GetPivotTable ( );
    PivotFieldPtr GetDataField ( );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotItemListPtr GetRowItems ( );
    PivotItemListPtr GetColumnItems ( );
    RangePtr GetRange ( );
    _bstr_t GetDummy18 ( );
    enum XlConsolidationFunction GetCustomSubtotalFunction ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotCellType (
        /*[out,retval]*/ enum XlPivotCellType * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotTable (
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotItem (
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall get_RowItems (
        /*[out,retval]*/ struct PivotItemList * * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnItems (
        /*[out,retval]*/ struct PivotItemList * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Dummy18 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_CustomSubtotalFunction (
        /*[out,retval]*/ enum XlConsolidationFunction * RHS ) = 0;
};

struct __declspec(uuid("00024459-0001-0000-c000-000000000046"))
IGraphic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetBrightness ( );
    void PutBrightness (
        float RHS );
    enum Office::MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum Office::MsoPictureColorType RHS );
    float GetContrast ( );
    void PutContrast (
        float RHS );
    float GetCropBottom ( );
    void PutCropBottom (
        float RHS );
    float GetCropLeft ( );
    void PutCropLeft (
        float RHS );
    float GetCropRight ( );
    void PutCropRight (
        float RHS );
    float GetCropTop ( );
    void PutCropTop (
        float RHS );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t RHS );
    float GetHeight ( );
    void PutHeight (
        float RHS );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState RHS );
    float GetWidth ( );
    void PutWidth (
        float RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Brightness (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Brightness (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_ColorType (
        /*[out,retval]*/ enum Office::MsoPictureColorType * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorType (
        /*[in]*/ enum Office::MsoPictureColorType RHS ) = 0;
      virtual HRESULT __stdcall get_Contrast (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Contrast (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_CropBottom (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_CropBottom (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_CropLeft (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_CropLeft (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_CropRight (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_CropRight (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_CropTop (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_CropTop (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float RHS ) = 0;
};

struct __declspec(uuid("0002445a-0001-0000-c000-000000000046"))
IAutoRecover : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;
    __declspec(property(get=GetTime,put=PutTime))
    long Time;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetTime ( );
    void PutTime (
        long RHS );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002445b-0001-0000-c000-000000000046"))
IErrorCheckingOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUnlockedFormulaCells,put=PutUnlockedFormulaCells))
    VARIANT_BOOL UnlockedFormulaCells;
    __declspec(property(get=GetEmptyCellReferences,put=PutEmptyCellReferences))
    VARIANT_BOOL EmptyCellReferences;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetListDataValidation,put=PutListDataValidation))
    VARIANT_BOOL ListDataValidation;
    __declspec(property(get=GetBackgroundChecking,put=PutBackgroundChecking))
    VARIANT_BOOL BackgroundChecking;
    __declspec(property(get=GetIndicatorColorIndex,put=PutIndicatorColorIndex))
    enum XlColorIndex IndicatorColorIndex;
    __declspec(property(get=GetEvaluateToError,put=PutEvaluateToError))
    VARIANT_BOOL EvaluateToError;
    __declspec(property(get=GetTextDate,put=PutTextDate))
    VARIANT_BOOL TextDate;
    __declspec(property(get=GetNumberAsText,put=PutNumberAsText))
    VARIANT_BOOL NumberAsText;
    __declspec(property(get=GetInconsistentFormula,put=PutInconsistentFormula))
    VARIANT_BOOL InconsistentFormula;
    __declspec(property(get=GetOmittedCells,put=PutOmittedCells))
    VARIANT_BOOL OmittedCells;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundChecking ( );
    void PutBackgroundChecking (
        VARIANT_BOOL RHS );
    enum XlColorIndex GetIndicatorColorIndex ( );
    void PutIndicatorColorIndex (
        enum XlColorIndex RHS );
    VARIANT_BOOL GetEvaluateToError ( );
    void PutEvaluateToError (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextDate ( );
    void PutTextDate (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetNumberAsText ( );
    void PutNumberAsText (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetInconsistentFormula ( );
    void PutInconsistentFormula (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetOmittedCells ( );
    void PutOmittedCells (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUnlockedFormulaCells ( );
    void PutUnlockedFormulaCells (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEmptyCellReferences ( );
    void PutEmptyCellReferences (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetListDataValidation ( );
    void PutListDataValidation (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BackgroundChecking (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BackgroundChecking (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IndicatorColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_IndicatorColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_EvaluateToError (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EvaluateToError (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextDate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextDate (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberAsText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberAsText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_InconsistentFormula (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InconsistentFormula (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_OmittedCells (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_OmittedCells (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UnlockedFormulaCells (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UnlockedFormulaCells (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EmptyCellReferences (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EmptyCellReferences (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ListDataValidation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ListDataValidation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002445c-0001-0000-c000-000000000046"))
IErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ErrorPtr _Default[];
    __declspec(property(get=GetItem))
    ErrorPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ErrorPtr GetItem (
        const _variant_t & Index );
    ErrorPtr Get_Default (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Error * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Error * * RHS ) = 0;
};

struct __declspec(uuid("0002445d-0001-0000-c000-000000000046"))
IError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIgnore,put=PutIgnore))
    VARIANT_BOOL Ignore;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetValue ( );
    VARIANT_BOOL GetIgnore ( );
    void PutIgnore (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Ignore (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Ignore (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002445e-0001-0000-c000-000000000046"))
ISmartTagAction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetType))
    enum XlSmartTagControlType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPresentInPane))
    VARIANT_BOOL PresentInPane;
    __declspec(property(get=GetExpandHelp,put=PutExpandHelp))
    VARIANT_BOOL ExpandHelp;
    __declspec(property(get=GetCheckboxState,put=PutCheckboxState))
    VARIANT_BOOL CheckboxState;
    __declspec(property(get=GetTextboxText,put=PutTextboxText))
    _bstr_t TextboxText;
    __declspec(property(get=GetListSelection,put=PutListSelection))
    long ListSelection;
    __declspec(property(get=GetRadioGroupSelection,put=PutRadioGroupSelection))
    long RadioGroupSelection;
    __declspec(property(get=GetActiveXControl))
    IDispatchPtr ActiveXControl;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    HRESULT Execute ( );
    _bstr_t Get_Default ( );
    enum XlSmartTagControlType GetType ( );
    VARIANT_BOOL GetPresentInPane ( );
    VARIANT_BOOL GetExpandHelp ( );
    void PutExpandHelp (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCheckboxState ( );
    void PutCheckboxState (
        VARIANT_BOOL RHS );
    _bstr_t GetTextboxText ( );
    void PutTextboxText (
        _bstr_t RHS );
    long GetListSelection ( );
    void PutListSelection (
        long RHS );
    long GetRadioGroupSelection ( );
    void PutRadioGroupSelection (
        long RHS );
    IDispatchPtr GetActiveXControl ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Execute ( ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlSmartTagControlType * RHS ) = 0;
      virtual HRESULT __stdcall get_PresentInPane (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ExpandHelp (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ExpandHelp (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CheckboxState (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CheckboxState (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextboxText (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextboxText (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListSelection (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListSelection (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_RadioGroupSelection (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_RadioGroupSelection (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveXControl (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
};

struct __declspec(uuid("0002445f-0001-0000-c000-000000000046"))
ISmartTagActions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagActionPtr _Default[];
    __declspec(property(get=GetItem))
    SmartTagActionPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    SmartTagActionPtr Get_Default (
        const _variant_t & Index );
    SmartTagActionPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SmartTagAction * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SmartTagAction * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024460-0001-0000-c000-000000000046"))
ISmartTag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetDownloadURL))
    _bstr_t DownloadURL;
    __declspec(property(get=GetXML))
    _bstr_t XML;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetSmartTagActions))
    SmartTagActionsPtr SmartTagActions;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProperties))
    CustomPropertiesPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetDownloadURL ( );
    _bstr_t GetName ( );
    _bstr_t Get_Default ( );
    _bstr_t GetXML ( );
    RangePtr GetRange ( );
    HRESULT Delete ( );
    SmartTagActionsPtr GetSmartTagActions ( );
    CustomPropertiesPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_DownloadURL (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_XML (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_SmartTagActions (
        /*[out,retval]*/ struct SmartTagActions * * RHS ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct CustomProperties * * RHS ) = 0;
};

struct __declspec(uuid("00024461-0001-0000-c000-000000000046"))
ISmartTags : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SmartTagPtr Add (
        _bstr_t SmartTagType );
    long GetCount ( );
    SmartTagPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR SmartTagType,
        /*[out,retval]*/ struct SmartTag * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SmartTag * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024462-0001-0000-c000-000000000046"))
ISmartTagRecognizer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    _bstr_t GetprogID ( );
    _bstr_t Get_Default ( );
    _bstr_t GetFullName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_progID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00024463-0001-0000-c000-000000000046"))
ISmartTagRecognizers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagRecognizerPtr _Default[];
    __declspec(property(get=GetRecognize,put=PutRecognize))
    VARIANT_BOOL Recognize;
    __declspec(property(get=GetItem))
    SmartTagRecognizerPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    SmartTagRecognizerPtr GetItem (
        const _variant_t & Index );
    SmartTagRecognizerPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL GetRecognize ( );
    void PutRecognize (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SmartTagRecognizer * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SmartTagRecognizer * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Recognize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Recognize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024464-0001-0000-c000-000000000046"))
ISmartTagOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplaySmartTags,put=PutDisplaySmartTags))
    enum XlSmartTagDisplayMode DisplaySmartTags;
    __declspec(property(get=GetEmbedSmartTags,put=PutEmbedSmartTags))
    VARIANT_BOOL EmbedSmartTags;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlSmartTagDisplayMode GetDisplaySmartTags ( );
    void PutDisplaySmartTags (
        enum XlSmartTagDisplayMode RHS );
    VARIANT_BOOL GetEmbedSmartTags ( );
    void PutEmbedSmartTags (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplaySmartTags (
        /*[out,retval]*/ enum XlSmartTagDisplayMode * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplaySmartTags (
        /*[in]*/ enum XlSmartTagDisplayMode RHS ) = 0;
      virtual HRESULT __stdcall get_EmbedSmartTags (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EmbedSmartTags (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024468-0001-0000-c000-000000000046"))
IPivotItemList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Field,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024469-0001-0000-c000-000000000046"))
ITab : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    enum XlColorIndex ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    enum XlColorIndex GetColorIndex ( );
    void PutColorIndex (
        enum XlColorIndex RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
};

struct __declspec(uuid("00024470-0001-0000-c000-000000000046"))
IListObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ListObjectPtr _Default[];
    __declspec(property(get=GetItem))
    ListObjectPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ListObjectPtr Add (
        enum XlListObjectSourceType SourceType,
        const _variant_t & Source,
        const _variant_t & LinkSource,
        enum XlYesNoGuess XlListObjectHasHeaders,
        const _variant_t & Destination = vtMissing );
    ListObjectPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ListObjectPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlListObjectSourceType SourceType,
        /*[in]*/ VARIANT Source,
        /*[in]*/ VARIANT LinkSource,
        /*[in]*/ enum XlYesNoGuess XlListObjectHasHeaders,
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ struct ListObject * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ListObject * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ListObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
};

struct __declspec(uuid("00024471-0001-0000-c000-000000000046"))
IListObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetDataBodyRange))
    RangePtr DataBodyRange;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetHeaderRowRange))
    RangePtr HeaderRowRange;
    __declspec(property(get=GetInsertRowRange))
    RangePtr InsertRowRange;
    __declspec(property(get=GetListColumns))
    ListColumnsPtr ListColumns;
    __declspec(property(get=GetListRows))
    ListRowsPtr ListRows;
    __declspec(property(get=GetQueryTable))
    _QueryTablePtr QueryTable;
    __declspec(property(get=GetDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetShowAutoFilter,put=PutShowAutoFilter))
    VARIANT_BOOL ShowAutoFilter;
    __declspec(property(get=GetShowTotals,put=PutShowTotals))
    VARIANT_BOOL ShowTotals;
    __declspec(property(get=GetSourceType))
    enum XlListObjectSourceType SourceType;
    __declspec(property(get=GetTotalsRowRange))
    RangePtr TotalsRowRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSharePointURL))
    _bstr_t SharePointURL;
    __declspec(property(get=GetXmlMap))
    XmlMapPtr XmlMap;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Publish (
        const _variant_t & Target,
        VARIANT_BOOL LinkSource );
    HRESULT Refresh ( );
    HRESULT Unlink ( );
    HRESULT Unlist ( );
    HRESULT UpdateChanges (
        enum XlListConflict iConflictType );
    HRESULT Resize (
        struct Range * Range );
    _bstr_t Get_Default ( );
    VARIANT_BOOL GetActive ( );
    RangePtr GetDataBodyRange ( );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    RangePtr GetHeaderRowRange ( );
    RangePtr GetInsertRowRange ( );
    ListColumnsPtr GetListColumns ( );
    ListRowsPtr GetListRows ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _QueryTablePtr GetQueryTable ( );
    RangePtr GetRange ( );
    VARIANT_BOOL GetShowAutoFilter ( );
    void PutShowAutoFilter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowTotals ( );
    void PutShowTotals (
        VARIANT_BOOL RHS );
    enum XlListObjectSourceType GetSourceType ( );
    RangePtr GetTotalsRowRange ( );
    _bstr_t GetSharePointURL ( );
    XmlMapPtr GetXmlMap ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Publish (
        /*[in]*/ VARIANT Target,
        /*[in]*/ VARIANT_BOOL LinkSource,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_Unlink ( ) = 0;
      virtual HRESULT __stdcall raw_Unlist ( ) = 0;
      virtual HRESULT __stdcall raw_UpdateChanges (
        /*[in]*/ enum XlListConflict iConflictType ) = 0;
      virtual HRESULT __stdcall raw_Resize (
        /*[in]*/ struct Range * Range ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_DataBodyRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRightToLeft (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_HeaderRowRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_InsertRowRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ListColumns (
        /*[out,retval]*/ struct ListColumns * * RHS ) = 0;
      virtual HRESULT __stdcall get_ListRows (
        /*[out,retval]*/ struct ListRows * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_QueryTable (
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowAutoFilter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowAutoFilter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowTotals (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowTotals (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SourceType (
        /*[out,retval]*/ enum XlListObjectSourceType * RHS ) = 0;
      virtual HRESULT __stdcall get_TotalsRowRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_SharePointURL (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_XmlMap (
        /*[out,retval]*/ struct XmlMap * * RHS ) = 0;
};

struct __declspec(uuid("00024472-0001-0000-c000-000000000046"))
IListColumns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ListColumnPtr _Default[];
    __declspec(property(get=GetItem))
    ListColumnPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ListColumnPtr Add (
        const _variant_t & Position = vtMissing );
    ListColumnPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ListColumnPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Position,
        /*[out,retval]*/ struct ListColumn * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ListColumn * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ListColumn * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
};

struct __declspec(uuid("00024473-0001-0000-c000-000000000046"))
IListColumn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetListDataFormat))
    ListDataFormatPtr ListDataFormat;
    __declspec(property(get=GetTotalsCalculation,put=PutTotalsCalculation))
    enum XlTotalsCalculation TotalsCalculation;
    __declspec(property(get=GetXPath))
    XPathPtr XPath;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSharePointFormula))
    _bstr_t SharePointFormula;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Get_Default ( );
    ListDataFormatPtr GetListDataFormat ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    RangePtr GetRange ( );
    enum XlTotalsCalculation GetTotalsCalculation ( );
    void PutTotalsCalculation (
        enum XlTotalsCalculation RHS );
    XPathPtr GetXPath ( );
    _bstr_t GetSharePointFormula ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ListDataFormat (
        /*[out,retval]*/ struct ListDataFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_TotalsCalculation (
        /*[out,retval]*/ enum XlTotalsCalculation * RHS ) = 0;
      virtual HRESULT __stdcall put_TotalsCalculation (
        /*[in]*/ enum XlTotalsCalculation RHS ) = 0;
      virtual HRESULT __stdcall get_XPath (
        /*[out,retval]*/ struct XPath * * RHS ) = 0;
      virtual HRESULT __stdcall get_SharePointFormula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00024474-0001-0000-c000-000000000046"))
IListRows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ListRowPtr _Default[];
    __declspec(property(get=GetItem))
    ListRowPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ListRowPtr Add (
        const _variant_t & Position = vtMissing );
    ListRowPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ListRowPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Position,
        /*[out,retval]*/ struct ListRow * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ListRow * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ListRow * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
};

struct __declspec(uuid("00024475-0001-0000-c000-000000000046"))
IListRow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetInvalidData))
    VARIANT_BOOL InvalidData;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    long GetIndex ( );
    VARIANT_BOOL GetInvalidData ( );
    RangePtr GetRange ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_InvalidData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
};

struct __declspec(uuid("00024476-0001-0000-c000-000000000046"))
IXmlNamespace : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetUri))
    _bstr_t Uri;
    __declspec(property(get=GetPrefix))
    _bstr_t Prefix;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    _bstr_t GetUri ( );
    _bstr_t GetPrefix ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Uri (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Prefix (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00024477-0001-0000-c000-000000000046"))
IXmlNamespaces : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    XmlNamespacePtr _Default[];
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetItem))
    XmlNamespacePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlNamespacePtr Get_Default (
        const _variant_t & Index );
    XmlNamespacePtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    _bstr_t GetValue ( );
    IUnknownPtr Get_NewEnum ( );
    HRESULT InstallManifest (
        _bstr_t Path,
        const _variant_t & InstallForAllUsers = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct XmlNamespace * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct XmlNamespace * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_InstallManifest (
        /*[in]*/ BSTR Path,
        /*[in]*/ VARIANT InstallForAllUsers = vtMissing ) = 0;
};

struct __declspec(uuid("00024478-0001-0000-c000-000000000046"))
IXmlDataBinding : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSourceUrl))
    _bstr_t SourceUrl;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    enum XlXmlImportResult Refresh ( );
    HRESULT LoadSettings (
        _bstr_t Url );
    HRESULT ClearSettings ( );
    _bstr_t GetSourceUrl ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Refresh (
        /*[out,retval]*/ enum XlXmlImportResult * RHS ) = 0;
      virtual HRESULT __stdcall raw_LoadSettings (
        /*[in]*/ BSTR Url ) = 0;
      virtual HRESULT __stdcall raw_ClearSettings ( ) = 0;
      virtual HRESULT __stdcall get_SourceUrl (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00024479-0001-0000-c000-000000000046"))
IXmlSchema : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNamespace))
    XmlNamespacePtr Namespace;
    __declspec(property(get=GetXML))
    _bstr_t XML;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlNamespacePtr GetNamespace ( );
    _bstr_t GetXML ( );
    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Namespace (
        /*[out,retval]*/ struct XmlNamespace * * RHS ) = 0;
      virtual HRESULT __stdcall get_XML (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("0002447a-0001-0000-c000-000000000046"))
IXmlSchemas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    XmlSchemaPtr _Default[];
    __declspec(property(get=GetItem))
    XmlSchemaPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlSchemaPtr Get_Default (
        const _variant_t & Index );
    XmlSchemaPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct XmlSchema * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct XmlSchema * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002447b-0001-0000-c000-000000000046"))
IXmlMap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetSaveDataSourceDefinition,put=PutSaveDataSourceDefinition))
    VARIANT_BOOL SaveDataSourceDefinition;
    __declspec(property(get=GetPreserveColumnFilter,put=PutPreserveColumnFilter))
    VARIANT_BOOL PreserveColumnFilter;
    __declspec(property(get=GetPreserveNumberFormatting,put=PutPreserveNumberFormatting))
    VARIANT_BOOL PreserveNumberFormatting;
    __declspec(property(get=GetAppendOnImport,put=PutAppendOnImport))
    VARIANT_BOOL AppendOnImport;
    __declspec(property(get=GetRootElementName))
    _bstr_t RootElementName;
    __declspec(property(get=GetRootElementNamespace))
    XmlNamespacePtr RootElementNamespace;
    __declspec(property(get=GetSchemas))
    XmlSchemasPtr Schemas;
    __declspec(property(get=GetDataBinding))
    XmlDataBindingPtr DataBinding;
    __declspec(property(get=GetAdjustColumnWidth,put=PutAdjustColumnWidth))
    VARIANT_BOOL AdjustColumnWidth;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsExportable))
    VARIANT_BOOL IsExportable;
    __declspec(property(get=GetShowImportExportValidationErrors,put=PutShowImportExportValidationErrors))
    VARIANT_BOOL ShowImportExportValidationErrors;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    VARIANT_BOOL GetIsExportable ( );
    VARIANT_BOOL GetShowImportExportValidationErrors ( );
    void PutShowImportExportValidationErrors (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSaveDataSourceDefinition ( );
    void PutSaveDataSourceDefinition (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAdjustColumnWidth ( );
    void PutAdjustColumnWidth (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPreserveColumnFilter ( );
    void PutPreserveColumnFilter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPreserveNumberFormatting ( );
    void PutPreserveNumberFormatting (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAppendOnImport ( );
    void PutAppendOnImport (
        VARIANT_BOOL RHS );
    _bstr_t GetRootElementName ( );
    XmlNamespacePtr GetRootElementNamespace ( );
    XmlSchemasPtr GetSchemas ( );
    XmlDataBindingPtr GetDataBinding ( );
    HRESULT Delete ( );
    enum XlXmlImportResult Import (
        _bstr_t Url,
        const _variant_t & Overwrite = vtMissing );
    enum XlXmlImportResult ImportXml (
        _bstr_t XmlData,
        const _variant_t & Overwrite = vtMissing );
    enum XlXmlExportResult Export (
        _bstr_t Url,
        const _variant_t & Overwrite = vtMissing );
    enum XlXmlExportResult ExportXml (
        BSTR * Data );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_IsExportable (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowImportExportValidationErrors (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowImportExportValidationErrors (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SaveDataSourceDefinition (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveDataSourceDefinition (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AdjustColumnWidth (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AdjustColumnWidth (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PreserveColumnFilter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PreserveColumnFilter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PreserveNumberFormatting (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PreserveNumberFormatting (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AppendOnImport (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AppendOnImport (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RootElementName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_RootElementNamespace (
        /*[out,retval]*/ struct XmlNamespace * * RHS ) = 0;
      virtual HRESULT __stdcall get_Schemas (
        /*[out,retval]*/ struct XmlSchemas * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataBinding (
        /*[out,retval]*/ struct XmlDataBinding * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR Url,
        /*[in]*/ VARIANT Overwrite,
        /*[out,retval]*/ enum XlXmlImportResult * RHS ) = 0;
      virtual HRESULT __stdcall raw_ImportXml (
        /*[in]*/ BSTR XmlData,
        /*[in]*/ VARIANT Overwrite,
        /*[out,retval]*/ enum XlXmlImportResult * RHS ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Url,
        /*[in]*/ VARIANT Overwrite,
        /*[out,retval]*/ enum XlXmlExportResult * RHS ) = 0;
      virtual HRESULT __stdcall raw_ExportXml (
        /*[out]*/ BSTR * Data,
        /*[out,retval]*/ enum XlXmlExportResult * RHS ) = 0;
};

struct __declspec(uuid("0002447c-0001-0000-c000-000000000046"))
IXmlMaps : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    XmlMapPtr _Default[];
    __declspec(property(get=GetItem))
    XmlMapPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlMapPtr Add (
        _bstr_t Schema,
        const _variant_t & RootElementName = vtMissing );
    XmlMapPtr Get_Default (
        const _variant_t & Index );
    XmlMapPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Schema,
        /*[in]*/ VARIANT RootElementName,
        /*[out,retval]*/ struct XmlMap * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct XmlMap * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct XmlMap * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002447d-0001-0000-c000-000000000046"))
IListDataFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    enum XlListDataType _Default;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetChoices))
    _variant_t Choices;
    __declspec(property(get=GetDecimalPlaces))
    long DecimalPlaces;
    __declspec(property(get=GetDefaultValue))
    _variant_t DefaultValue;
    __declspec(property(get=GetIsPercent))
    VARIANT_BOOL IsPercent;
    __declspec(property(get=Getlcid))
    long lcid;
    __declspec(property(get=GetMaxCharacters))
    long MaxCharacters;
    __declspec(property(get=GetMaxNumber))
    _variant_t MaxNumber;
    __declspec(property(get=GetMinNumber))
    _variant_t MinNumber;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRequired))
    VARIANT_BOOL Required;
    __declspec(property(get=GetType))
    enum XlListDataType Type;
    __declspec(property(get=GetAllowFillIn))
    VARIANT_BOOL AllowFillIn;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlListDataType Get_Default ( );
    _variant_t GetChoices ( );
    long GetDecimalPlaces ( );
    _variant_t GetDefaultValue ( );
    VARIANT_BOOL GetIsPercent ( );
    long Getlcid ( );
    long GetMaxCharacters ( );
    _variant_t GetMaxNumber ( );
    _variant_t GetMinNumber ( );
    VARIANT_BOOL GetRequired ( );
    enum XlListDataType GetType ( );
    VARIANT_BOOL GetReadOnly ( );
    VARIANT_BOOL GetAllowFillIn ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ enum XlListDataType * RHS ) = 0;
      virtual HRESULT __stdcall get_Choices (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DecimalPlaces (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_IsPercent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_lcid (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MaxCharacters (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MaxNumber (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_MinNumber (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Required (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlListDataType * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowFillIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("0002447e-0001-0000-c000-000000000046"))
IXPath : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMap))
    XmlMapPtr Map;
    __declspec(property(get=GetRepeating))
    VARIANT_BOOL Repeating;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    _bstr_t GetValue ( );
    XmlMapPtr GetMap ( );
    HRESULT SetValue (
        struct XmlMap * Map,
        _bstr_t XPath,
        const _variant_t & SelectionNamespace = vtMissing,
        const _variant_t & Repeating = vtMissing );
    HRESULT Clear ( );
    VARIANT_BOOL GetRepeating ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Map (
        /*[out,retval]*/ struct XmlMap * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SetValue (
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR XPath,
        /*[in]*/ VARIANT SelectionNamespace = vtMissing,
        /*[in]*/ VARIANT Repeating = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_Repeating (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("00020821-0000-0000-c000-000000000046"))
Chart;
    // [ default ] interface _Chart
    // [ default, source ] dispinterface ChartEvents

struct __declspec(uuid("00020893-0001-0000-c000-000000000046"))
IWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSheets))
    SheetsPtr SelectedSheets;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetSplitColumn,put=PutSplitColumn))
    long SplitColumn;
    __declspec(property(get=GetSplitHorizontal,put=PutSplitHorizontal))
    double SplitHorizontal;
    __declspec(property(get=GetSplitRow,put=PutSplitRow))
    long SplitRow;
    __declspec(property(get=GetSplitVertical,put=PutSplitVertical))
    double SplitVertical;
    __declspec(property(get=GetSplit,put=PutSplit))
    VARIANT_BOOL Split;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum XlWindowState WindowState;
    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetTabRatio,put=PutTabRatio))
    double TabRatio;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetDisplayHorizontalScrollBar,put=PutDisplayHorizontalScrollBar))
    VARIANT_BOOL DisplayHorizontalScrollBar;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetDisplayWorkbookTabs,put=PutDisplayWorkbookTabs))
    VARIANT_BOOL DisplayWorkbookTabs;
    __declspec(property(get=GetType))
    enum XlWindowType Type;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRangeSelection))
    RangePtr RangeSelection;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetEnableResize,put=PutEnableResize))
    VARIANT_BOOL EnableResize;
    __declspec(property(get=GetView,put=PutView))
    enum XlWindowView View;
    __declspec(property(get=GetOnWindow,put=PutOnWindow))
    _bstr_t OnWindow;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;
    __declspec(property(get=GetWindowNumber))
    long WindowNumber;
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetCaption,put=PutCaption))
    _variant_t Caption;
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetUsableHeight))
    double UsableHeight;
    __declspec(property(get=GetUsableWidth))
    double UsableWidth;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActivePane))
    PanePtr ActivePane;
    __declspec(property(get=GetDisplayFormulas,put=PutDisplayFormulas))
    VARIANT_BOOL DisplayFormulas;
    __declspec(property(get=GetDisplayGridlines,put=PutDisplayGridlines))
    VARIANT_BOOL DisplayGridlines;
    __declspec(property(get=GetDisplayHeadings,put=PutDisplayHeadings))
    VARIANT_BOOL DisplayHeadings;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    VARIANT_BOOL _DisplayRightToLeft;
    __declspec(property(get=GetDisplayZeros,put=PutDisplayZeros))
    VARIANT_BOOL DisplayZeros;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetFreezePanes,put=PutFreezePanes))
    VARIANT_BOOL FreezePanes;
    __declspec(property(get=GetGridlineColor,put=PutGridlineColor))
    long GridlineColor;
    __declspec(property(get=GetGridlineColorIndex,put=PutGridlineColorIndex))
    enum XlColorIndex GridlineColorIndex;
    __declspec(property(get=GetPanes))
    PanesPtr Panes;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t ActivateNext ( );
    _variant_t ActivatePrevious ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    PanePtr GetActivePane ( );
    IDispatchPtr GetActiveSheet ( );
    _variant_t GetCaption ( );
    void PutCaption (
        const _variant_t & RHS );
    VARIANT_BOOL Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing );
    VARIANT_BOOL GetDisplayFormulas ( );
    void PutDisplayFormulas (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayGridlines ( );
    void PutDisplayGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayHeadings ( );
    void PutDisplayHeadings (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayHorizontalScrollBar ( );
    void PutDisplayHorizontalScrollBar (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL RHS );
    VARIANT_BOOL Get_DisplayRightToLeft ( );
    void Put_DisplayRightToLeft (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayWorkbookTabs ( );
    void PutDisplayWorkbookTabs (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayZeros ( );
    void PutDisplayZeros (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableResize ( );
    void PutEnableResize (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetFreezePanes ( );
    void PutFreezePanes (
        VARIANT_BOOL RHS );
    long GetGridlineColor ( );
    void PutGridlineColor (
        long RHS );
    enum XlColorIndex GetGridlineColorIndex ( );
    void PutGridlineColorIndex (
        enum XlColorIndex RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    WindowPtr NewWindow ( );
    _bstr_t GetOnWindow ( );
    void PutOnWindow (
        _bstr_t RHS );
    PanesPtr GetPanes ( );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    RangePtr GetRangeSelection ( );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long RHS );
    long GetScrollRow ( );
    void PutScrollRow (
        long RHS );
    _variant_t ScrollWorkbookTabs (
        const _variant_t & Sheets = vtMissing,
        const _variant_t & Position = vtMissing );
    SheetsPtr GetSelectedSheets ( );
    IDispatchPtr GetSelection ( );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    VARIANT_BOOL GetSplit ( );
    void PutSplit (
        VARIANT_BOOL RHS );
    long GetSplitColumn ( );
    void PutSplitColumn (
        long RHS );
    double GetSplitHorizontal ( );
    void PutSplitHorizontal (
        double RHS );
    long GetSplitRow ( );
    void PutSplitRow (
        long RHS );
    double GetSplitVertical ( );
    void PutSplitVertical (
        double RHS );
    double GetTabRatio ( );
    void PutTabRatio (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    enum XlWindowType GetType ( );
    double GetUsableHeight ( );
    double GetUsableWidth ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    RangePtr GetVisibleRange ( );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetWindowNumber ( );
    enum XlWindowState GetWindowState ( );
    void PutWindowState (
        enum XlWindowState RHS );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & RHS );
    enum XlWindowView GetView ( );
    void PutView (
        enum XlWindowView RHS );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    void PutDisplayRightToLeft (
        VARIANT_BOOL RHS );
    long PointsToScreenPixelsX (
        long Points );
    long PointsToScreenPixelsY (
        long Points );
    IDispatchPtr RangeFromPoint (
        long x,
        long y );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ActivateNext (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ActivatePrevious (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveChart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActivePane (
        /*[out,retval]*/ struct Pane * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT SaveChanges,
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT RouteWorkbook,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayFormulas (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayFormulas (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayHeadings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayHeadings (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayHorizontalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayHorizontalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayOutline (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayOutline (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__DisplayRightToLeft (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put__DisplayRightToLeft (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayWorkbookTabs (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayWorkbookTabs (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayZeros (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayZeros (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableResize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableResize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FreezePanes (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FreezePanes (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_GridlineColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_GridlineColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_GridlineColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_GridlineColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_LargeScroll (
        /*[in]*/ VARIANT Down,
        /*[in]*/ VARIANT Up,
        /*[in]*/ VARIANT ToRight,
        /*[in]*/ VARIANT ToLeft,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnWindow (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnWindow (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Panes (
        /*[out,retval]*/ struct Panes * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From,
        /*[in]*/ VARIANT To,
        /*[in]*/ VARIANT Copies,
        /*[in]*/ VARIANT Preview,
        /*[in]*/ VARIANT ActivePrinter,
        /*[in]*/ VARIANT PrintToFile,
        /*[in]*/ VARIANT Collate,
        /*[in]*/ VARIANT PrToFileName,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_RangeSelection (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollColumn (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollColumn (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollRow (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollRow (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollWorkbookTabs (
        /*[in]*/ VARIANT Sheets,
        /*[in]*/ VARIANT Position,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SelectedSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SmallScroll (
        /*[in]*/ VARIANT Down,
        /*[in]*/ VARIANT Up,
        /*[in]*/ VARIANT ToRight,
        /*[in]*/ VARIANT ToLeft,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Split (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Split (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SplitColumn (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitColumn (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SplitHorizontal (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitHorizontal (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_SplitRow (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitRow (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SplitVertical (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitVertical (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TabRatio (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_TabRatio (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlWindowType * RHS ) = 0;
      virtual HRESULT __stdcall get_UsableHeight (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_UsableWidth (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_WindowNumber (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum XlWindowState * RHS ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum XlWindowState RHS ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_View (
        /*[out,retval]*/ enum XlWindowView * RHS ) = 0;
      virtual HRESULT __stdcall put_View (
        /*[in]*/ enum XlWindowView RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRightToLeft (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRightToLeft (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_PointsToScreenPixelsX (
        /*[in]*/ long Points,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_PointsToScreenPixelsY (
        /*[in]*/ long Points,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_RangeFromPoint (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollIntoView (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ VARIANT Start = vtMissing ) = 0;
};

struct __declspec(uuid("000208d6-0000-0000-c000-000000000046"))
_Chart : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetArea3DGroup))
    ChartGroupPtr Area3DGroup[];
    __declspec(property(get=GetBar3DGroup))
    ChartGroupPtr Bar3DGroup[];
    __declspec(property(get=GetColumn3DGroup))
    ChartGroupPtr Column3DGroup[];
    __declspec(property(get=GetLine3DGroup))
    ChartGroupPtr Line3DGroup[];
    __declspec(property(get=GetPie3DGroup))
    ChartGroupPtr Pie3DGroup[];
    __declspec(property(get=GetSurfaceGroup))
    ChartGroupPtr SurfaceGroup[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetMailEnvelope))
    Office::IMsoEnvelopeVBPtr MailEnvelope;
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetDepthPercent,put=PutDepthPercent))
    long DepthPercent[];
    __declspec(property(get=GetElevation,put=PutElevation))
    long Elevation[];
    __declspec(property(get=GetGapDepth,put=PutGapDepth))
    long GapDepth[];
    __declspec(property(get=GetTab))
    TabPtr Tab;
    __declspec(property(get=GetHasAxis,put=PutHasAxis))
    _variant_t HasAxis[][][];
    __declspec(property(get=GetHasLegend,put=PutHasLegend))
    VARIANT_BOOL HasLegend[];
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle[];
    __declspec(property(get=GetHeightPercent,put=PutHeightPercent))
    long HeightPercent[];
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    long Perspective[];
    __declspec(property(get=GetRightAngleAxes,put=PutRightAngleAxes))
    _variant_t RightAngleAxes[];
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetRotation,put=PutRotation))
    _variant_t Rotation[];
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetPivotLayout))
    PivotLayoutPtr PivotLayout;
    __declspec(property(get=GetHasPivotFields,put=PutHasPivotFields))
    VARIANT_BOOL HasPivotFields;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects[];
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetDataTable))
    DataTablePtr DataTable;
    __declspec(property(get=GetHasDataTable,put=PutHasDataTable))
    VARIANT_BOOL HasDataTable;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetShowWindow,put=PutShowWindow))
    VARIANT_BOOL ShowWindow;
    __declspec(property(get=GetChartType,put=PutChartType))
    enum XlChartType ChartType;
    __declspec(property(get=GetChartTitle))
    ChartTitlePtr ChartTitle[];
    __declspec(property(get=GetCorners))
    CornersPtr Corners[];
    __declspec(property(get=GetFloor))
    FloorPtr Floor[];
    __declspec(property(get=GetLegend))
    LegendPtr Legend[];
    __declspec(property(get=GetPlotArea))
    PlotAreaPtr PlotArea[];
    __declspec(property(get=GetWalls))
    WallsPtr Walls[];
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetChartArea))
    ChartAreaPtr ChartArea[];
    __declspec(property(get=GetProtectFormatting,put=PutProtectFormatting))
    VARIANT_BOOL ProtectFormatting;
    __declspec(property(get=GetProtectData,put=PutProtectData))
    VARIANT_BOOL ProtectData;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetPlotVisibleOnly,put=PutPlotVisibleOnly))
    VARIANT_BOOL PlotVisibleOnly[];
    __declspec(property(get=GetDisplayBlanksAs,put=PutDisplayBlanksAs))
    enum XlDisplayBlanksAs DisplayBlanksAs[];
    __declspec(property(get=GetSizeWithWindow,put=PutSizeWithWindow))
    VARIANT_BOOL SizeWithWindow[];
    __declspec(property(get=GetPlotBy,put=PutPlotBy))
    enum XlRowCol PlotBy;
    __declspec(property(get=GetProtectGoalSeek,put=PutProtectGoalSeek))
    VARIANT_BOOL ProtectGoalSeek;
    __declspec(property(get=GetProtectSelection,put=PutProtectSelection))
    VARIANT_BOOL ProtectSelection;
    __declspec(property(get=GetWallsAndGridlines2D,put=PutWallsAndGridlines2D))
    VARIANT_BOOL WallsAndGridlines2D[];
    __declspec(property(get=GetAutoScaling,put=PutAutoScaling))
    VARIANT_BOOL AutoScaling[];
    __declspec(property(get=GetType,put=PutType))
    long Type[];
    __declspec(property(get=GetSubType,put=PutSubType))
    long SubType[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectDrawingObjects (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    HRESULT _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        long lcid = 0 );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetArea3DGroup (
        long lcid = 0 );
    IDispatchPtr AreaGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT AutoFormat (
        long Gallery,
        const _variant_t & Format = vtMissing );
    VARIANT_BOOL GetAutoScaling (
        long lcid = 0 );
    void PutAutoScaling (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Axes (
        const _variant_t & Type,
        enum XlAxisGroup AxisGroup,
        long lcid = 0 );
    HRESULT SetBackgroundPicture (
        _bstr_t Filename );
    ChartGroupPtr GetBar3DGroup (
        long lcid = 0 );
    IDispatchPtr BarGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartAreaPtr GetChartArea (
        long lcid = 0 );
    IDispatchPtr ChartGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartTitlePtr GetChartTitle (
        long lcid = 0 );
    HRESULT ChartWizard (
        const _variant_t & Source = vtMissing,
        const _variant_t & Gallery = vtMissing,
        const _variant_t & Format = vtMissing,
        const _variant_t & PlotBy = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & HasLegend = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & CategoryTitle = vtMissing,
        const _variant_t & ValueTitle = vtMissing,
        const _variant_t & ExtraTitle = vtMissing,
        long lcid = 0 );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetColumn3DGroup (
        long lcid = 0 );
    IDispatchPtr ColumnGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        enum XlPictureAppearance Size,
        long lcid = 0 );
    CornersPtr GetCorners (
        long lcid = 0 );
    HRESULT CreatePublisher (
        const _variant_t & Edition,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance Size,
        const _variant_t & ContainsPICT = vtMissing,
        const _variant_t & ContainsBIFF = vtMissing,
        const _variant_t & ContainsRTF = vtMissing,
        const _variant_t & ContainsVALU = vtMissing,
        long lcid = 0 );
    DataTablePtr GetDataTable ( );
    long GetDepthPercent (
        long lcid = 0 );
    void PutDepthPercent (
        long lcid,
        long RHS );
    HRESULT Deselect (
        long lcid = 0 );
    enum XlDisplayBlanksAs GetDisplayBlanksAs (
        long lcid = 0 );
    void PutDisplayBlanksAs (
        long lcid,
        enum XlDisplayBlanksAs RHS );
    IDispatchPtr DoughnutGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    long GetElevation (
        long lcid = 0 );
    void PutElevation (
        long lcid,
        long RHS );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    FloorPtr GetFloor (
        long lcid = 0 );
    long GetGapDepth (
        long lcid = 0 );
    void PutGapDepth (
        long lcid,
        long RHS );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _variant_t GetHasAxis (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0 );
    void PutHasAxis (
        const _variant_t & Index1,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    VARIANT_BOOL GetHasDataTable ( );
    void PutHasDataTable (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasLegend (
        long lcid = 0 );
    void PutHasLegend (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasTitle (
        long lcid = 0 );
    void PutHasTitle (
        long lcid,
        VARIANT_BOOL RHS );
    long GetHeightPercent (
        long lcid = 0 );
    void PutHeightPercent (
        long lcid,
        long RHS );
    HyperlinksPtr GetHyperlinks ( );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    LegendPtr GetLegend (
        long lcid = 0 );
    ChartGroupPtr GetLine3DGroup (
        long lcid = 0 );
    IDispatchPtr LineGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _ChartPtr Location (
        enum XlChartLocation Where,
        const _variant_t & Name = vtMissing );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Paste (
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    long GetPerspective (
        long lcid = 0 );
    void PutPerspective (
        long lcid,
        long RHS );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetPie3DGroup (
        long lcid = 0 );
    IDispatchPtr PieGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    PlotAreaPtr GetPlotArea (
        long lcid = 0 );
    VARIANT_BOOL GetPlotVisibleOnly (
        long lcid = 0 );
    void PutPlotVisibleOnly (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr RadarGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _variant_t GetRightAngleAxes (
        long lcid = 0 );
    void PutRightAngleAxes (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetRotation (
        long lcid = 0 );
    void PutRotation (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetSizeWithWindow (
        long lcid = 0 );
    void PutSizeWithWindow (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowWindow ( );
    void PutShowWindow (
        VARIANT_BOOL RHS );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    long GetSubType (
        long lcid = 0 );
    void PutSubType (
        long lcid,
        long RHS );
    ChartGroupPtr GetSurfaceGroup (
        long lcid = 0 );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    long GetType (
        long lcid = 0 );
    void PutType (
        long lcid,
        long RHS );
    enum XlChartType GetChartType ( );
    void PutChartType (
        enum XlChartType RHS );
    HRESULT ApplyCustomType (
        enum XlChartType ChartType,
        const _variant_t & TypeName = vtMissing );
    WallsPtr GetWalls (
        long lcid = 0 );
    VARIANT_BOOL GetWallsAndGridlines2D (
        long lcid = 0 );
    void PutWallsAndGridlines2D (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr XYGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape RHS );
    enum XlRowCol GetPlotBy ( );
    void PutPlotBy (
        enum XlRowCol RHS );
    HRESULT CopyChartBuild ( );
    VARIANT_BOOL GetProtectFormatting ( );
    void PutProtectFormatting (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetProtectData ( );
    void PutProtectData (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetProtectGoalSeek ( );
    void PutProtectGoalSeek (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetProtectSelection ( );
    void PutProtectSelection (
        VARIANT_BOOL RHS );
    HRESULT GetChartElement (
        long x,
        long y,
        long * ElementID,
        long * Arg1,
        long * Arg2 );
    HRESULT SetSourceData (
        struct Range * Source,
        const _variant_t & PlotBy = vtMissing );
    VARIANT_BOOL Export (
        _bstr_t Filename,
        const _variant_t & FilterName = vtMissing,
        const _variant_t & Interactive = vtMissing );
    HRESULT Refresh ( );
    PivotLayoutPtr GetPivotLayout ( );
    VARIANT_BOOL GetHasPivotFields ( );
    void PutHasPivotFields (
        VARIANT_BOOL RHS );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    TabPtr GetTab ( );
    Office::IMsoEnvelopeVBPtr GetMailEnvelope ( );
    HRESULT ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing,
        long lcid = 0 );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ProtectContents (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectionMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual void __stdcall _Dummy23 ( ) = 0;
      virtual HRESULT __stdcall raw__SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetVisibility * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlSheetVisibility RHS ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * RHS ) = 0;
      virtual HRESULT __stdcall raw__ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey = vtMissing,
        /*[in]*/ VARIANT AutoText = vtMissing,
        /*[in]*/ VARIANT HasLeaderLines = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Arcs (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Area3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AreaGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFormat (
        /*[in]*/ long Gallery,
        /*[in]*/ VARIANT Format = vtMissing ) = 0;
      virtual HRESULT __stdcall get_AutoScaling (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaling (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Axes (
        /*[in]*/ VARIANT Type,
        /*[in]*/ enum XlAxisGroup AxisGroup,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SetBackgroundPicture (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Bar3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BarGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Buttons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChartArea (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartArea * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChartGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChartObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChartTitle (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartTitle * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChartWizard (
        /*[in]*/ VARIANT Source = vtMissing,
        /*[in]*/ VARIANT Gallery = vtMissing,
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT PlotBy = vtMissing,
        /*[in]*/ VARIANT CategoryLabels = vtMissing,
        /*[in]*/ VARIANT SeriesLabels = vtMissing,
        /*[in]*/ VARIANT HasLegend = vtMissing,
        /*[in]*/ VARIANT Title = vtMissing,
        /*[in]*/ VARIANT CategoryTitle = vtMissing,
        /*[in]*/ VARIANT ValueTitle = vtMissing,
        /*[in]*/ VARIANT ExtraTitle = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_CheckBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Column3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ColumnGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[in]*/ enum XlPictureAppearance Size,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Corners (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Corners * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreatePublisher (
        /*[in]*/ VARIANT Edition,
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlPictureAppearance Size,
        /*[in]*/ VARIANT ContainsPICT = vtMissing,
        /*[in]*/ VARIANT ContainsBIFF = vtMissing,
        /*[in]*/ VARIANT ContainsRTF = vtMissing,
        /*[in]*/ VARIANT ContainsVALU = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DataTable (
        /*[out,retval]*/ struct DataTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_DepthPercent (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DepthPercent (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Deselect (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DisplayBlanksAs (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlDisplayBlanksAs * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayBlanksAs (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlDisplayBlanksAs RHS ) = 0;
      virtual HRESULT __stdcall raw_DoughnutGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Drawings (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DrawingObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DropDowns (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Floor (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Floor * * RHS ) = 0;
      virtual HRESULT __stdcall get_GapDepth (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_GapDepth (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_GroupBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_GroupObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasAxis (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HasAxis (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2 = vtMissing,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_HasDataTable (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDataTable (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasLegend (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasLegend (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasTitle (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasTitle (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HeightPercent (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_HeightPercent (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Labels (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Legend (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Legend * * RHS ) = 0;
      virtual HRESULT __stdcall get_Line3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_LineGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Lines (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Location (
        /*[in]*/ enum XlChartLocation Where,
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OLEObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OptionButtons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ovals (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ VARIANT Type = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Pictures (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Pie3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PieGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PlotArea (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct PlotArea * * RHS ) = 0;
      virtual HRESULT __stdcall get_PlotVisibleOnly (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PlotVisibleOnly (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_RadarGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rectangles (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RightAngleAxes (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RightAngleAxes (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollBars (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SeriesCollection (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SizeWithWindow (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SizeWithWindow (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowWindow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowWindow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Spinners (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SubType (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SubType (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SurfaceGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_TextBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ChartType (
        /*[out,retval]*/ enum XlChartType * RHS ) = 0;
      virtual HRESULT __stdcall put_ChartType (
        /*[in]*/ enum XlChartType RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyCustomType (
        /*[in]*/ enum XlChartType ChartType,
        /*[in]*/ VARIANT TypeName = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Walls (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Walls * * RHS ) = 0;
      virtual HRESULT __stdcall get_WallsAndGridlines2D (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WallsAndGridlines2D (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_XYGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BarShape (
        /*[out,retval]*/ enum XlBarShape * RHS ) = 0;
      virtual HRESULT __stdcall put_BarShape (
        /*[in]*/ enum XlBarShape RHS ) = 0;
      virtual HRESULT __stdcall get_PlotBy (
        /*[out,retval]*/ enum XlRowCol * RHS ) = 0;
      virtual HRESULT __stdcall put_PlotBy (
        /*[in]*/ enum XlRowCol RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyChartBuild ( ) = 0;
      virtual HRESULT __stdcall get_ProtectFormatting (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectFormatting (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectGoalSeek (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectGoalSeek (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectSelection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectSelection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_GetChartElement (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[in]*/ long * ElementID,
        /*[in]*/ long * Arg1,
        /*[in]*/ long * Arg2 ) = 0;
      virtual HRESULT __stdcall raw_SetSourceData (
        /*[in]*/ struct Range * Source,
        /*[in]*/ VARIANT PlotBy = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FilterName,
        /*[in]*/ VARIANT Interactive,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall get_PivotLayout (
        /*[out,retval]*/ struct PivotLayout * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasPivotFields (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasPivotFields (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Tab (
        /*[out,retval]*/ struct Tab * * RHS ) = 0;
      virtual HRESULT __stdcall get_MailEnvelope (
        /*[out,retval]*/ struct Office::IMsoEnvelopeVB * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey = vtMissing,
        /*[in]*/ VARIANT AutoText = vtMissing,
        /*[in]*/ VARIANT HasLeaderLines = vtMissing,
        /*[in]*/ VARIANT ShowSeriesName = vtMissing,
        /*[in]*/ VARIANT ShowCategoryName = vtMissing,
        /*[in]*/ VARIANT ShowValue = vtMissing,
        /*[in]*/ VARIANT ShowPercentage = vtMissing,
        /*[in]*/ VARIANT ShowBubbleSize = vtMissing,
        /*[in]*/ VARIANT Separator = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in]*/ VARIANT Local = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing ) = 0;
};

struct __declspec(uuid("000208da-0000-0000-c000-000000000046"))
_Workbook : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title[];
    __declspec(property(get=GetContainer))
    IDispatchPtr Container;
    __declspec(property(get=GetDate1904,put=PutDate1904))
    VARIANT_BOOL Date1904[];
    __declspec(property(get=GetDisplayDrawingObjects,put=PutDisplayDrawingObjects))
    enum XlDisplayDrawingObjects DisplayDrawingObjects[];
    __declspec(property(get=GetPrecisionAsDisplayed,put=PutPrecisionAsDisplayed))
    VARIANT_BOOL PrecisionAsDisplayed[];
    __declspec(property(get=GetSaveLinkValues,put=PutSaveLinkValues))
    VARIANT_BOOL SaveLinkValues[];
    __declspec(property(get=GetUpdateRemoteReferences,put=PutUpdateRemoteReferences))
    VARIANT_BOOL UpdateRemoteReferences[];
    __declspec(property(get=GetUserControl,put=PutUserControl))
    VARIANT_BOOL UserControl;
    __declspec(property(get=GetCalculationVersion))
    long CalculationVersion;
    __declspec(property(get=GetReadOnlyRecommended,put=PutReadOnlyRecommended))
    VARIANT_BOOL ReadOnlyRecommended;
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetPublishObjects))
    PublishObjectsPtr PublishObjects;
    __declspec(property(get=GetWebOptions))
    WebOptionsPtr WebOptions;
    __declspec(property(get=GetHTMLProject))
    Office::HTMLProjectPtr HTMLProject;
    __declspec(property(get=GetEnvelopeVisible,put=PutEnvelopeVisible))
    VARIANT_BOOL EnvelopeVisible;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetVBASigned))
    VARIANT_BOOL VBASigned;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetAcceptLabelsInFormulas,put=PutAcceptLabelsInFormulas))
    VARIANT_BOOL AcceptLabelsInFormulas;
    __declspec(property(get=GetAutoUpdateFrequency,put=PutAutoUpdateFrequency))
    long AutoUpdateFrequency;
    __declspec(property(get=GetAutoUpdateSaveChanges,put=PutAutoUpdateSaveChanges))
    VARIANT_BOOL AutoUpdateSaveChanges;
    __declspec(property(get=GetChangeHistoryDuration,put=PutChangeHistoryDuration))
    long ChangeHistoryDuration;
    __declspec(property(get=GetIsAddin,put=PutIsAddin))
    VARIANT_BOOL IsAddin;
    __declspec(property(get=GetPersonalViewListSettings,put=PutPersonalViewListSettings))
    VARIANT_BOOL PersonalViewListSettings;
    __declspec(property(get=GetPersonalViewPrintSettings,put=PutPersonalViewPrintSettings))
    VARIANT_BOOL PersonalViewPrintSettings;
    __declspec(property(get=GetShowPivotTableFieldList,put=PutShowPivotTableFieldList))
    VARIANT_BOOL ShowPivotTableFieldList;
    __declspec(property(get=GetEnableAutoRecover,put=PutEnableAutoRecover))
    VARIANT_BOOL EnableAutoRecover;
    __declspec(property(get=GetCustomViews))
    CustomViewsPtr CustomViews;
    __declspec(property(get=GetTemplateRemoveExtData,put=PutTemplateRemoveExtData))
    VARIANT_BOOL TemplateRemoveExtData;
    __declspec(property(get=GetUpdateLinks,put=PutUpdateLinks))
    enum XlUpdateLinks UpdateLinks;
    __declspec(property(get=GetRemovePersonalInformation,put=PutRemovePersonalInformation))
    VARIANT_BOOL RemovePersonalInformation;
    __declspec(property(get=GetHighlightChangesOnScreen,put=PutHighlightChangesOnScreen))
    VARIANT_BOOL HighlightChangesOnScreen;
    __declspec(property(get=GetKeepChangeHistory,put=PutKeepChangeHistory))
    VARIANT_BOOL KeepChangeHistory;
    __declspec(property(get=GetListChangesOnNewSheet,put=PutListChangesOnNewSheet))
    VARIANT_BOOL ListChangesOnNewSheet;
    __declspec(property(get=GetPasswordEncryptionProvider))
    _bstr_t PasswordEncryptionProvider;
    __declspec(property(get=GetPasswordEncryptionAlgorithm))
    _bstr_t PasswordEncryptionAlgorithm;
    __declspec(property(get=GetPasswordEncryptionKeyLength))
    long PasswordEncryptionKeyLength;
    __declspec(property(get=GetPasswordEncryptionFileProperties))
    VARIANT_BOOL PasswordEncryptionFileProperties;
    __declspec(property(get=GetSmartTagOptions))
    SmartTagOptionsPtr SmartTagOptions;
    __declspec(property(get=GetVBProject))
    VBIDE::_VBProjectPtr VBProject;
    __declspec(property(get=GetPermission))
    Office::PermissionPtr Permission;
    __declspec(property(get=GetSharedWorkspace))
    Office::SharedWorkspacePtr SharedWorkspace;
    __declspec(property(get=GetSync))
    Office::SyncPtr Sync;
    __declspec(property(get=GetSheets))
    SheetsPtr Sheets;
    __declspec(property(get=GetXmlNamespaces))
    XmlNamespacesPtr XmlNamespaces;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetHasPassword))
    VARIANT_BOOL HasPassword[];
    __declspec(property(get=GetPath))
    _bstr_t Path[];
    __declspec(property(get=GetXmlMaps))
    XmlMapsPtr XmlMaps;
    __declspec(property(get=GetSmartDocument))
    Office::SmartDocumentPtr SmartDocument;
    __declspec(property(get=GetDocumentLibraryVersions))
    Office::DocumentLibraryVersionsPtr DocumentLibraryVersions;
    __declspec(property(get=GetProtectWindows))
    VARIANT_BOOL ProtectWindows;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly[];
    __declspec(property(get=Get_ReadOnlyRecommended))
    VARIANT_BOOL _ReadOnlyRecommended[];
    __declspec(property(get=GetSaved,put=PutSaved))
    VARIANT_BOOL Saved[];
    __declspec(property(get=GetWriteReserved))
    VARIANT_BOOL WriteReserved[];
    __declspec(property(get=GetWriteReservedBy))
    _bstr_t WriteReservedBy[];
    __declspec(property(get=GetStyles))
    StylesPtr Styles;
    __declspec(property(get=GetWorksheets))
    SheetsPtr Worksheets;
    __declspec(property(get=GetColors,put=PutColors))
    _variant_t Colors[][];
    __declspec(property(get=GetCreateBackup))
    VARIANT_BOOL CreateBackup[];
    __declspec(property(get=GetFileFormat))
    enum XlFileFormat FileFormat[];
    __declspec(property(get=GetFullName))
    _bstr_t FullName[];
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetInactiveListBorderVisible,put=PutInactiveListBorderVisible))
    VARIANT_BOOL InactiveListBorderVisible;
    __declspec(property(get=GetDisplayInkComments,put=PutDisplayInkComments))
    VARIANT_BOOL DisplayInkComments;
    __declspec(property(get=GetCharts))
    SheetsPtr Charts;
    __declspec(property(get=GetWritePassword,put=PutWritePassword))
    _bstr_t WritePassword;
    __declspec(property(get=GetFullNameURLEncoded))
    _bstr_t FullNameURLEncoded[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRoutingSlip))
    RoutingSlipPtr RoutingSlip;
    __declspec(property(get=GetHasRoutingSlip,put=PutHasRoutingSlip))
    VARIANT_BOOL HasRoutingSlip[];
    __declspec(property(get=GetRouted))
    VARIANT_BOOL Routed[];
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject[];
    __declspec(property(get=GetDialogSheets))
    SheetsPtr DialogSheets;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author[];
    __declspec(property(get=GetComments,put=PutComments))
    _bstr_t Comments[];
    __declspec(property(get=GetMultiUserEditing))
    VARIANT_BOOL MultiUserEditing[];
    __declspec(property(get=GetShowConflictHistory,put=PutShowConflictHistory))
    VARIANT_BOOL ShowConflictHistory[];
    __declspec(property(get=GetRevisionNumber))
    long RevisionNumber[];
    __declspec(property(get=GetUserStatus))
    _variant_t UserStatus[];
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetConflictResolution,put=PutConflictResolution))
    enum XlSaveConflictResolution ConflictResolution;
    __declspec(property(get=GetBuiltinDocumentProperties))
    IDispatchPtr BuiltinDocumentProperties;
    __declspec(property(get=GetCustomDocumentProperties))
    IDispatchPtr CustomDocumentProperties;
    __declspec(property(get=GetOnSave,put=PutOnSave))
    _bstr_t OnSave[];
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetHasMailer,put=PutHasMailer))
    VARIANT_BOOL HasMailer[];
    __declspec(property(get=GetMailer))
    MailerPtr Mailer;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords[];
    __declspec(property(get=GetExcel4MacroSheets))
    SheetsPtr Excel4MacroSheets;
    __declspec(property(get=GetExcel4IntlMacroSheets))
    SheetsPtr Excel4IntlMacroSheets;
    __declspec(property(get=GetModules))
    SheetsPtr Modules;
    __declspec(property(get=GetIsInplace))
    VARIANT_BOOL IsInplace;
    __declspec(property(get=GetProtectStructure))
    VARIANT_BOOL ProtectStructure;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAcceptLabelsInFormulas ( );
    void PutAcceptLabelsInFormulas (
        VARIANT_BOOL RHS );
    HRESULT Activate (
        long lcid = 0 );
    _ChartPtr GetActiveChart ( );
    IDispatchPtr GetActiveSheet ( );
    _bstr_t GetAuthor (
        long lcid = 0 );
    void PutAuthor (
        long lcid,
        _bstr_t RHS );
    long GetAutoUpdateFrequency ( );
    void PutAutoUpdateFrequency (
        long RHS );
    VARIANT_BOOL GetAutoUpdateSaveChanges ( );
    void PutAutoUpdateSaveChanges (
        VARIANT_BOOL RHS );
    long GetChangeHistoryDuration ( );
    void PutChangeHistoryDuration (
        long RHS );
    IDispatchPtr GetBuiltinDocumentProperties ( );
    HRESULT ChangeFileAccess (
        enum XlFileAccess Mode,
        const _variant_t & WritePassword = vtMissing,
        const _variant_t & Notify = vtMissing,
        long lcid = 0 );
    HRESULT ChangeLink (
        _bstr_t Name,
        _bstr_t NewName,
        enum XlLinkType Type,
        long lcid = 0 );
    SheetsPtr GetCharts ( );
    HRESULT Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing,
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    _variant_t GetColors (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    void PutColors (
        const _variant_t & Index,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    Office::_CommandBarsPtr GetCommandBars ( );
    _bstr_t GetComments (
        long lcid = 0 );
    void PutComments (
        long lcid,
        _bstr_t RHS );
    enum XlSaveConflictResolution GetConflictResolution ( );
    void PutConflictResolution (
        enum XlSaveConflictResolution RHS );
    IDispatchPtr GetContainer ( );
    VARIANT_BOOL GetCreateBackup (
        long lcid = 0 );
    IDispatchPtr GetCustomDocumentProperties ( );
    VARIANT_BOOL GetDate1904 (
        long lcid = 0 );
    void PutDate1904 (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT DeleteNumberFormat (
        _bstr_t NumberFormat,
        long lcid = 0 );
    SheetsPtr GetDialogSheets ( );
    enum XlDisplayDrawingObjects GetDisplayDrawingObjects (
        long lcid = 0 );
    void PutDisplayDrawingObjects (
        long lcid,
        enum XlDisplayDrawingObjects RHS );
    VARIANT_BOOL ExclusiveAccess (
        long lcid = 0 );
    enum XlFileFormat GetFileFormat (
        long lcid = 0 );
    HRESULT ForwardMailer (
        long lcid = 0 );
    _bstr_t GetFullName (
        long lcid = 0 );
    VARIANT_BOOL GetHasMailer (
        long lcid = 0 );
    void PutHasMailer (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasPassword (
        long lcid = 0 );
    VARIANT_BOOL GetHasRoutingSlip (
        long lcid = 0 );
    void PutHasRoutingSlip (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIsAddin ( );
    void PutIsAddin (
        VARIANT_BOOL RHS );
    _bstr_t GetKeywords (
        long lcid = 0 );
    void PutKeywords (
        long lcid,
        _bstr_t RHS );
    _variant_t LinkInfo (
        _bstr_t Name,
        enum XlLinkInfo LinkInfo,
        const _variant_t & Type = vtMissing,
        const _variant_t & EditionRef = vtMissing,
        long lcid = 0 );
    _variant_t LinkSources (
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    MailerPtr GetMailer ( );
    HRESULT MergeWorkbook (
        const _variant_t & Filename );
    SheetsPtr GetModules ( );
    VARIANT_BOOL GetMultiUserEditing (
        long lcid = 0 );
    _bstr_t GetName ( );
    NamesPtr GetNames ( );
    WindowPtr NewWindow (
        long lcid = 0 );
    _bstr_t GetOnSave (
        long lcid = 0 );
    void PutOnSave (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    HRESULT OpenLinks (
        _bstr_t Name,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    _bstr_t GetPath (
        long lcid = 0 );
    VARIANT_BOOL GetPersonalViewListSettings ( );
    void PutPersonalViewListSettings (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPersonalViewPrintSettings ( );
    void PutPersonalViewPrintSettings (
        VARIANT_BOOL RHS );
    PivotCachesPtr PivotCaches ( );
    HRESULT Post (
        const _variant_t & DestName = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetPrecisionAsDisplayed (
        long lcid = 0 );
    void PutPrecisionAsDisplayed (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & Structure = vtMissing,
        const _variant_t & Windows = vtMissing );
    HRESULT ProtectSharing (
        const _variant_t & Filename = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & SharingPassword = vtMissing );
    VARIANT_BOOL GetProtectStructure ( );
    VARIANT_BOOL GetProtectWindows ( );
    VARIANT_BOOL GetReadOnly (
        long lcid = 0 );
    VARIANT_BOOL Get_ReadOnlyRecommended (
        long lcid = 0 );
    HRESULT RefreshAll ( );
    HRESULT Reply (
        long lcid = 0 );
    HRESULT ReplyAll (
        long lcid = 0 );
    HRESULT RemoveUser (
        long Index );
    long GetRevisionNumber (
        long lcid = 0 );
    HRESULT Route (
        long lcid = 0 );
    VARIANT_BOOL GetRouted (
        long lcid = 0 );
    RoutingSlipPtr GetRoutingSlip ( );
    HRESULT RunAutoMacros (
        enum XlRunAutoMacro Which,
        long lcid = 0 );
    HRESULT Save (
        long lcid = 0 );
    HRESULT _SaveAs (
        const _variant_t & Filename,
        const _variant_t & FileFormat,
        const _variant_t & Password,
        const _variant_t & WriteResPassword,
        const _variant_t & ReadOnlyRecommended,
        const _variant_t & CreateBackup,
        enum XlSaveAsAccessMode AccessMode,
        const _variant_t & ConflictResolution = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT SaveCopyAs (
        const _variant_t & Filename = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetSaved (
        long lcid = 0 );
    void PutSaved (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSaveLinkValues (
        long lcid = 0 );
    void PutSaveLinkValues (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT SendMail (
        const _variant_t & Recipients,
        const _variant_t & Subject = vtMissing,
        const _variant_t & ReturnReceipt = vtMissing,
        long lcid = 0 );
    HRESULT SendMailer (
        const _variant_t & FileFormat,
        enum XlPriority Priority,
        long lcid = 0 );
    HRESULT SetLinkOnData (
        _bstr_t Name,
        const _variant_t & Procedure = vtMissing,
        long lcid = 0 );
    SheetsPtr GetSheets ( );
    VARIANT_BOOL GetShowConflictHistory (
        long lcid = 0 );
    void PutShowConflictHistory (
        long lcid,
        VARIANT_BOOL RHS );
    StylesPtr GetStyles ( );
    _bstr_t GetSubject (
        long lcid = 0 );
    void PutSubject (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetTitle (
        long lcid = 0 );
    void PutTitle (
        long lcid,
        _bstr_t RHS );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    HRESULT UnprotectSharing (
        const _variant_t & SharingPassword = vtMissing );
    HRESULT UpdateFromFile (
        long lcid = 0 );
    HRESULT UpdateLink (
        const _variant_t & Name = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetUpdateRemoteReferences (
        long lcid = 0 );
    void PutUpdateRemoteReferences (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUserControl ( );
    void PutUserControl (
        VARIANT_BOOL RHS );
    _variant_t GetUserStatus (
        long lcid = 0 );
    CustomViewsPtr GetCustomViews ( );
    WindowsPtr GetWindows ( );
    SheetsPtr GetWorksheets ( );
    VARIANT_BOOL GetWriteReserved (
        long lcid = 0 );
    _bstr_t GetWriteReservedBy (
        long lcid = 0 );
    SheetsPtr GetExcel4IntlMacroSheets ( );
    SheetsPtr GetExcel4MacroSheets ( );
    VARIANT_BOOL GetTemplateRemoveExtData ( );
    void PutTemplateRemoveExtData (
        VARIANT_BOOL RHS );
    HRESULT HighlightChangesOptions (
        const _variant_t & When = vtMissing,
        const _variant_t & Who = vtMissing,
        const _variant_t & Where = vtMissing );
    VARIANT_BOOL GetHighlightChangesOnScreen ( );
    void PutHighlightChangesOnScreen (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetKeepChangeHistory ( );
    void PutKeepChangeHistory (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetListChangesOnNewSheet ( );
    void PutListChangesOnNewSheet (
        VARIANT_BOOL RHS );
    HRESULT PurgeChangeHistoryNow (
        long Days,
        const _variant_t & SharingPassword = vtMissing );
    HRESULT AcceptAllChanges (
        const _variant_t & When = vtMissing,
        const _variant_t & Who = vtMissing,
        const _variant_t & Where = vtMissing );
    HRESULT RejectAllChanges (
        const _variant_t & When = vtMissing,
        const _variant_t & Who = vtMissing,
        const _variant_t & Where = vtMissing );
    HRESULT PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing,
        long lcid = 0 );
    HRESULT ResetColors ( );
    VBIDE::_VBProjectPtr GetVBProject ( );
    HRESULT FollowHyperlink (
        _bstr_t Address,
        const _variant_t & SubAddress = vtMissing,
        const _variant_t & NewWindow = vtMissing,
        const _variant_t & AddHistory = vtMissing,
        const _variant_t & ExtraInfo = vtMissing,
        const _variant_t & Method = vtMissing,
        const _variant_t & HeaderInfo = vtMissing );
    HRESULT AddToFavorites ( );
    VARIANT_BOOL GetIsInplace ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    HRESULT WebPagePreview ( );
    PublishObjectsPtr GetPublishObjects ( );
    WebOptionsPtr GetWebOptions ( );
    HRESULT ReloadAs (
        enum Office::MsoEncoding Encoding );
    Office::HTMLProjectPtr GetHTMLProject ( );
    VARIANT_BOOL GetEnvelopeVisible ( );
    void PutEnvelopeVisible (
        VARIANT_BOOL RHS );
    long GetCalculationVersion ( );
    HRESULT Dummy17 (
        long calcid );
    HRESULT sblt (
        _bstr_t s );
    VARIANT_BOOL GetVBASigned ( );
    VARIANT_BOOL GetShowPivotTableFieldList ( );
    void PutShowPivotTableFieldList (
        VARIANT_BOOL RHS );
    enum XlUpdateLinks GetUpdateLinks ( );
    void PutUpdateLinks (
        enum XlUpdateLinks RHS );
    HRESULT BreakLink (
        _bstr_t Name,
        enum XlLinkType Type );
    HRESULT Dummy16 ( );
    HRESULT SaveAs (
        const _variant_t & Filename,
        const _variant_t & FileFormat,
        const _variant_t & Password,
        const _variant_t & WriteResPassword,
        const _variant_t & ReadOnlyRecommended,
        const _variant_t & CreateBackup,
        enum XlSaveAsAccessMode AccessMode,
        const _variant_t & ConflictResolution = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableAutoRecover ( );
    void PutEnableAutoRecover (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRemovePersonalInformation ( );
    void PutRemovePersonalInformation (
        VARIANT_BOOL RHS );
    _bstr_t GetFullNameURLEncoded (
        long lcid = 0 );
    HRESULT CheckIn (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Comments = vtMissing,
        const _variant_t & MakePublic = vtMissing );
    VARIANT_BOOL CanCheckIn ( );
    HRESULT SendForReview (
        const _variant_t & Recipients = vtMissing,
        const _variant_t & Subject = vtMissing,
        const _variant_t & ShowMessage = vtMissing,
        const _variant_t & IncludeAttachment = vtMissing );
    HRESULT ReplyWithChanges (
        const _variant_t & ShowMessage = vtMissing );
    HRESULT EndReview ( );
    _bstr_t GetPassword ( );
    void PutPassword (
        _bstr_t RHS );
    _bstr_t GetWritePassword ( );
    void PutWritePassword (
        _bstr_t RHS );
    _bstr_t GetPasswordEncryptionProvider ( );
    _bstr_t GetPasswordEncryptionAlgorithm ( );
    long GetPasswordEncryptionKeyLength ( );
    HRESULT SetPasswordEncryptionOptions (
        const _variant_t & PasswordEncryptionProvider = vtMissing,
        const _variant_t & PasswordEncryptionAlgorithm = vtMissing,
        const _variant_t & PasswordEncryptionKeyLength = vtMissing,
        const _variant_t & PasswordEncryptionFileProperties = vtMissing );
    VARIANT_BOOL GetPasswordEncryptionFileProperties ( );
    VARIANT_BOOL GetReadOnlyRecommended ( );
    void PutReadOnlyRecommended (
        VARIANT_BOOL RHS );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & Structure = vtMissing,
        const _variant_t & Windows = vtMissing );
    SmartTagOptionsPtr GetSmartTagOptions ( );
    HRESULT RecheckSmartTags ( );
    Office::PermissionPtr GetPermission ( );
    Office::SharedWorkspacePtr GetSharedWorkspace ( );
    Office::SyncPtr GetSync ( );
    HRESULT SendFaxOverInternet (
        const _variant_t & Recipients = vtMissing,
        const _variant_t & Subject = vtMissing,
        const _variant_t & ShowMessage = vtMissing );
    XmlNamespacesPtr GetXmlNamespaces ( );
    XmlMapsPtr GetXmlMaps ( );
    enum XlXmlImportResult XmlImport (
        _bstr_t Url,
        struct XmlMap * * ImportMap,
        const _variant_t & Overwrite = vtMissing,
        const _variant_t & Destination = vtMissing );
    Office::SmartDocumentPtr GetSmartDocument ( );
    Office::DocumentLibraryVersionsPtr GetDocumentLibraryVersions ( );
    VARIANT_BOOL GetInactiveListBorderVisible ( );
    void PutInactiveListBorderVisible (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayInkComments ( );
    void PutDisplayInkComments (
        VARIANT_BOOL RHS );
    enum XlXmlImportResult XmlImportXml (
        _bstr_t Data,
        struct XmlMap * * ImportMap,
        const _variant_t & Overwrite = vtMissing,
        const _variant_t & Destination = vtMissing );
    HRESULT SaveAsXMLData (
        _bstr_t Filename,
        struct XmlMap * Map );
    HRESULT ToggleFormsDesign ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AcceptLabelsInFormulas (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AcceptLabelsInFormulas (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ActiveChart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Author (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_AutoUpdateFrequency (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoUpdateFrequency (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoUpdateSaveChanges (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoUpdateSaveChanges (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ChangeHistoryDuration (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ChangeHistoryDuration (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltinDocumentProperties (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChangeFileAccess (
        /*[in]*/ enum XlFileAccess Mode,
        /*[in]*/ VARIANT WritePassword = vtMissing,
        /*[in]*/ VARIANT Notify = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ChangeLink (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR NewName,
        /*[in]*/ enum XlLinkType Type,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Charts (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT SaveChanges = vtMissing,
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in]*/ VARIANT RouteWorkbook = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Colors (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Colors (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Comments (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ConflictResolution (
        /*[out,retval]*/ enum XlSaveConflictResolution * RHS ) = 0;
      virtual HRESULT __stdcall put_ConflictResolution (
        /*[in]*/ enum XlSaveConflictResolution RHS ) = 0;
      virtual HRESULT __stdcall get_Container (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_CreateBackup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_CustomDocumentProperties (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Date1904 (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Date1904 (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_DeleteNumberFormat (
        /*[in]*/ BSTR NumberFormat,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DialogSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlDisplayDrawingObjects * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlDisplayDrawingObjects RHS ) = 0;
      virtual HRESULT __stdcall raw_ExclusiveAccess (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_FileFormat (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlFileFormat * RHS ) = 0;
      virtual HRESULT __stdcall raw_ForwardMailer (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_HasMailer (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasMailer (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasPassword (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_HasRoutingSlip (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasRoutingSlip (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IsAddin (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IsAddin (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Keywords (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Keywords (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_LinkInfo (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum XlLinkInfo LinkInfo,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT EditionRef,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_LinkSources (
        /*[in]*/ VARIANT Type,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Mailer (
        /*[out,retval]*/ struct Mailer * * RHS ) = 0;
      virtual HRESULT __stdcall raw_MergeWorkbook (
        /*[in]*/ VARIANT Filename ) = 0;
      virtual HRESULT __stdcall get_Modules (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_MultiUserEditing (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnSave (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSave (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_OpenLinks (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT ReadOnly = vtMissing,
        /*[in]*/ VARIANT Type = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PersonalViewListSettings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PersonalViewListSettings (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PersonalViewPrintSettings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PersonalViewPrintSettings (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotCaches (
        /*[out,retval]*/ struct PivotCaches * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Post (
        /*[in]*/ VARIANT DestName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_PrecisionAsDisplayed (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrecisionAsDisplayed (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT Structure = vtMissing,
        /*[in]*/ VARIANT Windows = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ProtectSharing (
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT SharingPassword = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ProtectStructure (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectWindows (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get__ReadOnlyRecommended (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_RefreshAll ( ) = 0;
      virtual HRESULT __stdcall raw_Reply (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ReplyAll (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_RemoveUser (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_RevisionNumber (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Route (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Routed (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_RoutingSlip (
        /*[out,retval]*/ struct RoutingSlip * * RHS ) = 0;
      virtual HRESULT __stdcall raw_RunAutoMacros (
        /*[in]*/ enum XlRunAutoMacro Which,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__SaveAs (
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT FileFormat,
        /*[in]*/ VARIANT Password,
        /*[in]*/ VARIANT WriteResPassword,
        /*[in]*/ VARIANT ReadOnlyRecommended,
        /*[in]*/ VARIANT CreateBackup,
        /*[in]*/ enum XlSaveAsAccessMode AccessMode,
        /*[in]*/ VARIANT ConflictResolution = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SaveCopyAs (
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Saved (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Saved (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SaveLinkValues (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveLinkValues (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_SendMail (
        /*[in]*/ VARIANT Recipients,
        /*[in]*/ VARIANT Subject = vtMissing,
        /*[in]*/ VARIANT ReturnReceipt = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SendMailer (
        /*[in]*/ VARIANT FileFormat,
        /*[in]*/ enum XlPriority Priority,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SetLinkOnData (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Procedure = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Sheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowConflictHistory (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowConflictHistory (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Styles (
        /*[out,retval]*/ struct Styles * * RHS ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_UnprotectSharing (
        /*[in]*/ VARIANT SharingPassword = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_UpdateFromFile (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_UpdateLink (
        /*[in]*/ VARIANT Name = vtMissing,
        /*[in]*/ VARIANT Type = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_UpdateRemoteReferences (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UpdateRemoteReferences (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UserControl (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UserControl (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UserStatus (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CustomViews (
        /*[out,retval]*/ struct CustomViews * * RHS ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct Windows * * RHS ) = 0;
      virtual HRESULT __stdcall get_Worksheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_WriteReserved (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_WriteReservedBy (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4IntlMacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4MacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_TemplateRemoveExtData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TemplateRemoveExtData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_HighlightChangesOptions (
        /*[in]*/ VARIANT When = vtMissing,
        /*[in]*/ VARIANT Who = vtMissing,
        /*[in]*/ VARIANT Where = vtMissing ) = 0;
      virtual HRESULT __stdcall get_HighlightChangesOnScreen (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HighlightChangesOnScreen (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_KeepChangeHistory (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_KeepChangeHistory (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ListChangesOnNewSheet (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ListChangesOnNewSheet (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_PurgeChangeHistoryNow (
        /*[in]*/ long Days,
        /*[in]*/ VARIANT SharingPassword = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_AcceptAllChanges (
        /*[in]*/ VARIANT When = vtMissing,
        /*[in]*/ VARIANT Who = vtMissing,
        /*[in]*/ VARIANT Where = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_RejectAllChanges (
        /*[in]*/ VARIANT When = vtMissing,
        /*[in]*/ VARIANT Who = vtMissing,
        /*[in]*/ VARIANT Where = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_PivotTableWizard (
        /*[in]*/ VARIANT SourceType = vtMissing,
        /*[in]*/ VARIANT SourceData = vtMissing,
        /*[in]*/ VARIANT TableDestination = vtMissing,
        /*[in]*/ VARIANT TableName = vtMissing,
        /*[in]*/ VARIANT RowGrand = vtMissing,
        /*[in]*/ VARIANT ColumnGrand = vtMissing,
        /*[in]*/ VARIANT SaveData = vtMissing,
        /*[in]*/ VARIANT HasAutoFormat = vtMissing,
        /*[in]*/ VARIANT AutoPage = vtMissing,
        /*[in]*/ VARIANT Reserved = vtMissing,
        /*[in]*/ VARIANT BackgroundQuery = vtMissing,
        /*[in]*/ VARIANT OptimizeCache = vtMissing,
        /*[in]*/ VARIANT PageFieldOrder = vtMissing,
        /*[in]*/ VARIANT PageFieldWrapCount = vtMissing,
        /*[in]*/ VARIANT ReadData = vtMissing,
        /*[in]*/ VARIANT Connection = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ResetColors ( ) = 0;
      virtual HRESULT __stdcall get_VBProject (
        /*[out,retval]*/ struct VBIDE::_VBProject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_FollowHyperlink (
        /*[in]*/ BSTR Address,
        /*[in]*/ VARIANT SubAddress = vtMissing,
        /*[in]*/ VARIANT NewWindow = vtMissing,
        /*[in]*/ VARIANT AddHistory = vtMissing,
        /*[in]*/ VARIANT ExtraInfo = vtMissing,
        /*[in]*/ VARIANT Method = vtMissing,
        /*[in]*/ VARIANT HeaderInfo = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
      virtual HRESULT __stdcall get_IsInplace (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_WebPagePreview ( ) = 0;
      virtual HRESULT __stdcall get_PublishObjects (
        /*[out,retval]*/ struct PublishObjects * * RHS ) = 0;
      virtual HRESULT __stdcall get_WebOptions (
        /*[out,retval]*/ struct WebOptions * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ReloadAs (
        /*[in]*/ enum Office::MsoEncoding Encoding ) = 0;
      virtual HRESULT __stdcall get_HTMLProject (
        /*[out,retval]*/ struct Office::HTMLProject * * RHS ) = 0;
      virtual HRESULT __stdcall get_EnvelopeVisible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnvelopeVisible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CalculationVersion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy17 (
        /*[in]*/ long calcid ) = 0;
      virtual HRESULT __stdcall raw_sblt (
        /*[in]*/ BSTR s ) = 0;
      virtual HRESULT __stdcall get_VBASigned (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowPivotTableFieldList (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowPivotTableFieldList (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UpdateLinks (
        /*[out,retval]*/ enum XlUpdateLinks * RHS ) = 0;
      virtual HRESULT __stdcall put_UpdateLinks (
        /*[in]*/ enum XlUpdateLinks RHS ) = 0;
      virtual HRESULT __stdcall raw_BreakLink (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum XlLinkType Type ) = 0;
      virtual HRESULT __stdcall raw_Dummy16 ( ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT FileFormat,
        /*[in]*/ VARIANT Password,
        /*[in]*/ VARIANT WriteResPassword,
        /*[in]*/ VARIANT ReadOnlyRecommended,
        /*[in]*/ VARIANT CreateBackup,
        /*[in]*/ enum XlSaveAsAccessMode AccessMode,
        /*[in]*/ VARIANT ConflictResolution = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in]*/ VARIANT Local = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_EnableAutoRecover (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAutoRecover (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RemovePersonalInformation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RemovePersonalInformation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FullNameURLEncoded (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckIn (
        /*[in]*/ VARIANT SaveChanges = vtMissing,
        /*[in]*/ VARIANT Comments = vtMissing,
        /*[in]*/ VARIANT MakePublic = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_CanCheckIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendForReview (
        /*[in]*/ VARIANT Recipients = vtMissing,
        /*[in]*/ VARIANT Subject = vtMissing,
        /*[in]*/ VARIANT ShowMessage = vtMissing,
        /*[in]*/ VARIANT IncludeAttachment = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ReplyWithChanges (
        /*[in]*/ VARIANT ShowMessage = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_EndReview ( ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_WritePassword (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_WritePassword (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionProvider (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionAlgorithm (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionKeyLength (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_SetPasswordEncryptionOptions (
        /*[in]*/ VARIANT PasswordEncryptionProvider = vtMissing,
        /*[in]*/ VARIANT PasswordEncryptionAlgorithm = vtMissing,
        /*[in]*/ VARIANT PasswordEncryptionKeyLength = vtMissing,
        /*[in]*/ VARIANT PasswordEncryptionFileProperties = vtMissing ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionFileProperties (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadOnlyRecommended (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadOnlyRecommended (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT Structure = vtMissing,
        /*[in]*/ VARIANT Windows = vtMissing ) = 0;
      virtual HRESULT __stdcall get_SmartTagOptions (
        /*[out,retval]*/ struct SmartTagOptions * * RHS ) = 0;
      virtual HRESULT __stdcall raw_RecheckSmartTags ( ) = 0;
      virtual HRESULT __stdcall get_Permission (
        /*[out,retval]*/ struct Office::Permission * * RHS ) = 0;
      virtual HRESULT __stdcall get_SharedWorkspace (
        /*[out,retval]*/ struct Office::SharedWorkspace * * RHS ) = 0;
      virtual HRESULT __stdcall get_Sync (
        /*[out,retval]*/ struct Office::Sync * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendFaxOverInternet (
        /*[in]*/ VARIANT Recipients = vtMissing,
        /*[in]*/ VARIANT Subject = vtMissing,
        /*[in]*/ VARIANT ShowMessage = vtMissing ) = 0;
      virtual HRESULT __stdcall get_XmlNamespaces (
        /*[out,retval]*/ struct XmlNamespaces * * RHS ) = 0;
      virtual HRESULT __stdcall get_XmlMaps (
        /*[out,retval]*/ struct XmlMaps * * RHS ) = 0;
      virtual HRESULT __stdcall raw_XmlImport (
        /*[in]*/ BSTR Url,
        /*[out]*/ struct XmlMap * * ImportMap,
        /*[in]*/ VARIANT Overwrite,
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ enum XlXmlImportResult * RHS ) = 0;
      virtual HRESULT __stdcall get_SmartDocument (
        /*[out,retval]*/ struct Office::SmartDocument * * RHS ) = 0;
      virtual HRESULT __stdcall get_DocumentLibraryVersions (
        /*[out,retval]*/ struct Office::DocumentLibraryVersions * * RHS ) = 0;
      virtual HRESULT __stdcall get_InactiveListBorderVisible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InactiveListBorderVisible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayInkComments (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayInkComments (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_XmlImportXml (
        /*[in]*/ BSTR Data,
        /*[out]*/ struct XmlMap * * ImportMap,
        /*[in]*/ VARIANT Overwrite,
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ enum XlXmlImportResult * RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAsXMLData (
        /*[in]*/ BSTR Filename,
        /*[in]*/ struct XmlMap * Map ) = 0;
      virtual HRESULT __stdcall raw_ToggleFormsDesign ( ) = 0;
};

struct __declspec(uuid("0002086d-0001-0000-c000-000000000046"))
ICharts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _ChartPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy7 ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208cf-0001-0000-c000-000000000046"))
IChartObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetChart))
    _ChartPtr Chart;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetProtectChartObject,put=PutProtectChartObject))
    VARIANT_BOOL ProtectChartObject;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t Activate ( );
    _ChartPtr GetChart ( );
    VARIANT_BOOL GetProtectChartObject ( );
    void PutProtectChartObject (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Chart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectChartObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectChartObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00020820-0000-0000-c000-000000000046"))
Worksheet;
    // [ default ] interface _Worksheet
    // [ default, source ] dispinterface DocEvents

struct __declspec(uuid("00020846-0001-0000-c000-000000000046"))
IRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _variant_t _Default[][][];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetListHeaderRows))
    long ListHeaderRows;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value[][];
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetItem,put=PutItem))
    _variant_t Item[][][];
    __declspec(property(get=GetComment))
    CommentPtr Comment;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetSoundNote))
    SoundNotePtr SoundNote;
    __declspec(property(get=GetPhonetics))
    PhoneticsPtr Phonetics;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetListObject))
    ListObjectPtr ListObject;
    __declspec(property(get=GetXPath))
    XPathPtr XPath;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat;
    __declspec(property(get=GetFormulaLabel,put=PutFormulaLabel))
    enum XlFormulaLabel FormulaLabel;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetWorksheet))
    _WorksheetPtr Worksheet;
    __declspec(property(get=GetMergeArea))
    RangePtr MergeArea;
    __declspec(property(get=GetQueryTable))
    _QueryTablePtr QueryTable;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetEnd))
    RangePtr End[];
    __declspec(property(get=GetCurrentArray))
    RangePtr CurrentArray;
    __declspec(property(get=GetNext))
    RangePtr Next;
    __declspec(property(get=GetPrevious))
    RangePtr Previous;
    __declspec(property(get=GetPrefixCharacter))
    _variant_t PrefixCharacter;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetValidation))
    ValidationPtr Validation;
    __declspec(property(get=GetValue2,put=PutValue2))
    _variant_t Value2[];
    __declspec(property(get=GetPhonetic))
    PhoneticPtr Phonetic;
    __declspec(property(get=GetFormatConditions))
    FormatConditionsPtr FormatConditions;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddress))
    _bstr_t Address[][][][][][];
    __declspec(property(get=GetPivotCell))
    PivotCellPtr PivotCell;
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetErrors))
    ErrorsPtr Errors;
    __declspec(property(get=GetColumn))
    long Column;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetColumnWidth,put=PutColumnWidth))
    _variant_t ColumnWidth;
    __declspec(property(get=GetCurrentRegion))
    RangePtr CurrentRegion;
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetAllowEdit))
    VARIANT_BOOL AllowEdit;
    __declspec(property(get=GetEntireColumn))
    RangePtr EntireColumn;
    __declspec(property(get=GetEntireRow))
    RangePtr EntireRow;
    __declspec(property(get=GetLocationInTable))
    enum XlLocationInTable LocationInTable;
    __declspec(property(get=GetDependents))
    RangePtr Dependents;
    __declspec(property(get=GetPrecedents))
    RangePtr Precedents;
    __declspec(property(get=GetDirectDependents))
    RangePtr DirectDependents;
    __declspec(property(get=GetDirectPrecedents))
    RangePtr DirectPrecedents;
    __declspec(property(get=GetOffset))
    RangePtr Offset[][];
    __declspec(property(get=GetPageBreak,put=PutPageBreak))
    long PageBreak;
    __declspec(property(get=GetResize))
    RangePtr Resize[][];
    __declspec(property(get=GetRow))
    long Row;
    __declspec(property(get=GetName,put=PutName))
    _variant_t Name;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetStyle,put=PutStyle))
    _variant_t Style;
    __declspec(property(get=GetFormula,put=PutFormula))
    _variant_t Formula[];
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _variant_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _variant_t FormulaR1C1[];
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _variant_t FormulaR1C1Local;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetHasArray))
    _variant_t HasArray;
    __declspec(property(get=GetHasFormula))
    _variant_t HasFormula;
    __declspec(property(get=GetHidden,put=PutHidden))
    _variant_t Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetHeight))
    _variant_t Height;
    __declspec(property(get=GetAreas))
    AreasPtr Areas;
    __declspec(property(get=GetOutlineLevel,put=PutOutlineLevel))
    _variant_t OutlineLevel;
    __declspec(property(get=GetTop))
    _variant_t Top;
    __declspec(property(get=GetLeft))
    _variant_t Left;
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    _variant_t RowHeight;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetSummary))
    _variant_t Summary;
    __declspec(property(get=GetUseStandardHeight,put=PutUseStandardHeight))
    _variant_t UseStandardHeight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetUseStandardWidth,put=PutUseStandardWidth))
    _variant_t UseStandardWidth;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText))
    _variant_t Text;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    _variant_t ShowDetail;
    __declspec(property(get=GetFormulaArray,put=PutFormulaArray))
    _variant_t FormulaArray;
    __declspec(property(get=GetAddressLocal))
    _bstr_t AddressLocal[][][][][];
    __declspec(property(get=GetWidth))
    _variant_t Width;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;
    __declspec(property(get=GetFont))
    FontPtr Font;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & RHS );
    _bstr_t GetAddress (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing,
        long lcid = 0 );
    _bstr_t GetAddressLocal (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing );
    _variant_t AdvancedFilter (
        enum XlFilterAction Action,
        const _variant_t & CriteriaRange = vtMissing,
        const _variant_t & CopyToRange = vtMissing,
        const _variant_t & Unique = vtMissing );
    _variant_t ApplyNames (
        const _variant_t & Names,
        const _variant_t & IgnoreRelativeAbsolute,
        const _variant_t & UseRowColumnNames,
        const _variant_t & OmitColumn,
        const _variant_t & OmitRow,
        enum XlApplyNamesOrder Order,
        const _variant_t & AppendLast = vtMissing );
    _variant_t ApplyOutlineStyles ( );
    AreasPtr GetAreas ( );
    _bstr_t AutoComplete (
        _bstr_t String );
    _variant_t AutoFill (
        struct Range * Destination,
        enum XlAutoFillType Type );
    _variant_t AutoFilter (
        const _variant_t & Field,
        const _variant_t & Criteria1,
        enum XlAutoFilterOperator Operator,
        const _variant_t & Criteria2 = vtMissing,
        const _variant_t & VisibleDropDown = vtMissing );
    _variant_t AutoFit ( );
    _variant_t AutoFormat (
        enum XlRangeAutoFormat Format,
        const _variant_t & Number = vtMissing,
        const _variant_t & Font = vtMissing,
        const _variant_t & Alignment = vtMissing,
        const _variant_t & Border = vtMissing,
        const _variant_t & Pattern = vtMissing,
        const _variant_t & Width = vtMissing );
    _variant_t AutoOutline ( );
    _variant_t BorderAround (
        const _variant_t & LineStyle,
        enum XlBorderWeight Weight,
        enum XlColorIndex ColorIndex,
        const _variant_t & Color = vtMissing );
    BordersPtr GetBorders ( );
    _variant_t Calculate ( );
    RangePtr GetCells ( );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t ClearFormats ( );
    _variant_t ClearNotes ( );
    _variant_t ClearOutline ( );
    long GetColumn ( );
    RangePtr ColumnDifferences (
        const _variant_t & Comparison );
    RangePtr GetColumns ( );
    _variant_t GetColumnWidth ( );
    void PutColumnWidth (
        const _variant_t & RHS );
    _variant_t Consolidate (
        const _variant_t & Sources = vtMissing,
        const _variant_t & Function = vtMissing,
        const _variant_t & TopRow = vtMissing,
        const _variant_t & LeftColumn = vtMissing,
        const _variant_t & CreateLinks = vtMissing );
    _variant_t Copy (
        const _variant_t & Destination = vtMissing );
    long CopyFromRecordset (
        IUnknown * Data,
        const _variant_t & MaxRows = vtMissing,
        const _variant_t & MaxColumns = vtMissing );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    long GetCount ( );
    _variant_t CreateNames (
        const _variant_t & Top = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Bottom = vtMissing,
        const _variant_t & Right = vtMissing );
    _variant_t CreatePublisher (
        const _variant_t & Edition,
        enum XlPictureAppearance Appearance,
        const _variant_t & ContainsPICT = vtMissing,
        const _variant_t & ContainsBIFF = vtMissing,
        const _variant_t & ContainsRTF = vtMissing,
        const _variant_t & ContainsVALU = vtMissing );
    RangePtr GetCurrentArray ( );
    RangePtr GetCurrentRegion ( );
    _variant_t Cut (
        const _variant_t & Destination = vtMissing );
    _variant_t DataSeries (
        const _variant_t & Rowcol,
        enum XlDataSeriesType Type,
        enum XlDataSeriesDate Date,
        const _variant_t & Step = vtMissing,
        const _variant_t & Stop = vtMissing,
        const _variant_t & Trend = vtMissing );
    _variant_t Get_Default (
        const _variant_t & RowIndex = vtMissing,
        const _variant_t & ColumnIndex = vtMissing,
        long lcid = 0 );
    void Put_Default (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    _variant_t Delete (
        const _variant_t & Shift = vtMissing );
    RangePtr GetDependents ( );
    _variant_t ExcelDialogBox ( );
    RangePtr GetDirectDependents ( );
    RangePtr GetDirectPrecedents ( );
    _variant_t EditionOptions (
        enum XlEditionType Type,
        enum XlEditionOptionsOption Option,
        const _variant_t & Name,
        const _variant_t & Reference,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance ChartSize,
        const _variant_t & Format = vtMissing );
    RangePtr GetEnd (
        enum XlDirection Direction );
    RangePtr GetEntireColumn ( );
    RangePtr GetEntireRow ( );
    _variant_t FillDown ( );
    _variant_t FillLeft ( );
    _variant_t FillRight ( );
    _variant_t FillUp ( );
    RangePtr Find (
        const _variant_t & What,
        const _variant_t & After,
        const _variant_t & LookIn,
        const _variant_t & LookAt,
        const _variant_t & SearchOrder,
        enum XlSearchDirection SearchDirection,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing,
        const _variant_t & SearchFormat = vtMissing );
    RangePtr FindNext (
        const _variant_t & After = vtMissing );
    RangePtr FindPrevious (
        const _variant_t & After = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetFormula (
        long lcid = 0 );
    void PutFormula (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetFormulaArray ( );
    void PutFormulaArray (
        const _variant_t & RHS );
    enum XlFormulaLabel GetFormulaLabel ( );
    void PutFormulaLabel (
        enum XlFormulaLabel RHS );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & RHS );
    _variant_t GetFormulaLocal ( );
    void PutFormulaLocal (
        const _variant_t & RHS );
    _variant_t GetFormulaR1C1 (
        long lcid = 0 );
    void PutFormulaR1C1 (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        const _variant_t & RHS );
    _variant_t FunctionWizard ( );
    VARIANT_BOOL GoalSeek (
        const _variant_t & Goal,
        struct Range * ChangingCell );
    _variant_t Group (
        const _variant_t & Start = vtMissing,
        const _variant_t & End = vtMissing,
        const _variant_t & By = vtMissing,
        const _variant_t & Periods = vtMissing );
    _variant_t GetHasArray ( );
    _variant_t GetHasFormula ( );
    _variant_t GetHeight ( );
    _variant_t GetHidden ( );
    void PutHidden (
        const _variant_t & RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & RHS );
    HRESULT InsertIndent (
        long InsertAmount );
    _variant_t Insert (
        const _variant_t & Shift = vtMissing,
        const _variant_t & CopyOrigin = vtMissing );
    InteriorPtr GetInterior ( );
    _variant_t GetItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing,
        long lcid = 0 );
    void PutItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    _variant_t Justify ( );
    _variant_t GetLeft ( );
    long GetListHeaderRows ( );
    _variant_t ListNames ( );
    enum XlLocationInTable GetLocationInTable ( );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & RHS );
    HRESULT Merge (
        const _variant_t & Across = vtMissing );
    HRESULT UnMerge ( );
    RangePtr GetMergeArea ( );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & RHS );
    _variant_t GetName ( );
    void PutName (
        const _variant_t & RHS );
    _variant_t NavigateArrow (
        const _variant_t & TowardPrecedent = vtMissing,
        const _variant_t & ArrowNumber = vtMissing,
        const _variant_t & LinkNumber = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    RangePtr GetNext ( );
    _bstr_t NoteText (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t GetNumberFormat ( );
    void PutNumberFormat (
        const _variant_t & RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    RangePtr GetOffset (
        const _variant_t & RowOffset = vtMissing,
        const _variant_t & ColumnOffset = vtMissing );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetOutlineLevel ( );
    void PutOutlineLevel (
        const _variant_t & RHS );
    long GetPageBreak ( );
    void PutPageBreak (
        long RHS );
    _variant_t Parse (
        const _variant_t & ParseLine = vtMissing,
        const _variant_t & Destination = vtMissing );
    _variant_t _PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotTablePtr GetPivotTable ( );
    RangePtr GetPrecedents ( );
    _variant_t GetPrefixCharacter ( );
    RangePtr GetPrevious ( );
    _variant_t _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    _QueryTablePtr GetQueryTable ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    _variant_t RemoveSubtotal ( );
    VARIANT_BOOL Replace (
        const _variant_t & What,
        const _variant_t & Replacement,
        const _variant_t & LookAt = vtMissing,
        const _variant_t & SearchOrder = vtMissing,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing,
        const _variant_t & SearchFormat = vtMissing,
        const _variant_t & ReplaceFormat = vtMissing );
    RangePtr GetResize (
        const _variant_t & RowSize = vtMissing,
        const _variant_t & ColumnSize = vtMissing );
    long GetRow ( );
    RangePtr RowDifferences (
        const _variant_t & Comparison );
    _variant_t GetRowHeight ( );
    void PutRowHeight (
        const _variant_t & RHS );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t Select ( );
    _variant_t Show ( );
    _variant_t ShowDependents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShowDetail ( );
    void PutShowDetail (
        const _variant_t & RHS );
    _variant_t ShowErrors ( );
    _variant_t ShowPrecedents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & RHS );
    _variant_t Sort (
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Key2,
        const _variant_t & Type,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortMethod SortMethod,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3 );
    _variant_t SortSpecial (
        enum XlSortMethod SortMethod,
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Type,
        const _variant_t & Key2,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3 );
    SoundNotePtr GetSoundNote ( );
    RangePtr SpecialCells (
        enum XlCellType Type,
        const _variant_t & Value = vtMissing );
    _variant_t GetStyle ( );
    void PutStyle (
        const _variant_t & RHS );
    _variant_t SubscribeTo (
        _bstr_t Edition,
        enum XlSubscribeToFormat Format );
    _variant_t Subtotal (
        long GroupBy,
        enum XlConsolidationFunction Function,
        const _variant_t & TotalList,
        const _variant_t & Replace,
        const _variant_t & PageBreaks,
        enum XlSummaryRow SummaryBelowData );
    _variant_t GetSummary ( );
    _variant_t Table (
        const _variant_t & RowInput = vtMissing,
        const _variant_t & ColumnInput = vtMissing );
    _variant_t GetText ( );
    _variant_t TextToColumns (
        const _variant_t & Destination,
        enum XlTextParsingType DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing,
        const _variant_t & TrailingMinusNumbers = vtMissing );
    _variant_t GetTop ( );
    _variant_t Ungroup ( );
    _variant_t GetUseStandardHeight ( );
    void PutUseStandardHeight (
        const _variant_t & RHS );
    _variant_t GetUseStandardWidth ( );
    void PutUseStandardWidth (
        const _variant_t & RHS );
    ValidationPtr GetValidation ( );
    _variant_t GetValue (
        const _variant_t & RangeValueDataType = vtMissing,
        long lcid = 0 );
    void PutValue (
        const _variant_t & RangeValueDataType,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    _variant_t GetValue2 (
        long lcid = 0 );
    void PutValue2 (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t GetWidth ( );
    _WorksheetPtr GetWorksheet ( );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & RHS );
    CommentPtr AddComment (
        const _variant_t & Text = vtMissing );
    CommentPtr GetComment ( );
    HRESULT ClearComments ( );
    PhoneticPtr GetPhonetic ( );
    FormatConditionsPtr GetFormatConditions ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    HyperlinksPtr GetHyperlinks ( );
    PhoneticsPtr GetPhonetics ( );
    HRESULT SetPhonetic ( );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t RHS );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    PivotCellPtr GetPivotCell ( );
    HRESULT Dirty ( );
    ErrorsPtr GetErrors ( );
    SmartTagsPtr GetSmartTags ( );
    HRESULT Speak (
        const _variant_t & SpeakDirection = vtMissing,
        const _variant_t & SpeakFormulas = vtMissing );
    _variant_t PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    VARIANT_BOOL GetAllowEdit ( );
    ListObjectPtr GetListObject ( );
    XPathPtr GetXPath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[in]*/ VARIANT RowAbsolute,
        /*[in]*/ VARIANT ColumnAbsolute,
        /*[in]*/ enum XlReferenceStyle ReferenceStyle,
        /*[in]*/ VARIANT External,
        /*[in]*/ VARIANT RelativeTo,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AddressLocal (
        /*[in]*/ VARIANT RowAbsolute,
        /*[in]*/ VARIANT ColumnAbsolute,
        /*[in]*/ enum XlReferenceStyle ReferenceStyle,
        /*[in]*/ VARIANT External,
        /*[in]*/ VARIANT RelativeTo,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_AdvancedFilter (
        /*[in]*/ enum XlFilterAction Action,
        /*[in]*/ VARIANT CriteriaRange,
        /*[in]*/ VARIANT CopyToRange,
        /*[in]*/ VARIANT Unique,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyNames (
        /*[in]*/ VARIANT Names,
        /*[in]*/ VARIANT IgnoreRelativeAbsolute,
        /*[in]*/ VARIANT UseRowColumnNames,
        /*[in]*/ VARIANT OmitColumn,
        /*[in]*/ VARIANT OmitRow,
        /*[in]*/ enum XlApplyNamesOrder Order,
        /*[in]*/ VARIANT AppendLast,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyOutlineStyles (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Areas (
        /*[out,retval]*/ struct Areas * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoComplete (
        /*[in]*/ BSTR String,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFill (
        /*[in]*/ struct Range * Destination,
        /*[in]*/ enum XlAutoFillType Type,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFilter (
        /*[in]*/ VARIANT Field,
        /*[in]*/ VARIANT Criteria1,
        /*[in]*/ enum XlAutoFilterOperator Operator,
        /*[in]*/ VARIANT Criteria2,
        /*[in]*/ VARIANT VisibleDropDown,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFit (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFormat (
        /*[in]*/ enum XlRangeAutoFormat Format,
        /*[in]*/ VARIANT Number,
        /*[in]*/ VARIANT Font,
        /*[in]*/ VARIANT Alignment,
        /*[in]*/ VARIANT Border,
        /*[in]*/ VARIANT Pattern,
        /*[in]*/ VARIANT Width,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoOutline (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_BorderAround (
        /*[in]*/ VARIANT LineStyle,
        /*[in]*/ enum XlBorderWeight Weight,
        /*[in]*/ enum XlColorIndex ColorIndex,
        /*[in]*/ VARIANT Color,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearContents (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearNotes (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearOutline (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_ColumnDifferences (
        /*[in]*/ VARIANT Comparison,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColumnWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Consolidate (
        /*[in]*/ VARIANT Sources,
        /*[in]*/ VARIANT Function,
        /*[in]*/ VARIANT TopRow,
        /*[in]*/ VARIANT LeftColumn,
        /*[in]*/ VARIANT CreateLinks,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyFromRecordset (
        /*[in]*/ IUnknown * Data,
        /*[in]*/ VARIANT MaxRows,
        /*[in]*/ VARIANT MaxColumns,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreateNames (
        /*[in]*/ VARIANT Top,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Bottom,
        /*[in]*/ VARIANT Right,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreatePublisher (
        /*[in]*/ VARIANT Edition,
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ VARIANT ContainsPICT,
        /*[in]*/ VARIANT ContainsBIFF,
        /*[in]*/ VARIANT ContainsRTF,
        /*[in]*/ VARIANT ContainsVALU,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentArray (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentRegion (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_DataSeries (
        /*[in]*/ VARIANT Rowcol,
        /*[in]*/ enum XlDataSeriesType Type,
        /*[in]*/ enum XlDataSeriesDate Date,
        /*[in]*/ VARIANT Step,
        /*[in]*/ VARIANT Stop,
        /*[in]*/ VARIANT Trend,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT RowIndex,
        /*[in]*/ VARIANT ColumnIndex,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ VARIANT RowIndex,
        /*[in]*/ VARIANT ColumnIndex = vtMissing,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ VARIANT Shift,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Dependents (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ExcelDialogBox (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DirectDependents (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_DirectPrecedents (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_EditionOptions (
        /*[in]*/ enum XlEditionType Type,
        /*[in]*/ enum XlEditionOptionsOption Option,
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Reference,
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlPictureAppearance ChartSize,
        /*[in]*/ VARIANT Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[in]*/ enum XlDirection Direction,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_EntireColumn (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_EntireRow (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_FillDown (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_FillLeft (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_FillRight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_FillUp (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ VARIANT What,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT LookIn,
        /*[in]*/ VARIANT LookAt,
        /*[in]*/ VARIANT SearchOrder,
        /*[in]*/ enum XlSearchDirection SearchDirection,
        /*[in]*/ VARIANT MatchCase,
        /*[in]*/ VARIANT MatchByte,
        /*[in]*/ VARIANT SearchFormat,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_FindNext (
        /*[in]*/ VARIANT After,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_FindPrevious (
        /*[in]*/ VARIANT After,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaArray (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaArray (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaLabel (
        /*[out,retval]*/ enum XlFormulaLabel * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaLabel (
        /*[in]*/ enum XlFormulaLabel RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaHidden (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaHidden (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1 (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1 (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1Local (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1Local (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_FunctionWizard (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_GoalSeek (
        /*[in]*/ VARIANT Goal,
        /*[in]*/ struct Range * ChangingCell,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT End,
        /*[in]*/ VARIANT By,
        /*[in]*/ VARIANT Periods,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_HasArray (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_HasFormula (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_IndentLevel (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_IndentLevel (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_InsertIndent (
        /*[in]*/ long InsertAmount ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ VARIANT Shift,
        /*[in]*/ VARIANT CopyOrigin,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT RowIndex,
        /*[in]*/ VARIANT ColumnIndex,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ VARIANT RowIndex,
        /*[in]*/ VARIANT ColumnIndex,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Justify (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ListHeaderRows (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListNames (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LocationInTable (
        /*[out,retval]*/ enum XlLocationInTable * RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ VARIANT Across = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_UnMerge ( ) = 0;
      virtual HRESULT __stdcall get_MergeArea (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_MergeCells (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_MergeCells (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_NavigateArrow (
        /*[in]*/ VARIANT TowardPrecedent,
        /*[in]*/ VARIANT ArrowNumber,
        /*[in]*/ VARIANT LinkNumber,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_NoteText (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[in]*/ VARIANT RowOffset,
        /*[in]*/ VARIANT ColumnOffset,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_OutlineLevel (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_OutlineLevel (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PageBreak (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PageBreak (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Parse (
        /*[in]*/ VARIANT ParseLine,
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__PasteSpecial (
        /*[in]*/ enum XlPasteType Paste,
        /*[in]*/ enum XlPasteSpecialOperation Operation,
        /*[in]*/ VARIANT SkipBlanks,
        /*[in]*/ VARIANT Transpose,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotItem (
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotTable (
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Precedents (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_PrefixCharacter (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From,
        /*[in]*/ VARIANT To,
        /*[in]*/ VARIANT Copies,
        /*[in]*/ VARIANT Preview,
        /*[in]*/ VARIANT ActivePrinter,
        /*[in]*/ VARIANT PrintToFile,
        /*[in]*/ VARIANT Collate,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_QueryTable (
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Cell1,
        /*[in]*/ VARIANT Cell2,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveSubtotal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ VARIANT What,
        /*[in]*/ VARIANT Replacement,
        /*[in]*/ VARIANT LookAt,
        /*[in]*/ VARIANT SearchOrder,
        /*[in]*/ VARIANT MatchCase,
        /*[in]*/ VARIANT MatchByte,
        /*[in]*/ VARIANT SearchFormat,
        /*[in]*/ VARIANT ReplaceFormat,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Resize (
        /*[in]*/ VARIANT RowSize,
        /*[in]*/ VARIANT ColumnSize,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Row (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_RowDifferences (
        /*[in]*/ VARIANT Comparison,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_RowHeight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RowHeight (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowDependents (
        /*[in]*/ VARIANT Remove,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowDetail (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowDetail (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowErrors (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowPrecedents (
        /*[in]*/ VARIANT Remove,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ShrinkToFit (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ShrinkToFit (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Sort (
        /*[in]*/ VARIANT Key1,
        /*[in]*/ enum XlSortOrder Order1,
        /*[in]*/ VARIANT Key2,
        /*[in]*/ VARIANT Type,
        /*[in]*/ enum XlSortOrder Order2,
        /*[in]*/ VARIANT Key3,
        /*[in]*/ enum XlSortOrder Order3,
        /*[in]*/ enum XlYesNoGuess Header,
        /*[in]*/ VARIANT OrderCustom,
        /*[in]*/ VARIANT MatchCase,
        /*[in]*/ enum XlSortOrientation Orientation,
        /*[in]*/ enum XlSortMethod SortMethod,
        /*[in]*/ enum XlSortDataOption DataOption1,
        /*[in]*/ enum XlSortDataOption DataOption2,
        /*[in]*/ enum XlSortDataOption DataOption3,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SortSpecial (
        /*[in]*/ enum XlSortMethod SortMethod,
        /*[in]*/ VARIANT Key1,
        /*[in]*/ enum XlSortOrder Order1,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Key2,
        /*[in]*/ enum XlSortOrder Order2,
        /*[in]*/ VARIANT Key3,
        /*[in]*/ enum XlSortOrder Order3,
        /*[in]*/ enum XlYesNoGuess Header,
        /*[in]*/ VARIANT OrderCustom,
        /*[in]*/ VARIANT MatchCase,
        /*[in]*/ enum XlSortOrientation Orientation,
        /*[in]*/ enum XlSortDataOption DataOption1,
        /*[in]*/ enum XlSortDataOption DataOption2,
        /*[in]*/ enum XlSortDataOption DataOption3,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SoundNote (
        /*[out,retval]*/ struct SoundNote * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SpecialCells (
        /*[in]*/ enum XlCellType Type,
        /*[in]*/ VARIANT Value,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_SubscribeTo (
        /*[in]*/ BSTR Edition,
        /*[in]*/ enum XlSubscribeToFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Subtotal (
        /*[in]*/ long GroupBy,
        /*[in]*/ enum XlConsolidationFunction Function,
        /*[in]*/ VARIANT TotalList,
        /*[in]*/ VARIANT Replace,
        /*[in]*/ VARIANT PageBreaks,
        /*[in]*/ enum XlSummaryRow SummaryBelowData,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Summary (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Table (
        /*[in]*/ VARIANT RowInput,
        /*[in]*/ VARIANT ColumnInput,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_TextToColumns (
        /*[in]*/ VARIANT Destination,
        /*[in]*/ enum XlTextParsingType DataType,
        /*[in]*/ enum XlTextQualifier TextQualifier,
        /*[in]*/ VARIANT ConsecutiveDelimiter,
        /*[in]*/ VARIANT Tab,
        /*[in]*/ VARIANT Semicolon,
        /*[in]*/ VARIANT Comma,
        /*[in]*/ VARIANT Space,
        /*[in]*/ VARIANT Other,
        /*[in]*/ VARIANT OtherChar,
        /*[in]*/ VARIANT FieldInfo,
        /*[in]*/ VARIANT DecimalSeparator,
        /*[in]*/ VARIANT ThousandsSeparator,
        /*[in]*/ VARIANT TrailingMinusNumbers,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_UseStandardHeight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_UseStandardHeight (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_UseStandardWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_UseStandardWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Validation (
        /*[out,retval]*/ struct Validation * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in]*/ VARIANT RangeValueDataType,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RangeValueDataType,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value2 (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value2 (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Worksheet (
        /*[out,retval]*/ struct _Worksheet * * RHS ) = 0;
      virtual HRESULT __stdcall get_WrapText (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_WrapText (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_AddComment (
        /*[in]*/ VARIANT Text,
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearComments ( ) = 0;
      virtual HRESULT __stdcall get_Phonetic (
        /*[out,retval]*/ struct Phonetic * * RHS ) = 0;
      virtual HRESULT __stdcall get_FormatConditions (
        /*[out,retval]*/ struct FormatConditions * * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Phonetics (
        /*[out,retval]*/ struct Phonetics * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SetPhonetic ( ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ID (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From,
        /*[in]*/ VARIANT To,
        /*[in]*/ VARIANT Copies,
        /*[in]*/ VARIANT Preview,
        /*[in]*/ VARIANT ActivePrinter,
        /*[in]*/ VARIANT PrintToFile,
        /*[in]*/ VARIANT Collate,
        /*[in]*/ VARIANT PrToFileName,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotCell (
        /*[out,retval]*/ struct PivotCell * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dirty ( ) = 0;
      virtual HRESULT __stdcall get_Errors (
        /*[out,retval]*/ struct Errors * * RHS ) = 0;
      virtual HRESULT __stdcall get_SmartTags (
        /*[out,retval]*/ struct SmartTags * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Speak (
        /*[in]*/ VARIANT SpeakDirection = vtMissing,
        /*[in]*/ VARIANT SpeakFormulas = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ enum XlPasteType Paste,
        /*[in]*/ enum XlPasteSpecialOperation Operation,
        /*[in]*/ VARIANT SkipBlanks,
        /*[in]*/ VARIANT Transpose,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowEdit (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ListObject (
        /*[out,retval]*/ struct ListObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_XPath (
        /*[out,retval]*/ struct XPath * * RHS ) = 0;
};

struct __declspec(uuid("00024402-0001-0000-c000-000000000046"))
IVPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak RHS );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct _Worksheet * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_DragOff (
        /*[in]*/ enum XlDirection Direction,
        /*[in]*/ long RegionIndex ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlPageBreak * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlPageBreak RHS ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ enum XlPageBreakExtent * RHS ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Location (
        /*[in]*/ struct Range * RHS ) = 0;
};

struct __declspec(uuid("00024401-0001-0000-c000-000000000046"))
IHPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak RHS );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct _Worksheet * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_DragOff (
        /*[in]*/ enum XlDirection Direction,
        /*[in]*/ long RegionIndex ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlPageBreak * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlPageBreak RHS ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ enum XlPageBreakExtent * RHS ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Location (
        /*[in]*/ struct Range * RHS ) = 0;
};

struct __declspec(uuid("00020812-0000-0000-c000-000000000046"))
Global;
    // [ default ] interface _Global

struct __declspec(uuid("00020819-0000-0000-c000-000000000046"))
Workbook;
    // [ default ] interface _Workbook
    // [ default, source ] dispinterface WorkbookEvents

struct __declspec(uuid("00024413-0001-0000-c000-000000000046"))
IAppEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT NewWorkbook (
        struct _Workbook * Wb );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT WorkbookOpen (
        struct _Workbook * Wb );
    HRESULT WorkbookActivate (
        struct _Workbook * Wb );
    HRESULT WorkbookDeactivate (
        struct _Workbook * Wb );
    HRESULT WorkbookBeforeClose (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforeSave (
        struct _Workbook * Wb,
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforePrint (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookNewSheet (
        struct _Workbook * Wb,
        IDispatch * Sh );
    HRESULT WorkbookAddinInstall (
        struct _Workbook * Wb );
    HRESULT WorkbookAddinUninstall (
        struct _Workbook * Wb );
    HRESULT WindowResize (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowActivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
    HRESULT SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target );
    HRESULT WorkbookPivotTableCloseConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target );
    HRESULT WorkbookPivotTableOpenConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target );
    HRESULT WorkbookSync (
        struct _Workbook * Wb,
        enum Office::MsoSyncEventType SyncEventType );
    HRESULT WorkbookBeforeXmlImport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL IsRefresh,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookAfterXmlImport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        VARIANT_BOOL IsRefresh,
        enum XlXmlImportResult Result );
    HRESULT WorkbookBeforeXmlExport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookAfterXmlExport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        _bstr_t Url,
        enum XlXmlExportResult Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_NewWorkbook (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_SheetSelectionChange (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_SheetBeforeDoubleClick (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SheetBeforeRightClick (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SheetActivate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetDeactivate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetCalculate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetChange (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_WorkbookOpen (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WorkbookActivate (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WorkbookDeactivate (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WorkbookBeforeClose (
        /*[in]*/ struct _Workbook * Wb,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WorkbookBeforeSave (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ VARIANT_BOOL SaveAsUI,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WorkbookBeforePrint (
        /*[in]*/ struct _Workbook * Wb,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WorkbookNewSheet (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_WorkbookAddinInstall (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WorkbookAddinUninstall (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WindowResize (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowActivate (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowDeactivate (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_SheetFollowHyperlink (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Hyperlink * Target ) = 0;
      virtual HRESULT __stdcall raw_SheetPivotTableUpdate (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct PivotTable * Target ) = 0;
      virtual HRESULT __stdcall raw_WorkbookPivotTableCloseConnection (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct PivotTable * Target ) = 0;
      virtual HRESULT __stdcall raw_WorkbookPivotTableOpenConnection (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct PivotTable * Target ) = 0;
      virtual HRESULT __stdcall raw_WorkbookSync (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ enum Office::MsoSyncEventType SyncEventType ) = 0;
      virtual HRESULT __stdcall raw_WorkbookBeforeXmlImport (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR Url,
        /*[in]*/ VARIANT_BOOL IsRefresh,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WorkbookAfterXmlImport (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ VARIANT_BOOL IsRefresh,
        /*[in]*/ enum XlXmlImportResult Result ) = 0;
      virtual HRESULT __stdcall raw_WorkbookBeforeXmlExport (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR Url,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WorkbookAfterXmlExport (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR Url,
        /*[in]*/ enum XlXmlExportResult Result ) = 0;
};

struct __declspec(uuid("00024407-0001-0000-c000-000000000046"))
IRecentFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    long GetIndex ( );
    _WorkbookPtr Open ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("000208db-0000-0000-c000-000000000046"))
Workbooks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _WorkbookPtr _Default[];
    __declspec(property(get=GetItem))
    _WorkbookPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _WorkbookPtr Add (
        const _variant_t & Template = vtMissing,
        long lcid = 0 );
    HRESULT Close (
        long lcid = 0 );
    long GetCount ( );
    _WorkbookPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    _WorkbookPtr _Open (
        _bstr_t Filename,
        const _variant_t & UpdateLinks = vtMissing,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Format = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & IgnoreReadOnlyRecommended = vtMissing,
        const _variant_t & Origin = vtMissing,
        const _variant_t & Delimiter = vtMissing,
        const _variant_t & Editable = vtMissing,
        const _variant_t & Notify = vtMissing,
        const _variant_t & Converter = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        long lcid = 0 );
    HRESULT __OpenText (
        _bstr_t Filename,
        const _variant_t & Origin,
        const _variant_t & StartRow,
        const _variant_t & DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    _WorkbookPtr Get_Default (
        const _variant_t & Index );
    HRESULT _OpenText (
        _bstr_t Filename,
        const _variant_t & Origin,
        const _variant_t & StartRow,
        const _variant_t & DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing,
        long lcid = 0 );
    _WorkbookPtr Open (
        _bstr_t Filename,
        const _variant_t & UpdateLinks = vtMissing,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Format = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & IgnoreReadOnlyRecommended = vtMissing,
        const _variant_t & Origin = vtMissing,
        const _variant_t & Delimiter = vtMissing,
        const _variant_t & Editable = vtMissing,
        const _variant_t & Notify = vtMissing,
        const _variant_t & Converter = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & Local = vtMissing,
        const _variant_t & CorruptLoad = vtMissing,
        long lcid = 0 );
    HRESULT OpenText (
        _bstr_t Filename,
        const _variant_t & Origin,
        const _variant_t & StartRow,
        const _variant_t & DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing,
        const _variant_t & TrailingMinusNumbers = vtMissing,
        const _variant_t & Local = vtMissing,
        long lcid = 0 );
    _WorkbookPtr OpenDatabase (
        _bstr_t Filename,
        const _variant_t & CommandText = vtMissing,
        const _variant_t & CommandType = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & ImportDataAs = vtMissing );
    HRESULT CheckOut (
        _bstr_t Filename );
    VARIANT_BOOL CanCheckOut (
        _bstr_t Filename );
    _WorkbookPtr _OpenXML (
        _bstr_t Filename,
        const _variant_t & Stylesheets = vtMissing );
    _WorkbookPtr OpenXML (
        _bstr_t Filename,
        const _variant_t & Stylesheets = vtMissing,
        const _variant_t & LoadOption = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Template,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Open (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT UpdateLinks,
        /*[in]*/ VARIANT ReadOnly,
        /*[in]*/ VARIANT Format,
        /*[in]*/ VARIANT Password,
        /*[in]*/ VARIANT WriteResPassword,
        /*[in]*/ VARIANT IgnoreReadOnlyRecommended,
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT Delimiter,
        /*[in]*/ VARIANT Editable,
        /*[in]*/ VARIANT Notify,
        /*[in]*/ VARIANT Converter,
        /*[in]*/ VARIANT AddToMru,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw___OpenText (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT StartRow,
        /*[in]*/ VARIANT DataType,
        /*[in]*/ enum XlTextQualifier TextQualifier,
        /*[in]*/ VARIANT ConsecutiveDelimiter = vtMissing,
        /*[in]*/ VARIANT Tab = vtMissing,
        /*[in]*/ VARIANT Semicolon = vtMissing,
        /*[in]*/ VARIANT Comma = vtMissing,
        /*[in]*/ VARIANT Space = vtMissing,
        /*[in]*/ VARIANT Other = vtMissing,
        /*[in]*/ VARIANT OtherChar = vtMissing,
        /*[in]*/ VARIANT FieldInfo = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw__OpenText (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT StartRow,
        /*[in]*/ VARIANT DataType,
        /*[in]*/ enum XlTextQualifier TextQualifier,
        /*[in]*/ VARIANT ConsecutiveDelimiter = vtMissing,
        /*[in]*/ VARIANT Tab = vtMissing,
        /*[in]*/ VARIANT Semicolon = vtMissing,
        /*[in]*/ VARIANT Comma = vtMissing,
        /*[in]*/ VARIANT Space = vtMissing,
        /*[in]*/ VARIANT Other = vtMissing,
        /*[in]*/ VARIANT OtherChar = vtMissing,
        /*[in]*/ VARIANT FieldInfo = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in]*/ VARIANT DecimalSeparator = vtMissing,
        /*[in]*/ VARIANT ThousandsSeparator = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT UpdateLinks,
        /*[in]*/ VARIANT ReadOnly,
        /*[in]*/ VARIANT Format,
        /*[in]*/ VARIANT Password,
        /*[in]*/ VARIANT WriteResPassword,
        /*[in]*/ VARIANT IgnoreReadOnlyRecommended,
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT Delimiter,
        /*[in]*/ VARIANT Editable,
        /*[in]*/ VARIANT Notify,
        /*[in]*/ VARIANT Converter,
        /*[in]*/ VARIANT AddToMru,
        /*[in]*/ VARIANT Local,
        /*[in]*/ VARIANT CorruptLoad,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OpenText (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT StartRow,
        /*[in]*/ VARIANT DataType,
        /*[in]*/ enum XlTextQualifier TextQualifier,
        /*[in]*/ VARIANT ConsecutiveDelimiter = vtMissing,
        /*[in]*/ VARIANT Tab = vtMissing,
        /*[in]*/ VARIANT Semicolon = vtMissing,
        /*[in]*/ VARIANT Comma = vtMissing,
        /*[in]*/ VARIANT Space = vtMissing,
        /*[in]*/ VARIANT Other = vtMissing,
        /*[in]*/ VARIANT OtherChar = vtMissing,
        /*[in]*/ VARIANT FieldInfo = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in]*/ VARIANT DecimalSeparator = vtMissing,
        /*[in]*/ VARIANT ThousandsSeparator = vtMissing,
        /*[in]*/ VARIANT TrailingMinusNumbers = vtMissing,
        /*[in]*/ VARIANT Local = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_OpenDatabase (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT CommandText,
        /*[in]*/ VARIANT CommandType,
        /*[in]*/ VARIANT BackgroundQuery,
        /*[in]*/ VARIANT ImportDataAs,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckOut (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_CanCheckOut (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw__OpenXML (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Stylesheets,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OpenXML (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Stylesheets,
        /*[in]*/ VARIANT LoadOption,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
};

struct __declspec(uuid("000208d5-0000-0000-c000-000000000046"))
_Application : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetIgnoreRemoteRequests,put=PutIgnoreRemoteRequests))
    VARIANT_BOOL IgnoreRemoteRequests[];
    __declspec(property(get=GetUILanguage,put=PutUILanguage))
    long UILanguage[];
    __declspec(property(get=GetInteractive,put=PutInteractive))
    VARIANT_BOOL Interactive[];
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetInternational))
    _variant_t International[][];
    __declspec(property(get=GetIteration,put=PutIteration))
    VARIANT_BOOL Iteration[];
    __declspec(property(get=GetLargeButtons,put=PutLargeButtons))
    VARIANT_BOOL LargeButtons;
    __declspec(property(get=GetColorButtons,put=PutColorButtons))
    VARIANT_BOOL ColorButtons;
    __declspec(property(get=GetLibraryPath))
    _bstr_t LibraryPath[];
    __declspec(property(get=GetMathCoprocessorAvailable))
    VARIANT_BOOL MathCoprocessorAvailable[];
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetMaxChange,put=PutMaxChange))
    double MaxChange[];
    __declspec(property(get=GetMaxIterations,put=PutMaxIterations))
    long MaxIterations[];
    __declspec(property(get=GetMemoryFree))
    long MemoryFree[];
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetWorksheetFunction))
    WorksheetFunctionPtr WorksheetFunction;
    __declspec(property(get=GetMemoryTotal))
    long MemoryTotal[];
    __declspec(property(get=GetPathSeparator))
    _bstr_t PathSeparator[];
    __declspec(property(get=GetPreviousSelections))
    _variant_t PreviousSelections[][];
    __declspec(property(get=GetRecordRelative))
    VARIANT_BOOL RecordRelative[];
    __declspec(property(get=GetReferenceStyle,put=PutReferenceStyle))
    enum XlReferenceStyle ReferenceStyle[];
    __declspec(property(get=GetTemplatesPath))
    _bstr_t TemplatesPath[];
    __declspec(property(get=GetScreenUpdating,put=PutScreenUpdating))
    VARIANT_BOOL ScreenUpdating[];
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed[];
    __declspec(property(get=GetEnableCancelKey,put=PutEnableCancelKey))
    enum XlEnableCancelKey EnableCancelKey[];
    __declspec(property(get=GetStartupPath))
    _bstr_t StartupPath[];
    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _variant_t StatusBar[];
    __declspec(property(get=GetShowToolTips,put=PutShowToolTips))
    VARIANT_BOOL ShowToolTips;
    __declspec(property(get=GetMouseAvailable))
    VARIANT_BOOL MouseAvailable[];
    __declspec(property(get=GetMoveAfterReturn,put=PutMoveAfterReturn))
    VARIANT_BOOL MoveAfterReturn[];
    __declspec(property(get=GetNetworkTemplatesPath))
    _bstr_t NetworkTemplatesPath[];
    __declspec(property(get=GetOperatingSystem))
    _bstr_t OperatingSystem[];
    __declspec(property(get=GetOrganizationName))
    _bstr_t OrganizationName[];
    __declspec(property(get=GetUsableHeight))
    double UsableHeight[];
    __declspec(property(get=GetUsableWidth))
    double UsableWidth[];
    __declspec(property(get=GetUserName,put=PutUserName))
    _bstr_t UserName[];
    __declspec(property(get=GetVersion))
    _bstr_t Version[];
    __declspec(property(get=GetWindowsForPens))
    VARIANT_BOOL WindowsForPens[];
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum XlWindowState WindowState[];
    __declspec(property(get=GetExtendList,put=PutExtendList))
    VARIANT_BOOL ExtendList;
    __declspec(property(get=GetOLEDBErrors))
    OLEDBErrorsPtr OLEDBErrors;
    __declspec(property(get=GetCOMAddIns))
    Office::COMAddInsPtr COMAddIns;
    __declspec(property(get=GetDefaultWebOptions))
    DefaultWebOptionsPtr DefaultWebOptions;
    __declspec(property(get=GetProductCode))
    _bstr_t ProductCode;
    __declspec(property(get=GetUserLibraryPath))
    _bstr_t UserLibraryPath;
    __declspec(property(get=GetAutoPercentEntry,put=PutAutoPercentEntry))
    VARIANT_BOOL AutoPercentEntry;
    __declspec(property(get=GetLanguageSettings))
    Office::LanguageSettingsPtr LanguageSettings;
    __declspec(property(get=GetDummy101))
    IDispatchPtr Dummy101;
    __declspec(property(get=GetAnswerWizard))
    Office::AnswerWizardPtr AnswerWizard;
    __declspec(property(get=GetCalculationVersion))
    long CalculationVersion;
    __declspec(property(get=GetShowWindowsInTaskbar,put=PutShowWindowsInTaskbar))
    VARIANT_BOOL ShowWindowsInTaskbar;
    __declspec(property(get=GetActiveMenuBar))
    MenuBarPtr ActiveMenuBar;
    __declspec(property(get=GetActiveWindow))
    WindowPtr ActiveWindow;
    __declspec(property(get=GetDialogs))
    DialogsPtr Dialogs;
    __declspec(property(get=GetDialogSheets))
    SheetsPtr DialogSheets;
    __declspec(property(get=GetDecimalSeparator,put=PutDecimalSeparator))
    _bstr_t DecimalSeparator;
    __declspec(property(get=GetThousandsSeparator,put=PutThousandsSeparator))
    _bstr_t ThousandsSeparator;
    __declspec(property(get=GetRegisteredFunctions))
    _variant_t RegisteredFunctions[][][];
    __declspec(property(get=GetShortcutMenus))
    MenuPtr ShortcutMenus[];
    __declspec(property(get=GetThisWorkbook))
    _WorkbookPtr ThisWorkbook[];
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetCustomListCount))
    long CustomListCount[];
    __declspec(property(get=GetMoveAfterReturnDirection,put=PutMoveAfterReturnDirection))
    enum XlDirection MoveAfterReturnDirection[];
    __declspec(property(get=GetAutoCorrect))
    AutoCorrectPtr AutoCorrect;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetCursor,put=PutCursor))
    enum XlMousePointer Cursor[];
    __declspec(property(get=GetActiveDialog))
    DialogSheetPtr ActiveDialog;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetEnableAutoComplete,put=PutEnableAutoComplete))
    VARIANT_BOOL EnableAutoComplete;
    __declspec(property(get=GetEnableAnimations,put=PutEnableAnimations))
    VARIANT_BOOL EnableAnimations[];
    __declspec(property(get=GetDisplayDocumentActionTaskPane,put=PutDisplayDocumentActionTaskPane))
    VARIANT_BOOL DisplayDocumentActionTaskPane;
    __declspec(property(get=GetArbitraryXMLSupportAvailable))
    VARIANT_BOOL ArbitraryXMLSupportAvailable;
    __declspec(property(get=GetCharts))
    SheetsPtr Charts;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width[];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height[];
    __declspec(property(get=GetTop,put=PutTop))
    double Top[];
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left[];
    __declspec(property(get=GetDisplayCommentIndicator,put=PutDisplayCommentIndicator))
    enum XlCommentDisplayMode DisplayCommentIndicator;
    __declspec(property(get=GetEnableSound,put=PutEnableSound))
    VARIANT_BOOL EnableSound;
    __declspec(property(get=GetSheets))
    SheetsPtr Sheets;
    __declspec(property(get=GetFileSearch))
    Office::FileSearchPtr FileSearch;
    __declspec(property(get=GetFileFind))
    Office::IFindPtr FileFind;
    __declspec(property(get=GetRecentFiles))
    RecentFilesPtr RecentFiles;
    __declspec(property(get=GetODBCErrors))
    ODBCErrorsPtr ODBCErrors;
    __declspec(property(get=GetODBCTimeout,put=PutODBCTimeout))
    long ODBCTimeout;
    __declspec(property(get=GetPivotTableSelection,put=PutPivotTableSelection))
    VARIANT_BOOL PivotTableSelection;
    __declspec(property(get=GetRollZoom,put=PutRollZoom))
    VARIANT_BOOL RollZoom;
    __declspec(property(get=GetShowChartTipNames,put=PutShowChartTipNames))
    VARIANT_BOOL ShowChartTipNames;
    __declspec(property(get=GetShowChartTipValues,put=PutShowChartTipValues))
    VARIANT_BOOL ShowChartTipValues;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetDefaultSaveFormat,put=PutDefaultSaveFormat))
    enum XlFileFormat DefaultSaveFormat;
    __declspec(property(get=GetUserControl,put=PutUserControl))
    VARIANT_BOOL UserControl;
    __declspec(property(get=GetVBE))
    VBIDE::VBEPtr VBE;
    __declspec(property(get=GetEnableEvents,put=PutEnableEvents))
    VARIANT_BOOL EnableEvents;
    __declspec(property(get=GetDisplayInfoWindow,put=PutDisplayInfoWindow))
    VARIANT_BOOL DisplayInfoWindow;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _ApplicationPtr Parent;
    __declspec(property(get=GetWorksheets))
    SheetsPtr Worksheets;
    __declspec(property(get=GetReady))
    VARIANT_BOOL Ready;
    __declspec(property(get=GetNewWorkbook))
    Office::NewFilePtr NewWorkbook;
    __declspec(property(get=GetFindFormat,put=PutRefFindFormat))
    CellFormatPtr FindFormat;
    __declspec(property(get=GetReplaceFormat,put=PutRefReplaceFormat))
    CellFormatPtr ReplaceFormat;
    __declspec(property(get=GetUsedObjects))
    UsedObjectsPtr UsedObjects;
    __declspec(property(get=GetCalculationState))
    enum XlCalculationState CalculationState;
    __declspec(property(get=GetCalculationInterruptKey,put=PutCalculationInterruptKey))
    enum XlCalculationInterruptKey CalculationInterruptKey;
    __declspec(property(get=GetWatches))
    WatchesPtr Watches;
    __declspec(property(get=GetDisplayFunctionToolTips,put=PutDisplayFunctionToolTips))
    VARIANT_BOOL DisplayFunctionToolTips;
    __declspec(property(get=GetFileDialog))
    Office::FileDialogPtr FileDialog[];
    __declspec(property(get=GetDisplayPasteOptions,put=PutDisplayPasteOptions))
    VARIANT_BOOL DisplayPasteOptions;
    __declspec(property(get=GetDisplayInsertOptions,put=PutDisplayInsertOptions))
    VARIANT_BOOL DisplayInsertOptions;
    __declspec(property(get=GetGenerateGetPivotData,put=PutGenerateGetPivotData))
    VARIANT_BOOL GenerateGetPivotData;
    __declspec(property(get=GetAutoRecover))
    AutoRecoverPtr AutoRecover;
    __declspec(property(get=GetHwnd))
    long Hwnd;
    __declspec(property(get=GetHinstance))
    long Hinstance;
    __declspec(property(get=GetErrorCheckingOptions))
    ErrorCheckingOptionsPtr ErrorCheckingOptions;
    __declspec(property(get=GetAutoFormatAsYouTypeReplaceHyperlinks,put=PutAutoFormatAsYouTypeReplaceHyperlinks))
    VARIANT_BOOL AutoFormatAsYouTypeReplaceHyperlinks;
    __declspec(property(get=GetSmartTagRecognizers))
    SmartTagRecognizersPtr SmartTagRecognizers;
    __declspec(property(get=GetSpellingOptions))
    SpellingOptionsPtr SpellingOptions;
    __declspec(property(get=GetSpeech))
    SpeechPtr Speech;
    __declspec(property(get=GetMapPaperSize,put=PutMapPaperSize))
    VARIANT_BOOL MapPaperSize;
    __declspec(property(get=GetShowStartupDialog,put=PutShowStartupDialog))
    VARIANT_BOOL ShowStartupDialog;
    __declspec(property(get=GetUseSystemSeparators,put=PutUseSystemSeparators))
    VARIANT_BOOL UseSystemSeparators;
    __declspec(property(get=GetThisCell))
    RangePtr ThisCell;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetRTD))
    RTDPtr RTD;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetToolbars))
    ToolbarsPtr Toolbars;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible[];
    __declspec(property(get=GetStandardFont,put=PutStandardFont))
    _bstr_t StandardFont[];
    __declspec(property(get=GetStandardFontSize,put=PutStandardFontSize))
    double StandardFontSize[];
    __declspec(property(get=GetDisplayRecentFiles,put=PutDisplayRecentFiles))
    VARIANT_BOOL DisplayRecentFiles;
    __declspec(property(get=GetDisplayExcel4Menus,put=PutDisplayExcel4Menus))
    VARIANT_BOOL DisplayExcel4Menus[];
    __declspec(property(get=GetWorkbooks))
    WorkbooksPtr Workbooks;
    __declspec(property(get=GetEditDirectlyInCell,put=PutEditDirectlyInCell))
    VARIANT_BOOL EditDirectlyInCell[];
    __declspec(property(get=GetAlertBeforeOverwriting,put=PutAlertBeforeOverwriting))
    VARIANT_BOOL AlertBeforeOverwriting[];
    __declspec(property(get=GetFileConverters))
    _variant_t FileConverters[][][];
    __declspec(property(get=GetExcel4MacroSheets))
    SheetsPtr Excel4MacroSheets;
    __declspec(property(get=GetExcel4IntlMacroSheets))
    SheetsPtr Excel4IntlMacroSheets;
    __declspec(property(get=GetModules))
    ModulesPtr Modules;
    __declspec(property(get=GetDefaultSheetDirection,put=PutDefaultSheetDirection))
    long DefaultSheetDirection[];
    __declspec(property(get=GetMailSession))
    _variant_t MailSession[];
    __declspec(property(get=GetCursorMovement,put=PutCursorMovement))
    long CursorMovement[];
    __declspec(property(get=GetMenuBars))
    MenuBarsPtr MenuBars;
    __declspec(property(get=GetControlCharacters,put=PutControlCharacters))
    VARIANT_BOOL ControlCharacters[];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetMailSystem))
    enum XlMailSystem MailSystem[];
    __declspec(property(get=GetOnWindow,put=PutOnWindow))
    _bstr_t OnWindow[];
    __declspec(property(get=GetOnCalculate,put=PutOnCalculate))
    _bstr_t OnCalculate[];
    __declspec(property(get=GetOnEntry,put=PutOnEntry))
    _bstr_t OnEntry[];
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetOnData,put=PutOnData))
    _bstr_t OnData[];
    __declspec(property(get=GetCopyObjectsWithCells,put=PutCopyObjectsWithCells))
    VARIANT_BOOL CopyObjectsWithCells[];
    __declspec(property(get=GetAskToUpdateLinks,put=PutAskToUpdateLinks))
    VARIANT_BOOL AskToUpdateLinks[];
    __declspec(property(get=GetSheetsInNewWorkbook,put=PutSheetsInNewWorkbook))
    long SheetsInNewWorkbook[];
    __declspec(property(get=GetPath))
    _bstr_t Path[];
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActivePrinter,put=PutActivePrinter))
    _bstr_t ActivePrinter[];
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetActiveWorkbook))
    _WorkbookPtr ActiveWorkbook;
    __declspec(property(get=GetTransitionMenuKey,put=PutTransitionMenuKey))
    _bstr_t TransitionMenuKey[];
    __declspec(property(get=GetTransitionMenuKeyAction,put=PutTransitionMenuKeyAction))
    long TransitionMenuKeyAction[];
    __declspec(property(get=GetTransitionNavigKeys,put=PutTransitionNavigKeys))
    VARIANT_BOOL TransitionNavigKeys[];
    __declspec(property(get=GetAltStartupPath,put=PutAltStartupPath))
    _bstr_t AltStartupPath[];
    __declspec(property(get=GetBuild))
    long Build[];
    __declspec(property(get=GetCalculateBeforeSave,put=PutCalculateBeforeSave))
    VARIANT_BOOL CalculateBeforeSave[];
    __declspec(property(get=GetCalculation,put=PutCalculation))
    enum XlCalculation Calculation[];
    __declspec(property(get=GetCaller))
    _variant_t Caller[][];
    __declspec(property(get=GetCanPlaySounds))
    VARIANT_BOOL CanPlaySounds[];
    __declspec(property(get=GetCanRecordSounds))
    VARIANT_BOOL CanRecordSounds[];
    __declspec(property(get=GetCellDragAndDrop,put=PutCellDragAndDrop))
    VARIANT_BOOL CellDragAndDrop[];
    __declspec(property(get=GetClipboardFormats))
    _variant_t ClipboardFormats[][];
    __declspec(property(get=GetDisplayClipboardWindow,put=PutDisplayClipboardWindow))
    VARIANT_BOOL DisplayClipboardWindow[];
    __declspec(property(get=GetCommandUnderlines,put=PutCommandUnderlines))
    enum XlCommandUnderlines CommandUnderlines[];
    __declspec(property(get=GetConstrainNumeric,put=PutConstrainNumeric))
    VARIANT_BOOL ConstrainNumeric[];
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetDefaultFilePath,put=PutDefaultFilePath))
    _bstr_t DefaultFilePath[];
    __declspec(property(get=GetCutCopyMode,put=PutCutCopyMode))
    enum XlCutCopyMode CutCopyMode[];
    __declspec(property(get=GetDataEntryMode,put=PutDataEntryMode))
    long DataEntryMode[];
    __declspec(property(get=GetDDEAppReturnCode))
    long DDEAppReturnCode[];
    __declspec(property(get=GetDisplayAlerts,put=PutDisplayAlerts))
    VARIANT_BOOL DisplayAlerts[];
    __declspec(property(get=GetDisplayFormulaBar,put=PutDisplayFormulaBar))
    VARIANT_BOOL DisplayFormulaBar[];
    __declspec(property(get=GetDisplayNoteIndicator,put=PutDisplayNoteIndicator))
    VARIANT_BOOL DisplayNoteIndicator;
    __declspec(property(get=GetDisplayScrollBars,put=PutDisplayScrollBars))
    VARIANT_BOOL DisplayScrollBars[];
    __declspec(property(get=GetDisplayStatusBar,put=PutDisplayStatusBar))
    VARIANT_BOOL DisplayStatusBar[];
    __declspec(property(get=GetDisplayFullScreen,put=PutDisplayFullScreen))
    VARIANT_BOOL DisplayFullScreen[];
    __declspec(property(get=GetPromptForSummaryInfo,put=PutPromptForSummaryInfo))
    VARIANT_BOOL PromptForSummaryInfo[];
    __declspec(property(get=GetFixedDecimal,put=PutFixedDecimal))
    VARIANT_BOOL FixedDecimal[];
    __declspec(property(get=GetEnableTipWizard,put=PutEnableTipWizard))
    VARIANT_BOOL EnableTipWizard[];
    __declspec(property(get=GetFixedDecimalPlaces,put=PutFixedDecimalPlaces))
    long FixedDecimalPlaces[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _ApplicationPtr GetParent ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    DialogSheetPtr GetActiveDialog ( );
    MenuBarPtr GetActiveMenuBar ( );
    _bstr_t GetActivePrinter (
        long lcid = 0 );
    void PutActivePrinter (
        long lcid,
        _bstr_t RHS );
    IDispatchPtr GetActiveSheet ( );
    WindowPtr GetActiveWindow ( );
    _WorkbookPtr GetActiveWorkbook ( );
    AddInsPtr GetAddIns ( );
    Office::AssistantPtr GetAssistant ( );
    HRESULT Calculate (
        long lcid = 0 );
    RangePtr GetCells ( );
    SheetsPtr GetCharts ( );
    RangePtr GetColumns ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    long GetDDEAppReturnCode (
        long lcid = 0 );
    HRESULT DDEExecute (
        long Channel,
        _bstr_t String,
        long lcid = 0 );
    long DDEInitiate (
        _bstr_t App,
        _bstr_t Topic,
        long lcid = 0 );
    HRESULT DDEPoke (
        long Channel,
        const _variant_t & Item,
        const _variant_t & Data,
        long lcid = 0 );
    _variant_t DDERequest (
        long Channel,
        _bstr_t Item,
        long lcid = 0 );
    HRESULT DDETerminate (
        long Channel,
        long lcid = 0 );
    SheetsPtr GetDialogSheets ( );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t ExecuteExcel4Macro (
        _bstr_t String,
        long lcid = 0 );
    RangePtr Intersect (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    MenuBarsPtr GetMenuBars ( );
    ModulesPtr GetModules ( );
    NamesPtr GetNames ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t _Run2 (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    IDispatchPtr GetSelection (
        long lcid = 0 );
    HRESULT SendKeys (
        const _variant_t & Keys,
        const _variant_t & Wait = vtMissing,
        long lcid = 0 );
    SheetsPtr GetSheets ( );
    MenuPtr GetShortcutMenus (
        long Index );
    _WorkbookPtr GetThisWorkbook (
        long lcid = 0 );
    ToolbarsPtr GetToolbars ( );
    RangePtr Union (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    WindowsPtr GetWindows ( );
    WorkbooksPtr GetWorkbooks ( );
    WorksheetFunctionPtr GetWorksheetFunction ( );
    SheetsPtr GetWorksheets ( );
    SheetsPtr GetExcel4IntlMacroSheets ( );
    SheetsPtr GetExcel4MacroSheets ( );
    HRESULT ActivateMicrosoftApp (
        enum XlMSApplication Index,
        long lcid = 0 );
    HRESULT AddChartAutoFormat (
        const _variant_t & Chart,
        _bstr_t Name,
        const _variant_t & Description = vtMissing,
        long lcid = 0 );
    HRESULT AddCustomList (
        const _variant_t & ListArray,
        const _variant_t & ByRow = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetAlertBeforeOverwriting (
        long lcid = 0 );
    void PutAlertBeforeOverwriting (
        long lcid,
        VARIANT_BOOL RHS );
    _bstr_t GetAltStartupPath (
        long lcid = 0 );
    void PutAltStartupPath (
        long lcid,
        _bstr_t RHS );
    VARIANT_BOOL GetAskToUpdateLinks (
        long lcid = 0 );
    void PutAskToUpdateLinks (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableAnimations (
        long lcid = 0 );
    void PutEnableAnimations (
        long lcid,
        VARIANT_BOOL RHS );
    AutoCorrectPtr GetAutoCorrect ( );
    long GetBuild (
        long lcid = 0 );
    VARIANT_BOOL GetCalculateBeforeSave (
        long lcid = 0 );
    void PutCalculateBeforeSave (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlCalculation GetCalculation (
        long lcid = 0 );
    void PutCalculation (
        long lcid,
        enum XlCalculation RHS );
    _variant_t GetCaller (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetCanPlaySounds (
        long lcid = 0 );
    VARIANT_BOOL GetCanRecordSounds (
        long lcid = 0 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetCellDragAndDrop (
        long lcid = 0 );
    void PutCellDragAndDrop (
        long lcid,
        VARIANT_BOOL RHS );
    double CentimetersToPoints (
        double Centimeters,
        long lcid = 0 );
    VARIANT_BOOL CheckSpelling (
        _bstr_t Word,
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        long lcid = 0 );
    _variant_t GetClipboardFormats (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetDisplayClipboardWindow (
        long lcid = 0 );
    void PutDisplayClipboardWindow (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetColorButtons ( );
    void PutColorButtons (
        VARIANT_BOOL RHS );
    enum XlCommandUnderlines GetCommandUnderlines (
        long lcid = 0 );
    void PutCommandUnderlines (
        long lcid,
        enum XlCommandUnderlines RHS );
    VARIANT_BOOL GetConstrainNumeric (
        long lcid = 0 );
    void PutConstrainNumeric (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t ConvertFormula (
        const _variant_t & Formula,
        enum XlReferenceStyle FromReferenceStyle,
        const _variant_t & ToReferenceStyle = vtMissing,
        const _variant_t & ToAbsolute = vtMissing,
        const _variant_t & RelativeTo = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetCopyObjectsWithCells (
        long lcid = 0 );
    void PutCopyObjectsWithCells (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlMousePointer GetCursor (
        long lcid = 0 );
    void PutCursor (
        long lcid,
        enum XlMousePointer RHS );
    long GetCustomListCount (
        long lcid = 0 );
    enum XlCutCopyMode GetCutCopyMode (
        long lcid = 0 );
    void PutCutCopyMode (
        long lcid,
        enum XlCutCopyMode RHS );
    long GetDataEntryMode (
        long lcid = 0 );
    void PutDataEntryMode (
        long lcid,
        long RHS );
    _variant_t Dummy1 (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Dummy2 (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing );
    _variant_t Dummy3 ( );
    _variant_t Dummy4 (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing );
    _variant_t Dummy5 (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing );
    _variant_t Dummy6 ( );
    _variant_t Dummy7 ( );
    _variant_t Dummy8 (
        const _variant_t & Arg1 = vtMissing );
    _variant_t Dummy9 ( );
    VARIANT_BOOL Dummy10 (
        const _variant_t & arg = vtMissing );
    HRESULT Dummy11 ( );
    _bstr_t Get_Default ( );
    _bstr_t GetDefaultFilePath (
        long lcid = 0 );
    void PutDefaultFilePath (
        long lcid,
        _bstr_t RHS );
    HRESULT DeleteChartAutoFormat (
        _bstr_t Name,
        long lcid = 0 );
    HRESULT DeleteCustomList (
        long ListNum,
        long lcid = 0 );
    DialogsPtr GetDialogs ( );
    VARIANT_BOOL GetDisplayAlerts (
        long lcid = 0 );
    void PutDisplayAlerts (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayFormulaBar (
        long lcid = 0 );
    void PutDisplayFormulaBar (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayFullScreen (
        long lcid = 0 );
    void PutDisplayFullScreen (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayNoteIndicator ( );
    void PutDisplayNoteIndicator (
        VARIANT_BOOL RHS );
    enum XlCommentDisplayMode GetDisplayCommentIndicator ( );
    void PutDisplayCommentIndicator (
        enum XlCommentDisplayMode RHS );
    VARIANT_BOOL GetDisplayExcel4Menus (
        long lcid = 0 );
    void PutDisplayExcel4Menus (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayRecentFiles ( );
    void PutDisplayRecentFiles (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayScrollBars (
        long lcid = 0 );
    void PutDisplayScrollBars (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayStatusBar (
        long lcid = 0 );
    void PutDisplayStatusBar (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT DoubleClick (
        long lcid = 0 );
    VARIANT_BOOL GetEditDirectlyInCell (
        long lcid = 0 );
    void PutEditDirectlyInCell (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableAutoComplete ( );
    void PutEnableAutoComplete (
        VARIANT_BOOL RHS );
    enum XlEnableCancelKey GetEnableCancelKey (
        long lcid = 0 );
    void PutEnableCancelKey (
        long lcid,
        enum XlEnableCancelKey RHS );
    VARIANT_BOOL GetEnableSound ( );
    void PutEnableSound (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableTipWizard (
        long lcid = 0 );
    void PutEnableTipWizard (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t GetFileConverters (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0 );
    Office::FileSearchPtr GetFileSearch ( );
    Office::IFindPtr GetFileFind ( );
    HRESULT _FindFile (
        long lcid = 0 );
    VARIANT_BOOL GetFixedDecimal (
        long lcid = 0 );
    void PutFixedDecimal (
        long lcid,
        VARIANT_BOOL RHS );
    long GetFixedDecimalPlaces (
        long lcid = 0 );
    void PutFixedDecimalPlaces (
        long lcid,
        long RHS );
    _variant_t GetCustomListContents (
        long ListNum,
        long lcid = 0 );
    long GetCustomListNum (
        const _variant_t & ListArray,
        long lcid = 0 );
    _variant_t GetOpenFilename (
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & ButtonText = vtMissing,
        const _variant_t & MultiSelect = vtMissing,
        long lcid = 0 );
    _variant_t GetSaveAsFilename (
        const _variant_t & InitialFilename = vtMissing,
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & ButtonText = vtMissing,
        long lcid = 0 );
    HRESULT Goto (
        const _variant_t & Reference = vtMissing,
        const _variant_t & Scroll = vtMissing,
        long lcid = 0 );
    double GetHeight (
        long lcid = 0 );
    void PutHeight (
        long lcid,
        double RHS );
    HRESULT Help (
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetIgnoreRemoteRequests (
        long lcid = 0 );
    void PutIgnoreRemoteRequests (
        long lcid,
        VARIANT_BOOL RHS );
    double InchesToPoints (
        double Inches,
        long lcid = 0 );
    _variant_t InputBox (
        _bstr_t Prompt,
        const _variant_t & Title = vtMissing,
        const _variant_t & Default = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetInteractive (
        long lcid = 0 );
    void PutInteractive (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t GetInternational (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetIteration (
        long lcid = 0 );
    void PutIteration (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetLargeButtons ( );
    void PutLargeButtons (
        VARIANT_BOOL RHS );
    double GetLeft (
        long lcid = 0 );
    void PutLeft (
        long lcid,
        double RHS );
    _bstr_t GetLibraryPath (
        long lcid = 0 );
    HRESULT MacroOptions (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Description = vtMissing,
        const _variant_t & HasMenu = vtMissing,
        const _variant_t & MenuText = vtMissing,
        const _variant_t & HasShortcutKey = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Category = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpContextID = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        long lcid = 0 );
    HRESULT MailLogoff (
        long lcid = 0 );
    HRESULT MailLogon (
        const _variant_t & Name = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & DownloadNewMail = vtMissing,
        long lcid = 0 );
    _variant_t GetMailSession (
        long lcid = 0 );
    enum XlMailSystem GetMailSystem (
        long lcid = 0 );
    VARIANT_BOOL GetMathCoprocessorAvailable (
        long lcid = 0 );
    double GetMaxChange (
        long lcid = 0 );
    void PutMaxChange (
        long lcid,
        double RHS );
    long GetMaxIterations (
        long lcid = 0 );
    void PutMaxIterations (
        long lcid,
        long RHS );
    long GetMemoryFree (
        long lcid = 0 );
    long GetMemoryTotal (
        long lcid = 0 );
    long GetMemoryUsed (
        long lcid = 0 );
    VARIANT_BOOL GetMouseAvailable (
        long lcid = 0 );
    VARIANT_BOOL GetMoveAfterReturn (
        long lcid = 0 );
    void PutMoveAfterReturn (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlDirection GetMoveAfterReturnDirection (
        long lcid = 0 );
    void PutMoveAfterReturnDirection (
        long lcid,
        enum XlDirection RHS );
    RecentFilesPtr GetRecentFiles ( );
    _bstr_t GetName ( );
    _WorkbookPtr NextLetter (
        long lcid = 0 );
    _bstr_t GetNetworkTemplatesPath (
        long lcid = 0 );
    ODBCErrorsPtr GetODBCErrors ( );
    long GetODBCTimeout ( );
    void PutODBCTimeout (
        long RHS );
    _bstr_t GetOnCalculate (
        long lcid = 0 );
    void PutOnCalculate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnData (
        long lcid = 0 );
    void PutOnData (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnEntry (
        long lcid = 0 );
    void PutOnEntry (
        long lcid,
        _bstr_t RHS );
    HRESULT OnKey (
        _bstr_t Key,
        const _variant_t & Procedure = vtMissing,
        long lcid = 0 );
    HRESULT OnRepeat (
        _bstr_t Text,
        _bstr_t Procedure,
        long lcid = 0 );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    HRESULT OnTime (
        const _variant_t & EarliestTime,
        _bstr_t Procedure,
        const _variant_t & LatestTime = vtMissing,
        const _variant_t & Schedule = vtMissing,
        long lcid = 0 );
    HRESULT OnUndo (
        _bstr_t Text,
        _bstr_t Procedure,
        long lcid = 0 );
    _bstr_t GetOnWindow (
        long lcid = 0 );
    void PutOnWindow (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOperatingSystem (
        long lcid = 0 );
    _bstr_t GetOrganizationName (
        long lcid = 0 );
    _bstr_t GetPath (
        long lcid = 0 );
    _bstr_t GetPathSeparator (
        long lcid = 0 );
    _variant_t GetPreviousSelections (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetPivotTableSelection ( );
    void PutPivotTableSelection (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPromptForSummaryInfo (
        long lcid = 0 );
    void PutPromptForSummaryInfo (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT Quit ( );
    HRESULT RecordMacro (
        const _variant_t & BasicCode = vtMissing,
        const _variant_t & XlmCode = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetRecordRelative (
        long lcid = 0 );
    enum XlReferenceStyle GetReferenceStyle (
        long lcid = 0 );
    void PutReferenceStyle (
        long lcid,
        enum XlReferenceStyle RHS );
    _variant_t GetRegisteredFunctions (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL RegisterXLL (
        _bstr_t Filename,
        long lcid = 0 );
    HRESULT Repeat (
        long lcid = 0 );
    HRESULT ResetTipWizard (
        long lcid = 0 );
    VARIANT_BOOL GetRollZoom ( );
    void PutRollZoom (
        VARIANT_BOOL RHS );
    HRESULT Save (
        const _variant_t & Filename = vtMissing,
        long lcid = 0 );
    HRESULT SaveWorkspace (
        const _variant_t & Filename = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetScreenUpdating (
        long lcid = 0 );
    void PutScreenUpdating (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT SetDefaultChart (
        const _variant_t & FormatName = vtMissing,
        const _variant_t & Gallery = vtMissing );
    long GetSheetsInNewWorkbook (
        long lcid = 0 );
    void PutSheetsInNewWorkbook (
        long lcid,
        long RHS );
    VARIANT_BOOL GetShowChartTipNames ( );
    void PutShowChartTipNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowChartTipValues ( );
    void PutShowChartTipValues (
        VARIANT_BOOL RHS );
    _bstr_t GetStandardFont (
        long lcid = 0 );
    void PutStandardFont (
        long lcid,
        _bstr_t RHS );
    double GetStandardFontSize (
        long lcid = 0 );
    void PutStandardFontSize (
        long lcid,
        double RHS );
    _bstr_t GetStartupPath (
        long lcid = 0 );
    _variant_t GetStatusBar (
        long lcid = 0 );
    void PutStatusBar (
        long lcid,
        const _variant_t & RHS );
    _bstr_t GetTemplatesPath (
        long lcid = 0 );
    VARIANT_BOOL GetShowToolTips ( );
    void PutShowToolTips (
        VARIANT_BOOL RHS );
    double GetTop (
        long lcid = 0 );
    void PutTop (
        long lcid,
        double RHS );
    enum XlFileFormat GetDefaultSaveFormat ( );
    void PutDefaultSaveFormat (
        enum XlFileFormat RHS );
    _bstr_t GetTransitionMenuKey (
        long lcid = 0 );
    void PutTransitionMenuKey (
        long lcid,
        _bstr_t RHS );
    long GetTransitionMenuKeyAction (
        long lcid = 0 );
    void PutTransitionMenuKeyAction (
        long lcid,
        long RHS );
    VARIANT_BOOL GetTransitionNavigKeys (
        long lcid = 0 );
    void PutTransitionNavigKeys (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT Undo (
        long lcid = 0 );
    double GetUsableHeight (
        long lcid = 0 );
    double GetUsableWidth (
        long lcid = 0 );
    VARIANT_BOOL GetUserControl ( );
    void PutUserControl (
        VARIANT_BOOL RHS );
    _bstr_t GetUserName (
        long lcid = 0 );
    void PutUserName (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetValue ( );
    VBIDE::VBEPtr GetVBE ( );
    _bstr_t GetVersion (
        long lcid = 0 );
    VARIANT_BOOL GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT Volatile (
        const _variant_t & Volatile = vtMissing,
        long lcid = 0 );
    HRESULT _Wait (
        const _variant_t & Time,
        long lcid = 0 );
    double GetWidth (
        long lcid = 0 );
    void PutWidth (
        long lcid,
        double RHS );
    VARIANT_BOOL GetWindowsForPens (
        long lcid = 0 );
    enum XlWindowState GetWindowState (
        long lcid = 0 );
    void PutWindowState (
        long lcid,
        enum XlWindowState RHS );
    long GetUILanguage (
        long lcid = 0 );
    void PutUILanguage (
        long lcid,
        long RHS );
    long GetDefaultSheetDirection (
        long lcid = 0 );
    void PutDefaultSheetDirection (
        long lcid,
        long RHS );
    long GetCursorMovement (
        long lcid = 0 );
    void PutCursorMovement (
        long lcid,
        long RHS );
    VARIANT_BOOL GetControlCharacters (
        long lcid = 0 );
    void PutControlCharacters (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t _WSFunction (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableEvents ( );
    void PutEnableEvents (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayInfoWindow ( );
    void PutDisplayInfoWindow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL Wait (
        const _variant_t & Time,
        long lcid = 0 );
    VARIANT_BOOL GetExtendList ( );
    void PutExtendList (
        VARIANT_BOOL RHS );
    OLEDBErrorsPtr GetOLEDBErrors ( );
    _bstr_t GetPhonetic (
        const _variant_t & Text = vtMissing );
    Office::COMAddInsPtr GetCOMAddIns ( );
    DefaultWebOptionsPtr GetDefaultWebOptions ( );
    _bstr_t GetProductCode ( );
    _bstr_t GetUserLibraryPath ( );
    VARIANT_BOOL GetAutoPercentEntry ( );
    void PutAutoPercentEntry (
        VARIANT_BOOL RHS );
    Office::LanguageSettingsPtr GetLanguageSettings ( );
    IDispatchPtr GetDummy101 ( );
    HRESULT Dummy12 (
        struct PivotTable * p1,
        struct PivotTable * p2 );
    Office::AnswerWizardPtr GetAnswerWizard ( );
    HRESULT CalculateFull ( );
    VARIANT_BOOL FindFile (
        long lcid = 0 );
    long GetCalculationVersion ( );
    VARIANT_BOOL GetShowWindowsInTaskbar ( );
    void PutShowWindowsInTaskbar (
        VARIANT_BOOL RHS );
    enum Office::MsoFeatureInstall GetFeatureInstall ( );
    void PutFeatureInstall (
        enum Office::MsoFeatureInstall RHS );
    VARIANT_BOOL GetReady ( );
    _variant_t Dummy13 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    CellFormatPtr GetFindFormat ( );
    void PutRefFindFormat (
        struct CellFormat * RHS );
    CellFormatPtr GetReplaceFormat ( );
    void PutRefReplaceFormat (
        struct CellFormat * RHS );
    UsedObjectsPtr GetUsedObjects ( );
    enum XlCalculationState GetCalculationState ( );
    enum XlCalculationInterruptKey GetCalculationInterruptKey ( );
    void PutCalculationInterruptKey (
        enum XlCalculationInterruptKey RHS );
    WatchesPtr GetWatches ( );
    VARIANT_BOOL GetDisplayFunctionToolTips ( );
    void PutDisplayFunctionToolTips (
        VARIANT_BOOL RHS );
    enum Office::MsoAutomationSecurity GetAutomationSecurity ( );
    void PutAutomationSecurity (
        enum Office::MsoAutomationSecurity RHS );
    Office::FileDialogPtr GetFileDialog (
        enum Office::MsoFileDialogType fileDialogType );
    HRESULT Dummy14 ( );
    HRESULT CalculateFullRebuild ( );
    VARIANT_BOOL GetDisplayPasteOptions ( );
    void PutDisplayPasteOptions (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayInsertOptions ( );
    void PutDisplayInsertOptions (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetGenerateGetPivotData ( );
    void PutGenerateGetPivotData (
        VARIANT_BOOL RHS );
    AutoRecoverPtr GetAutoRecover ( );
    long GetHwnd ( );
    long GetHinstance ( );
    HRESULT CheckAbort (
        const _variant_t & KeepAbort = vtMissing );
    ErrorCheckingOptionsPtr GetErrorCheckingOptions ( );
    VARIANT_BOOL GetAutoFormatAsYouTypeReplaceHyperlinks ( );
    void PutAutoFormatAsYouTypeReplaceHyperlinks (
        VARIANT_BOOL RHS );
    SmartTagRecognizersPtr GetSmartTagRecognizers ( );
    Office::NewFilePtr GetNewWorkbook ( );
    SpellingOptionsPtr GetSpellingOptions ( );
    SpeechPtr GetSpeech ( );
    VARIANT_BOOL GetMapPaperSize ( );
    void PutMapPaperSize (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowStartupDialog ( );
    void PutShowStartupDialog (
        VARIANT_BOOL RHS );
    _bstr_t GetDecimalSeparator ( );
    void PutDecimalSeparator (
        _bstr_t RHS );
    _bstr_t GetThousandsSeparator ( );
    void PutThousandsSeparator (
        _bstr_t RHS );
    VARIANT_BOOL GetUseSystemSeparators ( );
    void PutUseSystemSeparators (
        VARIANT_BOOL RHS );
    RangePtr GetThisCell ( );
    RTDPtr GetRTD ( );
    VARIANT_BOOL GetDisplayDocumentActionTaskPane ( );
    void PutDisplayDocumentActionTaskPane (
        VARIANT_BOOL RHS );
    HRESULT DisplayXMLSourcePane (
        const _variant_t & XmlMap = vtMissing );
    VARIANT_BOOL GetArbitraryXMLSupportAvailable ( );
    _variant_t Support (
        IDispatch * Object,
        long ID,
        const _variant_t & arg = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveChart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveDialog (
        /*[out,retval]*/ struct DialogSheet * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveMenuBar (
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActivePrinter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ActivePrinter (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveWorkbook (
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ struct AddIns * * RHS ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ struct Office::Assistant * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Charts (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_DDEAppReturnCode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDEExecute (
        /*[in]*/ long Channel,
        /*[in]*/ BSTR String,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DDEInitiate (
        /*[in]*/ BSTR App,
        /*[in]*/ BSTR Topic,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDEPoke (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT Item,
        /*[in]*/ VARIANT Data,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DDERequest (
        /*[in]*/ long Channel,
        /*[in]*/ BSTR Item,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDETerminate (
        /*[in]*/ long Channel,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DialogSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ExecuteExcel4Macro (
        /*[in]*/ BSTR String,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Intersect (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_MenuBars (
        /*[out,retval]*/ struct MenuBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_Modules (
        /*[out,retval]*/ struct Modules * * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Cell1,
        /*[in]*/ VARIANT Cell2,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ VARIANT Macro,
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Run2 (
        /*[in]*/ VARIANT Macro,
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendKeys (
        /*[in]*/ VARIANT Keys,
        /*[in]*/ VARIANT Wait = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Sheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShortcutMenus (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_ThisWorkbook (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_Toolbars (
        /*[out,retval]*/ struct Toolbars * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Union (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct Windows * * RHS ) = 0;
      virtual HRESULT __stdcall get_Workbooks (
        /*[out,retval]*/ struct Workbooks * * RHS ) = 0;
      virtual HRESULT __stdcall get_WorksheetFunction (
        /*[out,retval]*/ struct WorksheetFunction * * RHS ) = 0;
      virtual HRESULT __stdcall get_Worksheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4IntlMacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4MacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ActivateMicrosoftApp (
        /*[in]*/ enum XlMSApplication Index,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_AddChartAutoFormat (
        /*[in]*/ VARIANT Chart,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Description = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_AddCustomList (
        /*[in]*/ VARIANT ListArray,
        /*[in]*/ VARIANT ByRow = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_AlertBeforeOverwriting (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AlertBeforeOverwriting (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AltStartupPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_AltStartupPath (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_AskToUpdateLinks (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AskToUpdateLinks (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableAnimations (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAnimations (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoCorrect (
        /*[out,retval]*/ struct AutoCorrect * * RHS ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_CalculateBeforeSave (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CalculateBeforeSave (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Calculation (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlCalculation * RHS ) = 0;
      virtual HRESULT __stdcall put_Calculation (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlCalculation RHS ) = 0;
      virtual HRESULT __stdcall get_Caller (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CanPlaySounds (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_CanRecordSounds (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_CellDragAndDrop (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CellDragAndDrop (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_CentimetersToPoints (
        /*[in]*/ double Centimeters,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ BSTR Word,
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ClipboardFormats (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayClipboardWindow (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayClipboardWindow (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ColorButtons (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorButtons (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CommandUnderlines (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlCommandUnderlines * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandUnderlines (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlCommandUnderlines RHS ) = 0;
      virtual HRESULT __stdcall get_ConstrainNumeric (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ConstrainNumeric (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_ConvertFormula (
        /*[in]*/ VARIANT Formula,
        /*[in]*/ enum XlReferenceStyle FromReferenceStyle,
        /*[in]*/ VARIANT ToReferenceStyle,
        /*[in]*/ VARIANT ToAbsolute,
        /*[in]*/ VARIANT RelativeTo,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CopyObjectsWithCells (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CopyObjectsWithCells (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlMousePointer * RHS ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlMousePointer RHS ) = 0;
      virtual HRESULT __stdcall get_CustomListCount (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_CutCopyMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlCutCopyMode * RHS ) = 0;
      virtual HRESULT __stdcall put_CutCopyMode (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlCutCopyMode RHS ) = 0;
      virtual HRESULT __stdcall get_DataEntryMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DataEntryMode (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy1 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy2 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy3 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy4 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy5 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy6 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy7 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy8 (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy9 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy10 (
        /*[in]*/ VARIANT arg,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy11 ( ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultFilePath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultFilePath (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_DeleteChartAutoFormat (
        /*[in]*/ BSTR Name,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DeleteCustomList (
        /*[in]*/ long ListNum,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Dialogs (
        /*[out,retval]*/ struct Dialogs * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayAlerts (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayAlerts (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayFormulaBar (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayFormulaBar (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayFullScreen (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayFullScreen (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayNoteIndicator (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayNoteIndicator (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayCommentIndicator (
        /*[out,retval]*/ enum XlCommentDisplayMode * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayCommentIndicator (
        /*[in]*/ enum XlCommentDisplayMode RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayExcel4Menus (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayExcel4Menus (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRecentFiles (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRecentFiles (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayScrollBars (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayScrollBars (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusBar (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayStatusBar (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_DoubleClick (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_EditDirectlyInCell (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EditDirectlyInCell (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableAutoComplete (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAutoComplete (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableCancelKey (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlEnableCancelKey * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableCancelKey (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlEnableCancelKey RHS ) = 0;
      virtual HRESULT __stdcall get_EnableSound (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableSound (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableTipWizard (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableTipWizard (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FileConverters (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_FileSearch (
        /*[out,retval]*/ struct Office::FileSearch * * RHS ) = 0;
      virtual HRESULT __stdcall get_FileFind (
        /*[out,retval]*/ struct Office::IFind * * RHS ) = 0;
      virtual HRESULT __stdcall raw__FindFile (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_FixedDecimal (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FixedDecimal (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FixedDecimalPlaces (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_FixedDecimalPlaces (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_GetCustomListContents (
        /*[in]*/ long ListNum,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_GetCustomListNum (
        /*[in]*/ VARIANT ListArray,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_GetOpenFilename (
        /*[in]*/ VARIANT FileFilter,
        /*[in]*/ VARIANT FilterIndex,
        /*[in]*/ VARIANT Title,
        /*[in]*/ VARIANT ButtonText,
        /*[in]*/ VARIANT MultiSelect,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_GetSaveAsFilename (
        /*[in]*/ VARIANT InitialFilename,
        /*[in]*/ VARIANT FileFilter,
        /*[in]*/ VARIANT FilterIndex,
        /*[in]*/ VARIANT Title,
        /*[in]*/ VARIANT ButtonText,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Goto (
        /*[in]*/ VARIANT Reference = vtMissing,
        /*[in]*/ VARIANT Scroll = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall raw_Help (
        /*[in]*/ VARIANT HelpFile = vtMissing,
        /*[in]*/ VARIANT HelpContextID = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_IgnoreRemoteRequests (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IgnoreRemoteRequests (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_InchesToPoints (
        /*[in]*/ double Inches,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_InputBox (
        /*[in]*/ BSTR Prompt,
        /*[in]*/ VARIANT Title,
        /*[in]*/ VARIANT Default,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[in]*/ VARIANT HelpFile,
        /*[in]*/ VARIANT HelpContextID,
        /*[in]*/ VARIANT Type,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interactive (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Interactive (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_International (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Iteration (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Iteration (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LargeButtons (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeButtons (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_LibraryPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_MacroOptions (
        /*[in]*/ VARIANT Macro = vtMissing,
        /*[in]*/ VARIANT Description = vtMissing,
        /*[in]*/ VARIANT HasMenu = vtMissing,
        /*[in]*/ VARIANT MenuText = vtMissing,
        /*[in]*/ VARIANT HasShortcutKey = vtMissing,
        /*[in]*/ VARIANT ShortcutKey = vtMissing,
        /*[in]*/ VARIANT Category = vtMissing,
        /*[in]*/ VARIANT StatusBar = vtMissing,
        /*[in]*/ VARIANT HelpContextID = vtMissing,
        /*[in]*/ VARIANT HelpFile = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_MailLogoff (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_MailLogon (
        /*[in]*/ VARIANT Name = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DownloadNewMail = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_MailSession (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_MailSystem (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlMailSystem * RHS ) = 0;
      virtual HRESULT __stdcall get_MathCoprocessorAvailable (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_MaxChange (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MaxChange (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MaxIterations (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MaxIterations (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryFree (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryTotal (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryUsed (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MouseAvailable (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_MoveAfterReturn (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MoveAfterReturn (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MoveAfterReturnDirection (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlDirection * RHS ) = 0;
      virtual HRESULT __stdcall put_MoveAfterReturnDirection (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlDirection RHS ) = 0;
      virtual HRESULT __stdcall get_RecentFiles (
        /*[out,retval]*/ struct RecentFiles * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_NextLetter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_NetworkTemplatesPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ODBCErrors (
        /*[out,retval]*/ struct ODBCErrors * * RHS ) = 0;
      virtual HRESULT __stdcall get_ODBCTimeout (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ODBCTimeout (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_OnCalculate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnCalculate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnData (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnData (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnEntry (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnEntry (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_OnKey (
        /*[in]*/ BSTR Key,
        /*[in]*/ VARIANT Procedure = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_OnRepeat (
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR Procedure,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_OnTime (
        /*[in]*/ VARIANT EarliestTime,
        /*[in]*/ BSTR Procedure,
        /*[in]*/ VARIANT LatestTime = vtMissing,
        /*[in]*/ VARIANT Schedule = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_OnUndo (
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR Procedure,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_OnWindow (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnWindow (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OperatingSystem (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_OrganizationName (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PathSeparator (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PreviousSelections (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotTableSelection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PivotTableSelection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PromptForSummaryInfo (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PromptForSummaryInfo (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Quit ( ) = 0;
      virtual HRESULT __stdcall raw_RecordMacro (
        /*[in]*/ VARIANT BasicCode = vtMissing,
        /*[in]*/ VARIANT XlmCode = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_RecordRelative (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ReferenceStyle (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlReferenceStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_ReferenceStyle (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlReferenceStyle RHS ) = 0;
      virtual HRESULT __stdcall get_RegisteredFunctions (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RegisterXLL (
        /*[in]*/ BSTR Filename,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Repeat (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ResetTipWizard (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_RollZoom (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RollZoom (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SaveWorkspace (
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ScreenUpdating (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ScreenUpdating (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_SetDefaultChart (
        /*[in]*/ VARIANT FormatName = vtMissing,
        /*[in]*/ VARIANT Gallery = vtMissing ) = 0;
      virtual HRESULT __stdcall get_SheetsInNewWorkbook (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SheetsInNewWorkbook (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ShowChartTipNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowChartTipNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowChartTipValues (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowChartTipValues (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_StandardFont (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardFont (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_StandardFontSize (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardFontSize (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_StartupPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_StatusBar (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_StatusBar (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TemplatesPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowToolTips (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowToolTips (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultSaveFormat (
        /*[out,retval]*/ enum XlFileFormat * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultSaveFormat (
        /*[in]*/ enum XlFileFormat RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionMenuKey (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionMenuKey (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionMenuKeyAction (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionMenuKeyAction (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionNavigKeys (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionNavigKeys (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Undo (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_UsableHeight (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_UsableWidth (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_UserControl (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UserControl (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UserName (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_UserName (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_VBE (
        /*[out,retval]*/ struct VBIDE::VBE * * RHS ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Volatile (
        /*[in]*/ VARIANT Volatile = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__Wait (
        /*[in]*/ VARIANT Time,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_WindowsForPens (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlWindowState * RHS ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlWindowState RHS ) = 0;
      virtual HRESULT __stdcall get_UILanguage (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_UILanguage (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultSheetDirection (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultSheetDirection (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_CursorMovement (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_CursorMovement (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ControlCharacters (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ControlCharacters (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw__WSFunction (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_EnableEvents (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableEvents (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayInfoWindow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayInfoWindow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Wait (
        /*[in]*/ VARIANT Time,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ExtendList (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ExtendList (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_OLEDBErrors (
        /*[out,retval]*/ struct OLEDBErrors * * RHS ) = 0;
      virtual HRESULT __stdcall raw_GetPhonetic (
        /*[in]*/ VARIANT Text,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_COMAddIns (
        /*[out,retval]*/ struct Office::COMAddIns * * RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultWebOptions (
        /*[out,retval]*/ struct DefaultWebOptions * * RHS ) = 0;
      virtual HRESULT __stdcall get_ProductCode (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_UserLibraryPath (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoPercentEntry (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoPercentEntry (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LanguageSettings (
        /*[out,retval]*/ struct Office::LanguageSettings * * RHS ) = 0;
      virtual HRESULT __stdcall get_Dummy101 (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy12 (
        /*[in]*/ struct PivotTable * p1,
        /*[in]*/ struct PivotTable * p2 ) = 0;
      virtual HRESULT __stdcall get_AnswerWizard (
        /*[out,retval]*/ struct Office::AnswerWizard * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CalculateFull ( ) = 0;
      virtual HRESULT __stdcall raw_FindFile (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_CalculationVersion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowWindowsInTaskbar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowWindowsInTaskbar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FeatureInstall (
        /*[out,retval]*/ enum Office::MsoFeatureInstall * RHS ) = 0;
      virtual HRESULT __stdcall put_FeatureInstall (
        /*[in]*/ enum Office::MsoFeatureInstall RHS ) = 0;
      virtual HRESULT __stdcall get_Ready (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy13 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_FindFormat (
        /*[out,retval]*/ struct CellFormat * * RHS ) = 0;
      virtual HRESULT __stdcall putref_FindFormat (
        /*[in]*/ struct CellFormat * RHS ) = 0;
      virtual HRESULT __stdcall get_ReplaceFormat (
        /*[out,retval]*/ struct CellFormat * * RHS ) = 0;
      virtual HRESULT __stdcall putref_ReplaceFormat (
        /*[in]*/ struct CellFormat * RHS ) = 0;
      virtual HRESULT __stdcall get_UsedObjects (
        /*[out,retval]*/ struct UsedObjects * * RHS ) = 0;
      virtual HRESULT __stdcall get_CalculationState (
        /*[out,retval]*/ enum XlCalculationState * RHS ) = 0;
      virtual HRESULT __stdcall get_CalculationInterruptKey (
        /*[out,retval]*/ enum XlCalculationInterruptKey * RHS ) = 0;
      virtual HRESULT __stdcall put_CalculationInterruptKey (
        /*[in]*/ enum XlCalculationInterruptKey RHS ) = 0;
      virtual HRESULT __stdcall get_Watches (
        /*[out,retval]*/ struct Watches * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayFunctionToolTips (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayFunctionToolTips (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutomationSecurity (
        /*[out,retval]*/ enum Office::MsoAutomationSecurity * RHS ) = 0;
      virtual HRESULT __stdcall put_AutomationSecurity (
        /*[in]*/ enum Office::MsoAutomationSecurity RHS ) = 0;
      virtual HRESULT __stdcall get_FileDialog (
        /*[in]*/ enum Office::MsoFileDialogType fileDialogType,
        /*[out,retval]*/ struct Office::FileDialog * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy14 ( ) = 0;
      virtual HRESULT __stdcall raw_CalculateFullRebuild ( ) = 0;
      virtual HRESULT __stdcall get_DisplayPasteOptions (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayPasteOptions (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayInsertOptions (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayInsertOptions (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_GenerateGetPivotData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_GenerateGetPivotData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoRecover (
        /*[out,retval]*/ struct AutoRecover * * RHS ) = 0;
      virtual HRESULT __stdcall get_Hwnd (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Hinstance (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckAbort (
        /*[in]*/ VARIANT KeepAbort = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ErrorCheckingOptions (
        /*[out,retval]*/ struct ErrorCheckingOptions * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoFormatAsYouTypeReplaceHyperlinks (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoFormatAsYouTypeReplaceHyperlinks (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SmartTagRecognizers (
        /*[out,retval]*/ struct SmartTagRecognizers * * RHS ) = 0;
      virtual HRESULT __stdcall get_NewWorkbook (
        /*[out,retval]*/ struct Office::NewFile * * RHS ) = 0;
      virtual HRESULT __stdcall get_SpellingOptions (
        /*[out,retval]*/ struct SpellingOptions * * RHS ) = 0;
      virtual HRESULT __stdcall get_Speech (
        /*[out,retval]*/ struct Speech * * RHS ) = 0;
      virtual HRESULT __stdcall get_MapPaperSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MapPaperSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowStartupDialog (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowStartupDialog (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DecimalSeparator (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_DecimalSeparator (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ThousandsSeparator (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ThousandsSeparator (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_UseSystemSeparators (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UseSystemSeparators (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ThisCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_RTD (
        /*[out,retval]*/ struct RTD * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayDocumentActionTaskPane (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayDocumentActionTaskPane (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_DisplayXMLSourcePane (
        /*[in]*/ VARIANT XmlMap = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ArbitraryXMLSupportAvailable (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Support (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ long ID,
        /*[in]*/ VARIANT arg,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208d9-0000-0000-c000-000000000046"))
_Global : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetThisWorkbook))
    _WorkbookPtr ThisWorkbook[];
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetCharts))
    SheetsPtr Charts;
    __declspec(property(get=GetSheets))
    SheetsPtr Sheets;
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActivePrinter,put=PutActivePrinter))
    _bstr_t ActivePrinter[];
    __declspec(property(get=GetActiveWorkbook))
    _WorkbookPtr ActiveWorkbook;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetToolbars))
    ToolbarsPtr Toolbars;
    __declspec(property(get=GetWorksheetFunction))
    WorksheetFunctionPtr WorksheetFunction;
    __declspec(property(get=GetWorksheets))
    SheetsPtr Worksheets;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _ApplicationPtr Parent;
    __declspec(property(get=GetDDEAppReturnCode))
    long DDEAppReturnCode[];
    __declspec(property(get=GetWorkbooks))
    WorkbooksPtr Workbooks;
    __declspec(property(get=GetActiveDialog))
    DialogSheetPtr ActiveDialog;
    __declspec(property(get=GetActiveMenuBar))
    MenuBarPtr ActiveMenuBar;
    __declspec(property(get=GetActiveWindow))
    WindowPtr ActiveWindow;
    __declspec(property(get=GetExcel4MacroSheets))
    SheetsPtr Excel4MacroSheets;
    __declspec(property(get=GetExcel4IntlMacroSheets))
    SheetsPtr Excel4IntlMacroSheets;
    __declspec(property(get=GetModules))
    ModulesPtr Modules;
    __declspec(property(get=GetDialogSheets))
    SheetsPtr DialogSheets;
    __declspec(property(get=GetMenuBars))
    MenuBarsPtr MenuBars;
    __declspec(property(get=GetShortcutMenus))
    MenuPtr ShortcutMenus[];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _ApplicationPtr GetParent ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    DialogSheetPtr GetActiveDialog ( );
    MenuBarPtr GetActiveMenuBar ( );
    _bstr_t GetActivePrinter (
        long lcid = 0 );
    void PutActivePrinter (
        long lcid,
        _bstr_t RHS );
    IDispatchPtr GetActiveSheet ( );
    WindowPtr GetActiveWindow ( );
    _WorkbookPtr GetActiveWorkbook ( );
    AddInsPtr GetAddIns ( );
    Office::AssistantPtr GetAssistant ( );
    HRESULT Calculate (
        long lcid = 0 );
    RangePtr GetCells ( );
    SheetsPtr GetCharts ( );
    RangePtr GetColumns ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    long GetDDEAppReturnCode (
        long lcid = 0 );
    HRESULT DDEExecute (
        long Channel,
        _bstr_t String,
        long lcid = 0 );
    long DDEInitiate (
        _bstr_t App,
        _bstr_t Topic,
        long lcid = 0 );
    HRESULT DDEPoke (
        long Channel,
        const _variant_t & Item,
        const _variant_t & Data,
        long lcid = 0 );
    _variant_t DDERequest (
        long Channel,
        _bstr_t Item,
        long lcid = 0 );
    HRESULT DDETerminate (
        long Channel,
        long lcid = 0 );
    SheetsPtr GetDialogSheets ( );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t ExecuteExcel4Macro (
        _bstr_t String,
        long lcid = 0 );
    RangePtr Intersect (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    MenuBarsPtr GetMenuBars ( );
    ModulesPtr GetModules ( );
    NamesPtr GetNames ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t _Run2 (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    IDispatchPtr GetSelection (
        long lcid = 0 );
    HRESULT SendKeys (
        const _variant_t & Keys,
        const _variant_t & Wait = vtMissing,
        long lcid = 0 );
    SheetsPtr GetSheets ( );
    MenuPtr GetShortcutMenus (
        long Index );
    _WorkbookPtr GetThisWorkbook (
        long lcid = 0 );
    ToolbarsPtr GetToolbars ( );
    RangePtr Union (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    WindowsPtr GetWindows ( );
    WorkbooksPtr GetWorkbooks ( );
    WorksheetFunctionPtr GetWorksheetFunction ( );
    SheetsPtr GetWorksheets ( );
    SheetsPtr GetExcel4IntlMacroSheets ( );
    SheetsPtr GetExcel4MacroSheets ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveChart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveDialog (
        /*[out,retval]*/ struct DialogSheet * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveMenuBar (
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActivePrinter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ActivePrinter (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveWorkbook (
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ struct AddIns * * RHS ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ struct Office::Assistant * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Charts (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_DDEAppReturnCode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDEExecute (
        /*[in]*/ long Channel,
        /*[in]*/ BSTR String,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DDEInitiate (
        /*[in]*/ BSTR App,
        /*[in]*/ BSTR Topic,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDEPoke (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT Item,
        /*[in]*/ VARIANT Data,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DDERequest (
        /*[in]*/ long Channel,
        /*[in]*/ BSTR Item,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDETerminate (
        /*[in]*/ long Channel,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DialogSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ExecuteExcel4Macro (
        /*[in]*/ BSTR String,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Intersect (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_MenuBars (
        /*[out,retval]*/ struct MenuBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_Modules (
        /*[out,retval]*/ struct Modules * * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Cell1,
        /*[in]*/ VARIANT Cell2,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ VARIANT Macro,
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Run2 (
        /*[in]*/ VARIANT Macro,
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendKeys (
        /*[in]*/ VARIANT Keys,
        /*[in]*/ VARIANT Wait = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Sheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShortcutMenus (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_ThisWorkbook (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_Toolbars (
        /*[out,retval]*/ struct Toolbars * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Union (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct Windows * * RHS ) = 0;
      virtual HRESULT __stdcall get_Workbooks (
        /*[out,retval]*/ struct Workbooks * * RHS ) = 0;
      virtual HRESULT __stdcall get_WorksheetFunction (
        /*[out,retval]*/ struct WorksheetFunction * * RHS ) = 0;
      virtual HRESULT __stdcall get_Worksheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4IntlMacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4MacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
};

struct __declspec(uuid("00020818-0000-0000-c000-000000000046"))
OLEObject;
    // [ default ] dispinterface _OLEObject
    // [ default, source ] dispinterface OLEObjectEvents

struct __declspec(uuid("000208a3-0001-0000-c000-000000000046"))
IOLEObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL RHS );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t RHS );
    _OLEObjectPtr Add (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy30 ( ) = 0;
      virtual HRESULT __stdcall get_AutoLoad (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoLoad (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy32 ( ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual void __stdcall _Dummy34 ( ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual void __stdcall _Dummy37 ( ) = 0;
      virtual void __stdcall _Dummy38 ( ) = 0;
      virtual void __stdcall _Dummy39 ( ) = 0;
      virtual void __stdcall _Dummy40 ( ) = 0;
      virtual void __stdcall _Dummy41 ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT ClassType,
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT Link,
        /*[in]*/ VARIANT DisplayAsIcon,
        /*[in]*/ VARIANT IconFileName,
        /*[in]*/ VARIANT IconIndex,
        /*[in]*/ VARIANT IconLabel,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[in]*/ VARIANT Width,
        /*[in]*/ VARIANT Height,
        /*[out,retval]*/ struct _OLEObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000c036e-0000-0000-c000-000000000046"))
DiagramNodes : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    DiagramNodePtr Item (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DiagramNode * * ppdn ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppParent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pcDiagramNodes ) = 0;
};

struct __declspec(uuid("0002446f-0001-0000-c000-000000000046"))
IDiagram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNodes))
    DiagramNodesPtr Nodes;
    __declspec(property(get=GetType))
    enum Office::MsoDiagramType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DiagramNodesPtr GetNodes ( );
    enum Office::MsoDiagramType GetType ( );
    enum Office::MsoTriState GetAutoLayout ( );
    void PutAutoLayout (
        enum Office::MsoTriState RHS );
    enum Office::MsoTriState GetReverse ( );
    void PutReverse (
        enum Office::MsoTriState RHS );
    enum Office::MsoTriState GetAutoFormat ( );
    void PutAutoFormat (
        enum Office::MsoTriState RHS );
    HRESULT Convert (
        enum Office::MsoDiagramType Type );
    HRESULT FitText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct DiagramNodes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoDiagramType * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoLayout (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoLayout (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Reverse (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_Reverse (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_AutoFormat (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoFormat (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall raw_Convert (
        /*[in]*/ enum Office::MsoDiagramType Type ) = 0;
      virtual HRESULT __stdcall raw_FitText ( ) = 0;
};

struct __declspec(uuid("000c036f-0000-0000-c000-000000000046"))
DiagramNodeChildren : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetFirstChild))
    DiagramNodePtr FirstChild;
    __declspec(property(get=GetLastChild))
    DiagramNodePtr LastChild;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    DiagramNodePtr Item (
        const _variant_t & Index );
    DiagramNodePtr AddNode (
        const _variant_t & Index,
        enum Office::MsoDiagramNodeType nodeType );
    HRESULT SelectAll ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    DiagramNodePtr GetFirstChild ( );
    DiagramNodePtr GetLastChild ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DiagramNode * * ppNode ) = 0;
      virtual HRESULT __stdcall raw_AddNode (
        /*[in]*/ VARIANT Index,
        /*[in]*/ enum Office::MsoDiagramNodeType nodeType,
        /*[out,retval]*/ struct DiagramNode * * ppNewNode ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppParent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pcDiagramNodes ) = 0;
      virtual HRESULT __stdcall get_FirstChild (
        /*[out,retval]*/ struct DiagramNode * * pFirst ) = 0;
      virtual HRESULT __stdcall get_LastChild (
        /*[out,retval]*/ struct DiagramNode * * pLast ) = 0;
};

struct __declspec(uuid("000c0370-0000-0000-c000-000000000046"))
DiagramNode : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChildren))
    DiagramNodeChildrenPtr Children;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetRoot))
    DiagramNodePtr Root;
    __declspec(property(get=GetDiagram))
    Office::IMsoDiagramPtr Diagram;
    __declspec(property(get=GetTextShape))
    ShapePtr TextShape;

    //
    // Wrapper methods for error-handling
    //

    DiagramNodePtr AddNode (
        enum Office::MsoRelativeNodePosition pos,
        enum Office::MsoDiagramNodeType nodeType );
    HRESULT Delete ( );
    HRESULT MoveNode (
        struct DiagramNode * pTargetNode,
        enum Office::MsoRelativeNodePosition pos );
    HRESULT ReplaceNode (
        struct DiagramNode * pTargetNode );
    HRESULT SwapNode (
        struct DiagramNode * pTargetNode,
        VARIANT_BOOL swapChildren );
    DiagramNodePtr CloneNode (
        VARIANT_BOOL copyChildren,
        struct DiagramNode * pTargetNode,
        enum Office::MsoRelativeNodePosition pos );
    HRESULT TransferChildren (
        struct DiagramNode * pReceivingNode );
    DiagramNodePtr NextNode ( );
    DiagramNodePtr PrevNode ( );
    IDispatchPtr GetParent ( );
    DiagramNodeChildrenPtr GetChildren ( );
    ShapePtr GetShape ( );
    DiagramNodePtr GetRoot ( );
    Office::IMsoDiagramPtr GetDiagram ( );
    enum Office::MsoOrgChartLayoutType GetLayout ( );
    void PutLayout (
        enum Office::MsoOrgChartLayoutType pdgmType );
    ShapePtr GetTextShape ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddNode (
        /*[in]*/ enum Office::MsoRelativeNodePosition pos,
        /*[in]*/ enum Office::MsoDiagramNodeType nodeType,
        /*[out,retval]*/ struct DiagramNode * * NewNode ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_MoveNode (
        /*[in]*/ struct DiagramNode * pTargetNode,
        /*[in]*/ enum Office::MsoRelativeNodePosition pos ) = 0;
      virtual HRESULT __stdcall raw_ReplaceNode (
        /*[in]*/ struct DiagramNode * pTargetNode ) = 0;
      virtual HRESULT __stdcall raw_SwapNode (
        /*[in]*/ struct DiagramNode * pTargetNode,
        /*[in]*/ VARIANT_BOOL swapChildren ) = 0;
      virtual HRESULT __stdcall raw_CloneNode (
        /*[in]*/ VARIANT_BOOL copyChildren,
        /*[in]*/ struct DiagramNode * pTargetNode,
        /*[in]*/ enum Office::MsoRelativeNodePosition pos,
        /*[out,retval]*/ struct DiagramNode * * ppNode ) = 0;
      virtual HRESULT __stdcall raw_TransferChildren (
        /*[in]*/ struct DiagramNode * pReceivingNode ) = 0;
      virtual HRESULT __stdcall raw_NextNode (
        /*[out,retval]*/ struct DiagramNode * * ppNextNode ) = 0;
      virtual HRESULT __stdcall raw_PrevNode (
        /*[out,retval]*/ struct DiagramNode * * ppPrevNode ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppParent ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct DiagramNodeChildren * * ppChildren ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * ppShape ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct DiagramNode * * ppRoot ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct Office::IMsoDiagram * * ppDiagram ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum Office::MsoOrgChartLayoutType * pdgmType ) = 0;
      virtual HRESULT __stdcall put_Layout (
        /*[in]*/ enum Office::MsoOrgChartLayoutType pdgmType ) = 0;
      virtual HRESULT __stdcall get_TextShape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
};

struct __declspec(uuid("00024439-0001-0000-c000-000000000046"))
IShape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCanvasItems))
    Office::CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum XlPlacement Placement;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetDrawingObject))
    IDispatchPtr DrawingObject;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetControlFormat))
    ControlFormatPtr ControlFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetFormControlType))
    enum XlFormControl FormControlType;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetID))
    long ID;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    ShapePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType RHS );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float RHS );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float RHS );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float RHS );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float RHS );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState RHS );
    float GetWidth ( );
    void PutWidth (
        float RHS );
    long GetZOrderPosition ( );
    HyperlinkPtr GetHyperlink ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode RHS );
    IDispatchPtr GetDrawingObject ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    RangePtr GetTopLeftCell ( );
    RangePtr GetBottomRightCell ( );
    enum XlPlacement GetPlacement ( );
    void PutPlacement (
        enum XlPlacement RHS );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT CopyPicture (
        const _variant_t & Appearance = vtMissing,
        const _variant_t & Format = vtMissing );
    ControlFormatPtr GetControlFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    OLEFormatPtr GetOLEFormat ( );
    enum XlFormControl GetFormControlType ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t RHS );
    Office::ScriptPtr GetScript ( );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagram ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    Office::CanvasShapesPtr GetCanvasItems ( );
    long GetID ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum Office::MsoFlipCmd FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ VARIANT Scale = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ VARIANT Scale = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ enum Office::MsoAutoShapeType * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ enum Office::MsoAutoShapeType RHS ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShapeType * RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlink (
        /*[out,retval]*/ struct Hyperlink * * RHS ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ enum Office::MsoBlackWhiteMode * RHS ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ enum Office::MsoBlackWhiteMode RHS ) = 0;
      virtual HRESULT __stdcall get_DrawingObject (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ enum XlPlacement * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ enum XlPlacement RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ VARIANT Appearance = vtMissing,
        /*[in]*/ VARIANT Format = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ControlFormat (
        /*[out,retval]*/ struct ControlFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkFormat (
        /*[out,retval]*/ struct LinkFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_OLEFormat (
        /*[out,retval]*/ struct OLEFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_FormControlType (
        /*[out,retval]*/ enum XlFormControl * RHS ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Script (
        /*[out,retval]*/ struct Office::Script * * RHS ) = 0;
      virtual HRESULT __stdcall get_DiagramNode (
        /*[out,retval]*/ struct DiagramNode * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasDiagramNode (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct Diagram * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasDiagram (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Child (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_ParentGroup (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_CanvasItems (
        /*[out,retval]*/ struct Office::CanvasShapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropRight (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropBottom (
        /*[in]*/ float Increment ) = 0;
};

struct __declspec(uuid("0002443b-0001-0000-c000-000000000046"))
IShapeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetCanvasItems))
    Office::CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Align (
        enum Office::MsoAlignCmd AlignCmd,
        enum Office::MsoTriState RelativeTo );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Distribute (
        enum Office::MsoDistributeCmd DistributeCmd,
        enum Office::MsoTriState RelativeTo );
    ShapeRangePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    ShapePtr Group ( );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    ShapePtr Regroup ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType RHS );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float RHS );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float RHS );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float RHS );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float RHS );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState RHS );
    float GetWidth ( );
    void PutWidth (
        float RHS );
    long GetZOrderPosition ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode RHS );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t RHS );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagram ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    Office::CanvasShapesPtr GetCanvasItems ( );
    long GetID ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Align (
        /*[in]*/ enum Office::MsoAlignCmd AlignCmd,
        /*[in]*/ enum Office::MsoTriState RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Distribute (
        /*[in]*/ enum Office::MsoDistributeCmd DistributeCmd,
        /*[in]*/ enum Office::MsoTriState RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum Office::MsoFlipCmd FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_Regroup (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ VARIANT Scale = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ VARIANT Scale = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ enum Office::MsoAutoShapeType * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ enum Office::MsoAutoShapeType RHS ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShapeType * RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ enum Office::MsoBlackWhiteMode * RHS ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ enum Office::MsoBlackWhiteMode RHS ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DiagramNode (
        /*[out,retval]*/ struct DiagramNode * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasDiagramNode (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct Diagram * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasDiagram (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Child (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_ParentGroup (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_CanvasItems (
        /*[out,retval]*/ struct Office::CanvasShapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropRight (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropBottom (
        /*[in]*/ float Increment ) = 0;
};

//
// Function implementation mapping
//


#include "excel.tli"
} // namespace Excel

#pragma pack(pop)
