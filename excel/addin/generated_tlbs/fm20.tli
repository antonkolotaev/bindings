// Created by Microsoft (R) C/C++ Compiler Version 15.00.21022.08 (953fa0e5).
//
// Wrapper implementations for Win32 type library C:\\Windows\\System32\\fm20.dll
// compiler-generated file created 10/28/10 at 15:55:36 - DO NOT EDIT!


//
// dispinterface Font wrapper method implementations
//

#pragma implementation_key(1)
inline _bstr_t MSForms::Font::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_propget(this, 0x0, VT_BSTR, (void*)&_result);
    return _bstr_t(_result, false);
}

#pragma implementation_key(2)
inline void MSForms::Font::PutName ( _bstr_t _val ) {
    _com_dispatch_propput(this, 0x0, VT_BSTR, (BSTR)_val);
}

#pragma implementation_key(3)
inline CURRENCY MSForms::Font::GetSize ( ) {
    CURRENCY _result;
    _com_dispatch_propget(this, 0x2, VT_CY, (void*)&_result);
    return _result;
}

#pragma implementation_key(4)
inline void MSForms::Font::PutSize ( const CURRENCY & _val ) {
    _com_dispatch_propput(this, 0x2, VT_CY, &_val);
}

#pragma implementation_key(5)
inline VARIANT_BOOL MSForms::Font::GetBold ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_propget(this, 0x3, VT_BOOL, (void*)&_result);
    return _result;
}

#pragma implementation_key(6)
inline void MSForms::Font::PutBold ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0x3, VT_BOOL, _val);
}

#pragma implementation_key(7)
inline VARIANT_BOOL MSForms::Font::GetItalic ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_propget(this, 0x4, VT_BOOL, (void*)&_result);
    return _result;
}

#pragma implementation_key(8)
inline void MSForms::Font::PutItalic ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0x4, VT_BOOL, _val);
}

#pragma implementation_key(9)
inline VARIANT_BOOL MSForms::Font::GetUnderline ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_propget(this, 0x5, VT_BOOL, (void*)&_result);
    return _result;
}

#pragma implementation_key(10)
inline void MSForms::Font::PutUnderline ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0x5, VT_BOOL, _val);
}

#pragma implementation_key(11)
inline VARIANT_BOOL MSForms::Font::GetStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_propget(this, 0x6, VT_BOOL, (void*)&_result);
    return _result;
}

#pragma implementation_key(12)
inline void MSForms::Font::PutStrikethrough ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0x6, VT_BOOL, _val);
}

#pragma implementation_key(13)
inline short MSForms::Font::GetWeight ( ) {
    short _result = 0;
    _com_dispatch_propget(this, 0x7, VT_I2, (void*)&_result);
    return _result;
}

#pragma implementation_key(14)
inline void MSForms::Font::PutWeight ( short _val ) {
    _com_dispatch_propput(this, 0x7, VT_I2, _val);
}

#pragma implementation_key(15)
inline short MSForms::Font::GetCharset ( ) {
    short _result = 0;
    _com_dispatch_propget(this, 0x8, VT_I2, (void*)&_result);
    return _result;
}

#pragma implementation_key(16)
inline void MSForms::Font::PutCharset ( short _val ) {
    _com_dispatch_propput(this, 0x8, VT_I2, _val);
}

//
// interface IDataAutoWrapper wrapper method implementations
//

#pragma implementation_key(17)
inline HRESULT MSForms::IDataAutoWrapper::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(18)
inline VARIANT_BOOL MSForms::IDataAutoWrapper::GetFormat ( const _variant_t & Format ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetFormat(Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(19)
inline _bstr_t MSForms::IDataAutoWrapper::GetText ( const _variant_t & Format ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetText(Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(20)
inline HRESULT MSForms::IDataAutoWrapper::SetText ( _bstr_t Text, const _variant_t & Format ) {
    HRESULT _hr = raw_SetText(Text, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(21)
inline HRESULT MSForms::IDataAutoWrapper::PutInClipboard ( ) {
    HRESULT _hr = raw_PutInClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(22)
inline HRESULT MSForms::IDataAutoWrapper::GetFromClipboard ( ) {
    HRESULT _hr = raw_GetFromClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(23)
inline enum MSForms::fmDropEffect MSForms::IDataAutoWrapper::StartDrag ( const _variant_t & OKEffect ) {
    enum fmDropEffect _result;
    HRESULT _hr = raw_StartDrag(OKEffect, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IReturnInteger wrapper method implementations
//

#pragma implementation_key(24)
inline void MSForms::IReturnInteger::PutValue ( int Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(25)
inline int MSForms::IReturnInteger::GetValue ( ) {
    int _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IReturnBoolean wrapper method implementations
//

#pragma implementation_key(26)
inline void MSForms::IReturnBoolean::PutValue ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(27)
inline VARIANT_BOOL MSForms::IReturnBoolean::GetValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IReturnString wrapper method implementations
//

#pragma implementation_key(28)
inline void MSForms::IReturnString::PutValue ( _bstr_t Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(29)
inline _bstr_t MSForms::IReturnString::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IReturnSingle wrapper method implementations
//

#pragma implementation_key(30)
inline void MSForms::IReturnSingle::PutValue ( float Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(31)
inline float MSForms::IReturnSingle::GetValue ( ) {
    float _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IReturnEffect wrapper method implementations
//

#pragma implementation_key(32)
inline void MSForms::IReturnEffect::PutValue ( enum fmDropEffect Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(33)
inline enum MSForms::fmDropEffect MSForms::IReturnEffect::GetValue ( ) {
    enum fmDropEffect _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IControl wrapper method implementations
//

#pragma implementation_key(34)
inline void MSForms::IControl::PutCancel ( VARIANT_BOOL Cancel ) {
    HRESULT _hr = put_Cancel(Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(35)
inline VARIANT_BOOL MSForms::IControl::GetCancel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Cancel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(36)
inline void MSForms::IControl::PutControlSource ( _bstr_t ControlSource ) {
    HRESULT _hr = put_ControlSource(ControlSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(37)
inline _bstr_t MSForms::IControl::GetControlSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ControlSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(38)
inline void MSForms::IControl::PutControlTipText ( _bstr_t ControlTipText ) {
    HRESULT _hr = put_ControlTipText(ControlTipText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(39)
inline _bstr_t MSForms::IControl::GetControlTipText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ControlTipText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(40)
inline void MSForms::IControl::PutDefault ( VARIANT_BOOL Default ) {
    HRESULT _hr = put_Default(Default);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(41)
inline VARIANT_BOOL MSForms::IControl::GetDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(42)
inline HRESULT MSForms::IControl::_SetHeight ( long Height ) {
    HRESULT _hr = raw__SetHeight(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(43)
inline HRESULT MSForms::IControl::_GetHeight ( long * Height ) {
    HRESULT _hr = raw__GetHeight(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(44)
inline void MSForms::IControl::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(45)
inline float MSForms::IControl::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(46)
inline void MSForms::IControl::PutHelpContextID ( long HelpContextID ) {
    HRESULT _hr = put_HelpContextID(HelpContextID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(47)
inline long MSForms::IControl::GetHelpContextID ( ) {
    long _result = 0;
    HRESULT _hr = get_HelpContextID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(48)
inline void MSForms::IControl::PutInSelection ( VARIANT_BOOL InSelection ) {
    HRESULT _hr = put_InSelection(InSelection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(49)
inline VARIANT_BOOL MSForms::IControl::GetInSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(50)
inline enum MSForms::fmLayoutEffect MSForms::IControl::GetLayoutEffect ( ) {
    enum fmLayoutEffect _result;
    HRESULT _hr = get_LayoutEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(51)
inline HRESULT MSForms::IControl::_SetLeft ( long Left ) {
    HRESULT _hr = raw__SetLeft(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(52)
inline HRESULT MSForms::IControl::_GetLeft ( long * Left ) {
    HRESULT _hr = raw__GetLeft(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(53)
inline void MSForms::IControl::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(54)
inline float MSForms::IControl::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(55)
inline void MSForms::IControl::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(56)
inline _bstr_t MSForms::IControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(57)
inline HRESULT MSForms::IControl::_GetOldHeight ( long * OldHeight ) {
    HRESULT _hr = raw__GetOldHeight(OldHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(58)
inline float MSForms::IControl::GetOldHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_OldHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(59)
inline HRESULT MSForms::IControl::_GetOldLeft ( long * OldLeft ) {
    HRESULT _hr = raw__GetOldLeft(OldLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(60)
inline float MSForms::IControl::GetOldLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_OldLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(61)
inline HRESULT MSForms::IControl::_GetOldTop ( long * OldTop ) {
    HRESULT _hr = raw__GetOldTop(OldTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(62)
inline float MSForms::IControl::GetOldTop ( ) {
    float _result = 0;
    HRESULT _hr = get_OldTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(63)
inline HRESULT MSForms::IControl::_GetOldWidth ( long * OldWidth ) {
    HRESULT _hr = raw__GetOldWidth(OldWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(64)
inline float MSForms::IControl::GetOldWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_OldWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(65)
inline IDispatchPtr MSForms::IControl::GetObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(66)
inline IDispatchPtr MSForms::IControl::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(67)
inline void MSForms::IControl::PutRowSource ( _bstr_t RowSource ) {
    HRESULT _hr = put_RowSource(RowSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(68)
inline _bstr_t MSForms::IControl::GetRowSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RowSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(69)
inline void MSForms::IControl::PutRowSourceType ( short RowSourceType ) {
    HRESULT _hr = put_RowSourceType(RowSourceType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(70)
inline short MSForms::IControl::GetRowSourceType ( ) {
    short _result = 0;
    HRESULT _hr = get_RowSourceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(71)
inline void MSForms::IControl::PutTabIndex ( short TabIndex ) {
    HRESULT _hr = put_TabIndex(TabIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(72)
inline short MSForms::IControl::GetTabIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_TabIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(73)
inline void MSForms::IControl::PutTabStop ( VARIANT_BOOL TabStop ) {
    HRESULT _hr = put_TabStop(TabStop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(74)
inline VARIANT_BOOL MSForms::IControl::GetTabStop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TabStop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(75)
inline void MSForms::IControl::PutTag ( _bstr_t Tag ) {
    HRESULT _hr = put_Tag(Tag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(76)
inline _bstr_t MSForms::IControl::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(77)
inline HRESULT MSForms::IControl::_SetTop ( long Top ) {
    HRESULT _hr = raw__SetTop(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(78)
inline HRESULT MSForms::IControl::_GetTop ( long * Top ) {
    HRESULT _hr = raw__GetTop(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(79)
inline void MSForms::IControl::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(80)
inline float MSForms::IControl::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(81)
inline void MSForms::IControl::PutBoundValue ( VARIANT * BoundValue ) {
    HRESULT _hr = put_BoundValue(BoundValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(82)
inline _variant_t MSForms::IControl::GetBoundValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BoundValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(83)
inline void MSForms::IControl::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(84)
inline VARIANT_BOOL MSForms::IControl::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(85)
inline HRESULT MSForms::IControl::_SetWidth ( long Width ) {
    HRESULT _hr = raw__SetWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(86)
inline HRESULT MSForms::IControl::_GetWidth ( long * Width ) {
    HRESULT _hr = raw__GetWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(87)
inline void MSForms::IControl::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(88)
inline float MSForms::IControl::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(89)
inline HRESULT MSForms::IControl::Move ( const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height, const _variant_t & Layout ) {
    HRESULT _hr = raw_Move(Left, Top, Width, Height, Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(90)
inline HRESULT MSForms::IControl::ZOrder ( const _variant_t & zPosition ) {
    HRESULT _hr = raw_ZOrder(zPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(91)
inline HRESULT MSForms::IControl::Select ( VARIANT_BOOL SelectInGroup ) {
    HRESULT _hr = raw_Select(SelectInGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(92)
inline HRESULT MSForms::IControl::SetFocus ( ) {
    HRESULT _hr = raw_SetFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(93)
inline int MSForms::IControl::_GethWnd ( ) {
    int _result = 0;
    HRESULT _hr = raw__GethWnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(94)
inline long MSForms::IControl::_GetID ( ) {
    long _result = 0;
    HRESULT _hr = raw__GetID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(95)
inline HRESULT MSForms::IControl::_Move ( long Left, long Top, long Width, long Height ) {
    HRESULT _hr = raw__Move(Left, Top, Width, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(96)
inline HRESULT MSForms::IControl::_ZOrder ( enum fmZOrder zPosition ) {
    HRESULT _hr = raw__ZOrder(zPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface ControlEvents wrapper method implementations
//

#pragma implementation_key(97)
inline HRESULT MSForms::ControlEvents::Enter ( ) {
    return _com_dispatch_method(this, 0x80018202, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(98)
inline HRESULT MSForms::ControlEvents::Exit ( struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, 0x80018203, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cancel);
}

#pragma implementation_key(99)
inline HRESULT MSForms::ControlEvents::BeforeUpdate ( struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, 0x80018201, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cancel);
}

#pragma implementation_key(100)
inline HRESULT MSForms::ControlEvents::AfterUpdate ( ) {
    return _com_dispatch_method(this, 0x80018200, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface Controls wrapper method implementations
//

#pragma implementation_key(101)
inline long MSForms::Controls::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(102)
inline IUnknownPtr MSForms::Controls::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(103)
inline IDispatchPtr MSForms::Controls::Item ( const _variant_t & varg ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(varg, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(104)
inline HRESULT MSForms::Controls::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(105)
inline HRESULT MSForms::Controls::_Move ( long cx, long cy ) {
    HRESULT _hr = raw__Move(cx, cy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(106)
inline HRESULT MSForms::Controls::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(107)
inline MSForms::IControlPtr MSForms::Controls::_AddByClass ( long * clsid ) {
    struct IControl * _result = 0;
    HRESULT _hr = raw__AddByClass(clsid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IControlPtr(_result, false);
}

#pragma implementation_key(108)
inline HRESULT MSForms::Controls::AlignToGrid ( ) {
    HRESULT _hr = raw_AlignToGrid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(109)
inline HRESULT MSForms::Controls::BringForward ( ) {
    HRESULT _hr = raw_BringForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(110)
inline HRESULT MSForms::Controls::BringToFront ( ) {
    HRESULT _hr = raw_BringToFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(111)
inline HRESULT MSForms::Controls::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(112)
inline HRESULT MSForms::Controls::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(113)
inline IUnknownPtr MSForms::Controls::Enum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(114)
inline MSForms::IControlPtr MSForms::Controls::_GetItemByIndex ( long lIndex ) {
    struct IControl * _result = 0;
    HRESULT _hr = raw__GetItemByIndex(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IControlPtr(_result, false);
}

#pragma implementation_key(115)
inline MSForms::IControlPtr MSForms::Controls::_GetItemByName ( _bstr_t pstr ) {
    struct IControl * _result = 0;
    HRESULT _hr = raw__GetItemByName(pstr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IControlPtr(_result, false);
}

#pragma implementation_key(116)
inline MSForms::IControlPtr MSForms::Controls::_GetItemByID ( long ID ) {
    struct IControl * _result = 0;
    HRESULT _hr = raw__GetItemByID(ID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IControlPtr(_result, false);
}

#pragma implementation_key(117)
inline HRESULT MSForms::Controls::SendBackward ( ) {
    HRESULT _hr = raw_SendBackward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(118)
inline HRESULT MSForms::Controls::SendToBack ( ) {
    HRESULT _hr = raw_SendToBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(119)
inline HRESULT MSForms::Controls::Move ( float cx, float cy ) {
    HRESULT _hr = raw_Move(cx, cy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(120)
inline MSForms::IControlPtr MSForms::Controls::Add ( _bstr_t bstrProgID, const _variant_t & Name, const _variant_t & Visible ) {
    struct IControl * _result = 0;
    HRESULT _hr = raw_Add(bstrProgID, Name, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IControlPtr(_result, false);
}

#pragma implementation_key(121)
inline HRESULT MSForms::Controls::Remove ( const _variant_t & varg ) {
    HRESULT _hr = raw_Remove(varg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IOptionFrame wrapper method implementations
//

#pragma implementation_key(122)
inline MSForms::IControlPtr MSForms::IOptionFrame::GetActiveControl ( ) {
    struct IControl * _result = 0;
    HRESULT _hr = get_ActiveControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IControlPtr(_result, false);
}

#pragma implementation_key(123)
inline void MSForms::IOptionFrame::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(124)
inline MSForms::OLE_COLOR MSForms::IOptionFrame::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(125)
inline void MSForms::IOptionFrame::PutBorderColor ( OLE_COLOR BorderColor ) {
    HRESULT _hr = put_BorderColor(BorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(126)
inline MSForms::OLE_COLOR MSForms::IOptionFrame::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(127)
inline void MSForms::IOptionFrame::PutBorderStyle ( enum fmBorderStyle BorderStyle ) {
    HRESULT _hr = put_BorderStyle(BorderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(128)
inline enum MSForms::fmBorderStyle MSForms::IOptionFrame::GetBorderStyle ( ) {
    enum fmBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(129)
inline VARIANT_BOOL MSForms::IOptionFrame::GetCanPaste ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanPaste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(130)
inline VARIANT_BOOL MSForms::IOptionFrame::GetCanRedo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanRedo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(131)
inline VARIANT_BOOL MSForms::IOptionFrame::GetCanUndo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanUndo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(132)
inline void MSForms::IOptionFrame::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(133)
inline _bstr_t MSForms::IOptionFrame::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(134)
inline MSForms::ControlsPtr MSForms::IOptionFrame::GetControls ( ) {
    struct Controls * _result = 0;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ControlsPtr(_result, false);
}

#pragma implementation_key(135)
inline void MSForms::IOptionFrame::PutCycle ( enum fmCycle Cycle ) {
    HRESULT _hr = put_Cycle(Cycle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(136)
inline enum MSForms::fmCycle MSForms::IOptionFrame::GetCycle ( ) {
    enum fmCycle _result;
    HRESULT _hr = get_Cycle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(137)
inline void MSForms::IOptionFrame::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(138)
inline VARIANT_BOOL MSForms::IOptionFrame::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(139)
inline void MSForms::IOptionFrame::Put_Font_Reserved ( struct Font * _arg1 ) {
    HRESULT _hr = put__Font_Reserved(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(140)
inline void MSForms::IOptionFrame::PutRefFont ( struct Font * Font ) {
    HRESULT _hr = putref_Font(Font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(141)
inline MSForms::FontPtr MSForms::IOptionFrame::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(142)
inline void MSForms::IOptionFrame::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(143)
inline MSForms::OLE_COLOR MSForms::IOptionFrame::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(144)
inline HRESULT MSForms::IOptionFrame::_GetInsideHeight ( long * InsideHeight ) {
    HRESULT _hr = raw__GetInsideHeight(InsideHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(145)
inline float MSForms::IOptionFrame::GetInsideHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_InsideHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(146)
inline HRESULT MSForms::IOptionFrame::_GetInsideWidth ( long * InsideWidth ) {
    HRESULT _hr = raw__GetInsideWidth(InsideWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(147)
inline float MSForms::IOptionFrame::GetInsideWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_InsideWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(148)
inline void MSForms::IOptionFrame::PutKeepScrollBarsVisible ( enum fmScrollBars ScrollBars ) {
    HRESULT _hr = put_KeepScrollBarsVisible(ScrollBars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(149)
inline enum MSForms::fmScrollBars MSForms::IOptionFrame::GetKeepScrollBarsVisible ( ) {
    enum fmScrollBars _result;
    HRESULT _hr = get_KeepScrollBarsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(150)
inline void MSForms::IOptionFrame::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(151)
inline void MSForms::IOptionFrame::PutRefMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = putref_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(152)
inline PicturePtr MSForms::IOptionFrame::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(153)
inline void MSForms::IOptionFrame::PutMousePointer ( enum fmMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(154)
inline enum MSForms::fmMousePointer MSForms::IOptionFrame::GetMousePointer ( ) {
    enum fmMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(155)
inline void MSForms::IOptionFrame::PutPictureAlignment ( enum fmPictureAlignment PictureAlignment ) {
    HRESULT _hr = put_PictureAlignment(PictureAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(156)
inline enum MSForms::fmPictureAlignment MSForms::IOptionFrame::GetPictureAlignment ( ) {
    enum fmPictureAlignment _result;
    HRESULT _hr = get_PictureAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(157)
inline void MSForms::IOptionFrame::PutPicture ( struct Picture * Picture ) {
    HRESULT _hr = put_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(158)
inline void MSForms::IOptionFrame::PutRefPicture ( struct Picture * Picture ) {
    HRESULT _hr = putref_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(159)
inline PicturePtr MSForms::IOptionFrame::GetPicture ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(160)
inline void MSForms::IOptionFrame::PutPictureSizeMode ( enum fmPictureSizeMode PictureSizeMode ) {
    HRESULT _hr = put_PictureSizeMode(PictureSizeMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(161)
inline enum MSForms::fmPictureSizeMode MSForms::IOptionFrame::GetPictureSizeMode ( ) {
    enum fmPictureSizeMode _result;
    HRESULT _hr = get_PictureSizeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(162)
inline void MSForms::IOptionFrame::PutPictureTiling ( VARIANT_BOOL PictureTiling ) {
    HRESULT _hr = put_PictureTiling(PictureTiling);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(163)
inline VARIANT_BOOL MSForms::IOptionFrame::GetPictureTiling ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PictureTiling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(164)
inline void MSForms::IOptionFrame::PutScrollBars ( enum fmScrollBars ScrollBars ) {
    HRESULT _hr = put_ScrollBars(ScrollBars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(165)
inline enum MSForms::fmScrollBars MSForms::IOptionFrame::GetScrollBars ( ) {
    enum fmScrollBars _result;
    HRESULT _hr = get_ScrollBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(166)
inline HRESULT MSForms::IOptionFrame::_SetScrollHeight ( long ScrollHeight ) {
    HRESULT _hr = raw__SetScrollHeight(ScrollHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(167)
inline HRESULT MSForms::IOptionFrame::_GetScrollHeight ( long * ScrollHeight ) {
    HRESULT _hr = raw__GetScrollHeight(ScrollHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(168)
inline void MSForms::IOptionFrame::PutScrollHeight ( float ScrollHeight ) {
    HRESULT _hr = put_ScrollHeight(ScrollHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(169)
inline float MSForms::IOptionFrame::GetScrollHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_ScrollHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(170)
inline HRESULT MSForms::IOptionFrame::_SetScrollLeft ( long ScrollLeft ) {
    HRESULT _hr = raw__SetScrollLeft(ScrollLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(171)
inline HRESULT MSForms::IOptionFrame::_GetScrollLeft ( long * ScrollLeft ) {
    HRESULT _hr = raw__GetScrollLeft(ScrollLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(172)
inline void MSForms::IOptionFrame::PutScrollLeft ( float ScrollLeft ) {
    HRESULT _hr = put_ScrollLeft(ScrollLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(173)
inline float MSForms::IOptionFrame::GetScrollLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_ScrollLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(174)
inline HRESULT MSForms::IOptionFrame::_SetScrollTop ( long ScrollTop ) {
    HRESULT _hr = raw__SetScrollTop(ScrollTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(175)
inline HRESULT MSForms::IOptionFrame::_GetScrollTop ( long * ScrollTop ) {
    HRESULT _hr = raw__GetScrollTop(ScrollTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(176)
inline void MSForms::IOptionFrame::PutScrollTop ( float ScrollTop ) {
    HRESULT _hr = put_ScrollTop(ScrollTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(177)
inline float MSForms::IOptionFrame::GetScrollTop ( ) {
    float _result = 0;
    HRESULT _hr = get_ScrollTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(178)
inline HRESULT MSForms::IOptionFrame::_SetScrollWidth ( long ScrollWidth ) {
    HRESULT _hr = raw__SetScrollWidth(ScrollWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(179)
inline HRESULT MSForms::IOptionFrame::_GetScrollWidth ( long * ScrollWidth ) {
    HRESULT _hr = raw__GetScrollWidth(ScrollWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(180)
inline void MSForms::IOptionFrame::PutScrollWidth ( float ScrollWidth ) {
    HRESULT _hr = put_ScrollWidth(ScrollWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(181)
inline float MSForms::IOptionFrame::GetScrollWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_ScrollWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(182)
inline MSForms::ControlsPtr MSForms::IOptionFrame::GetSelected ( ) {
    struct Controls * _result = 0;
    HRESULT _hr = get_Selected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ControlsPtr(_result, false);
}

#pragma implementation_key(183)
inline void MSForms::IOptionFrame::PutSpecialEffect ( enum fmSpecialEffect SpecialEffect ) {
    HRESULT _hr = put_SpecialEffect(SpecialEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(184)
inline enum MSForms::fmSpecialEffect MSForms::IOptionFrame::GetSpecialEffect ( ) {
    enum fmSpecialEffect _result;
    HRESULT _hr = get_SpecialEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(185)
inline void MSForms::IOptionFrame::PutVerticalScrollBarSide ( enum fmVerticalScrollBarSide side ) {
    HRESULT _hr = put_VerticalScrollBarSide(side);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(186)
inline enum MSForms::fmVerticalScrollBarSide MSForms::IOptionFrame::GetVerticalScrollBarSide ( ) {
    enum fmVerticalScrollBarSide _result;
    HRESULT _hr = get_VerticalScrollBarSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(187)
inline void MSForms::IOptionFrame::PutZoom ( short Zoom ) {
    HRESULT _hr = put_Zoom(Zoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(188)
inline short MSForms::IOptionFrame::GetZoom ( ) {
    short _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(189)
inline HRESULT MSForms::IOptionFrame::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(190)
inline HRESULT MSForms::IOptionFrame::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(191)
inline HRESULT MSForms::IOptionFrame::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(192)
inline HRESULT MSForms::IOptionFrame::RedoAction ( ) {
    HRESULT _hr = raw_RedoAction();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(193)
inline HRESULT MSForms::IOptionFrame::Repaint ( ) {
    HRESULT _hr = raw_Repaint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(194)
inline HRESULT MSForms::IOptionFrame::Scroll ( const _variant_t & xAction, const _variant_t & yAction ) {
    HRESULT _hr = raw_Scroll(xAction, yAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(195)
inline HRESULT MSForms::IOptionFrame::SetDefaultTabOrder ( ) {
    HRESULT _hr = raw_SetDefaultTabOrder();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(196)
inline HRESULT MSForms::IOptionFrame::UndoAction ( ) {
    HRESULT _hr = raw_UndoAction();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(197)
inline void MSForms::IOptionFrame::PutDesignMode ( enum fmMode DesignMode ) {
    HRESULT _hr = put_DesignMode(DesignMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(198)
inline enum MSForms::fmMode MSForms::IOptionFrame::GetDesignMode ( ) {
    enum fmMode _result;
    HRESULT _hr = get_DesignMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(199)
inline void MSForms::IOptionFrame::PutShowToolbox ( enum fmMode ShowToolbox ) {
    HRESULT _hr = put_ShowToolbox(ShowToolbox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(200)
inline enum MSForms::fmMode MSForms::IOptionFrame::GetShowToolbox ( ) {
    enum fmMode _result;
    HRESULT _hr = get_ShowToolbox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(201)
inline void MSForms::IOptionFrame::PutShowGridDots ( enum fmMode ShowGridDots ) {
    HRESULT _hr = put_ShowGridDots(ShowGridDots);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(202)
inline enum MSForms::fmMode MSForms::IOptionFrame::GetShowGridDots ( ) {
    enum fmMode _result;
    HRESULT _hr = get_ShowGridDots(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(203)
inline void MSForms::IOptionFrame::PutSnapToGrid ( enum fmMode SnapToGrid ) {
    HRESULT _hr = put_SnapToGrid(SnapToGrid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(204)
inline enum MSForms::fmMode MSForms::IOptionFrame::GetSnapToGrid ( ) {
    enum fmMode _result;
    HRESULT _hr = get_SnapToGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(205)
inline void MSForms::IOptionFrame::PutGridX ( float GridX ) {
    HRESULT _hr = put_GridX(GridX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(206)
inline float MSForms::IOptionFrame::GetGridX ( ) {
    float _result = 0;
    HRESULT _hr = get_GridX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(207)
inline HRESULT MSForms::IOptionFrame::_SetGridX ( long GridX ) {
    HRESULT _hr = raw__SetGridX(GridX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(208)
inline HRESULT MSForms::IOptionFrame::_GetGridX ( long * GridX ) {
    HRESULT _hr = raw__GetGridX(GridX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(209)
inline void MSForms::IOptionFrame::PutGridY ( float GridY ) {
    HRESULT _hr = put_GridY(GridY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(210)
inline float MSForms::IOptionFrame::GetGridY ( ) {
    float _result = 0;
    HRESULT _hr = get_GridY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(211)
inline HRESULT MSForms::IOptionFrame::_SetGridY ( long GridY ) {
    HRESULT _hr = raw__SetGridY(GridY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(212)
inline HRESULT MSForms::IOptionFrame::_GetGridY ( long * GridY ) {
    HRESULT _hr = raw__GetGridY(GridY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _UserForm wrapper method implementations
//

#pragma implementation_key(213)
inline void MSForms::_UserForm::PutDrawBuffer ( long DrawBuffer ) {
    HRESULT _hr = put_DrawBuffer(DrawBuffer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(214)
inline long MSForms::_UserForm::GetDrawBuffer ( ) {
    long _result = 0;
    HRESULT _hr = get_DrawBuffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface FormEvents wrapper method implementations
//

#pragma implementation_key(215)
inline HRESULT MSForms::FormEvents::AddControl ( struct IControl * Control ) {
    return _com_dispatch_method(this, 0x300, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Control);
}

#pragma implementation_key(216)
inline HRESULT MSForms::FormEvents::BeforeDragOver ( struct IReturnBoolean * Cancel, struct IControl * Control, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState State, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Cancel, Control, Data, X, Y, State, Effect, Shift);
}

#pragma implementation_key(217)
inline HRESULT MSForms::FormEvents::BeforeDropOrPaste ( struct IReturnBoolean * Cancel, struct IControl * Control, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Cancel, Control, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(218)
inline HRESULT MSForms::FormEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(219)
inline HRESULT MSForms::FormEvents::DblClick ( struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cancel);
}

#pragma implementation_key(220)
inline HRESULT MSForms::FormEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(221)
inline HRESULT MSForms::FormEvents::KeyDown ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(222)
inline HRESULT MSForms::FormEvents::KeyPress ( struct IReturnInteger * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", KeyAscii);
}

#pragma implementation_key(223)
inline HRESULT MSForms::FormEvents::KeyUp ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(224)
inline HRESULT MSForms::FormEvents::Layout ( ) {
    return _com_dispatch_method(this, 0x302, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(225)
inline HRESULT MSForms::FormEvents::MouseDown ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(226)
inline HRESULT MSForms::FormEvents::MouseMove ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(227)
inline HRESULT MSForms::FormEvents::MouseUp ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(228)
inline HRESULT MSForms::FormEvents::RemoveControl ( struct IControl * Control ) {
    return _com_dispatch_method(this, 0x303, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Control);
}

#pragma implementation_key(229)
inline HRESULT MSForms::FormEvents::Scroll ( enum fmScrollAction ActionX, enum fmScrollAction ActionY, float RequestDx, float RequestDy, struct IReturnSingle * ActualDx, struct IReturnSingle * ActualDy ) {
    return _com_dispatch_method(this, 0x304, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004\x0009\x0009", ActionX, ActionY, RequestDx, RequestDy, ActualDx, ActualDy);
}

#pragma implementation_key(230)
inline HRESULT MSForms::FormEvents::Zoom ( short * Percent ) {
    return _com_dispatch_method(this, 0x305, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4002", Percent);
}

//
// dispinterface OptionFrameEvents wrapper method implementations
//

#pragma implementation_key(231)
inline HRESULT MSForms::OptionFrameEvents::AddControl ( struct IControl * Control ) {
    return _com_dispatch_method(this, 0x300, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Control);
}

#pragma implementation_key(232)
inline HRESULT MSForms::OptionFrameEvents::BeforeDragOver ( struct IReturnBoolean * Cancel, struct IControl * Control, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState State, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Cancel, Control, Data, X, Y, State, Effect, Shift);
}

#pragma implementation_key(233)
inline HRESULT MSForms::OptionFrameEvents::BeforeDropOrPaste ( struct IReturnBoolean * Cancel, struct IControl * Control, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Cancel, Control, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(234)
inline HRESULT MSForms::OptionFrameEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(235)
inline HRESULT MSForms::OptionFrameEvents::DblClick ( struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cancel);
}

#pragma implementation_key(236)
inline HRESULT MSForms::OptionFrameEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(237)
inline HRESULT MSForms::OptionFrameEvents::KeyDown ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(238)
inline HRESULT MSForms::OptionFrameEvents::KeyPress ( struct IReturnInteger * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", KeyAscii);
}

#pragma implementation_key(239)
inline HRESULT MSForms::OptionFrameEvents::KeyUp ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(240)
inline HRESULT MSForms::OptionFrameEvents::Layout ( ) {
    return _com_dispatch_method(this, 0x302, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(241)
inline HRESULT MSForms::OptionFrameEvents::MouseDown ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(242)
inline HRESULT MSForms::OptionFrameEvents::MouseMove ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(243)
inline HRESULT MSForms::OptionFrameEvents::MouseUp ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(244)
inline HRESULT MSForms::OptionFrameEvents::RemoveControl ( struct IControl * Control ) {
    return _com_dispatch_method(this, 0x303, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Control);
}

#pragma implementation_key(245)
inline HRESULT MSForms::OptionFrameEvents::Scroll ( enum fmScrollAction ActionX, enum fmScrollAction ActionY, float RequestDx, float RequestDy, struct IReturnSingle * ActualDx, struct IReturnSingle * ActualDy ) {
    return _com_dispatch_method(this, 0x304, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004\x0009\x0009", ActionX, ActionY, RequestDx, RequestDy, ActualDx, ActualDy);
}

#pragma implementation_key(246)
inline HRESULT MSForms::OptionFrameEvents::Zoom ( short * Percent ) {
    return _com_dispatch_method(this, 0x305, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4002", Percent);
}

//
// interface ILabelControl wrapper method implementations
//

#pragma implementation_key(247)
inline void MSForms::ILabelControl::PutAutoSize ( VARIANT_BOOL fvbAutoSize ) {
    HRESULT _hr = put_AutoSize(fvbAutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(248)
inline VARIANT_BOOL MSForms::ILabelControl::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(249)
inline void MSForms::ILabelControl::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(250)
inline MSForms::OLE_COLOR MSForms::ILabelControl::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(251)
inline void MSForms::ILabelControl::PutBackStyle ( enum fmBackStyle BackStyle ) {
    HRESULT _hr = put_BackStyle(BackStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(252)
inline enum MSForms::fmBackStyle MSForms::ILabelControl::GetBackStyle ( ) {
    enum fmBackStyle _result;
    HRESULT _hr = get_BackStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline void MSForms::ILabelControl::PutBorderColor ( OLE_COLOR BorderColor ) {
    HRESULT _hr = put_BorderColor(BorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(254)
inline MSForms::OLE_COLOR MSForms::ILabelControl::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(255)
inline void MSForms::ILabelControl::PutBorderStyle ( enum fmBorderStyle BorderStyle ) {
    HRESULT _hr = put_BorderStyle(BorderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline enum MSForms::fmBorderStyle MSForms::ILabelControl::GetBorderStyle ( ) {
    enum fmBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline void MSForms::ILabelControl::PutCaption ( _bstr_t bstrCaption ) {
    HRESULT _hr = put_Caption(bstrCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(258)
inline _bstr_t MSForms::ILabelControl::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(259)
inline void MSForms::ILabelControl::PutEnabled ( VARIANT_BOOL fEnabled ) {
    HRESULT _hr = put_Enabled(fEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(260)
inline VARIANT_BOOL MSForms::ILabelControl::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline void MSForms::ILabelControl::Put_Font_Reserved ( struct Font * _arg1 ) {
    HRESULT _hr = put__Font_Reserved(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(262)
inline void MSForms::ILabelControl::PutRefFont ( struct Font * Font ) {
    HRESULT _hr = putref_Font(Font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(263)
inline MSForms::FontPtr MSForms::ILabelControl::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(264)
inline void MSForms::ILabelControl::PutFontItalic ( VARIANT_BOOL FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(265)
inline VARIANT_BOOL MSForms::ILabelControl::GetFontItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(266)
inline void MSForms::ILabelControl::PutFontBold ( VARIANT_BOOL FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(267)
inline VARIANT_BOOL MSForms::ILabelControl::GetFontBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(268)
inline void MSForms::ILabelControl::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(269)
inline _bstr_t MSForms::ILabelControl::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(270)
inline void MSForms::ILabelControl::PutFontSize ( const CURRENCY & FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(271)
inline CURRENCY MSForms::ILabelControl::GetFontSize ( ) {
    CURRENCY _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(272)
inline void MSForms::ILabelControl::PutFontStrikethru ( VARIANT_BOOL FontStrikethru ) {
    HRESULT _hr = put_FontStrikethru(FontStrikethru);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(273)
inline VARIANT_BOOL MSForms::ILabelControl::GetFontStrikethru ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontStrikethru(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(274)
inline void MSForms::ILabelControl::PutFontUnderline ( VARIANT_BOOL FontUnderline ) {
    HRESULT _hr = put_FontUnderline(FontUnderline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(275)
inline VARIANT_BOOL MSForms::ILabelControl::GetFontUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontUnderline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(276)
inline void MSForms::ILabelControl::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(277)
inline MSForms::OLE_COLOR MSForms::ILabelControl::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(278)
inline void MSForms::ILabelControl::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(279)
inline void MSForms::ILabelControl::PutRefMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = putref_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(280)
inline PicturePtr MSForms::ILabelControl::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(281)
inline void MSForms::ILabelControl::PutMousePointer ( enum fmMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(282)
inline enum MSForms::fmMousePointer MSForms::ILabelControl::GetMousePointer ( ) {
    enum fmMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(283)
inline void MSForms::ILabelControl::PutPicture ( struct Picture * pPicture ) {
    HRESULT _hr = put_Picture(pPicture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(284)
inline void MSForms::ILabelControl::PutRefPicture ( struct Picture * pPicture ) {
    HRESULT _hr = putref_Picture(pPicture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(285)
inline PicturePtr MSForms::ILabelControl::GetPicture ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(286)
inline void MSForms::ILabelControl::PutPicturePosition ( enum fmPicturePosition PicPos ) {
    HRESULT _hr = put_PicturePosition(PicPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(287)
inline enum MSForms::fmPicturePosition MSForms::ILabelControl::GetPicturePosition ( ) {
    enum fmPicturePosition _result;
    HRESULT _hr = get_PicturePosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(288)
inline void MSForms::ILabelControl::PutSpecialEffect ( enum fmSpecialEffect SpecialEffect ) {
    HRESULT _hr = put_SpecialEffect(SpecialEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(289)
inline enum MSForms::fmSpecialEffect MSForms::ILabelControl::GetSpecialEffect ( ) {
    enum fmSpecialEffect _result;
    HRESULT _hr = get_SpecialEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(290)
inline void MSForms::ILabelControl::PutTextAlign ( enum fmTextAlign TextAlign ) {
    HRESULT _hr = put_TextAlign(TextAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(291)
inline enum MSForms::fmTextAlign MSForms::ILabelControl::GetTextAlign ( ) {
    enum fmTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(292)
inline void MSForms::ILabelControl::PutWordWrap ( VARIANT_BOOL WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(293)
inline VARIANT_BOOL MSForms::ILabelControl::GetWordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(294)
inline void MSForms::ILabelControl::PutAccelerator ( _bstr_t Accelerator ) {
    HRESULT _hr = put_Accelerator(Accelerator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(295)
inline _bstr_t MSForms::ILabelControl::GetAccelerator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(296)
inline void MSForms::ILabelControl::PutFontWeight ( short FontWeight ) {
    HRESULT _hr = put_FontWeight(FontWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(297)
inline short MSForms::ILabelControl::GetFontWeight ( ) {
    short _result = 0;
    HRESULT _hr = get_FontWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(298)
inline void MSForms::ILabelControl::Put_Value ( _bstr_t bstrCaption ) {
    HRESULT _hr = put__Value(bstrCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(299)
inline _bstr_t MSForms::ILabelControl::Get_Value ( ) {
    BSTR _result = 0;
    HRESULT _hr = get__Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICommandButton wrapper method implementations
//

#pragma implementation_key(300)
inline void MSForms::ICommandButton::PutAutoSize ( VARIANT_BOOL fvbAutoSize ) {
    HRESULT _hr = put_AutoSize(fvbAutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(301)
inline VARIANT_BOOL MSForms::ICommandButton::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(302)
inline void MSForms::ICommandButton::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(303)
inline MSForms::OLE_COLOR MSForms::ICommandButton::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(304)
inline void MSForms::ICommandButton::PutBackStyle ( enum fmBackStyle BackStyle ) {
    HRESULT _hr = put_BackStyle(BackStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(305)
inline enum MSForms::fmBackStyle MSForms::ICommandButton::GetBackStyle ( ) {
    enum fmBackStyle _result;
    HRESULT _hr = get_BackStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(306)
inline void MSForms::ICommandButton::PutCaption ( _bstr_t bstrCaption ) {
    HRESULT _hr = put_Caption(bstrCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(307)
inline _bstr_t MSForms::ICommandButton::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(308)
inline void MSForms::ICommandButton::PutEnabled ( VARIANT_BOOL fEnabled ) {
    HRESULT _hr = put_Enabled(fEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(309)
inline VARIANT_BOOL MSForms::ICommandButton::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(310)
inline void MSForms::ICommandButton::Put_Font_Reserved ( struct Font * _arg1 ) {
    HRESULT _hr = put__Font_Reserved(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(311)
inline void MSForms::ICommandButton::PutRefFont ( struct Font * Font ) {
    HRESULT _hr = putref_Font(Font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(312)
inline MSForms::FontPtr MSForms::ICommandButton::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(313)
inline void MSForms::ICommandButton::PutFontBold ( VARIANT_BOOL FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(314)
inline VARIANT_BOOL MSForms::ICommandButton::GetFontBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(315)
inline void MSForms::ICommandButton::PutFontItalic ( VARIANT_BOOL FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(316)
inline VARIANT_BOOL MSForms::ICommandButton::GetFontItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(317)
inline void MSForms::ICommandButton::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(318)
inline _bstr_t MSForms::ICommandButton::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(319)
inline void MSForms::ICommandButton::PutFontSize ( const CURRENCY & FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(320)
inline CURRENCY MSForms::ICommandButton::GetFontSize ( ) {
    CURRENCY _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(321)
inline void MSForms::ICommandButton::PutFontStrikethru ( VARIANT_BOOL FontStrikethru ) {
    HRESULT _hr = put_FontStrikethru(FontStrikethru);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(322)
inline VARIANT_BOOL MSForms::ICommandButton::GetFontStrikethru ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontStrikethru(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(323)
inline void MSForms::ICommandButton::PutFontUnderline ( VARIANT_BOOL FontUnderline ) {
    HRESULT _hr = put_FontUnderline(FontUnderline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(324)
inline VARIANT_BOOL MSForms::ICommandButton::GetFontUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontUnderline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(325)
inline void MSForms::ICommandButton::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(326)
inline MSForms::OLE_COLOR MSForms::ICommandButton::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(327)
inline void MSForms::ICommandButton::PutTakeFocusOnClick ( VARIANT_BOOL TakeFocusOnClick ) {
    HRESULT _hr = put_TakeFocusOnClick(TakeFocusOnClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(328)
inline VARIANT_BOOL MSForms::ICommandButton::GetTakeFocusOnClick ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TakeFocusOnClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(329)
inline void MSForms::ICommandButton::PutLocked ( VARIANT_BOOL fLocked ) {
    HRESULT _hr = put_Locked(fLocked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(330)
inline VARIANT_BOOL MSForms::ICommandButton::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(331)
inline void MSForms::ICommandButton::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(332)
inline void MSForms::ICommandButton::PutRefMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = putref_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(333)
inline PicturePtr MSForms::ICommandButton::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(334)
inline void MSForms::ICommandButton::PutMousePointer ( enum fmMousePointer mouseptr ) {
    HRESULT _hr = put_MousePointer(mouseptr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(335)
inline enum MSForms::fmMousePointer MSForms::ICommandButton::GetMousePointer ( ) {
    enum fmMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(336)
inline void MSForms::ICommandButton::PutPicture ( struct Picture * Picture ) {
    HRESULT _hr = put_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(337)
inline void MSForms::ICommandButton::PutRefPicture ( struct Picture * Picture ) {
    HRESULT _hr = putref_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(338)
inline PicturePtr MSForms::ICommandButton::GetPicture ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(339)
inline void MSForms::ICommandButton::PutPicturePosition ( enum fmPicturePosition PicturePosition ) {
    HRESULT _hr = put_PicturePosition(PicturePosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(340)
inline enum MSForms::fmPicturePosition MSForms::ICommandButton::GetPicturePosition ( ) {
    enum fmPicturePosition _result;
    HRESULT _hr = get_PicturePosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(341)
inline void MSForms::ICommandButton::PutAccelerator ( _bstr_t Accelerator ) {
    HRESULT _hr = put_Accelerator(Accelerator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(342)
inline _bstr_t MSForms::ICommandButton::GetAccelerator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(343)
inline void MSForms::ICommandButton::PutWordWrap ( VARIANT_BOOL WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(344)
inline VARIANT_BOOL MSForms::ICommandButton::GetWordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(345)
inline void MSForms::ICommandButton::PutValue ( VARIANT_BOOL fValue ) {
    HRESULT _hr = put_Value(fValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(346)
inline VARIANT_BOOL MSForms::ICommandButton::GetValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(347)
inline void MSForms::ICommandButton::PutFontWeight ( short FontWeight ) {
    HRESULT _hr = put_FontWeight(FontWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(348)
inline short MSForms::ICommandButton::GetFontWeight ( ) {
    short _result = 0;
    HRESULT _hr = get_FontWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMdcText wrapper method implementations
//

#pragma implementation_key(349)
inline void MSForms::IMdcText::PutAutoSize ( VARIANT_BOOL AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(350)
inline VARIANT_BOOL MSForms::IMdcText::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(351)
inline void MSForms::IMdcText::PutAutoTab ( VARIANT_BOOL AutoTab ) {
    HRESULT _hr = put_AutoTab(AutoTab);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(352)
inline VARIANT_BOOL MSForms::IMdcText::GetAutoTab ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoTab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(353)
inline void MSForms::IMdcText::PutAutoWordSelect ( VARIANT_BOOL AutoWordSelect ) {
    HRESULT _hr = put_AutoWordSelect(AutoWordSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(354)
inline VARIANT_BOOL MSForms::IMdcText::GetAutoWordSelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoWordSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(355)
inline void MSForms::IMdcText::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(356)
inline MSForms::OLE_COLOR MSForms::IMdcText::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(357)
inline void MSForms::IMdcText::PutBackStyle ( enum fmBackStyle BackStyle ) {
    HRESULT _hr = put_BackStyle(BackStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(358)
inline enum MSForms::fmBackStyle MSForms::IMdcText::GetBackStyle ( ) {
    enum fmBackStyle _result;
    HRESULT _hr = get_BackStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(359)
inline void MSForms::IMdcText::PutBorderColor ( OLE_COLOR BorderColor ) {
    HRESULT _hr = put_BorderColor(BorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(360)
inline MSForms::OLE_COLOR MSForms::IMdcText::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(361)
inline void MSForms::IMdcText::PutBorderStyle ( enum fmBorderStyle BorderStyle ) {
    HRESULT _hr = put_BorderStyle(BorderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(362)
inline enum MSForms::fmBorderStyle MSForms::IMdcText::GetBorderStyle ( ) {
    enum fmBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(363)
inline void MSForms::IMdcText::PutBordersSuppress ( VARIANT_BOOL BordersSuppress ) {
    HRESULT _hr = put_BordersSuppress(BordersSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(364)
inline VARIANT_BOOL MSForms::IMdcText::GetBordersSuppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BordersSuppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(365)
inline VARIANT_BOOL MSForms::IMdcText::GetCanPaste ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanPaste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(366)
inline void MSForms::IMdcText::PutCurLine ( long CurLine ) {
    HRESULT _hr = put_CurLine(CurLine);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(367)
inline long MSForms::IMdcText::GetCurLine ( ) {
    long _result = 0;
    HRESULT _hr = get_CurLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(368)
inline long MSForms::IMdcText::GetCurTargetX ( ) {
    long _result = 0;
    HRESULT _hr = get_CurTargetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(369)
inline long MSForms::IMdcText::GetCurTargetY ( ) {
    long _result = 0;
    HRESULT _hr = get_CurTargetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(370)
inline void MSForms::IMdcText::PutCurX ( long CurX ) {
    HRESULT _hr = put_CurX(CurX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(371)
inline long MSForms::IMdcText::GetCurX ( ) {
    long _result = 0;
    HRESULT _hr = get_CurX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(372)
inline void MSForms::IMdcText::PutCurY ( long CurY ) {
    HRESULT _hr = put_CurY(CurY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(373)
inline long MSForms::IMdcText::GetCurY ( ) {
    long _result = 0;
    HRESULT _hr = get_CurY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline void MSForms::IMdcText::PutDropButtonStyle ( enum fmDropButtonStyle DropButtonStyle ) {
    HRESULT _hr = put_DropButtonStyle(DropButtonStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(375)
inline enum MSForms::fmDropButtonStyle MSForms::IMdcText::GetDropButtonStyle ( ) {
    enum fmDropButtonStyle _result;
    HRESULT _hr = get_DropButtonStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(376)
inline void MSForms::IMdcText::PutEnterKeyBehavior ( VARIANT_BOOL EnterKeyBehavior ) {
    HRESULT _hr = put_EnterKeyBehavior(EnterKeyBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(377)
inline VARIANT_BOOL MSForms::IMdcText::GetEnterKeyBehavior ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnterKeyBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(378)
inline void MSForms::IMdcText::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(379)
inline VARIANT_BOOL MSForms::IMdcText::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(380)
inline void MSForms::IMdcText::Put_Font_Reserved ( struct Font * _arg1 ) {
    HRESULT _hr = put__Font_Reserved(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(381)
inline void MSForms::IMdcText::PutRefFont ( struct Font * Font ) {
    HRESULT _hr = putref_Font(Font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(382)
inline MSForms::FontPtr MSForms::IMdcText::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(383)
inline void MSForms::IMdcText::PutFontBold ( VARIANT_BOOL FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(384)
inline VARIANT_BOOL MSForms::IMdcText::GetFontBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(385)
inline void MSForms::IMdcText::PutFontItalic ( VARIANT_BOOL FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(386)
inline VARIANT_BOOL MSForms::IMdcText::GetFontItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(387)
inline void MSForms::IMdcText::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(388)
inline _bstr_t MSForms::IMdcText::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(389)
inline void MSForms::IMdcText::PutFontSize ( const CURRENCY & FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(390)
inline CURRENCY MSForms::IMdcText::GetFontSize ( ) {
    CURRENCY _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(391)
inline void MSForms::IMdcText::PutFontStrikethru ( VARIANT_BOOL FontStrikethru ) {
    HRESULT _hr = put_FontStrikethru(FontStrikethru);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(392)
inline VARIANT_BOOL MSForms::IMdcText::GetFontStrikethru ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontStrikethru(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(393)
inline void MSForms::IMdcText::PutFontUnderline ( VARIANT_BOOL FontUnderline ) {
    HRESULT _hr = put_FontUnderline(FontUnderline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(394)
inline VARIANT_BOOL MSForms::IMdcText::GetFontUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontUnderline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(395)
inline void MSForms::IMdcText::PutFontWeight ( short FontWeight ) {
    HRESULT _hr = put_FontWeight(FontWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(396)
inline short MSForms::IMdcText::GetFontWeight ( ) {
    short _result = 0;
    HRESULT _hr = get_FontWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(397)
inline void MSForms::IMdcText::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(398)
inline MSForms::OLE_COLOR MSForms::IMdcText::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(399)
inline void MSForms::IMdcText::PutHideSelection ( VARIANT_BOOL HideSelection ) {
    HRESULT _hr = put_HideSelection(HideSelection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(400)
inline VARIANT_BOOL MSForms::IMdcText::GetHideSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(401)
inline void MSForms::IMdcText::PutIntegralHeight ( VARIANT_BOOL IntegralHeight ) {
    HRESULT _hr = put_IntegralHeight(IntegralHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(402)
inline VARIANT_BOOL MSForms::IMdcText::GetIntegralHeight ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IntegralHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(403)
inline long MSForms::IMdcText::GetLineCount ( ) {
    long _result = 0;
    HRESULT _hr = get_LineCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(404)
inline void MSForms::IMdcText::PutLocked ( VARIANT_BOOL Locked ) {
    HRESULT _hr = put_Locked(Locked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(405)
inline VARIANT_BOOL MSForms::IMdcText::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(406)
inline void MSForms::IMdcText::PutMaxLength ( long MaxLength ) {
    HRESULT _hr = put_MaxLength(MaxLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(407)
inline long MSForms::IMdcText::GetMaxLength ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(408)
inline void MSForms::IMdcText::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(409)
inline void MSForms::IMdcText::PutRefMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = putref_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(410)
inline PicturePtr MSForms::IMdcText::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(411)
inline void MSForms::IMdcText::PutMousePointer ( enum fmMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(412)
inline enum MSForms::fmMousePointer MSForms::IMdcText::GetMousePointer ( ) {
    enum fmMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(413)
inline void MSForms::IMdcText::PutMultiLine ( VARIANT_BOOL MultiLine ) {
    HRESULT _hr = put_MultiLine(MultiLine);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(414)
inline VARIANT_BOOL MSForms::IMdcText::GetMultiLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline void MSForms::IMdcText::PutPasswordChar ( _bstr_t PasswordChar ) {
    HRESULT _hr = put_PasswordChar(PasswordChar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(416)
inline _bstr_t MSForms::IMdcText::GetPasswordChar ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PasswordChar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(417)
inline void MSForms::IMdcText::PutScrollBars ( enum fmScrollBars ScrollBars ) {
    HRESULT _hr = put_ScrollBars(ScrollBars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(418)
inline enum MSForms::fmScrollBars MSForms::IMdcText::GetScrollBars ( ) {
    enum fmScrollBars _result;
    HRESULT _hr = get_ScrollBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(419)
inline void MSForms::IMdcText::PutSelectionMargin ( VARIANT_BOOL SelectionMargin ) {
    HRESULT _hr = put_SelectionMargin(SelectionMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(420)
inline VARIANT_BOOL MSForms::IMdcText::GetSelectionMargin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SelectionMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(421)
inline void MSForms::IMdcText::PutSelLength ( long SelLength ) {
    HRESULT _hr = put_SelLength(SelLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(422)
inline long MSForms::IMdcText::GetSelLength ( ) {
    long _result = 0;
    HRESULT _hr = get_SelLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(423)
inline void MSForms::IMdcText::PutSelStart ( long SelStart ) {
    HRESULT _hr = put_SelStart(SelStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(424)
inline long MSForms::IMdcText::GetSelStart ( ) {
    long _result = 0;
    HRESULT _hr = get_SelStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(425)
inline void MSForms::IMdcText::PutSelText ( _bstr_t SelText ) {
    HRESULT _hr = put_SelText(SelText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(426)
inline _bstr_t MSForms::IMdcText::GetSelText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SelText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(427)
inline void MSForms::IMdcText::PutShowDropButtonWhen ( enum fmShowDropButtonWhen ShowDropButtonWhen ) {
    HRESULT _hr = put_ShowDropButtonWhen(ShowDropButtonWhen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(428)
inline enum MSForms::fmShowDropButtonWhen MSForms::IMdcText::GetShowDropButtonWhen ( ) {
    enum fmShowDropButtonWhen _result;
    HRESULT _hr = get_ShowDropButtonWhen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(429)
inline void MSForms::IMdcText::PutSpecialEffect ( enum fmSpecialEffect SpecialEffect ) {
    HRESULT _hr = put_SpecialEffect(SpecialEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(430)
inline enum MSForms::fmSpecialEffect MSForms::IMdcText::GetSpecialEffect ( ) {
    enum fmSpecialEffect _result;
    HRESULT _hr = get_SpecialEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(431)
inline void MSForms::IMdcText::PutTabKeyBehavior ( VARIANT_BOOL TabKeyBehavior ) {
    HRESULT _hr = put_TabKeyBehavior(TabKeyBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(432)
inline VARIANT_BOOL MSForms::IMdcText::GetTabKeyBehavior ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TabKeyBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(433)
inline void MSForms::IMdcText::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(434)
inline _bstr_t MSForms::IMdcText::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(435)
inline void MSForms::IMdcText::PutTextAlign ( enum fmTextAlign TextAlign ) {
    HRESULT _hr = put_TextAlign(TextAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(436)
inline enum MSForms::fmTextAlign MSForms::IMdcText::GetTextAlign ( ) {
    enum fmTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(437)
inline long MSForms::IMdcText::GetTextLength ( ) {
    long _result = 0;
    HRESULT _hr = get_TextLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline VARIANT_BOOL MSForms::IMdcText::GetValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(439)
inline void MSForms::IMdcText::PutValue ( VARIANT * Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(440)
inline _variant_t MSForms::IMdcText::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(441)
inline void MSForms::IMdcText::PutWordWrap ( VARIANT_BOOL WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(442)
inline VARIANT_BOOL MSForms::IMdcText::GetWordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(443)
inline HRESULT MSForms::IMdcText::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(444)
inline HRESULT MSForms::IMdcText::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(445)
inline HRESULT MSForms::IMdcText::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(446)
inline void MSForms::IMdcText::PutIMEMode ( enum fmIMEMode IMEMode ) {
    HRESULT _hr = put_IMEMode(IMEMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(447)
inline enum MSForms::fmIMEMode MSForms::IMdcText::GetIMEMode ( ) {
    enum fmIMEMode _result;
    HRESULT _hr = get_IMEMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(448)
inline void MSForms::IMdcText::PutEnterFieldBehavior ( enum fmEnterFieldBehavior EnterFieldBehavior ) {
    HRESULT _hr = put_EnterFieldBehavior(EnterFieldBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(449)
inline enum MSForms::fmEnterFieldBehavior MSForms::IMdcText::GetEnterFieldBehavior ( ) {
    enum fmEnterFieldBehavior _result;
    HRESULT _hr = get_EnterFieldBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(450)
inline void MSForms::IMdcText::PutDragBehavior ( enum fmDragBehavior DragBehavior ) {
    HRESULT _hr = put_DragBehavior(DragBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(451)
inline enum MSForms::fmDragBehavior MSForms::IMdcText::GetDragBehavior ( ) {
    enum fmDragBehavior _result;
    HRESULT _hr = get_DragBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(452)
inline enum MSForms::fmDisplayStyle MSForms::IMdcText::GetDisplayStyle ( ) {
    enum fmDisplayStyle _result;
    HRESULT _hr = get_DisplayStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMdcList wrapper method implementations
//

#pragma implementation_key(453)
inline void MSForms::IMdcList::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(454)
inline MSForms::OLE_COLOR MSForms::IMdcList::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(455)
inline void MSForms::IMdcList::PutBorderColor ( OLE_COLOR BorderColor ) {
    HRESULT _hr = put_BorderColor(BorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(456)
inline MSForms::OLE_COLOR MSForms::IMdcList::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(457)
inline void MSForms::IMdcList::PutBorderStyle ( enum fmBorderStyle BorderStyle ) {
    HRESULT _hr = put_BorderStyle(BorderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(458)
inline enum MSForms::fmBorderStyle MSForms::IMdcList::GetBorderStyle ( ) {
    enum fmBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(459)
inline void MSForms::IMdcList::PutBordersSuppress ( VARIANT_BOOL BordersSuppress ) {
    HRESULT _hr = put_BordersSuppress(BordersSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(460)
inline VARIANT_BOOL MSForms::IMdcList::GetBordersSuppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BordersSuppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(461)
inline void MSForms::IMdcList::PutBoundColumn ( VARIANT * BoundColumn ) {
    HRESULT _hr = put_BoundColumn(BoundColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(462)
inline _variant_t MSForms::IMdcList::GetBoundColumn ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BoundColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(463)
inline void MSForms::IMdcList::PutColumnCount ( long ColumnCount ) {
    HRESULT _hr = put_ColumnCount(ColumnCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(464)
inline long MSForms::IMdcList::GetColumnCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(465)
inline void MSForms::IMdcList::PutColumnHeads ( VARIANT_BOOL ColumnHeads ) {
    HRESULT _hr = put_ColumnHeads(ColumnHeads);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(466)
inline VARIANT_BOOL MSForms::IMdcList::GetColumnHeads ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColumnHeads(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(467)
inline void MSForms::IMdcList::PutColumnWidths ( _bstr_t ColumnWidths ) {
    HRESULT _hr = put_ColumnWidths(ColumnWidths);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(468)
inline _bstr_t MSForms::IMdcList::GetColumnWidths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColumnWidths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(469)
inline void MSForms::IMdcList::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(470)
inline VARIANT_BOOL MSForms::IMdcList::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(471)
inline void MSForms::IMdcList::Put_Font_Reserved ( struct Font * _arg1 ) {
    HRESULT _hr = put__Font_Reserved(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(472)
inline void MSForms::IMdcList::PutRefFont ( struct Font * Font ) {
    HRESULT _hr = putref_Font(Font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(473)
inline MSForms::FontPtr MSForms::IMdcList::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(474)
inline void MSForms::IMdcList::PutFontBold ( VARIANT_BOOL FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(475)
inline VARIANT_BOOL MSForms::IMdcList::GetFontBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(476)
inline void MSForms::IMdcList::PutFontItalic ( VARIANT_BOOL FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(477)
inline VARIANT_BOOL MSForms::IMdcList::GetFontItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(478)
inline void MSForms::IMdcList::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(479)
inline _bstr_t MSForms::IMdcList::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(480)
inline void MSForms::IMdcList::PutFontSize ( const CURRENCY & FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(481)
inline CURRENCY MSForms::IMdcList::GetFontSize ( ) {
    CURRENCY _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(482)
inline void MSForms::IMdcList::PutFontStrikethru ( VARIANT_BOOL FontStrikethru ) {
    HRESULT _hr = put_FontStrikethru(FontStrikethru);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(483)
inline VARIANT_BOOL MSForms::IMdcList::GetFontStrikethru ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontStrikethru(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(484)
inline void MSForms::IMdcList::PutFontUnderline ( VARIANT_BOOL FontUnderline ) {
    HRESULT _hr = put_FontUnderline(FontUnderline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(485)
inline VARIANT_BOOL MSForms::IMdcList::GetFontUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontUnderline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(486)
inline void MSForms::IMdcList::PutFontWeight ( short FontWeight ) {
    HRESULT _hr = put_FontWeight(FontWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(487)
inline short MSForms::IMdcList::GetFontWeight ( ) {
    short _result = 0;
    HRESULT _hr = get_FontWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(488)
inline void MSForms::IMdcList::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(489)
inline MSForms::OLE_COLOR MSForms::IMdcList::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(490)
inline void MSForms::IMdcList::PutIntegralHeight ( VARIANT_BOOL IntegralHeight ) {
    HRESULT _hr = put_IntegralHeight(IntegralHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(491)
inline VARIANT_BOOL MSForms::IMdcList::GetIntegralHeight ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IntegralHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(492)
inline long MSForms::IMdcList::GetListCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(493)
inline void MSForms::IMdcList::PutListCursor ( PIROWSET ListCursor ) {
    HRESULT _hr = put_ListCursor(ListCursor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(494)
inline MSForms::PIROWSET MSForms::IMdcList::GetListCursor ( ) {
    PIROWSET _result;
    HRESULT _hr = get_ListCursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(495)
inline void MSForms::IMdcList::PutListIndex ( VARIANT * ListIndex ) {
    HRESULT _hr = put_ListIndex(ListIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(496)
inline _variant_t MSForms::IMdcList::GetListIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(497)
inline void MSForms::IMdcList::PutListStyle ( enum fmListStyle ListStyle ) {
    HRESULT _hr = put_ListStyle(ListStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(498)
inline enum MSForms::fmListStyle MSForms::IMdcList::GetListStyle ( ) {
    enum fmListStyle _result;
    HRESULT _hr = get_ListStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(499)
inline void MSForms::IMdcList::PutListWidth ( VARIANT * ListWidth ) {
    HRESULT _hr = put_ListWidth(ListWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(500)
inline _variant_t MSForms::IMdcList::GetListWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ListWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(501)
inline void MSForms::IMdcList::PutLocked ( VARIANT_BOOL Locked ) {
    HRESULT _hr = put_Locked(Locked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(502)
inline VARIANT_BOOL MSForms::IMdcList::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(503)
inline void MSForms::IMdcList::PutMatchEntry ( enum fmMatchEntry MatchEntry ) {
    HRESULT _hr = put_MatchEntry(MatchEntry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(504)
inline enum MSForms::fmMatchEntry MSForms::IMdcList::GetMatchEntry ( ) {
    enum fmMatchEntry _result;
    HRESULT _hr = get_MatchEntry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(505)
inline void MSForms::IMdcList::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(506)
inline void MSForms::IMdcList::PutRefMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = putref_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(507)
inline PicturePtr MSForms::IMdcList::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(508)
inline void MSForms::IMdcList::PutMousePointer ( enum fmMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(509)
inline enum MSForms::fmMousePointer MSForms::IMdcList::GetMousePointer ( ) {
    enum fmMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(510)
inline void MSForms::IMdcList::PutMultiSelect ( enum fmMultiSelect MultiSelect ) {
    HRESULT _hr = put_MultiSelect(MultiSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(511)
inline enum MSForms::fmMultiSelect MSForms::IMdcList::GetMultiSelect ( ) {
    enum fmMultiSelect _result;
    HRESULT _hr = get_MultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(512)
inline void MSForms::IMdcList::PutSpecialEffect ( enum fmSpecialEffect SpecialEffect ) {
    HRESULT _hr = put_SpecialEffect(SpecialEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(513)
inline enum MSForms::fmSpecialEffect MSForms::IMdcList::GetSpecialEffect ( ) {
    enum fmSpecialEffect _result;
    HRESULT _hr = get_SpecialEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(514)
inline void MSForms::IMdcList::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(515)
inline _bstr_t MSForms::IMdcList::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(516)
inline void MSForms::IMdcList::PutTextColumn ( VARIANT * TextColumn ) {
    HRESULT _hr = put_TextColumn(TextColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(517)
inline _variant_t MSForms::IMdcList::GetTextColumn ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TextColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(518)
inline void MSForms::IMdcList::PutTopIndex ( VARIANT * TopIndex ) {
    HRESULT _hr = put_TopIndex(TopIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(519)
inline _variant_t MSForms::IMdcList::GetTopIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TopIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(520)
inline VARIANT_BOOL MSForms::IMdcList::GetValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(521)
inline void MSForms::IMdcList::PutValue ( VARIANT * Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(522)
inline _variant_t MSForms::IMdcList::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(523)
inline _variant_t MSForms::IMdcList::GetColumn ( VARIANT * pvargColumn, VARIANT * pvargIndex ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Column(pvargColumn, pvargIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(524)
inline void MSForms::IMdcList::PutColumn ( VARIANT * pvargColumn, VARIANT * pvargIndex, VARIANT * pvargValue ) {
    HRESULT _hr = put_Column(pvargColumn, pvargIndex, pvargValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(525)
inline _variant_t MSForms::IMdcList::GetList ( VARIANT * pvargIndex, VARIANT * pvargColumn ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_List(pvargIndex, pvargColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(526)
inline void MSForms::IMdcList::PutList ( VARIANT * pvargIndex, VARIANT * pvargColumn, VARIANT * pvargValue ) {
    HRESULT _hr = put_List(pvargIndex, pvargColumn, pvargValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(527)
inline VARIANT_BOOL MSForms::IMdcList::GetSelected ( VARIANT * pvargIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Selected(pvargIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(528)
inline void MSForms::IMdcList::PutSelected ( VARIANT * pvargIndex, VARIANT_BOOL pfvb ) {
    HRESULT _hr = put_Selected(pvargIndex, pfvb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(529)
inline HRESULT MSForms::IMdcList::AddItem ( VARIANT * pvargItem, VARIANT * pvargIndex ) {
    HRESULT _hr = raw_AddItem(pvargItem, pvargIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(530)
inline HRESULT MSForms::IMdcList::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(531)
inline HRESULT MSForms::IMdcList::RemoveItem ( VARIANT * pvargIndex ) {
    HRESULT _hr = raw_RemoveItem(pvargIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(532)
inline void MSForms::IMdcList::PutIMEMode ( enum fmIMEMode IMEMode ) {
    HRESULT _hr = put_IMEMode(IMEMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(533)
inline enum MSForms::fmIMEMode MSForms::IMdcList::GetIMEMode ( ) {
    enum fmIMEMode _result;
    HRESULT _hr = get_IMEMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(534)
inline enum MSForms::fmDisplayStyle MSForms::IMdcList::GetDisplayStyle ( ) {
    enum fmDisplayStyle _result;
    HRESULT _hr = get_DisplayStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(535)
inline void MSForms::IMdcList::PutTextAlign ( enum fmTextAlign TextAlign ) {
    HRESULT _hr = put_TextAlign(TextAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(536)
inline enum MSForms::fmTextAlign MSForms::IMdcList::GetTextAlign ( ) {
    enum fmTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMdcCombo wrapper method implementations
//

#pragma implementation_key(537)
inline void MSForms::IMdcCombo::PutAutoSize ( VARIANT_BOOL AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(538)
inline VARIANT_BOOL MSForms::IMdcCombo::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(539)
inline void MSForms::IMdcCombo::PutAutoTab ( VARIANT_BOOL AutoTab ) {
    HRESULT _hr = put_AutoTab(AutoTab);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(540)
inline VARIANT_BOOL MSForms::IMdcCombo::GetAutoTab ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoTab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(541)
inline void MSForms::IMdcCombo::PutAutoWordSelect ( VARIANT_BOOL AutoWordSelect ) {
    HRESULT _hr = put_AutoWordSelect(AutoWordSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(542)
inline VARIANT_BOOL MSForms::IMdcCombo::GetAutoWordSelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoWordSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(543)
inline void MSForms::IMdcCombo::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(544)
inline MSForms::OLE_COLOR MSForms::IMdcCombo::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(545)
inline void MSForms::IMdcCombo::PutBackStyle ( enum fmBackStyle BackStyle ) {
    HRESULT _hr = put_BackStyle(BackStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(546)
inline enum MSForms::fmBackStyle MSForms::IMdcCombo::GetBackStyle ( ) {
    enum fmBackStyle _result;
    HRESULT _hr = get_BackStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(547)
inline void MSForms::IMdcCombo::PutBorderColor ( OLE_COLOR BorderColor ) {
    HRESULT _hr = put_BorderColor(BorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(548)
inline MSForms::OLE_COLOR MSForms::IMdcCombo::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(549)
inline void MSForms::IMdcCombo::PutBorderStyle ( enum fmBorderStyle BorderStyle ) {
    HRESULT _hr = put_BorderStyle(BorderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(550)
inline enum MSForms::fmBorderStyle MSForms::IMdcCombo::GetBorderStyle ( ) {
    enum fmBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(551)
inline void MSForms::IMdcCombo::PutBordersSuppress ( VARIANT_BOOL BordersSuppress ) {
    HRESULT _hr = put_BordersSuppress(BordersSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(552)
inline VARIANT_BOOL MSForms::IMdcCombo::GetBordersSuppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BordersSuppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(553)
inline void MSForms::IMdcCombo::PutBoundColumn ( VARIANT * BoundColumn ) {
    HRESULT _hr = put_BoundColumn(BoundColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(554)
inline _variant_t MSForms::IMdcCombo::GetBoundColumn ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BoundColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(555)
inline VARIANT_BOOL MSForms::IMdcCombo::GetCanPaste ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanPaste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(556)
inline void MSForms::IMdcCombo::PutColumnCount ( long ColumnCount ) {
    HRESULT _hr = put_ColumnCount(ColumnCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(557)
inline long MSForms::IMdcCombo::GetColumnCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(558)
inline void MSForms::IMdcCombo::PutColumnHeads ( VARIANT_BOOL ColumnHeads ) {
    HRESULT _hr = put_ColumnHeads(ColumnHeads);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(559)
inline VARIANT_BOOL MSForms::IMdcCombo::GetColumnHeads ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColumnHeads(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(560)
inline void MSForms::IMdcCombo::PutColumnWidths ( _bstr_t ColumnWidths ) {
    HRESULT _hr = put_ColumnWidths(ColumnWidths);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(561)
inline _bstr_t MSForms::IMdcCombo::GetColumnWidths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ColumnWidths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(562)
inline long MSForms::IMdcCombo::GetCurTargetX ( ) {
    long _result = 0;
    HRESULT _hr = get_CurTargetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(563)
inline long MSForms::IMdcCombo::GetCurTargetY ( ) {
    long _result = 0;
    HRESULT _hr = get_CurTargetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(564)
inline void MSForms::IMdcCombo::PutCurX ( long CurX ) {
    HRESULT _hr = put_CurX(CurX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(565)
inline long MSForms::IMdcCombo::GetCurX ( ) {
    long _result = 0;
    HRESULT _hr = get_CurX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(566)
inline void MSForms::IMdcCombo::PutDropButtonStyle ( enum fmDropButtonStyle DropButtonStyle ) {
    HRESULT _hr = put_DropButtonStyle(DropButtonStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(567)
inline enum MSForms::fmDropButtonStyle MSForms::IMdcCombo::GetDropButtonStyle ( ) {
    enum fmDropButtonStyle _result;
    HRESULT _hr = get_DropButtonStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(568)
inline void MSForms::IMdcCombo::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(569)
inline VARIANT_BOOL MSForms::IMdcCombo::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(570)
inline void MSForms::IMdcCombo::Put_Font_Reserved ( struct Font * _arg1 ) {
    HRESULT _hr = put__Font_Reserved(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(571)
inline void MSForms::IMdcCombo::PutRefFont ( struct Font * Font ) {
    HRESULT _hr = putref_Font(Font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(572)
inline MSForms::FontPtr MSForms::IMdcCombo::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(573)
inline void MSForms::IMdcCombo::PutFontBold ( VARIANT_BOOL FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(574)
inline VARIANT_BOOL MSForms::IMdcCombo::GetFontBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(575)
inline void MSForms::IMdcCombo::PutFontItalic ( VARIANT_BOOL FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(576)
inline VARIANT_BOOL MSForms::IMdcCombo::GetFontItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(577)
inline void MSForms::IMdcCombo::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(578)
inline _bstr_t MSForms::IMdcCombo::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(579)
inline void MSForms::IMdcCombo::PutFontSize ( const CURRENCY & FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(580)
inline CURRENCY MSForms::IMdcCombo::GetFontSize ( ) {
    CURRENCY _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(581)
inline void MSForms::IMdcCombo::PutFontStrikethru ( VARIANT_BOOL FontStrikethru ) {
    HRESULT _hr = put_FontStrikethru(FontStrikethru);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline VARIANT_BOOL MSForms::IMdcCombo::GetFontStrikethru ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontStrikethru(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(583)
inline void MSForms::IMdcCombo::PutFontUnderline ( VARIANT_BOOL FontUnderline ) {
    HRESULT _hr = put_FontUnderline(FontUnderline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(584)
inline VARIANT_BOOL MSForms::IMdcCombo::GetFontUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontUnderline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(585)
inline void MSForms::IMdcCombo::PutFontWeight ( short FontWeight ) {
    HRESULT _hr = put_FontWeight(FontWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(586)
inline short MSForms::IMdcCombo::GetFontWeight ( ) {
    short _result = 0;
    HRESULT _hr = get_FontWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(587)
inline void MSForms::IMdcCombo::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(588)
inline MSForms::OLE_COLOR MSForms::IMdcCombo::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(589)
inline void MSForms::IMdcCombo::PutHideSelection ( VARIANT_BOOL HideSelection ) {
    HRESULT _hr = put_HideSelection(HideSelection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(590)
inline VARIANT_BOOL MSForms::IMdcCombo::GetHideSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(591)
inline long MSForms::IMdcCombo::GetLineCount ( ) {
    long _result = 0;
    HRESULT _hr = get_LineCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(592)
inline long MSForms::IMdcCombo::GetListCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(593)
inline void MSForms::IMdcCombo::PutListCursor ( PIROWSET ListCursor ) {
    HRESULT _hr = put_ListCursor(ListCursor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(594)
inline MSForms::PIROWSET MSForms::IMdcCombo::GetListCursor ( ) {
    PIROWSET _result;
    HRESULT _hr = get_ListCursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(595)
inline void MSForms::IMdcCombo::PutListIndex ( VARIANT * ListIndex ) {
    HRESULT _hr = put_ListIndex(ListIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(596)
inline _variant_t MSForms::IMdcCombo::GetListIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(597)
inline void MSForms::IMdcCombo::PutListRows ( long ListRows ) {
    HRESULT _hr = put_ListRows(ListRows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(598)
inline long MSForms::IMdcCombo::GetListRows ( ) {
    long _result = 0;
    HRESULT _hr = get_ListRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(599)
inline void MSForms::IMdcCombo::PutListStyle ( enum fmListStyle ListStyle ) {
    HRESULT _hr = put_ListStyle(ListStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(600)
inline enum MSForms::fmListStyle MSForms::IMdcCombo::GetListStyle ( ) {
    enum fmListStyle _result;
    HRESULT _hr = get_ListStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(601)
inline void MSForms::IMdcCombo::PutListWidth ( VARIANT * ListWidth ) {
    HRESULT _hr = put_ListWidth(ListWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(602)
inline _variant_t MSForms::IMdcCombo::GetListWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ListWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(603)
inline void MSForms::IMdcCombo::PutLocked ( VARIANT_BOOL Locked ) {
    HRESULT _hr = put_Locked(Locked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(604)
inline VARIANT_BOOL MSForms::IMdcCombo::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(605)
inline void MSForms::IMdcCombo::PutMatchEntry ( enum fmMatchEntry MatchEntry ) {
    HRESULT _hr = put_MatchEntry(MatchEntry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(606)
inline enum MSForms::fmMatchEntry MSForms::IMdcCombo::GetMatchEntry ( ) {
    enum fmMatchEntry _result;
    HRESULT _hr = get_MatchEntry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(607)
inline VARIANT_BOOL MSForms::IMdcCombo::GetMatchFound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MatchFound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(608)
inline void MSForms::IMdcCombo::PutMatchRequired ( VARIANT_BOOL MatchRequired ) {
    HRESULT _hr = put_MatchRequired(MatchRequired);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(609)
inline VARIANT_BOOL MSForms::IMdcCombo::GetMatchRequired ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MatchRequired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(610)
inline void MSForms::IMdcCombo::PutMaxLength ( long MaxLength ) {
    HRESULT _hr = put_MaxLength(MaxLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(611)
inline long MSForms::IMdcCombo::GetMaxLength ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(612)
inline void MSForms::IMdcCombo::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(613)
inline void MSForms::IMdcCombo::PutRefMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = putref_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(614)
inline PicturePtr MSForms::IMdcCombo::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(615)
inline void MSForms::IMdcCombo::PutMousePointer ( enum fmMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(616)
inline enum MSForms::fmMousePointer MSForms::IMdcCombo::GetMousePointer ( ) {
    enum fmMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(617)
inline void MSForms::IMdcCombo::PutSelectionMargin ( VARIANT_BOOL SelectionMargin ) {
    HRESULT _hr = put_SelectionMargin(SelectionMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(618)
inline VARIANT_BOOL MSForms::IMdcCombo::GetSelectionMargin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SelectionMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(619)
inline void MSForms::IMdcCombo::PutSelLength ( long SelLength ) {
    HRESULT _hr = put_SelLength(SelLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(620)
inline long MSForms::IMdcCombo::GetSelLength ( ) {
    long _result = 0;
    HRESULT _hr = get_SelLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(621)
inline void MSForms::IMdcCombo::PutSelStart ( long SelStart ) {
    HRESULT _hr = put_SelStart(SelStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(622)
inline long MSForms::IMdcCombo::GetSelStart ( ) {
    long _result = 0;
    HRESULT _hr = get_SelStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(623)
inline void MSForms::IMdcCombo::PutSelText ( _bstr_t SelText ) {
    HRESULT _hr = put_SelText(SelText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(624)
inline _bstr_t MSForms::IMdcCombo::GetSelText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SelText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(625)
inline void MSForms::IMdcCombo::PutShowDropButtonWhen ( enum fmShowDropButtonWhen ShowDropButtonWhen ) {
    HRESULT _hr = put_ShowDropButtonWhen(ShowDropButtonWhen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(626)
inline enum MSForms::fmShowDropButtonWhen MSForms::IMdcCombo::GetShowDropButtonWhen ( ) {
    enum fmShowDropButtonWhen _result;
    HRESULT _hr = get_ShowDropButtonWhen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(627)
inline void MSForms::IMdcCombo::PutSpecialEffect ( enum fmSpecialEffect SpecialEffect ) {
    HRESULT _hr = put_SpecialEffect(SpecialEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(628)
inline enum MSForms::fmSpecialEffect MSForms::IMdcCombo::GetSpecialEffect ( ) {
    enum fmSpecialEffect _result;
    HRESULT _hr = get_SpecialEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(629)
inline void MSForms::IMdcCombo::PutStyle ( enum fmStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(630)
inline enum MSForms::fmStyle MSForms::IMdcCombo::GetStyle ( ) {
    enum fmStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(631)
inline void MSForms::IMdcCombo::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(632)
inline _bstr_t MSForms::IMdcCombo::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(633)
inline void MSForms::IMdcCombo::PutTextAlign ( enum fmTextAlign TextAlign ) {
    HRESULT _hr = put_TextAlign(TextAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(634)
inline enum MSForms::fmTextAlign MSForms::IMdcCombo::GetTextAlign ( ) {
    enum fmTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(635)
inline void MSForms::IMdcCombo::PutTextColumn ( VARIANT * TextColumn ) {
    HRESULT _hr = put_TextColumn(TextColumn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(636)
inline _variant_t MSForms::IMdcCombo::GetTextColumn ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TextColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(637)
inline long MSForms::IMdcCombo::GetTextLength ( ) {
    long _result = 0;
    HRESULT _hr = get_TextLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(638)
inline void MSForms::IMdcCombo::PutTopIndex ( VARIANT * TopIndex ) {
    HRESULT _hr = put_TopIndex(TopIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(639)
inline _variant_t MSForms::IMdcCombo::GetTopIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TopIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(640)
inline VARIANT_BOOL MSForms::IMdcCombo::GetValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(641)
inline void MSForms::IMdcCombo::PutValue ( VARIANT * Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(642)
inline _variant_t MSForms::IMdcCombo::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(643)
inline _variant_t MSForms::IMdcCombo::GetColumn ( VARIANT * pvargColumn, VARIANT * pvargIndex ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Column(pvargColumn, pvargIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(644)
inline void MSForms::IMdcCombo::PutColumn ( VARIANT * pvargColumn, VARIANT * pvargIndex, VARIANT * pvargValue ) {
    HRESULT _hr = put_Column(pvargColumn, pvargIndex, pvargValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(645)
inline _variant_t MSForms::IMdcCombo::GetList ( VARIANT * pvargIndex, VARIANT * pvargColumn ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_List(pvargIndex, pvargColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(646)
inline void MSForms::IMdcCombo::PutList ( VARIANT * pvargIndex, VARIANT * pvargColumn, VARIANT * pvargValue ) {
    HRESULT _hr = put_List(pvargIndex, pvargColumn, pvargValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(647)
inline HRESULT MSForms::IMdcCombo::AddItem ( VARIANT * pvargItem, VARIANT * pvargIndex ) {
    HRESULT _hr = raw_AddItem(pvargItem, pvargIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(648)
inline HRESULT MSForms::IMdcCombo::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(649)
inline HRESULT MSForms::IMdcCombo::DropDown ( ) {
    HRESULT _hr = raw_DropDown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(650)
inline HRESULT MSForms::IMdcCombo::RemoveItem ( VARIANT * pvargIndex ) {
    HRESULT _hr = raw_RemoveItem(pvargIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(651)
inline HRESULT MSForms::IMdcCombo::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(652)
inline HRESULT MSForms::IMdcCombo::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(653)
inline HRESULT MSForms::IMdcCombo::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(654)
inline void MSForms::IMdcCombo::PutIMEMode ( enum fmIMEMode IMEMode ) {
    HRESULT _hr = put_IMEMode(IMEMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(655)
inline enum MSForms::fmIMEMode MSForms::IMdcCombo::GetIMEMode ( ) {
    enum fmIMEMode _result;
    HRESULT _hr = get_IMEMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(656)
inline void MSForms::IMdcCombo::PutEnterFieldBehavior ( enum fmEnterFieldBehavior EnterFieldBehavior ) {
    HRESULT _hr = put_EnterFieldBehavior(EnterFieldBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(657)
inline enum MSForms::fmEnterFieldBehavior MSForms::IMdcCombo::GetEnterFieldBehavior ( ) {
    enum fmEnterFieldBehavior _result;
    HRESULT _hr = get_EnterFieldBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline void MSForms::IMdcCombo::PutDragBehavior ( enum fmDragBehavior DragBehavior ) {
    HRESULT _hr = put_DragBehavior(DragBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(659)
inline enum MSForms::fmDragBehavior MSForms::IMdcCombo::GetDragBehavior ( ) {
    enum fmDragBehavior _result;
    HRESULT _hr = get_DragBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(660)
inline enum MSForms::fmDisplayStyle MSForms::IMdcCombo::GetDisplayStyle ( ) {
    enum fmDisplayStyle _result;
    HRESULT _hr = get_DisplayStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMdcCheckBox wrapper method implementations
//

#pragma implementation_key(661)
inline void MSForms::IMdcCheckBox::PutAccelerator ( _bstr_t Accelerator ) {
    HRESULT _hr = put_Accelerator(Accelerator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(662)
inline _bstr_t MSForms::IMdcCheckBox::GetAccelerator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(663)
inline void MSForms::IMdcCheckBox::PutAlignment ( enum fmAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(664)
inline enum MSForms::fmAlignment MSForms::IMdcCheckBox::GetAlignment ( ) {
    enum fmAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(665)
inline void MSForms::IMdcCheckBox::PutAutoSize ( VARIANT_BOOL AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(666)
inline VARIANT_BOOL MSForms::IMdcCheckBox::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(667)
inline void MSForms::IMdcCheckBox::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(668)
inline MSForms::OLE_COLOR MSForms::IMdcCheckBox::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(669)
inline void MSForms::IMdcCheckBox::PutBackStyle ( enum fmBackStyle BackStyle ) {
    HRESULT _hr = put_BackStyle(BackStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(670)
inline enum MSForms::fmBackStyle MSForms::IMdcCheckBox::GetBackStyle ( ) {
    enum fmBackStyle _result;
    HRESULT _hr = get_BackStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(671)
inline void MSForms::IMdcCheckBox::PutBordersSuppress ( VARIANT_BOOL BordersSuppress ) {
    HRESULT _hr = put_BordersSuppress(BordersSuppress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(672)
inline VARIANT_BOOL MSForms::IMdcCheckBox::GetBordersSuppress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BordersSuppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(673)
inline void MSForms::IMdcCheckBox::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(674)
inline _bstr_t MSForms::IMdcCheckBox::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(675)
inline void MSForms::IMdcCheckBox::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(676)
inline VARIANT_BOOL MSForms::IMdcCheckBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(677)
inline void MSForms::IMdcCheckBox::Put_Font_Reserved ( struct Font * _arg1 ) {
    HRESULT _hr = put__Font_Reserved(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(678)
inline void MSForms::IMdcCheckBox::PutRefFont ( struct Font * Font ) {
    HRESULT _hr = putref_Font(Font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(679)
inline MSForms::FontPtr MSForms::IMdcCheckBox::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(680)
inline void MSForms::IMdcCheckBox::PutFontBold ( VARIANT_BOOL FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(681)
inline VARIANT_BOOL MSForms::IMdcCheckBox::GetFontBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(682)
inline void MSForms::IMdcCheckBox::PutFontItalic ( VARIANT_BOOL FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(683)
inline VARIANT_BOOL MSForms::IMdcCheckBox::GetFontItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(684)
inline void MSForms::IMdcCheckBox::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(685)
inline _bstr_t MSForms::IMdcCheckBox::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(686)
inline void MSForms::IMdcCheckBox::PutFontSize ( const CURRENCY & FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(687)
inline CURRENCY MSForms::IMdcCheckBox::GetFontSize ( ) {
    CURRENCY _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(688)
inline void MSForms::IMdcCheckBox::PutFontStrikethru ( VARIANT_BOOL FontStrikethru ) {
    HRESULT _hr = put_FontStrikethru(FontStrikethru);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(689)
inline VARIANT_BOOL MSForms::IMdcCheckBox::GetFontStrikethru ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontStrikethru(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(690)
inline void MSForms::IMdcCheckBox::PutFontUnderline ( VARIANT_BOOL FontUnderline ) {
    HRESULT _hr = put_FontUnderline(FontUnderline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(691)
inline VARIANT_BOOL MSForms::IMdcCheckBox::GetFontUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontUnderline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(692)
inline void MSForms::IMdcCheckBox::PutFontWeight ( short FontWeight ) {
    HRESULT _hr = put_FontWeight(FontWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(693)
inline short MSForms::IMdcCheckBox::GetFontWeight ( ) {
    short _result = 0;
    HRESULT _hr = get_FontWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(694)
inline void MSForms::IMdcCheckBox::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(695)
inline MSForms::OLE_COLOR MSForms::IMdcCheckBox::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(696)
inline void MSForms::IMdcCheckBox::PutLocked ( VARIANT_BOOL Locked ) {
    HRESULT _hr = put_Locked(Locked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(697)
inline VARIANT_BOOL MSForms::IMdcCheckBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(698)
inline void MSForms::IMdcCheckBox::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(699)
inline void MSForms::IMdcCheckBox::PutRefMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = putref_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(700)
inline PicturePtr MSForms::IMdcCheckBox::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(701)
inline void MSForms::IMdcCheckBox::PutMousePointer ( enum fmMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(702)
inline enum MSForms::fmMousePointer MSForms::IMdcCheckBox::GetMousePointer ( ) {
    enum fmMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(703)
inline void MSForms::IMdcCheckBox::PutMultiSelect ( enum fmMultiSelect MultiSelect ) {
    HRESULT _hr = put_MultiSelect(MultiSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(704)
inline enum MSForms::fmMultiSelect MSForms::IMdcCheckBox::GetMultiSelect ( ) {
    enum fmMultiSelect _result;
    HRESULT _hr = get_MultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(705)
inline void MSForms::IMdcCheckBox::PutPicture ( struct Picture * Picture ) {
    HRESULT _hr = put_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(706)
inline void MSForms::IMdcCheckBox::PutRefPicture ( struct Picture * Picture ) {
    HRESULT _hr = putref_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(707)
inline PicturePtr MSForms::IMdcCheckBox::GetPicture ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(708)
inline void MSForms::IMdcCheckBox::PutPicturePosition ( enum fmPicturePosition PicPos ) {
    HRESULT _hr = put_PicturePosition(PicPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(709)
inline enum MSForms::fmPicturePosition MSForms::IMdcCheckBox::GetPicturePosition ( ) {
    enum fmPicturePosition _result;
    HRESULT _hr = get_PicturePosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(710)
inline void MSForms::IMdcCheckBox::PutSpecialEffect ( enum fmButtonEffect SpecialEffect ) {
    HRESULT _hr = put_SpecialEffect(SpecialEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(711)
inline enum MSForms::fmButtonEffect MSForms::IMdcCheckBox::GetSpecialEffect ( ) {
    enum fmButtonEffect _result;
    HRESULT _hr = get_SpecialEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(712)
inline void MSForms::IMdcCheckBox::PutTripleState ( VARIANT_BOOL TripleState ) {
    HRESULT _hr = put_TripleState(TripleState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(713)
inline VARIANT_BOOL MSForms::IMdcCheckBox::GetTripleState ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TripleState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(714)
inline VARIANT_BOOL MSForms::IMdcCheckBox::GetValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(715)
inline void MSForms::IMdcCheckBox::PutValue ( VARIANT * Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(716)
inline _variant_t MSForms::IMdcCheckBox::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(717)
inline void MSForms::IMdcCheckBox::PutWordWrap ( VARIANT_BOOL WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(718)
inline VARIANT_BOOL MSForms::IMdcCheckBox::GetWordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(719)
inline enum MSForms::fmDisplayStyle MSForms::IMdcCheckBox::GetDisplayStyle ( ) {
    enum fmDisplayStyle _result;
    HRESULT _hr = get_DisplayStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(720)
inline void MSForms::IMdcCheckBox::PutGroupName ( _bstr_t GroupName ) {
    HRESULT _hr = put_GroupName(GroupName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(721)
inline _bstr_t MSForms::IMdcCheckBox::GetGroupName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GroupName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(722)
inline void MSForms::IMdcCheckBox::PutTextAlign ( enum fmTextAlign TextAlign ) {
    HRESULT _hr = put_TextAlign(TextAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(723)
inline enum MSForms::fmTextAlign MSForms::IMdcCheckBox::GetTextAlign ( ) {
    enum fmTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IScrollbar wrapper method implementations
//

#pragma implementation_key(724)
inline void MSForms::IScrollbar::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(725)
inline MSForms::OLE_COLOR MSForms::IScrollbar::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(726)
inline void MSForms::IScrollbar::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(727)
inline MSForms::OLE_COLOR MSForms::IScrollbar::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(728)
inline void MSForms::IScrollbar::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline VARIANT_BOOL MSForms::IScrollbar::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(730)
inline void MSForms::IScrollbar::PutMousePointer ( enum fmMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(731)
inline enum MSForms::fmMousePointer MSForms::IScrollbar::GetMousePointer ( ) {
    enum fmMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(732)
inline void MSForms::IScrollbar::PutValue ( long Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(733)
inline long MSForms::IScrollbar::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(734)
inline void MSForms::IScrollbar::PutMin ( long Min ) {
    HRESULT _hr = put_Min(Min);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(735)
inline long MSForms::IScrollbar::GetMin ( ) {
    long _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(736)
inline void MSForms::IScrollbar::PutMax ( long Max ) {
    HRESULT _hr = put_Max(Max);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(737)
inline long MSForms::IScrollbar::GetMax ( ) {
    long _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(738)
inline void MSForms::IScrollbar::PutSmallChange ( long SmallChange ) {
    HRESULT _hr = put_SmallChange(SmallChange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(739)
inline long MSForms::IScrollbar::GetSmallChange ( ) {
    long _result = 0;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(740)
inline void MSForms::IScrollbar::PutLargeChange ( long LargeChange ) {
    HRESULT _hr = put_LargeChange(LargeChange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(741)
inline long MSForms::IScrollbar::GetLargeChange ( ) {
    long _result = 0;
    HRESULT _hr = get_LargeChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(742)
inline void MSForms::IScrollbar::PutProportionalThumb ( VARIANT_BOOL ProportionalThumb ) {
    HRESULT _hr = put_ProportionalThumb(ProportionalThumb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(743)
inline VARIANT_BOOL MSForms::IScrollbar::GetProportionalThumb ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProportionalThumb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(744)
inline void MSForms::IScrollbar::PutOrientation ( enum fmOrientation Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(745)
inline enum MSForms::fmOrientation MSForms::IScrollbar::GetOrientation ( ) {
    enum fmOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(746)
inline void MSForms::IScrollbar::PutDelay ( long Delay ) {
    HRESULT _hr = put_Delay(Delay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(747)
inline long MSForms::IScrollbar::GetDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_Delay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(748)
inline void MSForms::IScrollbar::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(749)
inline void MSForms::IScrollbar::PutRefMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = putref_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(750)
inline PicturePtr MSForms::IScrollbar::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

//
// interface Tab wrapper method implementations
//

#pragma implementation_key(751)
inline void MSForms::Tab::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(752)
inline _bstr_t MSForms::Tab::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(753)
inline void MSForms::Tab::PutControlTipText ( _bstr_t ControlTipText ) {
    HRESULT _hr = put_ControlTipText(ControlTipText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(754)
inline _bstr_t MSForms::Tab::GetControlTipText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ControlTipText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(755)
inline void MSForms::Tab::PutEnabled ( VARIANT_BOOL fEnabled ) {
    HRESULT _hr = put_Enabled(fEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(756)
inline VARIANT_BOOL MSForms::Tab::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(757)
inline void MSForms::Tab::PutIndex ( long Index ) {
    HRESULT _hr = put_Index(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(758)
inline long MSForms::Tab::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(759)
inline void MSForms::Tab::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(760)
inline _bstr_t MSForms::Tab::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(761)
inline void MSForms::Tab::PutTag ( _bstr_t Tag ) {
    HRESULT _hr = put_Tag(Tag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(762)
inline _bstr_t MSForms::Tab::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(763)
inline void MSForms::Tab::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(764)
inline VARIANT_BOOL MSForms::Tab::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(765)
inline void MSForms::Tab::PutAccelerator ( _bstr_t Accelerator ) {
    HRESULT _hr = put_Accelerator(Accelerator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(766)
inline _bstr_t MSForms::Tab::GetAccelerator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Tabs wrapper method implementations
//

#pragma implementation_key(767)
inline long MSForms::Tabs::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(768)
inline IUnknownPtr MSForms::Tabs::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(769)
inline MSForms::TabPtr MSForms::Tabs::_GetItemByIndex ( long lIndex ) {
    struct Tab * _result = 0;
    HRESULT _hr = raw__GetItemByIndex(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabPtr(_result, false);
}

#pragma implementation_key(770)
inline MSForms::TabPtr MSForms::Tabs::_GetItemByName ( _bstr_t bstr ) {
    struct Tab * _result = 0;
    HRESULT _hr = raw__GetItemByName(bstr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabPtr(_result, false);
}

#pragma implementation_key(771)
inline IDispatchPtr MSForms::Tabs::Item ( const _variant_t & varg ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(varg, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(772)
inline IUnknownPtr MSForms::Tabs::Enum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(773)
inline MSForms::TabPtr MSForms::Tabs::Add ( const _variant_t & bstrName, const _variant_t & bstrCaption, const _variant_t & lIndex ) {
    struct Tab * _result = 0;
    HRESULT _hr = raw_Add(bstrName, bstrCaption, lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabPtr(_result, false);
}

#pragma implementation_key(774)
inline MSForms::TabPtr MSForms::Tabs::_Add ( _bstr_t bstrName, _bstr_t bstrCaption ) {
    struct Tab * _result = 0;
    HRESULT _hr = raw__Add(bstrName, bstrCaption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabPtr(_result, false);
}

#pragma implementation_key(775)
inline MSForms::TabPtr MSForms::Tabs::_Insert ( _bstr_t bstrName, _bstr_t bstrCaption, long lIndex ) {
    struct Tab * _result = 0;
    HRESULT _hr = raw__Insert(bstrName, bstrCaption, lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabPtr(_result, false);
}

#pragma implementation_key(776)
inline HRESULT MSForms::Tabs::Remove ( const _variant_t & varg ) {
    HRESULT _hr = raw_Remove(varg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(777)
inline HRESULT MSForms::Tabs::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITabStrip wrapper method implementations
//

#pragma implementation_key(778)
inline void MSForms::ITabStrip::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(779)
inline MSForms::OLE_COLOR MSForms::ITabStrip::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(780)
inline void MSForms::ITabStrip::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(781)
inline MSForms::OLE_COLOR MSForms::ITabStrip::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(782)
inline void MSForms::ITabStrip::Put_Font_Reserved ( struct Font * _arg1 ) {
    HRESULT _hr = put__Font_Reserved(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(783)
inline void MSForms::ITabStrip::PutRefFont ( struct Font * Font ) {
    HRESULT _hr = putref_Font(Font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(784)
inline MSForms::FontPtr MSForms::ITabStrip::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(785)
inline void MSForms::ITabStrip::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(786)
inline _bstr_t MSForms::ITabStrip::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(787)
inline void MSForms::ITabStrip::PutFontBold ( VARIANT_BOOL FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(788)
inline VARIANT_BOOL MSForms::ITabStrip::GetFontBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(789)
inline void MSForms::ITabStrip::PutFontItalic ( VARIANT_BOOL FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(790)
inline VARIANT_BOOL MSForms::ITabStrip::GetFontItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(791)
inline void MSForms::ITabStrip::PutFontUnderline ( VARIANT_BOOL FontUnder ) {
    HRESULT _hr = put_FontUnderline(FontUnder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(792)
inline VARIANT_BOOL MSForms::ITabStrip::GetFontUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontUnderline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(793)
inline void MSForms::ITabStrip::PutFontStrikethru ( VARIANT_BOOL FontStrike ) {
    HRESULT _hr = put_FontStrikethru(FontStrike);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(794)
inline VARIANT_BOOL MSForms::ITabStrip::GetFontStrikethru ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontStrikethru(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(795)
inline void MSForms::ITabStrip::PutFontSize ( const CURRENCY & FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(796)
inline CURRENCY MSForms::ITabStrip::GetFontSize ( ) {
    CURRENCY _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(797)
inline void MSForms::ITabStrip::PutEnabled ( VARIANT_BOOL fnabled ) {
    HRESULT _hr = put_Enabled(fnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(798)
inline VARIANT_BOOL MSForms::ITabStrip::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(799)
inline void MSForms::ITabStrip::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(800)
inline void MSForms::ITabStrip::PutRefMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = putref_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(801)
inline PicturePtr MSForms::ITabStrip::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(802)
inline void MSForms::ITabStrip::PutMousePointer ( enum fmMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(803)
inline enum MSForms::fmMousePointer MSForms::ITabStrip::GetMousePointer ( ) {
    enum fmMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(804)
inline void MSForms::ITabStrip::PutMultiRow ( VARIANT_BOOL MultiRow ) {
    HRESULT _hr = put_MultiRow(MultiRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(805)
inline VARIANT_BOOL MSForms::ITabStrip::GetMultiRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(806)
inline void MSForms::ITabStrip::PutStyle ( enum fmTabStyle TabStyle ) {
    HRESULT _hr = put_Style(TabStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(807)
inline enum MSForms::fmTabStyle MSForms::ITabStrip::GetStyle ( ) {
    enum fmTabStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(808)
inline void MSForms::ITabStrip::PutTabOrientation ( enum fmTabOrientation TabOrientation ) {
    HRESULT _hr = put_TabOrientation(TabOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(809)
inline enum MSForms::fmTabOrientation MSForms::ITabStrip::GetTabOrientation ( ) {
    enum fmTabOrientation _result;
    HRESULT _hr = get_TabOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(810)
inline HRESULT MSForms::ITabStrip::_SetTabFixedWidth ( long TabFixedWidth ) {
    HRESULT _hr = raw__SetTabFixedWidth(TabFixedWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(811)
inline HRESULT MSForms::ITabStrip::_GetTabFixedWidth ( long * TabFixedWidth ) {
    HRESULT _hr = raw__GetTabFixedWidth(TabFixedWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(812)
inline HRESULT MSForms::ITabStrip::_SetTabFixedHeight ( long TabFixedHeight ) {
    HRESULT _hr = raw__SetTabFixedHeight(TabFixedHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(813)
inline HRESULT MSForms::ITabStrip::_GetTabFixedHeight ( long * TabFixedHeight ) {
    HRESULT _hr = raw__GetTabFixedHeight(TabFixedHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(814)
inline HRESULT MSForms::ITabStrip::_GetClientTop ( long * ClientTop ) {
    HRESULT _hr = raw__GetClientTop(ClientTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(815)
inline float MSForms::ITabStrip::GetClientTop ( ) {
    float _result = 0;
    HRESULT _hr = get_ClientTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(816)
inline HRESULT MSForms::ITabStrip::_GetClientLeft ( long * ClientLeft ) {
    HRESULT _hr = raw__GetClientLeft(ClientLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(817)
inline float MSForms::ITabStrip::GetClientLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_ClientLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(818)
inline HRESULT MSForms::ITabStrip::_GetClientWidth ( long * ClientWidth ) {
    HRESULT _hr = raw__GetClientWidth(ClientWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(819)
inline float MSForms::ITabStrip::GetClientWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_ClientWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(820)
inline HRESULT MSForms::ITabStrip::_GetClientHeight ( long * ClientHeight ) {
    HRESULT _hr = raw__GetClientHeight(ClientHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(821)
inline float MSForms::ITabStrip::GetClientHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_ClientHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(822)
inline MSForms::TabsPtr MSForms::ITabStrip::GetTabs ( ) {
    struct Tabs * _result = 0;
    HRESULT _hr = get_Tabs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabsPtr(_result, false);
}

#pragma implementation_key(823)
inline MSForms::TabPtr MSForms::ITabStrip::GetSelectedItem ( ) {
    struct Tab * _result = 0;
    HRESULT _hr = get_SelectedItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabPtr(_result, false);
}

#pragma implementation_key(824)
inline void MSForms::ITabStrip::PutValue ( long Index ) {
    HRESULT _hr = put_Value(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(825)
inline long MSForms::ITabStrip::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(826)
inline void MSForms::ITabStrip::PutTabFixedWidth ( float TabFixedWidth ) {
    HRESULT _hr = put_TabFixedWidth(TabFixedWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(827)
inline float MSForms::ITabStrip::GetTabFixedWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_TabFixedWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(828)
inline void MSForms::ITabStrip::PutTabFixedHeight ( float TabFixedHeight ) {
    HRESULT _hr = put_TabFixedHeight(TabFixedHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(829)
inline float MSForms::ITabStrip::GetTabFixedHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_TabFixedHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(830)
inline void MSForms::ITabStrip::PutFontWeight ( short FontWeight ) {
    HRESULT _hr = put_FontWeight(FontWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(831)
inline short MSForms::ITabStrip::GetFontWeight ( ) {
    short _result = 0;
    HRESULT _hr = get_FontWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpinbutton wrapper method implementations
//

#pragma implementation_key(832)
inline void MSForms::ISpinbutton::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(833)
inline MSForms::OLE_COLOR MSForms::ISpinbutton::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(834)
inline void MSForms::ISpinbutton::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(835)
inline MSForms::OLE_COLOR MSForms::ISpinbutton::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(836)
inline void MSForms::ISpinbutton::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(837)
inline VARIANT_BOOL MSForms::ISpinbutton::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(838)
inline void MSForms::ISpinbutton::PutMousePointer ( enum fmMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(839)
inline enum MSForms::fmMousePointer MSForms::ISpinbutton::GetMousePointer ( ) {
    enum fmMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(840)
inline void MSForms::ISpinbutton::PutValue ( long Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(841)
inline long MSForms::ISpinbutton::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(842)
inline void MSForms::ISpinbutton::PutMin ( long Min ) {
    HRESULT _hr = put_Min(Min);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(843)
inline long MSForms::ISpinbutton::GetMin ( ) {
    long _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(844)
inline void MSForms::ISpinbutton::PutMax ( long Max ) {
    HRESULT _hr = put_Max(Max);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(845)
inline long MSForms::ISpinbutton::GetMax ( ) {
    long _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(846)
inline void MSForms::ISpinbutton::PutSmallChange ( long SmallChange ) {
    HRESULT _hr = put_SmallChange(SmallChange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(847)
inline long MSForms::ISpinbutton::GetSmallChange ( ) {
    long _result = 0;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(848)
inline void MSForms::ISpinbutton::PutOrientation ( enum fmOrientation Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(849)
inline enum MSForms::fmOrientation MSForms::ISpinbutton::GetOrientation ( ) {
    enum fmOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(850)
inline void MSForms::ISpinbutton::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(851)
inline void MSForms::ISpinbutton::PutRefMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = putref_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(852)
inline PicturePtr MSForms::ISpinbutton::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(853)
inline void MSForms::ISpinbutton::PutDelay ( long Delay ) {
    HRESULT _hr = put_Delay(Delay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(854)
inline long MSForms::ISpinbutton::GetDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_Delay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IImage wrapper method implementations
//

#pragma implementation_key(855)
inline void MSForms::IImage::PutEnabled ( VARIANT_BOOL fEnabled ) {
    HRESULT _hr = put_Enabled(fEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(856)
inline VARIANT_BOOL MSForms::IImage::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(857)
inline void MSForms::IImage::PutMousePointer ( enum fmMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(858)
inline enum MSForms::fmMousePointer MSForms::IImage::GetMousePointer ( ) {
    enum fmMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(859)
inline void MSForms::IImage::PutAutoSize ( VARIANT_BOOL fAutoSize ) {
    HRESULT _hr = put_AutoSize(fAutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(860)
inline VARIANT_BOOL MSForms::IImage::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(861)
inline void MSForms::IImage::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(862)
inline MSForms::OLE_COLOR MSForms::IImage::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(863)
inline void MSForms::IImage::PutBackStyle ( enum fmBackStyle BackStyle ) {
    HRESULT _hr = put_BackStyle(BackStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(864)
inline enum MSForms::fmBackStyle MSForms::IImage::GetBackStyle ( ) {
    enum fmBackStyle _result;
    HRESULT _hr = get_BackStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(865)
inline void MSForms::IImage::PutBorderColor ( OLE_COLOR BorderColor ) {
    HRESULT _hr = put_BorderColor(BorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(866)
inline MSForms::OLE_COLOR MSForms::IImage::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(867)
inline void MSForms::IImage::PutBorderStyle ( enum fmBorderStyle Style ) {
    HRESULT _hr = put_BorderStyle(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(868)
inline enum MSForms::fmBorderStyle MSForms::IImage::GetBorderStyle ( ) {
    enum fmBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(869)
inline void MSForms::IImage::PutPicture ( struct Picture * Picture ) {
    HRESULT _hr = put_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(870)
inline void MSForms::IImage::PutRefPicture ( struct Picture * Picture ) {
    HRESULT _hr = putref_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(871)
inline PicturePtr MSForms::IImage::GetPicture ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(872)
inline void MSForms::IImage::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(873)
inline void MSForms::IImage::PutRefMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = putref_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(874)
inline PicturePtr MSForms::IImage::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(875)
inline void MSForms::IImage::PutPictureSizeMode ( enum fmPictureSizeMode PictureSizeMode ) {
    HRESULT _hr = put_PictureSizeMode(PictureSizeMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(876)
inline enum MSForms::fmPictureSizeMode MSForms::IImage::GetPictureSizeMode ( ) {
    enum fmPictureSizeMode _result;
    HRESULT _hr = get_PictureSizeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(877)
inline void MSForms::IImage::PutPictureAlignment ( enum fmPictureAlignment PictureAlignment ) {
    HRESULT _hr = put_PictureAlignment(PictureAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(878)
inline enum MSForms::fmPictureAlignment MSForms::IImage::GetPictureAlignment ( ) {
    enum fmPictureAlignment _result;
    HRESULT _hr = get_PictureAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(879)
inline void MSForms::IImage::PutPictureTiling ( VARIANT_BOOL PictureTiling ) {
    HRESULT _hr = put_PictureTiling(PictureTiling);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(880)
inline VARIANT_BOOL MSForms::IImage::GetPictureTiling ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PictureTiling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(881)
inline void MSForms::IImage::PutSpecialEffect ( enum fmSpecialEffect SpecialEffect ) {
    HRESULT _hr = put_SpecialEffect(SpecialEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(882)
inline enum MSForms::fmSpecialEffect MSForms::IImage::GetSpecialEffect ( ) {
    enum fmSpecialEffect _result;
    HRESULT _hr = get_SpecialEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWHTMLSubmitButton wrapper method implementations
//

#pragma implementation_key(883)
inline void MSForms::IWHTMLSubmitButton::PutAction ( _bstr_t Action ) {
    HRESULT _hr = put_Action(Action);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(884)
inline _bstr_t MSForms::IWHTMLSubmitButton::GetAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(885)
inline void MSForms::IWHTMLSubmitButton::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(886)
inline _bstr_t MSForms::IWHTMLSubmitButton::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(887)
inline void MSForms::IWHTMLSubmitButton::PutEncoding ( _bstr_t Encoding ) {
    HRESULT _hr = put_Encoding(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(888)
inline _bstr_t MSForms::IWHTMLSubmitButton::GetEncoding ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(889)
inline void MSForms::IWHTMLSubmitButton::PutMethod ( _bstr_t Method ) {
    HRESULT _hr = put_Method(Method);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(890)
inline _bstr_t MSForms::IWHTMLSubmitButton::GetMethod ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(891)
inline void MSForms::IWHTMLSubmitButton::PutHTMLName ( _bstr_t HTMLName ) {
    HRESULT _hr = put_HTMLName(HTMLName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(892)
inline _bstr_t MSForms::IWHTMLSubmitButton::GetHTMLName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(893)
inline void MSForms::IWHTMLSubmitButton::PutHTMLType ( _bstr_t HTMLType ) {
    HRESULT _hr = put_HTMLType(HTMLType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(894)
inline _bstr_t MSForms::IWHTMLSubmitButton::GetHTMLType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWHTMLImage wrapper method implementations
//

#pragma implementation_key(895)
inline void MSForms::IWHTMLImage::PutAction ( _bstr_t Action ) {
    HRESULT _hr = put_Action(Action);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(896)
inline _bstr_t MSForms::IWHTMLImage::GetAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(897)
inline void MSForms::IWHTMLImage::PutSource ( _bstr_t Source ) {
    HRESULT _hr = put_Source(Source);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(898)
inline _bstr_t MSForms::IWHTMLImage::GetSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Source(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(899)
inline void MSForms::IWHTMLImage::PutEncoding ( _bstr_t Encoding ) {
    HRESULT _hr = put_Encoding(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(900)
inline _bstr_t MSForms::IWHTMLImage::GetEncoding ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(901)
inline void MSForms::IWHTMLImage::PutMethod ( _bstr_t Method ) {
    HRESULT _hr = put_Method(Method);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(902)
inline _bstr_t MSForms::IWHTMLImage::GetMethod ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(903)
inline void MSForms::IWHTMLImage::PutHTMLName ( _bstr_t HTMLName ) {
    HRESULT _hr = put_HTMLName(HTMLName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(904)
inline _bstr_t MSForms::IWHTMLImage::GetHTMLName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(905)
inline void MSForms::IWHTMLImage::PutHTMLType ( _bstr_t HTMLType ) {
    HRESULT _hr = put_HTMLType(HTMLType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(906)
inline _bstr_t MSForms::IWHTMLImage::GetHTMLType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWHTMLReset wrapper method implementations
//

#pragma implementation_key(907)
inline void MSForms::IWHTMLReset::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(908)
inline _bstr_t MSForms::IWHTMLReset::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(909)
inline void MSForms::IWHTMLReset::PutHTMLName ( _bstr_t HTMLName ) {
    HRESULT _hr = put_HTMLName(HTMLName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(910)
inline _bstr_t MSForms::IWHTMLReset::GetHTMLName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(911)
inline void MSForms::IWHTMLReset::PutHTMLType ( _bstr_t HTMLType ) {
    HRESULT _hr = put_HTMLType(HTMLType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(912)
inline _bstr_t MSForms::IWHTMLReset::GetHTMLType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWHTMLCheckbox wrapper method implementations
//

#pragma implementation_key(913)
inline void MSForms::IWHTMLCheckbox::PutHTMLName ( _bstr_t HTMLName ) {
    HRESULT _hr = put_HTMLName(HTMLName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(914)
inline _bstr_t MSForms::IWHTMLCheckbox::GetHTMLName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(915)
inline void MSForms::IWHTMLCheckbox::PutValue ( _bstr_t Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(916)
inline _bstr_t MSForms::IWHTMLCheckbox::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(917)
inline void MSForms::IWHTMLCheckbox::PutChecked ( VARIANT_BOOL Checked ) {
    HRESULT _hr = put_Checked(Checked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(918)
inline VARIANT_BOOL MSForms::IWHTMLCheckbox::GetChecked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Checked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(919)
inline void MSForms::IWHTMLCheckbox::PutHTMLType ( _bstr_t HTMLType ) {
    HRESULT _hr = put_HTMLType(HTMLType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(920)
inline _bstr_t MSForms::IWHTMLCheckbox::GetHTMLType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWHTMLOption wrapper method implementations
//

#pragma implementation_key(921)
inline void MSForms::IWHTMLOption::PutHTMLName ( _bstr_t HTMLName ) {
    HRESULT _hr = put_HTMLName(HTMLName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(922)
inline _bstr_t MSForms::IWHTMLOption::GetHTMLName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(923)
inline void MSForms::IWHTMLOption::PutValue ( _bstr_t Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(924)
inline _bstr_t MSForms::IWHTMLOption::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(925)
inline void MSForms::IWHTMLOption::PutChecked ( VARIANT_BOOL Checked ) {
    HRESULT _hr = put_Checked(Checked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(926)
inline VARIANT_BOOL MSForms::IWHTMLOption::GetChecked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Checked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(927)
inline void MSForms::IWHTMLOption::PutHTMLType ( _bstr_t HTMLType ) {
    HRESULT _hr = put_HTMLType(HTMLType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(928)
inline _bstr_t MSForms::IWHTMLOption::GetHTMLType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(929)
inline enum MSForms::fmDisplayStyle MSForms::IWHTMLOption::GetDisplayStyle ( ) {
    enum fmDisplayStyle _result;
    HRESULT _hr = get_DisplayStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWHTMLText wrapper method implementations
//

#pragma implementation_key(930)
inline void MSForms::IWHTMLText::PutHTMLName ( _bstr_t HTMLName ) {
    HRESULT _hr = put_HTMLName(HTMLName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(931)
inline _bstr_t MSForms::IWHTMLText::GetHTMLName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(932)
inline void MSForms::IWHTMLText::PutValue ( _bstr_t Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(933)
inline _bstr_t MSForms::IWHTMLText::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(934)
inline void MSForms::IWHTMLText::PutMaxLength ( long MaxLength ) {
    HRESULT _hr = put_MaxLength(MaxLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(935)
inline long MSForms::IWHTMLText::GetMaxLength ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(936)
inline void MSForms::IWHTMLText::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(937)
inline long MSForms::IWHTMLText::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(938)
inline void MSForms::IWHTMLText::PutHTMLType ( _bstr_t HTMLType ) {
    HRESULT _hr = put_HTMLType(HTMLType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(939)
inline _bstr_t MSForms::IWHTMLText::GetHTMLType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWHTMLHidden wrapper method implementations
//

#pragma implementation_key(940)
inline void MSForms::IWHTMLHidden::PutHTMLName ( _bstr_t HTMLName ) {
    HRESULT _hr = put_HTMLName(HTMLName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(941)
inline _bstr_t MSForms::IWHTMLHidden::GetHTMLName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(942)
inline void MSForms::IWHTMLHidden::PutValue ( _bstr_t Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(943)
inline _bstr_t MSForms::IWHTMLHidden::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(944)
inline void MSForms::IWHTMLHidden::PutHTMLType ( _bstr_t HTMLType ) {
    HRESULT _hr = put_HTMLType(HTMLType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(945)
inline _bstr_t MSForms::IWHTMLHidden::GetHTMLType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWHTMLPassword wrapper method implementations
//

#pragma implementation_key(946)
inline void MSForms::IWHTMLPassword::PutHTMLName ( _bstr_t HTMLName ) {
    HRESULT _hr = put_HTMLName(HTMLName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(947)
inline _bstr_t MSForms::IWHTMLPassword::GetHTMLName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(948)
inline void MSForms::IWHTMLPassword::PutValue ( _bstr_t Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(949)
inline _bstr_t MSForms::IWHTMLPassword::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(950)
inline void MSForms::IWHTMLPassword::PutMaxLength ( long MaxLength ) {
    HRESULT _hr = put_MaxLength(MaxLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(951)
inline long MSForms::IWHTMLPassword::GetMaxLength ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(952)
inline void MSForms::IWHTMLPassword::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(953)
inline long MSForms::IWHTMLPassword::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(954)
inline void MSForms::IWHTMLPassword::PutHTMLType ( _bstr_t HTMLType ) {
    HRESULT _hr = put_HTMLType(HTMLType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(955)
inline _bstr_t MSForms::IWHTMLPassword::GetHTMLType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWHTMLSelect wrapper method implementations
//

#pragma implementation_key(956)
inline void MSForms::IWHTMLSelect::PutHTMLName ( _bstr_t HTMLName ) {
    HRESULT _hr = put_HTMLName(HTMLName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(957)
inline _bstr_t MSForms::IWHTMLSelect::GetHTMLName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(958)
inline void MSForms::IWHTMLSelect::PutValues ( VARIANT * Values ) {
    HRESULT _hr = put_Values(Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(959)
inline _variant_t MSForms::IWHTMLSelect::GetValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(960)
inline void MSForms::IWHTMLSelect::PutDisplayValues ( VARIANT * DisplayValues ) {
    HRESULT _hr = put_DisplayValues(DisplayValues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(961)
inline _variant_t MSForms::IWHTMLSelect::GetDisplayValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DisplayValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(962)
inline void MSForms::IWHTMLSelect::PutSelected ( _bstr_t Selected ) {
    HRESULT _hr = put_Selected(Selected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(963)
inline _bstr_t MSForms::IWHTMLSelect::GetSelected ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Selected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(964)
inline void MSForms::IWHTMLSelect::PutMultiSelect ( VARIANT_BOOL MultiSelect ) {
    HRESULT _hr = put_MultiSelect(MultiSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(965)
inline VARIANT_BOOL MSForms::IWHTMLSelect::GetMultiSelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(966)
inline void MSForms::IWHTMLSelect::PutSize ( long Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(967)
inline long MSForms::IWHTMLSelect::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWHTMLTextArea wrapper method implementations
//

#pragma implementation_key(968)
inline void MSForms::IWHTMLTextArea::PutHTMLName ( _bstr_t HTMLName ) {
    HRESULT _hr = put_HTMLName(HTMLName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(969)
inline _bstr_t MSForms::IWHTMLTextArea::GetHTMLName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(970)
inline void MSForms::IWHTMLTextArea::PutValue ( _bstr_t Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(971)
inline _bstr_t MSForms::IWHTMLTextArea::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(972)
inline void MSForms::IWHTMLTextArea::PutRows ( long Rows ) {
    HRESULT _hr = put_Rows(Rows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(973)
inline long MSForms::IWHTMLTextArea::GetRows ( ) {
    long _result = 0;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(974)
inline void MSForms::IWHTMLTextArea::PutColumns ( long Columns ) {
    HRESULT _hr = put_Columns(Columns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(975)
inline long MSForms::IWHTMLTextArea::GetColumns ( ) {
    long _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(976)
inline void MSForms::IWHTMLTextArea::PutWordWrap ( _bstr_t WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(977)
inline _bstr_t MSForms::IWHTMLTextArea::GetWordWrap ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// dispinterface LabelControlEvents wrapper method implementations
//

#pragma implementation_key(978)
inline HRESULT MSForms::LabelControlEvents::BeforeDragOver ( struct IReturnBoolean * Cancel, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState DragState, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Cancel, Data, X, Y, DragState, Effect, Shift);
}

#pragma implementation_key(979)
inline HRESULT MSForms::LabelControlEvents::BeforeDropOrPaste ( struct IReturnBoolean * Cancel, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Cancel, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(980)
inline HRESULT MSForms::LabelControlEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(981)
inline HRESULT MSForms::LabelControlEvents::DblClick ( struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cancel);
}

#pragma implementation_key(982)
inline HRESULT MSForms::LabelControlEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(983)
inline HRESULT MSForms::LabelControlEvents::MouseDown ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(984)
inline HRESULT MSForms::LabelControlEvents::MouseMove ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(985)
inline HRESULT MSForms::LabelControlEvents::MouseUp ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

//
// dispinterface CommandButtonEvents wrapper method implementations
//

#pragma implementation_key(986)
inline HRESULT MSForms::CommandButtonEvents::BeforeDragOver ( struct IReturnBoolean * Cancel, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState DragState, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Cancel, Data, X, Y, DragState, Effect, Shift);
}

#pragma implementation_key(987)
inline HRESULT MSForms::CommandButtonEvents::BeforeDropOrPaste ( struct IReturnBoolean * Cancel, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Cancel, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(988)
inline HRESULT MSForms::CommandButtonEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(989)
inline HRESULT MSForms::CommandButtonEvents::DblClick ( struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cancel);
}

#pragma implementation_key(990)
inline HRESULT MSForms::CommandButtonEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(991)
inline HRESULT MSForms::CommandButtonEvents::KeyDown ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(992)
inline HRESULT MSForms::CommandButtonEvents::KeyPress ( struct IReturnInteger * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", KeyAscii);
}

#pragma implementation_key(993)
inline HRESULT MSForms::CommandButtonEvents::KeyUp ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(994)
inline HRESULT MSForms::CommandButtonEvents::MouseDown ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(995)
inline HRESULT MSForms::CommandButtonEvents::MouseMove ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(996)
inline HRESULT MSForms::CommandButtonEvents::MouseUp ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

//
// dispinterface MdcTextEvents wrapper method implementations
//

#pragma implementation_key(997)
inline HRESULT MSForms::MdcTextEvents::BeforeDragOver ( struct IReturnBoolean * Cancel, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState DragState, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Cancel, Data, X, Y, DragState, Effect, Shift);
}

#pragma implementation_key(998)
inline HRESULT MSForms::MdcTextEvents::BeforeDropOrPaste ( struct IReturnBoolean * Cancel, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Cancel, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(999)
inline HRESULT MSForms::MdcTextEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1000)
inline HRESULT MSForms::MdcTextEvents::DblClick ( struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cancel);
}

#pragma implementation_key(1001)
inline HRESULT MSForms::MdcTextEvents::DropButtonClick ( ) {
    return _com_dispatch_method(this, 0x7d2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1002)
inline HRESULT MSForms::MdcTextEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(1003)
inline HRESULT MSForms::MdcTextEvents::KeyDown ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1004)
inline HRESULT MSForms::MdcTextEvents::KeyPress ( struct IReturnInteger * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", KeyAscii);
}

#pragma implementation_key(1005)
inline HRESULT MSForms::MdcTextEvents::KeyUp ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1006)
inline HRESULT MSForms::MdcTextEvents::MouseDown ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1007)
inline HRESULT MSForms::MdcTextEvents::MouseMove ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1008)
inline HRESULT MSForms::MdcTextEvents::MouseUp ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

//
// dispinterface MdcListEvents wrapper method implementations
//

#pragma implementation_key(1009)
inline HRESULT MSForms::MdcListEvents::BeforeDragOver ( struct IReturnBoolean * Cancel, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState DragState, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Cancel, Data, X, Y, DragState, Effect, Shift);
}

#pragma implementation_key(1010)
inline HRESULT MSForms::MdcListEvents::BeforeDropOrPaste ( struct IReturnBoolean * Cancel, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Cancel, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(1011)
inline HRESULT MSForms::MdcListEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1012)
inline HRESULT MSForms::MdcListEvents::Click ( ) {
    return _com_dispatch_method(this, 0xfffffd9e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1013)
inline HRESULT MSForms::MdcListEvents::DblClick ( struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cancel);
}

#pragma implementation_key(1014)
inline HRESULT MSForms::MdcListEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(1015)
inline HRESULT MSForms::MdcListEvents::KeyDown ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1016)
inline HRESULT MSForms::MdcListEvents::KeyPress ( struct IReturnInteger * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", KeyAscii);
}

#pragma implementation_key(1017)
inline HRESULT MSForms::MdcListEvents::KeyUp ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1018)
inline HRESULT MSForms::MdcListEvents::MouseDown ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1019)
inline HRESULT MSForms::MdcListEvents::MouseMove ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1020)
inline HRESULT MSForms::MdcListEvents::MouseUp ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

//
// dispinterface MdcComboEvents wrapper method implementations
//

#pragma implementation_key(1021)
inline HRESULT MSForms::MdcComboEvents::BeforeDragOver ( struct IReturnBoolean * Cancel, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState DragState, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Cancel, Data, X, Y, DragState, Effect, Shift);
}

#pragma implementation_key(1022)
inline HRESULT MSForms::MdcComboEvents::BeforeDropOrPaste ( struct IReturnBoolean * Cancel, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Cancel, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(1023)
inline HRESULT MSForms::MdcComboEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1024)
inline HRESULT MSForms::MdcComboEvents::Click ( ) {
    return _com_dispatch_method(this, 0xfffffd9e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1025)
inline HRESULT MSForms::MdcComboEvents::DblClick ( struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cancel);
}

#pragma implementation_key(1026)
inline HRESULT MSForms::MdcComboEvents::DropButtonClick ( ) {
    return _com_dispatch_method(this, 0x7d2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1027)
inline HRESULT MSForms::MdcComboEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(1028)
inline HRESULT MSForms::MdcComboEvents::KeyDown ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1029)
inline HRESULT MSForms::MdcComboEvents::KeyPress ( struct IReturnInteger * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", KeyAscii);
}

#pragma implementation_key(1030)
inline HRESULT MSForms::MdcComboEvents::KeyUp ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1031)
inline HRESULT MSForms::MdcComboEvents::MouseDown ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1032)
inline HRESULT MSForms::MdcComboEvents::MouseMove ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1033)
inline HRESULT MSForms::MdcComboEvents::MouseUp ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

//
// dispinterface MdcCheckBoxEvents wrapper method implementations
//

#pragma implementation_key(1034)
inline HRESULT MSForms::MdcCheckBoxEvents::BeforeDragOver ( struct IReturnBoolean * Cancel, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState DragState, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Cancel, Data, X, Y, DragState, Effect, Shift);
}

#pragma implementation_key(1035)
inline HRESULT MSForms::MdcCheckBoxEvents::BeforeDropOrPaste ( struct IReturnBoolean * Cancel, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Cancel, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(1036)
inline HRESULT MSForms::MdcCheckBoxEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1037)
inline HRESULT MSForms::MdcCheckBoxEvents::Click ( ) {
    return _com_dispatch_method(this, 0xfffffd9e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1038)
inline HRESULT MSForms::MdcCheckBoxEvents::DblClick ( struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cancel);
}

#pragma implementation_key(1039)
inline HRESULT MSForms::MdcCheckBoxEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(1040)
inline HRESULT MSForms::MdcCheckBoxEvents::KeyDown ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1041)
inline HRESULT MSForms::MdcCheckBoxEvents::KeyPress ( struct IReturnInteger * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", KeyAscii);
}

#pragma implementation_key(1042)
inline HRESULT MSForms::MdcCheckBoxEvents::KeyUp ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1043)
inline HRESULT MSForms::MdcCheckBoxEvents::MouseDown ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1044)
inline HRESULT MSForms::MdcCheckBoxEvents::MouseMove ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1045)
inline HRESULT MSForms::MdcCheckBoxEvents::MouseUp ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

//
// dispinterface MdcOptionButtonEvents wrapper method implementations
//

#pragma implementation_key(1046)
inline HRESULT MSForms::MdcOptionButtonEvents::BeforeDragOver ( struct IReturnBoolean * Cancel, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState DragState, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Cancel, Data, X, Y, DragState, Effect, Shift);
}

#pragma implementation_key(1047)
inline HRESULT MSForms::MdcOptionButtonEvents::BeforeDropOrPaste ( struct IReturnBoolean * Cancel, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Cancel, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(1048)
inline HRESULT MSForms::MdcOptionButtonEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1049)
inline HRESULT MSForms::MdcOptionButtonEvents::Click ( ) {
    return _com_dispatch_method(this, 0xfffffd9e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1050)
inline HRESULT MSForms::MdcOptionButtonEvents::DblClick ( struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cancel);
}

#pragma implementation_key(1051)
inline HRESULT MSForms::MdcOptionButtonEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(1052)
inline HRESULT MSForms::MdcOptionButtonEvents::KeyDown ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1053)
inline HRESULT MSForms::MdcOptionButtonEvents::KeyPress ( struct IReturnInteger * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", KeyAscii);
}

#pragma implementation_key(1054)
inline HRESULT MSForms::MdcOptionButtonEvents::KeyUp ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1055)
inline HRESULT MSForms::MdcOptionButtonEvents::MouseDown ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1056)
inline HRESULT MSForms::MdcOptionButtonEvents::MouseMove ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1057)
inline HRESULT MSForms::MdcOptionButtonEvents::MouseUp ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

//
// dispinterface MdcToggleButtonEvents wrapper method implementations
//

#pragma implementation_key(1058)
inline HRESULT MSForms::MdcToggleButtonEvents::BeforeDragOver ( struct IReturnBoolean * Cancel, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState DragState, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Cancel, Data, X, Y, DragState, Effect, Shift);
}

#pragma implementation_key(1059)
inline HRESULT MSForms::MdcToggleButtonEvents::BeforeDropOrPaste ( struct IReturnBoolean * Cancel, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Cancel, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(1060)
inline HRESULT MSForms::MdcToggleButtonEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1061)
inline HRESULT MSForms::MdcToggleButtonEvents::Click ( ) {
    return _com_dispatch_method(this, 0xfffffd9e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1062)
inline HRESULT MSForms::MdcToggleButtonEvents::DblClick ( struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cancel);
}

#pragma implementation_key(1063)
inline HRESULT MSForms::MdcToggleButtonEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(1064)
inline HRESULT MSForms::MdcToggleButtonEvents::KeyDown ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1065)
inline HRESULT MSForms::MdcToggleButtonEvents::KeyPress ( struct IReturnInteger * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", KeyAscii);
}

#pragma implementation_key(1066)
inline HRESULT MSForms::MdcToggleButtonEvents::KeyUp ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1067)
inline HRESULT MSForms::MdcToggleButtonEvents::MouseDown ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1068)
inline HRESULT MSForms::MdcToggleButtonEvents::MouseMove ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1069)
inline HRESULT MSForms::MdcToggleButtonEvents::MouseUp ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

//
// dispinterface ScrollbarEvents wrapper method implementations
//

#pragma implementation_key(1070)
inline HRESULT MSForms::ScrollbarEvents::BeforeDragOver ( struct IReturnBoolean * Cancel, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState DragState, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Cancel, Data, X, Y, DragState, Effect, Shift);
}

#pragma implementation_key(1071)
inline HRESULT MSForms::ScrollbarEvents::BeforeDropOrPaste ( struct IReturnBoolean * Cancel, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Cancel, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(1072)
inline HRESULT MSForms::ScrollbarEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1073)
inline HRESULT MSForms::ScrollbarEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(1074)
inline HRESULT MSForms::ScrollbarEvents::KeyDown ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1075)
inline HRESULT MSForms::ScrollbarEvents::KeyPress ( struct IReturnInteger * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", KeyAscii);
}

#pragma implementation_key(1076)
inline HRESULT MSForms::ScrollbarEvents::KeyUp ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1077)
inline HRESULT MSForms::ScrollbarEvents::Scroll ( ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface TabStripEvents wrapper method implementations
//

#pragma implementation_key(1078)
inline HRESULT MSForms::TabStripEvents::BeforeDragOver ( long Index, struct IReturnBoolean * Cancel, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState DragState, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Index, Cancel, Data, X, Y, DragState, Effect, Shift);
}

#pragma implementation_key(1079)
inline HRESULT MSForms::TabStripEvents::BeforeDropOrPaste ( long Index, struct IReturnBoolean * Cancel, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Index, Cancel, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(1080)
inline HRESULT MSForms::TabStripEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1081)
inline HRESULT MSForms::TabStripEvents::Click ( long Index ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Index);
}

#pragma implementation_key(1082)
inline HRESULT MSForms::TabStripEvents::DblClick ( long Index, struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", Index, Cancel);
}

#pragma implementation_key(1083)
inline HRESULT MSForms::TabStripEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(1084)
inline HRESULT MSForms::TabStripEvents::KeyDown ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1085)
inline HRESULT MSForms::TabStripEvents::KeyPress ( struct IReturnInteger * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", KeyAscii);
}

#pragma implementation_key(1086)
inline HRESULT MSForms::TabStripEvents::KeyUp ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1087)
inline HRESULT MSForms::TabStripEvents::MouseDown ( long Index, short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0002\x0002\x0004\x0004", Index, Button, Shift, X, Y);
}

#pragma implementation_key(1088)
inline HRESULT MSForms::TabStripEvents::MouseMove ( long Index, short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0002\x0002\x0004\x0004", Index, Button, Shift, X, Y);
}

#pragma implementation_key(1089)
inline HRESULT MSForms::TabStripEvents::MouseUp ( long Index, short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0002\x0002\x0004\x0004", Index, Button, Shift, X, Y);
}

//
// dispinterface SpinbuttonEvents wrapper method implementations
//

#pragma implementation_key(1090)
inline HRESULT MSForms::SpinbuttonEvents::BeforeDragOver ( struct IReturnBoolean * Cancel, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState DragState, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Cancel, Data, X, Y, DragState, Effect, Shift);
}

#pragma implementation_key(1091)
inline HRESULT MSForms::SpinbuttonEvents::BeforeDropOrPaste ( struct IReturnBoolean * Cancel, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Cancel, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(1092)
inline HRESULT MSForms::SpinbuttonEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1093)
inline HRESULT MSForms::SpinbuttonEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(1094)
inline HRESULT MSForms::SpinbuttonEvents::KeyDown ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1095)
inline HRESULT MSForms::SpinbuttonEvents::KeyPress ( struct IReturnInteger * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", KeyAscii);
}

#pragma implementation_key(1096)
inline HRESULT MSForms::SpinbuttonEvents::KeyUp ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1097)
inline HRESULT MSForms::SpinbuttonEvents::SpinUp ( ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1098)
inline HRESULT MSForms::SpinbuttonEvents::SpinDown ( ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface ImageEvents wrapper method implementations
//

#pragma implementation_key(1099)
inline HRESULT MSForms::ImageEvents::BeforeDragOver ( struct IReturnBoolean * Cancel, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState DragState, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Cancel, Data, X, Y, DragState, Effect, Shift);
}

#pragma implementation_key(1100)
inline HRESULT MSForms::ImageEvents::BeforeDropOrPaste ( struct IReturnBoolean * Cancel, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Cancel, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(1101)
inline HRESULT MSForms::ImageEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1102)
inline HRESULT MSForms::ImageEvents::DblClick ( struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cancel);
}

#pragma implementation_key(1103)
inline HRESULT MSForms::ImageEvents::Error ( short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(1104)
inline HRESULT MSForms::ImageEvents::MouseDown ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1105)
inline HRESULT MSForms::ImageEvents::MouseMove ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(1106)
inline HRESULT MSForms::ImageEvents::MouseUp ( short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0004\x0004", Button, Shift, X, Y);
}

//
// dispinterface WHTMLControlEvents wrapper method implementations
//

#pragma implementation_key(1107)
inline HRESULT MSForms::WHTMLControlEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface WHTMLControlEvents1 wrapper method implementations
//

#pragma implementation_key(1108)
inline HRESULT MSForms::WHTMLControlEvents1::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface WHTMLControlEvents2 wrapper method implementations
//

#pragma implementation_key(1109)
inline HRESULT MSForms::WHTMLControlEvents2::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface WHTMLControlEvents3 wrapper method implementations
//

#pragma implementation_key(1110)
inline HRESULT MSForms::WHTMLControlEvents3::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface WHTMLControlEvents4 wrapper method implementations
//

#pragma implementation_key(1111)
inline HRESULT MSForms::WHTMLControlEvents4::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface WHTMLControlEvents5 wrapper method implementations
//

#pragma implementation_key(1112)
inline HRESULT MSForms::WHTMLControlEvents5::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface WHTMLControlEvents6 wrapper method implementations
//

#pragma implementation_key(1113)
inline HRESULT MSForms::WHTMLControlEvents6::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface WHTMLControlEvents7 wrapper method implementations
//

#pragma implementation_key(1114)
inline HRESULT MSForms::WHTMLControlEvents7::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface WHTMLControlEvents9 wrapper method implementations
//

#pragma implementation_key(1115)
inline HRESULT MSForms::WHTMLControlEvents9::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface WHTMLControlEvents10 wrapper method implementations
//

#pragma implementation_key(1116)
inline HRESULT MSForms::WHTMLControlEvents10::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface IPage wrapper method implementations
//

#pragma implementation_key(1117)
inline MSForms::ControlsPtr MSForms::IPage::GetControls ( ) {
    struct Controls * _result = 0;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ControlsPtr(_result, false);
}

#pragma implementation_key(1118)
inline MSForms::ControlsPtr MSForms::IPage::GetSelected ( ) {
    struct Controls * _result = 0;
    HRESULT _hr = get_Selected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ControlsPtr(_result, false);
}

#pragma implementation_key(1119)
inline MSForms::IControlPtr MSForms::IPage::GetActiveControl ( ) {
    struct IControl * _result = 0;
    HRESULT _hr = get_ActiveControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IControlPtr(_result, false);
}

#pragma implementation_key(1120)
inline VARIANT_BOOL MSForms::IPage::GetCanPaste ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanPaste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1121)
inline VARIANT_BOOL MSForms::IPage::GetCanRedo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanRedo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1122)
inline VARIANT_BOOL MSForms::IPage::GetCanUndo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanUndo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1123)
inline void MSForms::IPage::PutCycle ( enum fmCycle Cycle ) {
    HRESULT _hr = put_Cycle(Cycle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1124)
inline enum MSForms::fmCycle MSForms::IPage::GetCycle ( ) {
    enum fmCycle _result;
    HRESULT _hr = get_Cycle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1125)
inline void MSForms::IPage::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1126)
inline _bstr_t MSForms::IPage::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1127)
inline void MSForms::IPage::PutControlTipText ( _bstr_t tooltip ) {
    HRESULT _hr = put_ControlTipText(tooltip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1128)
inline _bstr_t MSForms::IPage::GetControlTipText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ControlTipText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1129)
inline void MSForms::IPage::PutEnabled ( VARIANT_BOOL fEnabled ) {
    HRESULT _hr = put_Enabled(fEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1130)
inline VARIANT_BOOL MSForms::IPage::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1131)
inline void MSForms::IPage::PutIndex ( long Index ) {
    HRESULT _hr = put_Index(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1132)
inline long MSForms::IPage::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1133)
inline HRESULT MSForms::IPage::_GetInsideHeight ( long * InsideHeight ) {
    HRESULT _hr = raw__GetInsideHeight(InsideHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1134)
inline float MSForms::IPage::GetInsideHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_InsideHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1135)
inline HRESULT MSForms::IPage::_GetInsideWidth ( long * InsideWidth ) {
    HRESULT _hr = raw__GetInsideWidth(InsideWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1136)
inline float MSForms::IPage::GetInsideWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_InsideWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1137)
inline void MSForms::IPage::PutKeepScrollBarsVisible ( enum fmScrollBars ScrollBars ) {
    HRESULT _hr = put_KeepScrollBarsVisible(ScrollBars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1138)
inline enum MSForms::fmScrollBars MSForms::IPage::GetKeepScrollBarsVisible ( ) {
    enum fmScrollBars _result;
    HRESULT _hr = get_KeepScrollBarsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1139)
inline void MSForms::IPage::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1140)
inline _bstr_t MSForms::IPage::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1141)
inline void MSForms::IPage::PutPictureAlignment ( enum fmPictureAlignment PictureAlignment ) {
    HRESULT _hr = put_PictureAlignment(PictureAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1142)
inline enum MSForms::fmPictureAlignment MSForms::IPage::GetPictureAlignment ( ) {
    enum fmPictureAlignment _result;
    HRESULT _hr = get_PictureAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1143)
inline void MSForms::IPage::PutPicture ( struct Picture * Picture ) {
    HRESULT _hr = put_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1144)
inline void MSForms::IPage::PutRefPicture ( struct Picture * Picture ) {
    HRESULT _hr = putref_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1145)
inline PicturePtr MSForms::IPage::GetPicture ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(1146)
inline void MSForms::IPage::PutPictureSizeMode ( enum fmPictureSizeMode PictureSizeMode ) {
    HRESULT _hr = put_PictureSizeMode(PictureSizeMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1147)
inline enum MSForms::fmPictureSizeMode MSForms::IPage::GetPictureSizeMode ( ) {
    enum fmPictureSizeMode _result;
    HRESULT _hr = get_PictureSizeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1148)
inline void MSForms::IPage::PutPictureTiling ( VARIANT_BOOL PictureTiling ) {
    HRESULT _hr = put_PictureTiling(PictureTiling);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1149)
inline VARIANT_BOOL MSForms::IPage::GetPictureTiling ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PictureTiling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1150)
inline void MSForms::IPage::PutScrollBars ( enum fmScrollBars ScrollBars ) {
    HRESULT _hr = put_ScrollBars(ScrollBars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1151)
inline enum MSForms::fmScrollBars MSForms::IPage::GetScrollBars ( ) {
    enum fmScrollBars _result;
    HRESULT _hr = get_ScrollBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1152)
inline HRESULT MSForms::IPage::_SetScrollHeight ( long ScrollHeight ) {
    HRESULT _hr = raw__SetScrollHeight(ScrollHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1153)
inline HRESULT MSForms::IPage::_GetScrollHeight ( long * ScrollHeight ) {
    HRESULT _hr = raw__GetScrollHeight(ScrollHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1154)
inline void MSForms::IPage::PutScrollHeight ( float ScrollHeight ) {
    HRESULT _hr = put_ScrollHeight(ScrollHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1155)
inline float MSForms::IPage::GetScrollHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_ScrollHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1156)
inline HRESULT MSForms::IPage::_SetScrollLeft ( long ScrollLeft ) {
    HRESULT _hr = raw__SetScrollLeft(ScrollLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1157)
inline HRESULT MSForms::IPage::_GetScrollLeft ( long * ScrollLeft ) {
    HRESULT _hr = raw__GetScrollLeft(ScrollLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1158)
inline void MSForms::IPage::PutScrollLeft ( float ScrollLeft ) {
    HRESULT _hr = put_ScrollLeft(ScrollLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1159)
inline float MSForms::IPage::GetScrollLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_ScrollLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1160)
inline HRESULT MSForms::IPage::_SetScrollTop ( long ScrollTop ) {
    HRESULT _hr = raw__SetScrollTop(ScrollTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1161)
inline HRESULT MSForms::IPage::_GetScrollTop ( long * ScrollTop ) {
    HRESULT _hr = raw__GetScrollTop(ScrollTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1162)
inline void MSForms::IPage::PutScrollTop ( float ScrollTop ) {
    HRESULT _hr = put_ScrollTop(ScrollTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1163)
inline float MSForms::IPage::GetScrollTop ( ) {
    float _result = 0;
    HRESULT _hr = get_ScrollTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1164)
inline HRESULT MSForms::IPage::_SetScrollWidth ( long ScrollWidth ) {
    HRESULT _hr = raw__SetScrollWidth(ScrollWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1165)
inline HRESULT MSForms::IPage::_GetScrollWidth ( long * ScrollWidth ) {
    HRESULT _hr = raw__GetScrollWidth(ScrollWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1166)
inline void MSForms::IPage::PutScrollWidth ( float ScrollWidth ) {
    HRESULT _hr = put_ScrollWidth(ScrollWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1167)
inline float MSForms::IPage::GetScrollWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_ScrollWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1168)
inline void MSForms::IPage::PutTag ( _bstr_t Tag ) {
    HRESULT _hr = put_Tag(Tag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1169)
inline _bstr_t MSForms::IPage::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1170)
inline void MSForms::IPage::PutTransitionEffect ( enum fmTransitionEffect TransitionEffect ) {
    HRESULT _hr = put_TransitionEffect(TransitionEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1171)
inline enum MSForms::fmTransitionEffect MSForms::IPage::GetTransitionEffect ( ) {
    enum fmTransitionEffect _result;
    HRESULT _hr = get_TransitionEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1172)
inline void MSForms::IPage::PutTransitionPeriod ( long TransitionPeriod ) {
    HRESULT _hr = put_TransitionPeriod(TransitionPeriod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1173)
inline long MSForms::IPage::GetTransitionPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_TransitionPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1174)
inline void MSForms::IPage::PutVerticalScrollBarSide ( enum fmVerticalScrollBarSide side ) {
    HRESULT _hr = put_VerticalScrollBarSide(side);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1175)
inline enum MSForms::fmVerticalScrollBarSide MSForms::IPage::GetVerticalScrollBarSide ( ) {
    enum fmVerticalScrollBarSide _result;
    HRESULT _hr = get_VerticalScrollBarSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1176)
inline void MSForms::IPage::PutVisible ( VARIANT_BOOL fVisible ) {
    HRESULT _hr = put_Visible(fVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1177)
inline VARIANT_BOOL MSForms::IPage::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1178)
inline void MSForms::IPage::PutZoom ( short Zoom ) {
    HRESULT _hr = put_Zoom(Zoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1179)
inline short MSForms::IPage::GetZoom ( ) {
    short _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1180)
inline void MSForms::IPage::PutDesignMode ( enum fmMode DesignMode ) {
    HRESULT _hr = put_DesignMode(DesignMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1181)
inline enum MSForms::fmMode MSForms::IPage::GetDesignMode ( ) {
    enum fmMode _result;
    HRESULT _hr = get_DesignMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1182)
inline void MSForms::IPage::PutShowToolbox ( enum fmMode ShowToolbox ) {
    HRESULT _hr = put_ShowToolbox(ShowToolbox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1183)
inline enum MSForms::fmMode MSForms::IPage::GetShowToolbox ( ) {
    enum fmMode _result;
    HRESULT _hr = get_ShowToolbox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1184)
inline void MSForms::IPage::PutShowGridDots ( enum fmMode ShowGridDots ) {
    HRESULT _hr = put_ShowGridDots(ShowGridDots);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1185)
inline enum MSForms::fmMode MSForms::IPage::GetShowGridDots ( ) {
    enum fmMode _result;
    HRESULT _hr = get_ShowGridDots(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1186)
inline void MSForms::IPage::PutSnapToGrid ( enum fmMode SnapToGrid ) {
    HRESULT _hr = put_SnapToGrid(SnapToGrid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1187)
inline enum MSForms::fmMode MSForms::IPage::GetSnapToGrid ( ) {
    enum fmMode _result;
    HRESULT _hr = get_SnapToGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1188)
inline void MSForms::IPage::PutGridX ( float GridX ) {
    HRESULT _hr = put_GridX(GridX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1189)
inline float MSForms::IPage::GetGridX ( ) {
    float _result = 0;
    HRESULT _hr = get_GridX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1190)
inline HRESULT MSForms::IPage::_SetGridX ( long GridX ) {
    HRESULT _hr = raw__SetGridX(GridX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1191)
inline HRESULT MSForms::IPage::_GetGridX ( long * GridX ) {
    HRESULT _hr = raw__GetGridX(GridX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1192)
inline void MSForms::IPage::PutGridY ( float GridY ) {
    HRESULT _hr = put_GridY(GridY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1193)
inline float MSForms::IPage::GetGridY ( ) {
    float _result = 0;
    HRESULT _hr = get_GridY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1194)
inline HRESULT MSForms::IPage::_SetGridY ( long GridY ) {
    HRESULT _hr = raw__SetGridY(GridY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1195)
inline HRESULT MSForms::IPage::_GetGridY ( long * GridY ) {
    HRESULT _hr = raw__GetGridY(GridY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1196)
inline HRESULT MSForms::IPage::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1197)
inline HRESULT MSForms::IPage::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1198)
inline HRESULT MSForms::IPage::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1199)
inline HRESULT MSForms::IPage::RedoAction ( ) {
    HRESULT _hr = raw_RedoAction();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1200)
inline HRESULT MSForms::IPage::Repaint ( ) {
    HRESULT _hr = raw_Repaint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1201)
inline HRESULT MSForms::IPage::Scroll ( const _variant_t & xAction, const _variant_t & yAction ) {
    HRESULT _hr = raw_Scroll(xAction, yAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1202)
inline HRESULT MSForms::IPage::SetDefaultTabOrder ( ) {
    HRESULT _hr = raw_SetDefaultTabOrder();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1203)
inline HRESULT MSForms::IPage::UndoAction ( ) {
    HRESULT _hr = raw_UndoAction();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1204)
inline void MSForms::IPage::PutAccelerator ( _bstr_t Accelerator ) {
    HRESULT _hr = put_Accelerator(Accelerator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1205)
inline _bstr_t MSForms::IPage::GetAccelerator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1206)
inline IDispatchPtr MSForms::IPage::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// dispinterface MultiPageEvents wrapper method implementations
//

#pragma implementation_key(1207)
inline HRESULT MSForms::MultiPageEvents::AddControl ( long Index, struct IControl * Control ) {
    return _com_dispatch_method(this, 0x300, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", Index, Control);
}

#pragma implementation_key(1208)
inline HRESULT MSForms::MultiPageEvents::BeforeDragOver ( long Index, struct IReturnBoolean * Cancel, struct IControl * Control, struct IDataAutoWrapper * Data, float X, float Y, enum fmDragState State, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0009\x0009\x0004\x0004\x0003\x0009\x0002", Index, Cancel, Control, Data, X, Y, State, Effect, Shift);
}

#pragma implementation_key(1209)
inline HRESULT MSForms::MultiPageEvents::BeforeDropOrPaste ( long Index, struct IReturnBoolean * Cancel, struct IControl * Control, enum fmAction Action, struct IDataAutoWrapper * Data, float X, float Y, struct IReturnEffect * Effect, short Shift ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0009\x0003\x0009\x0004\x0004\x0009\x0002", Index, Cancel, Control, Action, Data, X, Y, Effect, Shift);
}

#pragma implementation_key(1210)
inline HRESULT MSForms::MultiPageEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1211)
inline HRESULT MSForms::MultiPageEvents::Click ( long Index ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Index);
}

#pragma implementation_key(1212)
inline HRESULT MSForms::MultiPageEvents::DblClick ( long Index, struct IReturnBoolean * Cancel ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", Index, Cancel);
}

#pragma implementation_key(1213)
inline HRESULT MSForms::MultiPageEvents::Error ( long Index, short Number, struct IReturnString * Description, long SCode, _bstr_t Source, _bstr_t HelpFile, long HelpContext, struct IReturnBoolean * CancelDisplay ) {
    return _com_dispatch_method(this, DISPID_ERROREVENT, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0002\x0009\x0003\x0008\x0008\x0003\x0009", Index, Number, Description, SCode, (BSTR)Source, (BSTR)HelpFile, HelpContext, CancelDisplay);
}

#pragma implementation_key(1214)
inline HRESULT MSForms::MultiPageEvents::KeyDown ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1215)
inline HRESULT MSForms::MultiPageEvents::KeyPress ( struct IReturnInteger * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", KeyAscii);
}

#pragma implementation_key(1216)
inline HRESULT MSForms::MultiPageEvents::KeyUp ( struct IReturnInteger * KeyCode, short Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0002", KeyCode, Shift);
}

#pragma implementation_key(1217)
inline HRESULT MSForms::MultiPageEvents::Layout ( long Index ) {
    return _com_dispatch_method(this, 0x302, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Index);
}

#pragma implementation_key(1218)
inline HRESULT MSForms::MultiPageEvents::MouseDown ( long Index, short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0002\x0002\x0004\x0004", Index, Button, Shift, X, Y);
}

#pragma implementation_key(1219)
inline HRESULT MSForms::MultiPageEvents::MouseMove ( long Index, short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0002\x0002\x0004\x0004", Index, Button, Shift, X, Y);
}

#pragma implementation_key(1220)
inline HRESULT MSForms::MultiPageEvents::MouseUp ( long Index, short Button, short Shift, float X, float Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0002\x0002\x0004\x0004", Index, Button, Shift, X, Y);
}

#pragma implementation_key(1221)
inline HRESULT MSForms::MultiPageEvents::RemoveControl ( long Index, struct IControl * Control ) {
    return _com_dispatch_method(this, 0x303, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", Index, Control);
}

#pragma implementation_key(1222)
inline HRESULT MSForms::MultiPageEvents::Scroll ( long Index, enum fmScrollAction ActionX, enum fmScrollAction ActionY, float RequestDx, float RequestDy, struct IReturnSingle * ActualDx, struct IReturnSingle * ActualDy ) {
    return _com_dispatch_method(this, 0x304, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0004\x0004\x0009\x0009", Index, ActionX, ActionY, RequestDx, RequestDy, ActualDx, ActualDy);
}

#pragma implementation_key(1223)
inline HRESULT MSForms::MultiPageEvents::Zoom ( long Index, short * Percent ) {
    return _com_dispatch_method(this, 0x305, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x4002", Index, Percent);
}

//
// interface Pages wrapper method implementations
//

#pragma implementation_key(1224)
inline long MSForms::Pages::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1225)
inline IUnknownPtr MSForms::Pages::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1226)
inline IDispatchPtr MSForms::Pages::Item ( const _variant_t & varg ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(varg, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1227)
inline IUnknownPtr MSForms::Pages::Enum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1228)
inline MSForms::IPagePtr MSForms::Pages::Add ( const _variant_t & bstrName, const _variant_t & bstrCaption, const _variant_t & lIndex ) {
    struct IPage * _result = 0;
    HRESULT _hr = raw_Add(bstrName, bstrCaption, lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPagePtr(_result, false);
}

#pragma implementation_key(1229)
inline MSForms::IPagePtr MSForms::Pages::_AddCtrl ( long * clsid, _bstr_t bstrName, _bstr_t bstrCaption ) {
    struct IPage * _result = 0;
    HRESULT _hr = raw__AddCtrl(clsid, bstrName, bstrCaption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPagePtr(_result, false);
}

#pragma implementation_key(1230)
inline MSForms::IPagePtr MSForms::Pages::_InsertCtrl ( long * clsid, _bstr_t bstrName, _bstr_t bstrCaption, long lIndex ) {
    struct IPage * _result = 0;
    HRESULT _hr = raw__InsertCtrl(clsid, bstrName, bstrCaption, lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPagePtr(_result, false);
}

#pragma implementation_key(1231)
inline MSForms::IControlPtr MSForms::Pages::_GetItemByIndex ( long lIndex ) {
    struct IControl * _result = 0;
    HRESULT _hr = raw__GetItemByIndex(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IControlPtr(_result, false);
}

#pragma implementation_key(1232)
inline MSForms::IControlPtr MSForms::Pages::_GetItemByName ( _bstr_t pstrName ) {
    struct IControl * _result = 0;
    HRESULT _hr = raw__GetItemByName(pstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IControlPtr(_result, false);
}

#pragma implementation_key(1233)
inline HRESULT MSForms::Pages::Remove ( const _variant_t & varg ) {
    HRESULT _hr = raw_Remove(varg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1234)
inline HRESULT MSForms::Pages::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMultiPage wrapper method implementations
//

#pragma implementation_key(1235)
inline void MSForms::IMultiPage::PutBackColor ( OLE_COLOR color ) {
    HRESULT _hr = put_BackColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1236)
inline MSForms::OLE_COLOR MSForms::IMultiPage::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1237)
inline void MSForms::IMultiPage::PutForeColor ( OLE_COLOR color ) {
    HRESULT _hr = put_ForeColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1238)
inline MSForms::OLE_COLOR MSForms::IMultiPage::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1239)
inline void MSForms::IMultiPage::Put_Font_Reserved ( struct Font * _arg1 ) {
    HRESULT _hr = put__Font_Reserved(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1240)
inline void MSForms::IMultiPage::PutRefFont ( struct Font * Font ) {
    HRESULT _hr = putref_Font(Font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1241)
inline MSForms::FontPtr MSForms::IMultiPage::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(1242)
inline void MSForms::IMultiPage::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1243)
inline _bstr_t MSForms::IMultiPage::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1244)
inline void MSForms::IMultiPage::PutFontBold ( VARIANT_BOOL fBold ) {
    HRESULT _hr = put_FontBold(fBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1245)
inline VARIANT_BOOL MSForms::IMultiPage::GetFontBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1246)
inline void MSForms::IMultiPage::PutFontItalic ( VARIANT_BOOL fItalic ) {
    HRESULT _hr = put_FontItalic(fItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1247)
inline VARIANT_BOOL MSForms::IMultiPage::GetFontItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1248)
inline void MSForms::IMultiPage::PutFontUnderline ( VARIANT_BOOL fUnder ) {
    HRESULT _hr = put_FontUnderline(fUnder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1249)
inline VARIANT_BOOL MSForms::IMultiPage::GetFontUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontUnderline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1250)
inline void MSForms::IMultiPage::PutFontStrikethru ( VARIANT_BOOL fStrike ) {
    HRESULT _hr = put_FontStrikethru(fStrike);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1251)
inline VARIANT_BOOL MSForms::IMultiPage::GetFontStrikethru ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontStrikethru(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1252)
inline void MSForms::IMultiPage::PutFontSize ( const CURRENCY & Size ) {
    HRESULT _hr = put_FontSize(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1253)
inline CURRENCY MSForms::IMultiPage::GetFontSize ( ) {
    CURRENCY _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1254)
inline void MSForms::IMultiPage::PutMultiRow ( VARIANT_BOOL fMultiRow ) {
    HRESULT _hr = put_MultiRow(fMultiRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1255)
inline VARIANT_BOOL MSForms::IMultiPage::GetMultiRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1256)
inline void MSForms::IMultiPage::PutStyle ( enum fmTabStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1257)
inline enum MSForms::fmTabStyle MSForms::IMultiPage::GetStyle ( ) {
    enum fmTabStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1258)
inline void MSForms::IMultiPage::PutTabOrientation ( enum fmTabOrientation Layout ) {
    HRESULT _hr = put_TabOrientation(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1259)
inline enum MSForms::fmTabOrientation MSForms::IMultiPage::GetTabOrientation ( ) {
    enum fmTabOrientation _result;
    HRESULT _hr = get_TabOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1260)
inline HRESULT MSForms::IMultiPage::_SetTabFixedWidth ( long Width ) {
    HRESULT _hr = raw__SetTabFixedWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1261)
inline HRESULT MSForms::IMultiPage::_GetTabFixedWidth ( long * Width ) {
    HRESULT _hr = raw__GetTabFixedWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1262)
inline HRESULT MSForms::IMultiPage::_SetTabFixedHeight ( long Height ) {
    HRESULT _hr = raw__SetTabFixedHeight(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1263)
inline HRESULT MSForms::IMultiPage::_GetTabFixedHeight ( long * Height ) {
    HRESULT _hr = raw__GetTabFixedHeight(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1264)
inline void MSForms::IMultiPage::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1265)
inline VARIANT_BOOL MSForms::IMultiPage::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1266)
inline MSForms::IPagePtr MSForms::IMultiPage::GetSelectedItem ( ) {
    struct IPage * _result = 0;
    HRESULT _hr = get_SelectedItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPagePtr(_result, false);
}

#pragma implementation_key(1267)
inline MSForms::PagesPtr MSForms::IMultiPage::GetPages ( ) {
    struct Pages * _result = 0;
    HRESULT _hr = get_Pages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PagesPtr(_result, false);
}

#pragma implementation_key(1268)
inline void MSForms::IMultiPage::PutValue ( long Index ) {
    HRESULT _hr = put_Value(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1269)
inline long MSForms::IMultiPage::GetValue ( ) {
    long _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1270)
inline void MSForms::IMultiPage::PutTabFixedWidth ( float Width ) {
    HRESULT _hr = put_TabFixedWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1271)
inline float MSForms::IMultiPage::GetTabFixedWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_TabFixedWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1272)
inline void MSForms::IMultiPage::PutTabFixedHeight ( float Height ) {
    HRESULT _hr = put_TabFixedHeight(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1273)
inline float MSForms::IMultiPage::GetTabFixedHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_TabFixedHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1274)
inline void MSForms::IMultiPage::PutFontWeight ( short FontWeight ) {
    HRESULT _hr = put_FontWeight(FontWeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1275)
inline short MSForms::IMultiPage::GetFontWeight ( ) {
    short _result = 0;
    HRESULT _hr = get_FontWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
